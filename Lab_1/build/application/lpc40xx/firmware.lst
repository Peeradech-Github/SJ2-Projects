
build/application/lpc40xx/firmware.elf:     file format elf32-littlearm
build/application/lpc40xx/firmware.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00001c8d

Program Header:
0x70000001 off    0x000177d4 vaddr 0x000077d4 paddr 0x000077d4 align 2**2
         filesz 0x000000b8 memsz 0x000000b8 flags r--
    LOAD off    0x00010000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x0000788c memsz 0x0000788c flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x0000788c align 2**16
         filesz 0x000000d0 memsz 0x000000d0 flags rw-
    LOAD off    0x000200d0 vaddr 0x100000d0 paddr 0x100000d0 align 2**16
         filesz 0x00000000 memsz 0x0000033c flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name             Size      VMA       LMA       File off  Algn  Flags
  0 .text            000077bc  00000000  00000000  00010000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data            000000d0  10000000  0000788c  00020000  2**2  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2       00000000  20000000  20000000  000200d0  2**2  CONTENTS
  3 .bss             0000033c  100000d0  100000d0  000200d0  2**3  ALLOC
  4 .ARM.extab       00000018  000077bc  000077bc  000177bc  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.exidx       000000b8  000077d4  000077d4  000177d4  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .uninit_RESERVED 00000000  10000000  10000000  000200d0  2**2  CONTENTS
  7 .noinit_RAM2     00000000  20000000  20000000  000200d0  2**2  CONTENTS
  8 .noinit          00000000  1000040c  1000040c  000200d0  2**2  CONTENTS
  9 .ARM.attributes  00000030  00000000  00000000  000200d0  2**0  CONTENTS, READONLY
 10 .comment         0000007e  00000000  00000000  00020100  2**0  CONTENTS, READONLY
 11 .debug_info      00073f24  00000000  00000000  0002017e  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev    0000455a  00000000  00000000  000940a2  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges   00000bf0  00000000  00000000  000985fc  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges    00000b60  00000000  00000000  000991ec  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_line      00005ff1  00000000  00000000  00099d4c  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_str       0002a3f5  00000000  00000000  0009fd3d  2**0  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame     00003e04  00000000  00000000  000ca134  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
20000000 l    d  .data_RAM2	00000000 .data_RAM2
100000d0 l    d  .bss	00000000 .bss
000077bc l    d  .ARM.extab	00000000 .ARM.extab
000077d4 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
20000000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
1000040c l    d  .noinit	00000000 .noinit
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 startup.cpp
00007484 l     O .text	00000004 config::kSystemClockRateMhz
000031c6 l     F .text	0000001c float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
000031e2 l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00007488 l     O .text	00000004 config::kRtosFrequency
00003228 l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00003244 l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
000036ac l     F .text	0000001c float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
000036c8 l     F .text	00000030 float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
000075f4 l     O .text	00000084 sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::__PRETTY_FUNCTION__
00007678 l     O .text	0000007b sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__
000076f4 l     O .text	00000048 sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::__PRETTY_FUNCTION__
00004060 l     F .text	000001ec sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)
10000064 l     O .data	00000004 (anonymous namespace)::system_controller
100003dc l     O .bss	00000001 (anonymous namespace)::arm_dwt_counter
100003e0 l     O .bss	0000000c (anonymous namespace)::uart0
100003ec l     O .bss	0000000c (anonymous namespace)::system_timer
000045a8 l     F .text	00000024 (anonymous namespace)::Lpc40xxStdOut(char const*, unsigned int)
000045cc l     F .text	00000034 (anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)
000002fc l     O .text	00000004 kCrpWord
00000000 l     O .text	000000e4 kInterruptVectorTable
00007564 l     O .text	0000000c sjsu::InitializePlatform()::file
0000773c l     O .text	00000020 sjsu::InitializePlatform()::__PRETTY_FUNCTION__
00004822 l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00004896 l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
000048bc l     F .text	00000128 __static_initialization_and_destruction_0(int, int)
000049e4 l     F .text	00000010 _GLOBAL__sub_I_ThreadRuntimeCounter
00000000 l    df *ABS*	00000000 /home/peeradech/SJSU-Dev2/tools/gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v7e-m/fpv4-sp/hard/crti.o
00000000 l    df *ABS*	00000000 /home/peeradech/SJSU-Dev2/tools/gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v7e-m/fpv4-sp/hard/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000328 l     F .text	00000000 __do_global_dtors_aux
100000d0 l       .bss	00000001 completed.9929
0000034c l     F .text	00000000 frame_dummy
100000d4 l       .bss	00000018 object.9934
0000030c l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
00000398 l     F .text	00000030 NVIC_EnableIRQ
000003c8 l     F .text	00000030 NVIC_DisableIRQ
000003f8 l     F .text	00000054 NVIC_SetPriority
00006664 l     O .text	0000004e sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::__PRETTY_FUNCTION__
000066b4 l     O .text	00000031 sjsu::lpc40xx::Gpio::ValidPortCheck() const::__PRETTY_FUNCTION__
000066e8 l     O .text	00000043 sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const::__PRETTY_FUNCTION__
0000672c l     O .text	00000022 Bus::Write(unsigned char, unsigned char)::__PRETTY_FUNCTION__
000065f4 l     O .text	00000009 main::file
00006600 l     O .text	00000009 main::file
00006658 l     O .text	0000000b main::__PRETTY_FUNCTION__
000017e4 l     F .text	00000140 __static_initialization_and_destruction_0(int, int)
00001924 l     F .text	00000010 _GLOBAL__sub_I_main
00000000 l    df *ABS*	00000000 exceptions.cpp
00001c7c l       .text	00000000 handler2_address_const
00001ce0 l     F .text	00000044 __static_initialization_and_destruction_0(int, int)
00001d24 l     F .text	00000010 _GLOBAL__sub_I_GetRegistersFromStack
00000000 l    df *ABS*	00000000 task_scheduler.cpp
00001934 l     F .text	00000026 _Unwind_GetGR
00000000 l    df *ABS*	00000000 tasks.c
10000354 l     O .bss	00000064 pxReadyTasksLists
100003b8 l     O .bss	00000004 uxTopReadyPriority
100003bc l     O .bss	00000004 xYieldPending
100003c0 l     O .bss	00000004 uxSchedulerSuspended
100003c4 l     O .bss	00000004 ulTaskSwitchedInTime
100003c8 l     O .bss	00000004 ulTotalRunTime
00000000 l    df *ABS*	00000000 newlib.cpp
00000000 l    df *ABS*	00000000 printf.cpp
00001e7c l     F .text	0000001c _out_null(char, void*, unsigned int, unsigned int)
00001e98 l     F .text	00000026 _out_char(char, void*, unsigned int, unsigned int)
00001ebe l     F .text	0000002e _strlen(char const*)
00001eec l     F .text	00000028 _is_digit(char)
00001f14 l     F .text	00000048 _atoi(char const**)
00001f5c l     F .text	00000242 _ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)
0000219e l     F .text	000000d0 _ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)
0000226e l     F .text	000000e0 _ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)
00006ee8 l     O .text	00000028 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10
00002350 l     F .text	00000442 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)
00002794 l     F .text	000008d4 _vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)
00000000 l    df *ABS*	00000000 port.c
00004a20 l       .text	00000000 pxCurrentTCBConst2
00004a90 l       .text	00000000 pxCurrentTCBConst
00000000 l    df *ABS*	00000000 stdio.cpp
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _arm_addsubsf3.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 unwind-arm.c
00005110 l     F .text	00000012 selfrel_offset31
00005124 l     F .text	00000060 search_EIT_table
00005184 l     F .text	00000028 __gnu_unwind_get_pr_addr
000051ac l     F .text	000000a4 get_eit_entry
00005250 l     F .text	00000058 restore_non_core_regs
000052a8 l     F .text	0000000a _Unwind_decode_typeinfo_ptr.isra.0
000052b4 l     F .text	00000004 __gnu_unwind_24bit.isra.1
000052b8 l     F .text	00000002 _Unwind_DebugHook
000052bc l     F .text	0000003e unwind_phase2
000052fc l     F .text	000000c6 unwind_phase2_forced
000054cc l     F .text	00000018 _Unwind_GetGR
00005510 l     F .text	0000001a _Unwind_SetGR
0000559c l     F .text	000002d4 __gnu_unwind_pr_common
00000000 l    df *ABS*	00000000 libunwind.o
00000000 l    df *ABS*	00000000 pr-support.c
00005ca8 l     F .text	00000038 next_unwind_byte
00005ce0 l     F .text	0000001a _Unwind_GetGR.constprop.0
00005cfc l     F .text	00000002 unwind_UCB_from_context
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 impure.c
10000070 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 reent.c
0000199c  w    F .text	00000048 sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)
00005c60 g     F .text	00000022 .hidden ___Unwind_ForcedUnwind
000053c8 g     F .text	0000005e .hidden __gnu_Unwind_RaiseException
000033a0  w    F .text	00000048 sjsu::cortex::SystemTimer::SystemTimerHandler()
00001b68  w    F .text	0000006c sjsu::InitializeBssSection()
00001e04 g     F .text	00000010 _getpid
00004b08 g     F .text	00000024 _putchar
0000749c  w    O .text	00000002 sjsu::lpc40xx::SystemController::EmcClock::kDivider
000012a0  w    F .text	00000034 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
000033e8  w    F .text	00000024 sjsu::cortex::SystemTimer::GetCount()
000074f8  w    O .text	00000016 sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::file
00000fdc  w    F .text	000001c0 Bus::Write(unsigned char, unsigned char)
0000312c  w    F .text	0000002c units::literals::operator"" _Hz(unsigned long long)
0000120e  w    F .text	0000001a std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const
1000000c  w    O .data	00000004 sjsu::newlib::in
10000400  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart3
00000dac  w    F .text	000000f6 Bus::Initialize()
00000a00  w    F .text	00000044 sjsu::lpc40xx::Gpio::Toggle() const
000032fc  w    F .text	00000050 sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const
00006100 g     F .text	00000024 _kill_r
0000010c g       .text	00000000 bss_section_table_end
00003068 g     F .text	00000038 printf
00000000 g       *ABS*	00000000 __vectors_start__
000005f4  w    F .text	0000001c sjsu::Gpio::SetAsInput() const
000047aa  w    F .text	00000026 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
000005b8  w    F .text	0000001e sjsu::Gpio::SetHigh() const
000046cc  w    F .text	0000003c units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)
000008e4  w    F .text	00000028 sjsu::cortex::InterruptController::Deregister(int) const
00001a28  w    F .text	000000a4 sjsu::debug::PrintBacktrace(bool, void*)
20000000 g       *ABS*	00000000 __base_RAM2
00005b1c g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP
00005c3c g     F .text	00000022 .hidden _Unwind_Resume_or_Rethrow
0000788c g       .ARM.exidx	00000000 __exidx_end
00006138  w    O .text	00000002 sjsu::lpc40xx::Pin::kFunction
00004600 g     F .text	00000014 ThreadRuntimeCounter
00005870 g     F .text	00000004 .hidden __aeabi_unwind_cpp_pr0
10000018  w    O .data	00000004 sjsu::cortex::InterruptController::scb
00003868  w    F .text	00000034 sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const
10000350 g     O .bss	00000004 pxCurrentTCB
00005fec g     F .text	0000000a .hidden _Unwind_GetRegionStart
00005c3c g     F .text	00000022 .hidden ___Unwind_Resume_or_Rethrow
00007494  w    O .text	00000004 sjsu::lpc40xx::SystemController::kDefaultIRCFrequency
00000c3c  w    F .text	0000005c sjsu::lpc40xx::Gpio::SetEdgeRising() const
10000408 g     O .bss	00000004 errno
0000788c g       .ARM.exidx	00000000 _etext
00004738  w    F .text	00000036 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
00000508  w    F .text	00000034 sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const
00003960  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const
00005c84 g     F .text	00000022 .hidden _Unwind_Backtrace
0000748c  w    O .text	00000004 sjsu::cortex::SystemTimer::kCortexInterruptController
100000ec  w    O .bss	00000004 sjsu::lpc40xx::Pin::pin_map
00004c04 g     F .text	00000160 .hidden __aeabi_fadd
100003d0  w    O .bss	00000008 sjsu::cortex::SystemTimer::counter
00004c00 g     F .text	00000164 .hidden __subsf3
00003a2c  w    F .text	00000018 unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const
00007530  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart3Tx
00080000 g       *ABS*	00000000 __top_MFlash512
00005afc g     F .text	00000018 .hidden __restore_core_regs
00005b3c g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP_D_16_to_31
00007490  w    O .text	00000004 sjsu::lpc40xx::SystemController::PllInput::kIrc
00007570  w    O .text	0000001c vtable for sjsu::lpc40xx::Uart
000032a4  w    F .text	00000020 sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())
0000613c  w    O .text	00000002 sjsu::lpc40xx::Pin::kResistor
00003dfc  w    F .text	00000048 sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const
000053c4 g     F .text	00000004 .hidden _Unwind_GetCFA
00006078 g     F .text	00000016 memcpy
00003b24  w    F .text	00000194 sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
00004ab0 g     F .text	00000018 sjsu::newlib::DoNothingStdIn(char*, unsigned int)
000054e4 g     F .text	0000002a .hidden _Unwind_VRS_Set
00004e14 g     F .text	00000000 .hidden __aeabi_uldivmod
1000040c g       .noinit	00000000 _noinit
00003a44  w    F .text	00000024 units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
00001e30 g     F .text	0000004c puts
00000690  w    F .text	00000016 sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)::{lambda()#1}::operator()() const
000034de  w    F .text	00000058 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
00003e58  w    F .text	000000e0 sjsu::lpc40xx::uart::FindClosestFractional(float)
000047d0  w    F .text	00000024 unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)
00003794  w    F .text	00000058 sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const
1000001c  w    O .data	00000004 sjsu::cortex::SystemTimer::sys_tick
0000424c  w    F .text	00000020 sjsu::Uart::Uart()
0000609e g     F .text	00000050 _raise_r
00004d6c g     F .text	0000001c .hidden __aeabi_i2f
10010000 g       *ABS*	00000000 __top_RAM
00004a30 g     F .text	00000066 xPortPendSVHandler
10000000 g       *ABS*	00000000 __base_RamLoc64
000005d6  w    F .text	0000001e sjsu::Gpio::SetLow() const
00000ebc  w    F .text	0000001c std::chrono::duration<long long, std::ratio<1ll, 1ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1ll> >, (char)49>()
00000ef4  w    F .text	0000001a std::chrono::duration<long long, std::ratio<1ll, 1ll> >::count() const
00003184  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
000004cc  w    F .text	0000003c sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const
00006124 g     F .text	00000004 _getpid_r
00000000 g       *ABS*	00000000 __base_MFlash512
0000552c g     F .text	00000070 .hidden __gnu_Unwind_Backtrace
00001584  w    F .text	00000026 unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)
0000336c  w    F .text	00000034 sjsu::cortex::SystemTimer::SystemTimer(sjsu::SystemController const&, sjsu::InterruptController const&)
10010000 g       *ABS*	00000000 StackTop
00003ac0  w    F .text	0000003c units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator+<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)
00004e44 g     F .text	000002cc .hidden __udivmoddi4
000000fc g       .text	00000000 bss_section_table
00006140  w    O .text	00000002 sjsu::lpc40xx::Pin::kAnalogDigitalMode
00003594  w    F .text	00000018 unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
000006a6  w    F .text	00000010 sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)::{lambda()#1}::_FUN()
00005b2c g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP_D
00000300 g       .text	00000000 __CRP_WORD_END__
20008000 g       *ABS*	00000000 __top_RAM2
0000426c  w    F .text	00000034 sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)
0000587c g     F .text	0000027e .hidden _Unwind_VRS_Pop
00005878  w    F .text	00000004 .hidden __aeabi_unwind_cpp_pr2
0000342c  w    F .text	00000094 sjsu::cortex::SystemTimer::StartTimer() const
100003f8  w    O .bss	00000004 guard variable for sjsu::lpc40xx::SystemController::system_controller
00005c84 g     F .text	00000022 .hidden ___Unwind_Backtrace
0000064e  w    F .text	00000022 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)
00004490  w    F .text	000000d0 sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const
000019e4  w    F .text	00000044 sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)
00007548  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart4Rx
20000000 g       *ABS*	00000000 __user_heap_base
100003cc  w    O .bss	00000004 sjsu::cortex::SystemTimer::system_timer_isr
000077d4 g       .ARM.extab	00000000 __exidx_start
00000610  w    F .text	0000001c sjsu::Gpio::SetAsOutput() const
00006030 g     F .text	00000048 __libc_init_array
00003fd0  w    F .text	0000002c sjsu::lpc40xx::uart::RoundFloat(float)
00005bf4 g     F .text	00000022 .hidden ___Unwind_RaiseException
000035c4  w    F .text	00000024 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
0000334c  w    F .text	00000020 sjsu::SystemTimer::SystemTimer()
00006020 g     F .text	0000000e abort
00005c18 g     F .text	00000022 .hidden ___Unwind_Resume
000035ac  w    F .text	00000018 unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
10000050  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart4
000065b8  w    O .text	00000009 sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const::file
1000033c  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Pin::pin_map
00001228  w    F .text	00000078 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
00000300 g     F .text	00000000 _init
0000010c g       .text	00000000 section_table_end
00003ffc  w    F .text	00000064 sjsu::lpc40xx::uart::IsDecmial(float)
00004a98 g     F .text	00000018 sjsu::newlib::DoNothingStdOut(char const*, unsigned int)
00000c98  w    F .text	0000005c sjsu::lpc40xx::Gpio::SetEdgeFalling() const
00006144  w    O .text	00000002 sjsu::lpc40xx::Pin::kOpenDrain
0000443a  w    F .text	00000056 sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const
00004b4c g     F .text	0000000a std::terminate()
00004b58 g     F .text	0000009e .hidden __aeabi_d2f
00005b44 g     F .text	00000000 .hidden __gnu_Unwind_Restore_WMMXD
00000fc2  w    F .text	0000001a std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const
00004c00 g     F .text	00000164 .hidden __aeabi_fsub
00004360  w    F .text	0000008c sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const
0000168e  w    F .text	00000024 unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)
10000404  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart4
00001c64 g     F .text	00000026 ArmHardFaultHandler
000000e4 g       .text	00000000 section_table_start
00000c12  w    F .text	00000028 sjsu::lpc40xx::Gpio::DetachInterrupt() const
100001f8  w    O .bss	00000018 sjsu::lpc40xx::Gpio::gpio_port
00003536  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
1000040c g       .bss	00000000 _ebss
000065e4  w    O .text	00000008 Bus::Write(unsigned char, unsigned char)::file
000043ec  w    F .text	0000004e sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const
000075a8  w    O .text	00000024 vtable for sjsu::lpc40xx::SystemController
00003810  w    F .text	0000001c sjsu::lpc40xx::SystemController::GetSystemFrequency() const
00003206  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
00004d98 g     F .text	0000007c .hidden __floatdisf
00000ea2  w    F .text	00000018 std::chrono::duration<long long, std::ratio<1ll, 1ll> > std::literals::chrono_literals::operator"" s<(char)49>()
00007518  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart0Rx
00001be8 g     F .text	0000007c GetRegistersFromStack
0000426c  w    F .text	00000034 sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)
00005b14 g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP
00004614  w    F .text	000000b8 sjsu::InitializePlatform()
000015aa  w    F .text	00000036 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator++(int)
0000775c g     O .text	00000020 __sf_fake_stderr
00000854  w    F .text	00000018 sjsu::cortex::InterruptController::IrqToIndex(int)
00004b3c g     F .text	00000010 std::get_terminate()
0000424c  w    F .text	00000020 sjsu::Uart::Uart()
00005c18 g     F .text	00000022 .hidden _Unwind_Resume
0000077e  w    F .text	0000000e sjsu::cortex::InterruptController::UnregisteredArmExceptions()
000065d4  w    O .text	00000008 Bus::Write(unsigned char, unsigned char)::file
00005494 g     F .text	0000000c .hidden _Unwind_DeleteException
00006630  w    O .text	00000010 vtable for sjsu::cortex::InterruptController
10000210  w    O .bss	00000100 sjsu::lpc40xx::Gpio::interrupthandlers
00005490 g     F .text	00000002 .hidden _Unwind_Complete
00003918  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const
10000338  w    O .bss	00000004 sjsu::lpc40xx::Gpio::port_status
00000000 g       *ABS*	00000000 __base_Flash
00000f0e  w    F .text	00000080 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::ratio<1000000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1ll> >(std::chrono::duration<long long, std::ratio<1ll, 1ll> > const&)
000075cc  w    O .text	00000014 vtable for sjsu::cortex::SystemTimer
000075e0  w    O .text	00000014 vtable for sjsu::SystemTimer
000074ac  w    O .text	00000002 sjsu::lpc40xx::SystemController::SpiFiClock::kSelect
10010000 g       *ABS*	00000000 __top_RamLoc64
100003fc  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart2
00001794  w    F .text	00000050 bool std::chrono::operator< <long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
100000d0 g       .bss	00000000 _bss
000074e0  w    O .text	00000016 sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
00004b2c g     F .text	00000006 __cxa_pure_virtual
00003afc  w    F .text	00000026 units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const
00000af0  w    F .text	0000003c sjsu::lpc40xx::Gpio::SetInterruptRoutine(void (*)()) const
00004d6c g     F .text	0000001c .hidden __floatsisf
00007520  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart2Tx
100003d8  w    O .bss	00000004 sjsu::lpc40xx::SystemController::system_controller
00005d00 g     F .text	000002c4 .hidden __gnu_unwind_execute
10000024  w    O .data	00000004 sjsu::lpc40xx::DefaultSystemController()::default_system_controller
10000340  w    O .bss	00000004 guard variable for sjsu::cortex::InterruptController::table
000036f8  w    F .text	0000009c sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
00005b24 g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP_D
00000380  w    F .text	00000018 sjsu::Pin::GetPin() const
00080000 g       *ABS*	00000000 __top_Flash
000016e0  w    F .text	0000005a unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)
000011d0  w    F .text	00000022 std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)
1000040c g       .noinit	00000000 _end_noinit
100000f8  w    O .bss	00000100 sjsu::cortex::InterruptController::table
000037ec  w    F .text	00000024 sjsu::lpc40xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const
00000ed8  w    F .text	0000001c std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, long long, std::ratio<1ll, 1ll> >(std::chrono::duration<long long, std::ratio<1ll, 1ll> > const&)
00001d34 g     F .text	000000c4 vTaskSwitchContext
00003e44  w    F .text	00000014 sjsu::lpc40xx::DefaultSystemController()
00007498  w    O .text	00000002 sjsu::lpc40xx::SystemController::Oscillator::kSelect
0000119c  w    F .text	00000018 std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()
00006150  w    O .text	0000000e sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::file
0000543c g     F .text	00000044 .hidden __gnu_Unwind_Resume
10000310  w    O .bss	00000028 sjsu::lpc40xx::Gpio::interrupt
000011b4  w    F .text	0000001c std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()
000030a0  w    F .text	00000044 sjsu::cortex::DwtCounter::Initialize()
10000348  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Gpio::interrupt
00007528  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart2Rx
20000000 g       *ABS*	00000000 __base_RamPeriph32
00005b34 g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP_D_16_to_31
000035e8  w    F .text	000000c4 sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
10000344  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Gpio::gpio_port
00004d88 g     F .text	0000008c .hidden __floatundisf
00005bf4 g     F .text	00000022 .hidden _Unwind_RaiseException
0000601c  w    F .text	00000002 .hidden __aeabi_ldiv0
000065ec  w    O .text	00000008 Bus::Write(unsigned char, unsigned char)::file
10000028  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart2
00001bd4  w    F .text	00000014 sjsu::SystemInitialize()
00004d64 g     F .text	00000024 .hidden __aeabi_ui2f
000000e4 g       .text	00000000 data_section_table
100000f0  w    O .bss	00000008 sjsu::DefaultUptime()::default_uptime
00000cf4  w    F .text	0000005c sjsu::lpc40xx::Gpio::ClearEdgeRising() const
1000034c  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Gpio::port_status
00004ac8 g     F .text	00000020 sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))
00003158  w    F .text	0000002c units::literals::operator"" _MHz(unsigned long long)
0000777c g     O .text	00000020 __sf_fake_stdin
000002fc g       .text	00000000 __CRP_WORD_START__
00003d80  w    F .text	0000007c sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const
0000336c  w    F .text	00000034 sjsu::cortex::SystemTimer::SystemTimer(sjsu::SystemController const&, sjsu::InterruptController const&)
0000608e g     F .text	00000010 memset
00000b60  w    F .text	00000018 unsigned char sjsu::util::Value<sjsu::Gpio::Edge, unsigned char>(sjsu::Gpio::Edge)
000012d4 g     F .text	000002b0 main
000030e4  w    F .text	00000020 sjsu::cortex::DwtCounter::GetCount()
0000078c  w    F .text	0000003c sjsu::cortex::InterruptController::UnregisteredInterruptHandler()
00004d98 g     F .text	0000007c .hidden __aeabi_l2f
000015e0  w    F .text	00000012 std::chrono::duration_values<long long>::max()
20000000 g       *ABS*	00000000 heap
00000890  w    F .text	00000054 sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const
00003104  w    F .text	00000022 sjsu::cortex::InitializeFloatingPointUnit()
00007550  w    O .text	00000014 sjsu::lpc40xx::Uart::Port::kUart0
00006640  w    O .text	00000018 vtable for sjsu::lpc40xx::Pin
00004b58 g     F .text	0000009e .hidden __truncdfsf2
0000031c g       .text	00000000 __init_array_end
00004a00 g     F .text	00000026 vPortSVCHandler
000074a4  w    O .text	00000002 sjsu::lpc40xx::SystemController::CpuClock::kSelect
10000010  w    O .data	00000004 sjsu::cortex::DwtCounter::dwt
00004d88 g     F .text	0000008c .hidden __aeabi_ul2f
0000334c  w    F .text	00000020 sjsu::SystemTimer::SystemTimer()
00003268  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
00000a9c  w    F .text	00000054 sjsu::lpc40xx::Gpio::ValidPortCheck() const
00005428 g     F .text	00000012 .hidden __gnu_Unwind_ForcedUnwind
000011f2  w    F .text	0000001c std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
0000476e  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
00005480 g     F .text	0000000e .hidden __gnu_Unwind_Resume_or_Rethrow
10000008  w    O .data	00000004 sjsu::newlib::out
20008000 g       *ABS*	00000000 heap_end
00006148  w    O .text	00000008 std::integral_constant<long long, 1ll>::value
000047f4  w    F .text	0000002e bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)
0000031c g     F .text	00000000 _fini
00005afc g     F .text	00000018 .hidden restore_core_regs
0000382c  w    F .text	0000003c sjsu::lpc40xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const
00005be0 g     F .text	00000000 .hidden __gnu_Unwind_Save_WMMXC
00007540  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart4Tx
000000fc g       .text	00000000 data_section_table_end
0000062c  w    F .text	00000022 std::chrono::duration<long long, std::ratio<1ll, 1ll> >::duration<long long, void>(long long const&)
000065cc  w    O .text	00000008 Bus::Write(unsigned char, unsigned char)::file
00000a44  w    F .text	00000040 sjsu::lpc40xx::Gpio::Read() const
0000340c  w    F .text	00000020 sjsu::cortex::SystemTimer::SetInterrupt(void (*)()) const
000015f2  w    F .text	00000028 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()
1000003c  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart3
00004584  w    F .text	00000024 sjsu::lpc40xx::Uart::TransmissionComplete() const
00004bf8 g     F .text	0000016c .hidden __aeabi_frsub
00006014 g     F .text	00000006 .hidden _Unwind_GetTextRelBase
1000006c g     O .data	00000004 _impure_ptr
000074a8  w    O .text	00000002 sjsu::lpc40xx::SystemController::UsbClock::kSelect
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
000034c0  w    F .text	0000001e units::linear_scale<float>::operator()() const
000039f0  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
000032c4  w    F .text	00000038 sjsu::cortex::InterruptController::LookupHandler()
0000030c g       .text	00000000 __preinit_array_end
0000053c  w    F .text	0000007c sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const
10000000 g       .data	00000000 _data
000016b2  w    F .text	0000002e bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)
00003558  w    F .text	0000003c units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)
00005ff8 g     F .text	00000012 .hidden _Unwind_GetLanguageSpecificData
000074c8  w    O .text	00000016 sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
00000be4  w    F .text	0000002e sjsu::lpc40xx::Gpio::AttachInterrupt(void (*)(), sjsu::Gpio::Edge) const
0000098c  w    F .text	00000074 sjsu::lpc40xx::Gpio::Set(sjsu::Gpio::State) const
00001c8c g     F .text	00000054 ArmResetHandler
000054a0 g     F .text	0000002a .hidden _Unwind_VRS_Get
0000086c  w    F .text	00000024 sjsu::cortex::InterruptController::GetVector(int)
10000068 g     O .data	00000004 __cxxabiv1::__terminate_handler
00005bcc g     F .text	00000000 .hidden __gnu_Unwind_Restore_WMMXC
0000389c  w    F .text	00000034 sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const
000006b8  w    F .text	000000ac sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)
000038d0  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const
00005fc4 g     F .text	00000028 .hidden __gnu_unwind_frame
00005c60 g     F .text	00000022 .hidden _Unwind_ForcedUnwind
100000d0 g       .data	00000000 _edata
000065c4  w    O .text	00000008 Bus::Write(unsigned char, unsigned char)::file
00004560  w    F .text	00000024 sjsu::lpc40xx::Uart::HasData() const
0000090c  w    F .text	00000080 sjsu::lpc40xx::Gpio::SetDirection(sjsu::Gpio::Direction) const
0000660c  w    O .text	00000024 vtable for sjsu::lpc40xx::Gpio
00000d50  w    F .text	0000005c sjsu::lpc40xx::Gpio::ClearEdgeFalling() const
000065dc  w    O .text	00000008 Bus::Write(unsigned char, unsigned char)::file
00004708  w    F .text	00000030 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
00000f8e  w    F .text	00000034 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1ll> > const&)
000007c8  w    F .text	00000016 unsigned int std::size<void (*)(), 64u>(void (* const (&) [64u])())
20008000 g       *ABS*	00000000 __top_RamPeriph32
000074b0  w    O .text	00000016 sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::file
00003a68  w    F .text	00000058 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
00000b78  w    F .text	0000006c sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const
10000000 g       *ABS*	00000000 __base_RAM
00004d64 g     F .text	00000024 .hidden __floatunsisf
00004b32 g     F .text	00000008 __cxxabiv1::__terminate(void (*)())
00005b88 g     F .text	00000000 .hidden __gnu_Unwind_Save_WMMXD
00001e14 g     F .text	0000001a _kill
00001acc  w    F .text	0000009c sjsu::InitializeDataSection()
00000670  w    F .text	00000020 sjsu::DefaultUptime()
0000779c g     O .text	00000020 __sf_fake_stdout
0000044c  w    F .text	00000016 std::numeric_limits<long long>::max()
0000030c g       .text	00000000 __init_array_start
0000601c  w    F .text	00000002 .hidden __aeabi_idiv0
00001668  w    F .text	00000026 unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)
00001df8 g     F .text	0000000c _exit
00007538  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart3Rx
10000020  w    O .data	00000004 sjsu::lpc40xx::SystemController::speed_in_hertz
000031a6  w    F .text	00000020 units::linear_scale<float>::linear_scale<>(float const&)
00003f38  w    F .text	0000004c sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)
00000a84  w    F .text	00000018 sjsu::lpc40xx::Gpio::GetPin() const
00000764  w    F .text	0000001a sjsu::Delay(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)
00000368  w    F .text	00000018 sjsu::Pin::GetPort() const
00006128 g     F .text	00000010 strlen
10000000  w    O .data	00000004 sjsu::Uptime
00000464  w    F .text	00000034 sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const
00005874  w    F .text	00000004 .hidden __aeabi_unwind_cpp_pr1
0000173a  w    F .text	0000005a std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
00003cb8  w    F .text	000000c8 sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
00004ae8 g     F .text	00000020 sjsu::newlib::SetStdin(int (*)(char*, unsigned int))
0000195c  w    F .text	00000040 sjsu::build::Stringify(sjsu::build::Target)
000065a8  w    O .text	00000004 sjsu::lpc40xx::Gpio::kInterruptController
0000600c g     F .text	00000006 .hidden _Unwind_GetDataRelBase
00003f84  w    F .text	0000004c sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)
10000004  w    O .data	00000004 sjsu::cortex::InterruptController::current_vector
0000483e  w    F .text	00000058 unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)
00000498  w    F .text	00000034 sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const
0000030c g       .text	00000000 __preinit_array_start
000039a8  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const
0000161a  w    F .text	0000004e bool std::chrono::operator==<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
000065ac  w    O .text	00000009 sjsu::lpc40xx::Gpio::ValidPortCheck() const::file
000007e0  w    F .text	00000074 sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()
000074a0  w    O .text	00000002 sjsu::lpc40xx::SystemController::CpuClock::kDivider
00000b2c  w    F .text	00000034 sjsu::lpc40xx::Gpio::ClearInterruptRoutine() const
0000758c  w    O .text	0000001c vtable for sjsu::Uart
00004c04 g     F .text	00000160 .hidden __addsf3
00007510  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart0Tx
000042a0  w    F .text	000000c0 sjsu::lpc40xx::Uart::Initialize(unsigned long) const
10000014  w    O .data	00000004 sjsu::cortex::DwtCounter::core
000060f0 g     F .text	00000010 raise



Disassembly of section .text:

00000000 <kInterruptVectorTable>:
       0:	00 00 01 10 8d 1c 00 00 c5 32 00 00 65 1c 00 00     .........2..e...
      10:	c5 32 00 00 c5 32 00 00 c5 32 00 00 00 00 00 00     .2...2...2......
	...
      2c:	01 4a 00 00 c5 32 00 00 00 00 00 00 31 4a 00 00     .J...2......1J..
      3c:	c5 32 00 00 c5 32 00 00 c5 32 00 00 c5 32 00 00     .2...2...2...2..
      4c:	c5 32 00 00 c5 32 00 00 c5 32 00 00 c5 32 00 00     .2...2...2...2..
      5c:	c5 32 00 00 c5 32 00 00 c5 32 00 00 c5 32 00 00     .2...2...2...2..
      6c:	c5 32 00 00 c5 32 00 00 c5 32 00 00 c5 32 00 00     .2...2...2...2..
      7c:	c5 32 00 00 c5 32 00 00 c5 32 00 00 c5 32 00 00     .2...2...2...2..
      8c:	c5 32 00 00 c5 32 00 00 c5 32 00 00 c5 32 00 00     .2...2...2...2..
      9c:	c5 32 00 00 c5 32 00 00 c5 32 00 00 c5 32 00 00     .2...2...2...2..
      ac:	c5 32 00 00 c5 32 00 00 c5 32 00 00 c5 32 00 00     .2...2...2...2..
      bc:	c5 32 00 00 c5 32 00 00 c5 32 00 00 c5 32 00 00     .2...2...2...2..
      cc:	c5 32 00 00 c5 32 00 00 c5 32 00 00 c5 32 00 00     .2...2...2...2..
      dc:	c5 32 00 00 c5 32 00 00                             .2...2..

000000e4 <data_section_table>:
      e4:	0000788c 	.word	0x0000788c
      e8:	10000000 	.word	0x10000000
      ec:	000000d0 	.word	0x000000d0
      f0:	0000788c 	.word	0x0000788c
      f4:	20000000 	.word	0x20000000
      f8:	00000000 	.word	0x00000000

000000fc <bss_section_table>:
      fc:	100000d0 	.word	0x100000d0
     100:	0000033c 	.word	0x0000033c
     104:	20000000 	.word	0x20000000
     108:	00000000 	.word	0x00000000

0000010c <bss_section_table_end>:
     10c:	ffffffff 	.word	0xffffffff
     110:	ffffffff 	.word	0xffffffff
     114:	ffffffff 	.word	0xffffffff
     118:	ffffffff 	.word	0xffffffff
     11c:	ffffffff 	.word	0xffffffff
     120:	ffffffff 	.word	0xffffffff
     124:	ffffffff 	.word	0xffffffff
     128:	ffffffff 	.word	0xffffffff
     12c:	ffffffff 	.word	0xffffffff
     130:	ffffffff 	.word	0xffffffff
     134:	ffffffff 	.word	0xffffffff
     138:	ffffffff 	.word	0xffffffff
     13c:	ffffffff 	.word	0xffffffff
     140:	ffffffff 	.word	0xffffffff
     144:	ffffffff 	.word	0xffffffff
     148:	ffffffff 	.word	0xffffffff
     14c:	ffffffff 	.word	0xffffffff
     150:	ffffffff 	.word	0xffffffff
     154:	ffffffff 	.word	0xffffffff
     158:	ffffffff 	.word	0xffffffff
     15c:	ffffffff 	.word	0xffffffff
     160:	ffffffff 	.word	0xffffffff
     164:	ffffffff 	.word	0xffffffff
     168:	ffffffff 	.word	0xffffffff
     16c:	ffffffff 	.word	0xffffffff
     170:	ffffffff 	.word	0xffffffff
     174:	ffffffff 	.word	0xffffffff
     178:	ffffffff 	.word	0xffffffff
     17c:	ffffffff 	.word	0xffffffff
     180:	ffffffff 	.word	0xffffffff
     184:	ffffffff 	.word	0xffffffff
     188:	ffffffff 	.word	0xffffffff
     18c:	ffffffff 	.word	0xffffffff
     190:	ffffffff 	.word	0xffffffff
     194:	ffffffff 	.word	0xffffffff
     198:	ffffffff 	.word	0xffffffff
     19c:	ffffffff 	.word	0xffffffff
     1a0:	ffffffff 	.word	0xffffffff
     1a4:	ffffffff 	.word	0xffffffff
     1a8:	ffffffff 	.word	0xffffffff
     1ac:	ffffffff 	.word	0xffffffff
     1b0:	ffffffff 	.word	0xffffffff
     1b4:	ffffffff 	.word	0xffffffff
     1b8:	ffffffff 	.word	0xffffffff
     1bc:	ffffffff 	.word	0xffffffff
     1c0:	ffffffff 	.word	0xffffffff
     1c4:	ffffffff 	.word	0xffffffff
     1c8:	ffffffff 	.word	0xffffffff
     1cc:	ffffffff 	.word	0xffffffff
     1d0:	ffffffff 	.word	0xffffffff
     1d4:	ffffffff 	.word	0xffffffff
     1d8:	ffffffff 	.word	0xffffffff
     1dc:	ffffffff 	.word	0xffffffff
     1e0:	ffffffff 	.word	0xffffffff
     1e4:	ffffffff 	.word	0xffffffff
     1e8:	ffffffff 	.word	0xffffffff
     1ec:	ffffffff 	.word	0xffffffff
     1f0:	ffffffff 	.word	0xffffffff
     1f4:	ffffffff 	.word	0xffffffff
     1f8:	ffffffff 	.word	0xffffffff
     1fc:	ffffffff 	.word	0xffffffff
     200:	ffffffff 	.word	0xffffffff
     204:	ffffffff 	.word	0xffffffff
     208:	ffffffff 	.word	0xffffffff
     20c:	ffffffff 	.word	0xffffffff
     210:	ffffffff 	.word	0xffffffff
     214:	ffffffff 	.word	0xffffffff
     218:	ffffffff 	.word	0xffffffff
     21c:	ffffffff 	.word	0xffffffff
     220:	ffffffff 	.word	0xffffffff
     224:	ffffffff 	.word	0xffffffff
     228:	ffffffff 	.word	0xffffffff
     22c:	ffffffff 	.word	0xffffffff
     230:	ffffffff 	.word	0xffffffff
     234:	ffffffff 	.word	0xffffffff
     238:	ffffffff 	.word	0xffffffff
     23c:	ffffffff 	.word	0xffffffff
     240:	ffffffff 	.word	0xffffffff
     244:	ffffffff 	.word	0xffffffff
     248:	ffffffff 	.word	0xffffffff
     24c:	ffffffff 	.word	0xffffffff
     250:	ffffffff 	.word	0xffffffff
     254:	ffffffff 	.word	0xffffffff
     258:	ffffffff 	.word	0xffffffff
     25c:	ffffffff 	.word	0xffffffff
     260:	ffffffff 	.word	0xffffffff
     264:	ffffffff 	.word	0xffffffff
     268:	ffffffff 	.word	0xffffffff
     26c:	ffffffff 	.word	0xffffffff
     270:	ffffffff 	.word	0xffffffff
     274:	ffffffff 	.word	0xffffffff
     278:	ffffffff 	.word	0xffffffff
     27c:	ffffffff 	.word	0xffffffff
     280:	ffffffff 	.word	0xffffffff
     284:	ffffffff 	.word	0xffffffff
     288:	ffffffff 	.word	0xffffffff
     28c:	ffffffff 	.word	0xffffffff
     290:	ffffffff 	.word	0xffffffff
     294:	ffffffff 	.word	0xffffffff
     298:	ffffffff 	.word	0xffffffff
     29c:	ffffffff 	.word	0xffffffff
     2a0:	ffffffff 	.word	0xffffffff
     2a4:	ffffffff 	.word	0xffffffff
     2a8:	ffffffff 	.word	0xffffffff
     2ac:	ffffffff 	.word	0xffffffff
     2b0:	ffffffff 	.word	0xffffffff
     2b4:	ffffffff 	.word	0xffffffff
     2b8:	ffffffff 	.word	0xffffffff
     2bc:	ffffffff 	.word	0xffffffff
     2c0:	ffffffff 	.word	0xffffffff
     2c4:	ffffffff 	.word	0xffffffff
     2c8:	ffffffff 	.word	0xffffffff
     2cc:	ffffffff 	.word	0xffffffff
     2d0:	ffffffff 	.word	0xffffffff
     2d4:	ffffffff 	.word	0xffffffff
     2d8:	ffffffff 	.word	0xffffffff
     2dc:	ffffffff 	.word	0xffffffff
     2e0:	ffffffff 	.word	0xffffffff
     2e4:	ffffffff 	.word	0xffffffff
     2e8:	ffffffff 	.word	0xffffffff
     2ec:	ffffffff 	.word	0xffffffff
     2f0:	ffffffff 	.word	0xffffffff
     2f4:	ffffffff 	.word	0xffffffff
     2f8:	ffffffff 	.word	0xffffffff

000002fc <__CRP_WORD_START__>:
     2fc:	ffffffff 	.word	0xffffffff

00000300 <_init>:
     300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     302:	bf00      	nop
     304:	bcf8      	pop	{r3, r4, r5, r6, r7}
     306:	bc08      	pop	{r3}
     308:	469e      	mov	lr, r3
     30a:	4770      	bx	lr

0000030c <__init_array_start>:
     30c:	0000034d 	.word	0x0000034d
     310:	00001925 	.word	0x00001925
     314:	00001d25 	.word	0x00001d25
     318:	000049e5 	.word	0x000049e5

0000031c <_fini>:
     31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     31e:	bf00      	nop
     320:	bcf8      	pop	{r3, r4, r5, r6, r7}
     322:	bc08      	pop	{r3}
     324:	469e      	mov	lr, r3
     326:	4770      	bx	lr

00000328 <__do_global_dtors_aux>:
     328:	b510      	push	{r4, lr}
     32a:	4c05      	ldr	r4, [pc, #20]	; (340 <__do_global_dtors_aux+0x18>)
     32c:	7823      	ldrb	r3, [r4, #0]
     32e:	b933      	cbnz	r3, 33e <__do_global_dtors_aux+0x16>
     330:	4b04      	ldr	r3, [pc, #16]	; (344 <__do_global_dtors_aux+0x1c>)
     332:	b113      	cbz	r3, 33a <__do_global_dtors_aux+0x12>
     334:	4804      	ldr	r0, [pc, #16]	; (348 <__do_global_dtors_aux+0x20>)
     336:	f3af 8000 	nop.w
     33a:	2301      	movs	r3, #1
     33c:	7023      	strb	r3, [r4, #0]
     33e:	bd10      	pop	{r4, pc}
     340:	100000d0 	.word	0x100000d0
     344:	00000000 	.word	0x00000000
     348:	000077d4 	.word	0x000077d4

0000034c <frame_dummy>:
     34c:	b508      	push	{r3, lr}
     34e:	4b03      	ldr	r3, [pc, #12]	; (35c <frame_dummy+0x10>)
     350:	b11b      	cbz	r3, 35a <frame_dummy+0xe>
     352:	4903      	ldr	r1, [pc, #12]	; (360 <frame_dummy+0x14>)
     354:	4803      	ldr	r0, [pc, #12]	; (364 <frame_dummy+0x18>)
     356:	f3af 8000 	nop.w
     35a:	bd08      	pop	{r3, pc}
     35c:	00000000 	.word	0x00000000
     360:	100000d4 	.word	0x100000d4
     364:	000077d4 	.word	0x000077d4

00000368 <sjsu::Pin::GetPort() const>:

  // ==============================
  // Utility Methods
  // ==============================

  uint8_t GetPort() const
     368:	b480      	push	{r7}
     36a:	b083      	sub	sp, #12
     36c:	af00      	add	r7, sp, #0
     36e:	6078      	str	r0, [r7, #4]
  {
    return port_;
     370:	687b      	ldr	r3, [r7, #4]
     372:	791b      	ldrb	r3, [r3, #4]
  }
     374:	4618      	mov	r0, r3
     376:	370c      	adds	r7, #12
     378:	46bd      	mov	sp, r7
     37a:	f85d 7b04 	ldr.w	r7, [sp], #4
     37e:	4770      	bx	lr

00000380 <sjsu::Pin::GetPin() const>:
  uint8_t GetPin() const
     380:	b480      	push	{r7}
     382:	b083      	sub	sp, #12
     384:	af00      	add	r7, sp, #0
     386:	6078      	str	r0, [r7, #4]
  {
    return pin_;
     388:	687b      	ldr	r3, [r7, #4]
     38a:	795b      	ldrb	r3, [r3, #5]
  }
     38c:	4618      	mov	r0, r3
     38e:	370c      	adds	r7, #12
     390:	46bd      	mov	sp, r7
     392:	f85d 7b04 	ldr.w	r7, [sp], #4
     396:	4770      	bx	lr

00000398 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
     398:	b480      	push	{r7}
     39a:	b083      	sub	sp, #12
     39c:	af00      	add	r7, sp, #0
     39e:	6078      	str	r0, [r7, #4]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     3a0:	687b      	ldr	r3, [r7, #4]
     3a2:	f003 021f 	and.w	r2, r3, #31
     3a6:	4907      	ldr	r1, [pc, #28]	; (3c4 <NVIC_EnableIRQ+0x2c>)
     3a8:	687b      	ldr	r3, [r7, #4]
     3aa:	095b      	lsrs	r3, r3, #5
     3ac:	2001      	movs	r0, #1
     3ae:	fa00 f202 	lsl.w	r2, r0, r2
     3b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
     3b6:	bf00      	nop
     3b8:	370c      	adds	r7, #12
     3ba:	46bd      	mov	sp, r7
     3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
     3c0:	4770      	bx	lr
     3c2:	bf00      	nop
     3c4:	e000e100 	.word	0xe000e100

000003c8 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
     3c8:	b480      	push	{r7}
     3ca:	b083      	sub	sp, #12
     3cc:	af00      	add	r7, sp, #0
     3ce:	6078      	str	r0, [r7, #4]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     3d0:	687b      	ldr	r3, [r7, #4]
     3d2:	f003 021f 	and.w	r2, r3, #31
     3d6:	4907      	ldr	r1, [pc, #28]	; (3f4 <NVIC_DisableIRQ+0x2c>)
     3d8:	687b      	ldr	r3, [r7, #4]
     3da:	095b      	lsrs	r3, r3, #5
     3dc:	2001      	movs	r0, #1
     3de:	fa00 f202 	lsl.w	r2, r0, r2
     3e2:	3320      	adds	r3, #32
     3e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
     3e8:	bf00      	nop
     3ea:	370c      	adds	r7, #12
     3ec:	46bd      	mov	sp, r7
     3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
     3f2:	4770      	bx	lr
     3f4:	e000e100 	.word	0xe000e100

000003f8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
     3f8:	b480      	push	{r7}
     3fa:	b083      	sub	sp, #12
     3fc:	af00      	add	r7, sp, #0
     3fe:	6078      	str	r0, [r7, #4]
     400:	6039      	str	r1, [r7, #0]
  if ((int32_t)(IRQn) < 0)
     402:	687b      	ldr	r3, [r7, #4]
     404:	2b00      	cmp	r3, #0
     406:	da0b      	bge.n	420 <NVIC_SetPriority+0x28>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     408:	683b      	ldr	r3, [r7, #0]
     40a:	b2da      	uxtb	r2, r3
     40c:	490d      	ldr	r1, [pc, #52]	; (444 <NVIC_SetPriority+0x4c>)
     40e:	687b      	ldr	r3, [r7, #4]
     410:	f003 030f 	and.w	r3, r3, #15
     414:	3b04      	subs	r3, #4
     416:	0152      	lsls	r2, r2, #5
     418:	b2d2      	uxtb	r2, r2
     41a:	440b      	add	r3, r1
     41c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
     41e:	e00a      	b.n	436 <NVIC_SetPriority+0x3e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     420:	683b      	ldr	r3, [r7, #0]
     422:	b2db      	uxtb	r3, r3
     424:	4a08      	ldr	r2, [pc, #32]	; (448 <NVIC_SetPriority+0x50>)
     426:	6879      	ldr	r1, [r7, #4]
     428:	4608      	mov	r0, r1
     42a:	015b      	lsls	r3, r3, #5
     42c:	b2d9      	uxtb	r1, r3
     42e:	1813      	adds	r3, r2, r0
     430:	460a      	mov	r2, r1
     432:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
     436:	bf00      	nop
     438:	370c      	adds	r7, #12
     43a:	46bd      	mov	sp, r7
     43c:	f85d 7b04 	ldr.w	r7, [sp], #4
     440:	4770      	bx	lr
     442:	bf00      	nop
     444:	e000ed00 	.word	0xe000ed00
     448:	e000e100 	.word	0xe000e100

0000044c <std::numeric_limits<long long>::max()>:

      static _GLIBCXX_CONSTEXPR long long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_LONG_MAX__; }
     44c:	b490      	push	{r4, r7}
     44e:	af00      	add	r7, sp, #0
     450:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
     454:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
     458:	4618      	mov	r0, r3
     45a:	4621      	mov	r1, r4
     45c:	46bd      	mov	sp, r7
     45e:	bc90      	pop	{r4, r7}
     460:	4770      	bx	lr
     462:	Address 0x0000000000000462 is out of bounds.


00000464 <sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const>:
  {
    return Pin(5, 4);
  }
  constexpr Pin(uint8_t port, uint8_t pin) : sjsu::Pin(port, pin) {}

  void SetPinFunction(uint8_t function) const override
     464:	b580      	push	{r7, lr}
     466:	b082      	sub	sp, #8
     468:	af00      	add	r7, sp, #0
     46a:	6078      	str	r0, [r7, #4]
     46c:	460b      	mov	r3, r1
     46e:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(function, kFunction);
     470:	4b08      	ldr	r3, [pc, #32]	; (494 <sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const+0x30>)
     472:	78f9      	ldrb	r1, [r7, #3]
     474:	781a      	ldrb	r2, [r3, #0]
     476:	785b      	ldrb	r3, [r3, #1]
     478:	021b      	lsls	r3, r3, #8
     47a:	431a      	orrs	r2, r3
     47c:	2300      	movs	r3, #0
     47e:	f362 030f 	bfi	r3, r2, #0, #16
     482:	461a      	mov	r2, r3
     484:	6878      	ldr	r0, [r7, #4]
     486:	f000 f859 	bl	53c <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     48a:	bf00      	nop
     48c:	3708      	adds	r7, #8
     48e:	46bd      	mov	sp, r7
     490:	bd80      	pop	{r7, pc}
     492:	bf00      	nop
     494:	00006138 	.word	0x00006138

00000498 <sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const>:
  void SetPull(Resistor resistor) const override
     498:	b580      	push	{r7, lr}
     49a:	b082      	sub	sp, #8
     49c:	af00      	add	r7, sp, #0
     49e:	6078      	str	r0, [r7, #4]
     4a0:	460b      	mov	r3, r1
     4a2:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(static_cast<uint8_t>(resistor), kResistor);
     4a4:	4b08      	ldr	r3, [pc, #32]	; (4c8 <sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const+0x30>)
     4a6:	78f9      	ldrb	r1, [r7, #3]
     4a8:	781a      	ldrb	r2, [r3, #0]
     4aa:	785b      	ldrb	r3, [r3, #1]
     4ac:	021b      	lsls	r3, r3, #8
     4ae:	431a      	orrs	r2, r3
     4b0:	2300      	movs	r3, #0
     4b2:	f362 030f 	bfi	r3, r2, #0, #16
     4b6:	461a      	mov	r2, r3
     4b8:	6878      	ldr	r0, [r7, #4]
     4ba:	f000 f83f 	bl	53c <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     4be:	bf00      	nop
     4c0:	3708      	adds	r7, #8
     4c2:	46bd      	mov	sp, r7
     4c4:	bd80      	pop	{r7, pc}
     4c6:	bf00      	nop
     4c8:	0000613c 	.word	0x0000613c

000004cc <sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const>:
  // Set bit to 0 to enable analog mode
  void SetAsAnalogMode(bool set_as_analog = true) const override
     4cc:	b580      	push	{r7, lr}
     4ce:	b082      	sub	sp, #8
     4d0:	af00      	add	r7, sp, #0
     4d2:	6078      	str	r0, [r7, #4]
     4d4:	460b      	mov	r3, r1
     4d6:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(!set_as_analog, kAnalogDigitalMode);
     4d8:	78fb      	ldrb	r3, [r7, #3]
     4da:	f083 0301 	eor.w	r3, r3, #1
     4de:	b2db      	uxtb	r3, r3
     4e0:	4619      	mov	r1, r3
     4e2:	4b08      	ldr	r3, [pc, #32]	; (504 <sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const+0x38>)
     4e4:	781a      	ldrb	r2, [r3, #0]
     4e6:	785b      	ldrb	r3, [r3, #1]
     4e8:	021b      	lsls	r3, r3, #8
     4ea:	431a      	orrs	r2, r3
     4ec:	2300      	movs	r3, #0
     4ee:	f362 030f 	bfi	r3, r2, #0, #16
     4f2:	461a      	mov	r2, r3
     4f4:	6878      	ldr	r0, [r7, #4]
     4f6:	f000 f821 	bl	53c <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     4fa:	bf00      	nop
     4fc:	3708      	adds	r7, #8
     4fe:	46bd      	mov	sp, r7
     500:	bd80      	pop	{r7, pc}
     502:	bf00      	nop
     504:	00006140 	.word	0x00006140

00000508 <sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const>:

  void SetAsOpenDrain(bool set_as_open_drain = true) const override
     508:	b580      	push	{r7, lr}
     50a:	b082      	sub	sp, #8
     50c:	af00      	add	r7, sp, #0
     50e:	6078      	str	r0, [r7, #4]
     510:	460b      	mov	r3, r1
     512:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(set_as_open_drain, kOpenDrain);
     514:	78f9      	ldrb	r1, [r7, #3]
     516:	4b08      	ldr	r3, [pc, #32]	; (538 <sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const+0x30>)
     518:	781a      	ldrb	r2, [r3, #0]
     51a:	785b      	ldrb	r3, [r3, #1]
     51c:	021b      	lsls	r3, r3, #8
     51e:	431a      	orrs	r2, r3
     520:	2300      	movs	r3, #0
     522:	f362 030f 	bfi	r3, r2, #0, #16
     526:	461a      	mov	r2, r3
     528:	6878      	ldr	r0, [r7, #4]
     52a:	f000 f807 	bl	53c <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     52e:	bf00      	nop
     530:	3708      	adds	r7, #8
     532:	46bd      	mov	sp, r7
     534:	bd80      	pop	{r7, pc}
     536:	bf00      	nop
     538:	00006144 	.word	0x00006144

0000053c <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>:
  {
    SetPinRegister(enable_dac, kDacEnable);
  }

 protected:
  void SetPinRegister(uint8_t data, bit::Mask mask) const
     53c:	b5f0      	push	{r4, r5, r6, r7, lr}
     53e:	b087      	sub	sp, #28
     540:	af00      	add	r7, sp, #0
     542:	60f8      	str	r0, [r7, #12]
     544:	460b      	mov	r3, r1
     546:	80ba      	strh	r2, [r7, #4]
     548:	72fb      	strb	r3, [r7, #11]
     54a:	68fb      	ldr	r3, [r7, #12]
     54c:	613b      	str	r3, [r7, #16]
  {
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
  }
  [[gnu::always_inline]] volatile uint32_t * PinRegister() const
  {
    return &pin_map->_register[GetPort()][GetPin()];
     54e:	4b19      	ldr	r3, [pc, #100]	; (5b4 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const+0x78>)
     550:	681c      	ldr	r4, [r3, #0]
     552:	693b      	ldr	r3, [r7, #16]
     554:	4618      	mov	r0, r3
     556:	f7ff ff07 	bl	368 <sjsu::Pin::GetPort() const>
     55a:	4603      	mov	r3, r0
     55c:	461d      	mov	r5, r3
     55e:	693b      	ldr	r3, [r7, #16]
     560:	4618      	mov	r0, r3
     562:	f7ff ff0d 	bl	380 <sjsu::Pin::GetPin() const>
     566:	4603      	mov	r3, r0
     568:	461a      	mov	r2, r3
     56a:	016b      	lsls	r3, r5, #5
     56c:	4413      	add	r3, r2
     56e:	009b      	lsls	r3, r3, #2
     570:	4423      	add	r3, r4
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
     572:	681b      	ldr	r3, [r3, #0]
     574:	7af9      	ldrb	r1, [r7, #11]
     576:	687a      	ldr	r2, [r7, #4]
     578:	4618      	mov	r0, r3
     57a:	f001 f803 	bl	1584 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
     57e:	4605      	mov	r5, r0
     580:	68fb      	ldr	r3, [r7, #12]
     582:	617b      	str	r3, [r7, #20]
    return &pin_map->_register[GetPort()][GetPin()];
     584:	4b0b      	ldr	r3, [pc, #44]	; (5b4 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const+0x78>)
     586:	681c      	ldr	r4, [r3, #0]
     588:	697b      	ldr	r3, [r7, #20]
     58a:	4618      	mov	r0, r3
     58c:	f7ff feec 	bl	368 <sjsu::Pin::GetPort() const>
     590:	4603      	mov	r3, r0
     592:	461e      	mov	r6, r3
     594:	697b      	ldr	r3, [r7, #20]
     596:	4618      	mov	r0, r3
     598:	f7ff fef2 	bl	380 <sjsu::Pin::GetPin() const>
     59c:	4603      	mov	r3, r0
     59e:	461a      	mov	r2, r3
     5a0:	0173      	lsls	r3, r6, #5
     5a2:	4413      	add	r3, r2
     5a4:	009b      	lsls	r3, r3, #2
     5a6:	4423      	add	r3, r4
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
     5a8:	601d      	str	r5, [r3, #0]
  }
     5aa:	bf00      	nop
     5ac:	371c      	adds	r7, #28
     5ae:	46bd      	mov	sp, r7
     5b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
     5b2:	bf00      	nop
     5b4:	100000ec 	.word	0x100000ec

000005b8 <sjsu::Gpio::SetHigh() const>:

  // ==============================
  // Utility Methods
  // ==============================

  void SetHigh() const
     5b8:	b580      	push	{r7, lr}
     5ba:	b082      	sub	sp, #8
     5bc:	af00      	add	r7, sp, #0
     5be:	6078      	str	r0, [r7, #4]
  {
    Set(State::kHigh);
     5c0:	687b      	ldr	r3, [r7, #4]
     5c2:	681b      	ldr	r3, [r3, #0]
     5c4:	3304      	adds	r3, #4
     5c6:	681b      	ldr	r3, [r3, #0]
     5c8:	2101      	movs	r1, #1
     5ca:	6878      	ldr	r0, [r7, #4]
     5cc:	4798      	blx	r3
  }
     5ce:	bf00      	nop
     5d0:	3708      	adds	r7, #8
     5d2:	46bd      	mov	sp, r7
     5d4:	bd80      	pop	{r7, pc}

000005d6 <sjsu::Gpio::SetLow() const>:
  void SetLow() const
     5d6:	b580      	push	{r7, lr}
     5d8:	b082      	sub	sp, #8
     5da:	af00      	add	r7, sp, #0
     5dc:	6078      	str	r0, [r7, #4]
  {
    Set(State::kLow);
     5de:	687b      	ldr	r3, [r7, #4]
     5e0:	681b      	ldr	r3, [r3, #0]
     5e2:	3304      	adds	r3, #4
     5e4:	681b      	ldr	r3, [r3, #0]
     5e6:	2100      	movs	r1, #0
     5e8:	6878      	ldr	r0, [r7, #4]
     5ea:	4798      	blx	r3
  }
     5ec:	bf00      	nop
     5ee:	3708      	adds	r7, #8
     5f0:	46bd      	mov	sp, r7
     5f2:	bd80      	pop	{r7, pc}

000005f4 <sjsu::Gpio::SetAsInput() const>:
  void SetAsInput() const
     5f4:	b580      	push	{r7, lr}
     5f6:	b082      	sub	sp, #8
     5f8:	af00      	add	r7, sp, #0
     5fa:	6078      	str	r0, [r7, #4]
  {
    SetDirection(Direction::kInput);
     5fc:	687b      	ldr	r3, [r7, #4]
     5fe:	681b      	ldr	r3, [r3, #0]
     600:	681b      	ldr	r3, [r3, #0]
     602:	2100      	movs	r1, #0
     604:	6878      	ldr	r0, [r7, #4]
     606:	4798      	blx	r3
  }
     608:	bf00      	nop
     60a:	3708      	adds	r7, #8
     60c:	46bd      	mov	sp, r7
     60e:	bd80      	pop	{r7, pc}

00000610 <sjsu::Gpio::SetAsOutput() const>:
  void SetAsOutput() const
     610:	b580      	push	{r7, lr}
     612:	b082      	sub	sp, #8
     614:	af00      	add	r7, sp, #0
     616:	6078      	str	r0, [r7, #4]
  {
    SetDirection(Direction::kOutput);
     618:	687b      	ldr	r3, [r7, #4]
     61a:	681b      	ldr	r3, [r3, #0]
     61c:	681b      	ldr	r3, [r3, #0]
     61e:	2101      	movs	r1, #1
     620:	6878      	ldr	r0, [r7, #4]
     622:	4798      	blx	r3
  }
     624:	bf00      	nop
     626:	3708      	adds	r7, #8
     628:	46bd      	mov	sp, r7
     62a:	bd80      	pop	{r7, pc}

0000062c <std::chrono::duration<long long, std::ratio<1ll, 1ll> >::duration<long long, void>(long long const&)>:

	template<typename _Rep2, typename = typename
	       enable_if<is_convertible<_Rep2, rep>::value
			 && (treat_as_floating_point<rep>::value
			     || !treat_as_floating_point<_Rep2>::value)>::type>
	  constexpr explicit duration(const _Rep2& __rep)
     62c:	b490      	push	{r4, r7}
     62e:	b082      	sub	sp, #8
     630:	af00      	add	r7, sp, #0
     632:	6078      	str	r0, [r7, #4]
     634:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
     636:	683b      	ldr	r3, [r7, #0]
     638:	e9d3 3400 	ldrd	r3, r4, [r3]
     63c:	687a      	ldr	r2, [r7, #4]
     63e:	e9c2 3400 	strd	r3, r4, [r2]
     642:	687b      	ldr	r3, [r7, #4]
     644:	4618      	mov	r0, r3
     646:	3708      	adds	r7, #8
     648:	46bd      	mov	sp, r7
     64a:	bc90      	pop	{r4, r7}
     64c:	4770      	bx	lr

0000064e <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>:
	  constexpr explicit duration(const _Rep2& __rep)
     64e:	b490      	push	{r4, r7}
     650:	b082      	sub	sp, #8
     652:	af00      	add	r7, sp, #0
     654:	6078      	str	r0, [r7, #4]
     656:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
     658:	683b      	ldr	r3, [r7, #0]
     65a:	e9d3 3400 	ldrd	r3, r4, [r3]
     65e:	687a      	ldr	r2, [r7, #4]
     660:	e9c2 3400 	strd	r3, r4, [r2]
     664:	687b      	ldr	r3, [r7, #4]
     666:	4618      	mov	r0, r3
     668:	3708      	adds	r7, #8
     66a:	46bd      	mov	sp, r7
     66c:	bc90      	pop	{r4, r7}
     66e:	4770      	bx	lr

00000670 <sjsu::DefaultUptime()>:
{
// Definition of an UptimeFunction
using UptimeFunction = std::chrono::microseconds (*)();

inline std::chrono::microseconds DefaultUptime()
{
     670:	b580      	push	{r7, lr}
     672:	b082      	sub	sp, #8
     674:	af00      	add	r7, sp, #0
     676:	6078      	str	r0, [r7, #4]
  static std::chrono::microseconds default_uptime = 0us;
  return default_uptime++;
     678:	687b      	ldr	r3, [r7, #4]
     67a:	2200      	movs	r2, #0
     67c:	4903      	ldr	r1, [pc, #12]	; (68c <sjsu::DefaultUptime()+0x1c>)
     67e:	4618      	mov	r0, r3
     680:	f000 ff93 	bl	15aa <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator++(int)>
}
     684:	6878      	ldr	r0, [r7, #4]
     686:	3708      	adds	r7, #8
     688:	46bd      	mov	sp, r7
     68a:	bd80      	pop	{r7, pc}
     68c:	100000f0 	.word	0x100000f0

00000690 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)::{lambda()#1}::operator()() const>:
  return status;
}

inline Status Wait(std::chrono::microseconds timeout)
{
  return Wait(timeout, []() -> bool { return false; });
     690:	b480      	push	{r7}
     692:	b083      	sub	sp, #12
     694:	af00      	add	r7, sp, #0
     696:	6078      	str	r0, [r7, #4]
     698:	2300      	movs	r3, #0
     69a:	4618      	mov	r0, r3
     69c:	370c      	adds	r7, #12
     69e:	46bd      	mov	sp, r7
     6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
     6a4:	4770      	bx	lr

000006a6 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)::{lambda()#1}::_FUN()>:
     6a6:	b580      	push	{r7, lr}
     6a8:	af00      	add	r7, sp, #0
     6aa:	2000      	movs	r0, #0
     6ac:	f7ff fff0 	bl	690 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)::{lambda()#1}::operator()() const>
     6b0:	4603      	mov	r3, r0
     6b2:	4618      	mov	r0, r3
     6b4:	bd80      	pop	{r7, pc}
     6b6:	Address 0x00000000000006b6 is out of bounds.


000006b8 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>:
{
     6b8:	b590      	push	{r4, r7, lr}
     6ba:	b093      	sub	sp, #76	; 0x4c
     6bc:	af00      	add	r7, sp, #0
     6be:	e9c7 0102 	strd	r0, r1, [r7, #8]
     6c2:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
     6c6:	e9c7 3406 	strd	r3, r4, [r7, #24]
     6ca:	f887 2024 	strb.w	r2, [r7, #36]	; 0x24
  if (timeout == std::chrono::microseconds::max())
     6ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
     6d2:	4618      	mov	r0, r3
     6d4:	f000 ff8d 	bl	15f2 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>
     6d8:	f107 0238 	add.w	r2, r7, #56	; 0x38
     6dc:	f107 0318 	add.w	r3, r7, #24
     6e0:	4611      	mov	r1, r2
     6e2:	4618      	mov	r0, r3
     6e4:	f000 ff99 	bl	161a <bool std::chrono::operator==<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
     6e8:	4603      	mov	r3, r0
     6ea:	2b00      	cmp	r3, #0
     6ec:	d004      	beq.n	6f8 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)+0x40>
    timeout_time = timeout;
     6ee:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
     6f2:	e9c7 3404 	strd	r3, r4, [r7, #16]
     6f6:	e011      	b.n	71c <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)+0x64>
    timeout_time = Uptime() + timeout;
     6f8:	4b19      	ldr	r3, [pc, #100]	; (760 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)+0xa8>)
     6fa:	681b      	ldr	r3, [r3, #0]
     6fc:	f107 0230 	add.w	r2, r7, #48	; 0x30
     700:	4610      	mov	r0, r2
     702:	4798      	blx	r3
     704:	463b      	mov	r3, r7
     706:	f107 0218 	add.w	r2, r7, #24
     70a:	f107 0130 	add.w	r1, r7, #48	; 0x30
     70e:	4618      	mov	r0, r3
     710:	f001 f813 	bl	173a <std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
     714:	e9d7 3400 	ldrd	r3, r4, [r7]
     718:	e9c7 3404 	strd	r3, r4, [r7, #16]
  Status status = Status::kTimedOut;
     71c:	2301      	movs	r3, #1
     71e:	647b      	str	r3, [r7, #68]	; 0x44
  while (Uptime() < timeout_time)
     720:	4b0f      	ldr	r3, [pc, #60]	; (760 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)+0xa8>)
     722:	681b      	ldr	r3, [r3, #0]
     724:	f107 0228 	add.w	r2, r7, #40	; 0x28
     728:	4610      	mov	r0, r2
     72a:	4798      	blx	r3
     72c:	f107 0210 	add.w	r2, r7, #16
     730:	f107 0328 	add.w	r3, r7, #40	; 0x28
     734:	4611      	mov	r1, r2
     736:	4618      	mov	r0, r3
     738:	f001 f82c 	bl	1794 <bool std::chrono::operator< <long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
     73c:	4603      	mov	r3, r0
     73e:	2b00      	cmp	r3, #0
     740:	d009      	beq.n	756 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)+0x9e>
    if (is_done())
     742:	f107 0324 	add.w	r3, r7, #36	; 0x24
     746:	4618      	mov	r0, r3
     748:	f7ff ffa2 	bl	690 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)::{lambda()#1}::operator()() const>
     74c:	4603      	mov	r3, r0
     74e:	2b00      	cmp	r3, #0
     750:	d0e6      	beq.n	720 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)+0x68>
      status = Status::kSuccess;
     752:	2300      	movs	r3, #0
     754:	647b      	str	r3, [r7, #68]	; 0x44
  return status;
     756:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
     758:	4618      	mov	r0, r3
     75a:	374c      	adds	r7, #76	; 0x4c
     75c:	46bd      	mov	sp, r7
     75e:	bd90      	pop	{r4, r7, pc}
     760:	10000000 	.word	0x10000000

00000764 <sjsu::Delay(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>:

// Delay the system for a duration of time
inline void Delay(std::chrono::microseconds delay_time)
{
     764:	b580      	push	{r7, lr}
     766:	b082      	sub	sp, #8
     768:	af00      	add	r7, sp, #0
     76a:	e9c7 0100 	strd	r0, r1, [r7]
  {
    return;
  }
  else
  {
    Wait(delay_time);
     76e:	e9d7 0100 	ldrd	r0, r1, [r7]
     772:	f7ff ffa1 	bl	6b8 <sjsu::Wait(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>
  }
}
     776:	bf00      	nop
     778:	3708      	adds	r7, #8
     77a:	46bd      	mov	sp, r7
     77c:	bd80      	pop	{r7, pc}

0000077e <sjsu::cortex::InterruptController::UnregisteredArmExceptions()>:
  static constexpr size_t kNumberOfInterrupts = 64;

  inline static SCB_Type * scb     = SCB;
  inline static int current_vector = cortex::Reset_IRQn;

  static void UnregisteredArmExceptions() {}
     77e:	b480      	push	{r7}
     780:	af00      	add	r7, sp, #0
     782:	bf00      	nop
     784:	46bd      	mov	sp, r7
     786:	f85d 7b04 	ldr.w	r7, [sp], #4
     78a:	4770      	bx	lr

0000078c <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()>:

  static void UnregisteredInterruptHandler()
     78c:	b580      	push	{r7, lr}
     78e:	b082      	sub	sp, #8
     790:	af02      	add	r7, sp, #8
  {
    LOG_WARNING(
     792:	4b09      	ldr	r3, [pc, #36]	; (7b8 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x2c>)
     794:	681b      	ldr	r3, [r3, #0]
     796:	9300      	str	r3, [sp, #0]
     798:	231d      	movs	r3, #29
     79a:	4a08      	ldr	r2, [pc, #32]	; (7bc <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x30>)
     79c:	4908      	ldr	r1, [pc, #32]	; (7c0 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x34>)
     79e:	4809      	ldr	r0, [pc, #36]	; (7c4 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x38>)
     7a0:	f002 fc62 	bl	3068 <printf>
        "No interrupt service routine found for the vector %d! Disabling ISR",
        current_vector);
    NVIC_DisableIRQ(current_vector - kArmIrqOffset);
     7a4:	4b04      	ldr	r3, [pc, #16]	; (7b8 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x2c>)
     7a6:	681b      	ldr	r3, [r3, #0]
     7a8:	3b10      	subs	r3, #16
     7aa:	4618      	mov	r0, r3
     7ac:	f7ff fe0c 	bl	3c8 <NVIC_DisableIRQ>
  }
     7b0:	bf00      	nop
     7b2:	46bd      	mov	sp, r7
     7b4:	bd80      	pop	{r7, pc}
     7b6:	bf00      	nop
     7b8:	10000004 	.word	0x10000004
     7bc:	00006664 	.word	0x00006664
     7c0:	00006150 	.word	0x00006150
     7c4:	00006160 	.word	0x00006160

000007c8 <unsigned int std::size<void (*)(), 64u>(void (* const (&) [64u])())>:
   *  @brief  Return the size of an array.
   *  @param  __array  Array.
   */
  template <typename _Tp, size_t _Nm>
    constexpr size_t
    size(const _Tp (&/*__array*/)[_Nm]) noexcept
     7c8:	b480      	push	{r7}
     7ca:	b083      	sub	sp, #12
     7cc:	af00      	add	r7, sp, #0
     7ce:	6078      	str	r0, [r7, #4]
    { return _Nm; }
     7d0:	2340      	movs	r3, #64	; 0x40
     7d2:	4618      	mov	r0, r3
     7d4:	370c      	adds	r7, #12
     7d6:	46bd      	mov	sp, r7
     7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
     7dc:	4770      	bx	lr
     7de:	Address 0x00000000000007de is out of bounds.


000007e0 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>:
      {
        LOG_INFO("vector[%zu] = %p", i, vector[i]);
      }
    }

    static constexpr VectorTable_t GenerateDefaultTable()
     7e0:	b580      	push	{r7, lr}
     7e2:	b084      	sub	sp, #16
     7e4:	af00      	add	r7, sp, #0
     7e6:	6078      	str	r0, [r7, #4]
    {
      VectorTable_t temp_table = { 0 };
     7e8:	687b      	ldr	r3, [r7, #4]
     7ea:	4618      	mov	r0, r3
     7ec:	f44f 7380 	mov.w	r3, #256	; 0x100
     7f0:	461a      	mov	r2, r3
     7f2:	2100      	movs	r1, #0
     7f4:	f005 fc4b 	bl	608e <memset>
      // The Arm exceptions may be enabled by default and should simply be
      // called and do nothing.
      for (size_t i = 0; i < kArmIrqOffset; i++)
     7f8:	2300      	movs	r3, #0
     7fa:	60fb      	str	r3, [r7, #12]
     7fc:	68fb      	ldr	r3, [r7, #12]
     7fe:	2b0f      	cmp	r3, #15
     800:	d808      	bhi.n	814 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x34>
      {
        temp_table.vector[i] = UnregisteredArmExceptions;
     802:	687b      	ldr	r3, [r7, #4]
     804:	68fa      	ldr	r2, [r7, #12]
     806:	4911      	ldr	r1, [pc, #68]	; (84c <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x6c>)
     808:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (size_t i = 0; i < kArmIrqOffset; i++)
     80c:	68fb      	ldr	r3, [r7, #12]
     80e:	3301      	adds	r3, #1
     810:	60fb      	str	r3, [r7, #12]
     812:	e7f3      	b.n	7fc <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x1c>
      }
      // For all other exceptions, give a handler that will disable the ISR if
      // it is enabled but has not been registered.
      for (size_t i = kArmIrqOffset; i < std::size(temp_table.vector); i++)
     814:	2310      	movs	r3, #16
     816:	60bb      	str	r3, [r7, #8]
     818:	6878      	ldr	r0, [r7, #4]
     81a:	f7ff ffd5 	bl	7c8 <unsigned int std::size<void (*)(), 64u>(void (* const (&) [64u])())>
     81e:	4602      	mov	r2, r0
     820:	68bb      	ldr	r3, [r7, #8]
     822:	4293      	cmp	r3, r2
     824:	bf34      	ite	cc
     826:	2301      	movcc	r3, #1
     828:	2300      	movcs	r3, #0
     82a:	b2db      	uxtb	r3, r3
     82c:	2b00      	cmp	r3, #0
     82e:	d008      	beq.n	842 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x62>
      {
        temp_table.vector[i] = UnregisteredInterruptHandler;
     830:	687b      	ldr	r3, [r7, #4]
     832:	68ba      	ldr	r2, [r7, #8]
     834:	4906      	ldr	r1, [pc, #24]	; (850 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x70>)
     836:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (size_t i = kArmIrqOffset; i < std::size(temp_table.vector); i++)
     83a:	68bb      	ldr	r3, [r7, #8]
     83c:	3301      	adds	r3, #1
     83e:	60bb      	str	r3, [r7, #8]
     840:	e7ea      	b.n	818 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x38>
      }
      return temp_table;
     842:	bf00      	nop
    }
     844:	6878      	ldr	r0, [r7, #4]
     846:	3710      	adds	r7, #16
     848:	46bd      	mov	sp, r7
     84a:	bd80      	pop	{r7, pc}
     84c:	0000077f 	.word	0x0000077f
     850:	0000078d 	.word	0x0000078d

00000854 <sjsu::cortex::InterruptController::IrqToIndex(int)>:
  };

  inline static VectorTable_t table = VectorTable_t::GenerateDefaultTable();

  static int IrqToIndex(int irq)
     854:	b480      	push	{r7}
     856:	b083      	sub	sp, #12
     858:	af00      	add	r7, sp, #0
     85a:	6078      	str	r0, [r7, #4]
  {
    return irq + kArmIrqOffset;
     85c:	687b      	ldr	r3, [r7, #4]
     85e:	3310      	adds	r3, #16
  }
     860:	4618      	mov	r0, r3
     862:	370c      	adds	r7, #12
     864:	46bd      	mov	sp, r7
     866:	f85d 7b04 	ldr.w	r7, [sp], #4
     86a:	4770      	bx	lr

0000086c <sjsu::cortex::InterruptController::GetVector(int)>:
  static int IndexToIrq(int index)
  {
    return index - kArmIrqOffset;
  }

  static IsrPointer * GetVector(int irq)
     86c:	b580      	push	{r7, lr}
     86e:	b082      	sub	sp, #8
     870:	af00      	add	r7, sp, #0
     872:	6078      	str	r0, [r7, #4]
  {
    return &table.vector[IrqToIndex(irq)];
     874:	6878      	ldr	r0, [r7, #4]
     876:	f7ff ffed 	bl	854 <sjsu::cortex::InterruptController::IrqToIndex(int)>
     87a:	4603      	mov	r3, r0
     87c:	009b      	lsls	r3, r3, #2
     87e:	4a03      	ldr	r2, [pc, #12]	; (88c <sjsu::cortex::InterruptController::GetVector(int)+0x20>)
     880:	4413      	add	r3, r2
  }
     882:	4618      	mov	r0, r3
     884:	3708      	adds	r7, #8
     886:	46bd      	mov	sp, r7
     888:	bd80      	pop	{r7, pc}
     88a:	bf00      	nop
     88c:	100000f8 	.word	0x100000f8

00000890 <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const>:
    current_vector = active_isr;
    IsrPointer isr = table.vector[active_isr];
    isr();
  }

  void Register(RegistrationInfo_t register_info) const override
     890:	b084      	sub	sp, #16
     892:	b590      	push	{r4, r7, lr}
     894:	b085      	sub	sp, #20
     896:	af00      	add	r7, sp, #0
     898:	6078      	str	r0, [r7, #4]
     89a:	f107 0024 	add.w	r0, r7, #36	; 0x24
     89e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  {
    int irq         = register_info.interrupt_request_number;
     8a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     8a4:	60fb      	str	r3, [r7, #12]
    *GetVector(irq) = register_info.interrupt_service_routine;
     8a6:	6abc      	ldr	r4, [r7, #40]	; 0x28
     8a8:	68f8      	ldr	r0, [r7, #12]
     8aa:	f7ff ffdf 	bl	86c <sjsu::cortex::InterruptController::GetVector(int)>
     8ae:	4603      	mov	r3, r0
     8b0:	601c      	str	r4, [r3, #0]
    if (register_info.enable_interrupt && irq >= 0)
     8b2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
     8b6:	2b00      	cmp	r3, #0
     8b8:	d005      	beq.n	8c6 <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const+0x36>
     8ba:	68fb      	ldr	r3, [r7, #12]
     8bc:	2b00      	cmp	r3, #0
     8be:	db02      	blt.n	8c6 <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const+0x36>
    {
      NVIC_EnableIRQ(irq);
     8c0:	68f8      	ldr	r0, [r7, #12]
     8c2:	f7ff fd69 	bl	398 <NVIC_EnableIRQ>
    }
    if (register_info.priority > -1)
     8c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     8c8:	2b00      	cmp	r3, #0
     8ca:	db04      	blt.n	8d6 <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const+0x46>
    {
      NVIC_SetPriority(irq, register_info.priority);
     8cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     8ce:	4619      	mov	r1, r3
     8d0:	68f8      	ldr	r0, [r7, #12]
     8d2:	f7ff fd91 	bl	3f8 <NVIC_SetPriority>
    }
  }
     8d6:	bf00      	nop
     8d8:	3714      	adds	r7, #20
     8da:	46bd      	mov	sp, r7
     8dc:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
     8e0:	b004      	add	sp, #16
     8e2:	4770      	bx	lr

000008e4 <sjsu::cortex::InterruptController::Deregister(int) const>:

  void Deregister(int irq) const override
     8e4:	b580      	push	{r7, lr}
     8e6:	b082      	sub	sp, #8
     8e8:	af00      	add	r7, sp, #0
     8ea:	6078      	str	r0, [r7, #4]
     8ec:	6039      	str	r1, [r7, #0]
  {
    NVIC_DisableIRQ(irq);
     8ee:	6838      	ldr	r0, [r7, #0]
     8f0:	f7ff fd6a 	bl	3c8 <NVIC_DisableIRQ>
    *GetVector(irq) = UnregisteredInterruptHandler;
     8f4:	6838      	ldr	r0, [r7, #0]
     8f6:	f7ff ffb9 	bl	86c <sjsu::cortex::InterruptController::GetVector(int)>
     8fa:	4602      	mov	r2, r0
     8fc:	4b02      	ldr	r3, [pc, #8]	; (908 <sjsu::cortex::InterruptController::Deregister(int) const+0x24>)
     8fe:	6013      	str	r3, [r2, #0]
  }
     900:	bf00      	nop
     902:	3708      	adds	r7, #8
     904:	46bd      	mov	sp, r7
     906:	bd80      	pop	{r7, pc}
     908:	0000078d 	.word	0x0000078d

0000090c <sjsu::lpc40xx::Gpio::SetDirection(sjsu::Gpio::Direction) const>:
  {
    interupt_port_ = (port_number == 2) ? 1 : 0;
  }
  // Sets the GPIO pin direction as output or input depending on the
  // Direction enum parameter
  void SetDirection(Direction direction) const override
     90c:	b590      	push	{r4, r7, lr}
     90e:	b085      	sub	sp, #20
     910:	af00      	add	r7, sp, #0
     912:	6078      	str	r0, [r7, #4]
     914:	460b      	mov	r3, r1
     916:	70fb      	strb	r3, [r7, #3]
  {
    pin_.SetPinFunction(kGpioFunction);
     918:	687b      	ldr	r3, [r7, #4]
     91a:	3308      	adds	r3, #8
     91c:	2100      	movs	r1, #0
     91e:	4618      	mov	r0, r3
     920:	f7ff fda0 	bl	464 <sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const>
    volatile uint32_t * dir_register = &gpio_port[pin_.GetPort()]->DIR;
     924:	687b      	ldr	r3, [r7, #4]
     926:	3308      	adds	r3, #8
     928:	4618      	mov	r0, r3
     92a:	f7ff fd1d 	bl	368 <sjsu::Pin::GetPort() const>
     92e:	4603      	mov	r3, r0
     930:	461a      	mov	r2, r3
     932:	4b15      	ldr	r3, [pc, #84]	; (988 <sjsu::lpc40xx::Gpio::SetDirection(sjsu::Gpio::Direction) const+0x7c>)
     934:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
     938:	60fb      	str	r3, [r7, #12]

    if (direction == Direction::kInput)
     93a:	78fb      	ldrb	r3, [r7, #3]
     93c:	2b00      	cmp	r3, #0
     93e:	d10f      	bne.n	960 <sjsu::lpc40xx::Gpio::SetDirection(sjsu::Gpio::Direction) const+0x54>
    {
      *dir_register = bit::Clear(*dir_register, pin_.GetPin());
     940:	68fb      	ldr	r3, [r7, #12]
     942:	681c      	ldr	r4, [r3, #0]
     944:	687b      	ldr	r3, [r7, #4]
     946:	3308      	adds	r3, #8
     948:	4618      	mov	r0, r3
     94a:	f7ff fd19 	bl	380 <sjsu::Pin::GetPin() const>
     94e:	4603      	mov	r3, r0
     950:	4619      	mov	r1, r3
     952:	4620      	mov	r0, r4
     954:	f000 fe88 	bl	1668 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>
     958:	4602      	mov	r2, r0
     95a:	68fb      	ldr	r3, [r7, #12]
     95c:	601a      	str	r2, [r3, #0]
    }
    else
    {
      *dir_register = bit::Set(*dir_register, pin_.GetPin());
    }
  }
     95e:	e00e      	b.n	97e <sjsu::lpc40xx::Gpio::SetDirection(sjsu::Gpio::Direction) const+0x72>
      *dir_register = bit::Set(*dir_register, pin_.GetPin());
     960:	68fb      	ldr	r3, [r7, #12]
     962:	681c      	ldr	r4, [r3, #0]
     964:	687b      	ldr	r3, [r7, #4]
     966:	3308      	adds	r3, #8
     968:	4618      	mov	r0, r3
     96a:	f7ff fd09 	bl	380 <sjsu::Pin::GetPin() const>
     96e:	4603      	mov	r3, r0
     970:	4619      	mov	r1, r3
     972:	4620      	mov	r0, r4
     974:	f000 fe8b 	bl	168e <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
     978:	4602      	mov	r2, r0
     97a:	68fb      	ldr	r3, [r7, #12]
     97c:	601a      	str	r2, [r3, #0]
  }
     97e:	bf00      	nop
     980:	3714      	adds	r7, #20
     982:	46bd      	mov	sp, r7
     984:	bd90      	pop	{r4, r7, pc}
     986:	bf00      	nop
     988:	100001f8 	.word	0x100001f8

0000098c <sjsu::lpc40xx::Gpio::Set(sjsu::Gpio::State) const>:
  // Sets the GPIO output pin to high or low depending on the State enum
  // parameter
  void Set(State output = kHigh) const override
     98c:	b590      	push	{r4, r7, lr}
     98e:	b083      	sub	sp, #12
     990:	af00      	add	r7, sp, #0
     992:	6078      	str	r0, [r7, #4]
     994:	460b      	mov	r3, r1
     996:	70fb      	strb	r3, [r7, #3]
  {
    if (output == State::kHigh)
     998:	78fb      	ldrb	r3, [r7, #3]
     99a:	2b01      	cmp	r3, #1
     99c:	d115      	bne.n	9ca <sjsu::lpc40xx::Gpio::Set(sjsu::Gpio::State) const+0x3e>
    {
      gpio_port[pin_.GetPort()]->SET = (1 << pin_.GetPin());
     99e:	687b      	ldr	r3, [r7, #4]
     9a0:	3308      	adds	r3, #8
     9a2:	4618      	mov	r0, r3
     9a4:	f7ff fcec 	bl	380 <sjsu::Pin::GetPin() const>
     9a8:	4603      	mov	r3, r0
     9aa:	461a      	mov	r2, r3
     9ac:	2301      	movs	r3, #1
     9ae:	4093      	lsls	r3, r2
     9b0:	461c      	mov	r4, r3
     9b2:	687b      	ldr	r3, [r7, #4]
     9b4:	3308      	adds	r3, #8
     9b6:	4618      	mov	r0, r3
     9b8:	f7ff fcd6 	bl	368 <sjsu::Pin::GetPort() const>
     9bc:	4603      	mov	r3, r0
     9be:	461a      	mov	r2, r3
     9c0:	4b0e      	ldr	r3, [pc, #56]	; (9fc <sjsu::lpc40xx::Gpio::Set(sjsu::Gpio::State) const+0x70>)
     9c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
     9c6:	619c      	str	r4, [r3, #24]
    }
    else
    {
      gpio_port[pin_.GetPort()]->CLR = (1 << pin_.GetPin());
    }
  }
     9c8:	e014      	b.n	9f4 <sjsu::lpc40xx::Gpio::Set(sjsu::Gpio::State) const+0x68>
      gpio_port[pin_.GetPort()]->CLR = (1 << pin_.GetPin());
     9ca:	687b      	ldr	r3, [r7, #4]
     9cc:	3308      	adds	r3, #8
     9ce:	4618      	mov	r0, r3
     9d0:	f7ff fcd6 	bl	380 <sjsu::Pin::GetPin() const>
     9d4:	4603      	mov	r3, r0
     9d6:	461a      	mov	r2, r3
     9d8:	2301      	movs	r3, #1
     9da:	4093      	lsls	r3, r2
     9dc:	461c      	mov	r4, r3
     9de:	687b      	ldr	r3, [r7, #4]
     9e0:	3308      	adds	r3, #8
     9e2:	4618      	mov	r0, r3
     9e4:	f7ff fcc0 	bl	368 <sjsu::Pin::GetPort() const>
     9e8:	4603      	mov	r3, r0
     9ea:	461a      	mov	r2, r3
     9ec:	4b03      	ldr	r3, [pc, #12]	; (9fc <sjsu::lpc40xx::Gpio::Set(sjsu::Gpio::State) const+0x70>)
     9ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
     9f2:	61dc      	str	r4, [r3, #28]
  }
     9f4:	bf00      	nop
     9f6:	370c      	adds	r7, #12
     9f8:	46bd      	mov	sp, r7
     9fa:	bd90      	pop	{r4, r7, pc}
     9fc:	100001f8 	.word	0x100001f8

00000a00 <sjsu::lpc40xx::Gpio::Toggle() const>:
  // Toggle the output of a GPIO output pin
  void Toggle() const override
     a00:	b590      	push	{r4, r7, lr}
     a02:	b083      	sub	sp, #12
     a04:	af00      	add	r7, sp, #0
     a06:	6078      	str	r0, [r7, #4]
  {
    gpio_port[pin_.GetPort()]->PIN ^= (1 << pin_.GetPin());
     a08:	687b      	ldr	r3, [r7, #4]
     a0a:	3308      	adds	r3, #8
     a0c:	4618      	mov	r0, r3
     a0e:	f7ff fcb7 	bl	380 <sjsu::Pin::GetPin() const>
     a12:	4603      	mov	r3, r0
     a14:	461a      	mov	r2, r3
     a16:	2301      	movs	r3, #1
     a18:	fa03 f402 	lsl.w	r4, r3, r2
     a1c:	687b      	ldr	r3, [r7, #4]
     a1e:	3308      	adds	r3, #8
     a20:	4618      	mov	r0, r3
     a22:	f7ff fca1 	bl	368 <sjsu::Pin::GetPort() const>
     a26:	4603      	mov	r3, r0
     a28:	461a      	mov	r2, r3
     a2a:	4b05      	ldr	r3, [pc, #20]	; (a40 <sjsu::lpc40xx::Gpio::Toggle() const+0x40>)
     a2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
     a30:	695a      	ldr	r2, [r3, #20]
     a32:	4621      	mov	r1, r4
     a34:	404a      	eors	r2, r1
     a36:	615a      	str	r2, [r3, #20]
  }
     a38:	bf00      	nop
     a3a:	370c      	adds	r7, #12
     a3c:	46bd      	mov	sp, r7
     a3e:	bd90      	pop	{r4, r7, pc}
     a40:	100001f8 	.word	0x100001f8

00000a44 <sjsu::lpc40xx::Gpio::Read() const>:
  // Returns the current State state of the pin
  bool Read() const override
     a44:	b590      	push	{r4, r7, lr}
     a46:	b083      	sub	sp, #12
     a48:	af00      	add	r7, sp, #0
     a4a:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(gpio_port[pin_.GetPort()]->PIN, pin_.GetPin());
     a4c:	687b      	ldr	r3, [r7, #4]
     a4e:	3308      	adds	r3, #8
     a50:	4618      	mov	r0, r3
     a52:	f7ff fc89 	bl	368 <sjsu::Pin::GetPort() const>
     a56:	4603      	mov	r3, r0
     a58:	461a      	mov	r2, r3
     a5a:	4b09      	ldr	r3, [pc, #36]	; (a80 <sjsu::lpc40xx::Gpio::Read() const+0x3c>)
     a5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
     a60:	695c      	ldr	r4, [r3, #20]
     a62:	687b      	ldr	r3, [r7, #4]
     a64:	3308      	adds	r3, #8
     a66:	4618      	mov	r0, r3
     a68:	f7ff fc8a 	bl	380 <sjsu::Pin::GetPin() const>
     a6c:	4603      	mov	r3, r0
     a6e:	4619      	mov	r1, r3
     a70:	4620      	mov	r0, r4
     a72:	f000 fe1e 	bl	16b2 <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>
     a76:	4603      	mov	r3, r0
  }
     a78:	4618      	mov	r0, r3
     a7a:	370c      	adds	r7, #12
     a7c:	46bd      	mov	sp, r7
     a7e:	bd90      	pop	{r4, r7, pc}
     a80:	100001f8 	.word	0x100001f8

00000a84 <sjsu::lpc40xx::Gpio::GetPin() const>:
  const sjsu::Pin & GetPin() const override
     a84:	b480      	push	{r7}
     a86:	b083      	sub	sp, #12
     a88:	af00      	add	r7, sp, #0
     a8a:	6078      	str	r0, [r7, #4]
  {
    return pin_;
     a8c:	687b      	ldr	r3, [r7, #4]
     a8e:	3308      	adds	r3, #8
  }
     a90:	4618      	mov	r0, r3
     a92:	370c      	adds	r7, #12
     a94:	46bd      	mov	sp, r7
     a96:	f85d 7b04 	ldr.w	r7, [sp], #4
     a9a:	4770      	bx	lr

00000a9c <sjsu::lpc40xx::Gpio::ValidPortCheck() const>:

  // Checks if the selected gpio port is valid for external interrupts.
  bool ValidPortCheck() const
     a9c:	b580      	push	{r7, lr}
     a9e:	b086      	sub	sp, #24
     aa0:	af02      	add	r7, sp, #8
     aa2:	6078      	str	r0, [r7, #4]
  {
    bool is_valid = (interupt_port_ <= 1);
     aa4:	687b      	ldr	r3, [r7, #4]
     aa6:	791b      	ldrb	r3, [r3, #4]
     aa8:	2b01      	cmp	r3, #1
     aaa:	bf94      	ite	ls
     aac:	2301      	movls	r3, #1
     aae:	2300      	movhi	r3, #0
     ab0:	b2db      	uxtb	r3, r3
     ab2:	73fb      	strb	r3, [r7, #15]
    SJ2_ASSERT_WARNING(is_valid,
     ab4:	7bfb      	ldrb	r3, [r7, #15]
     ab6:	f083 0301 	eor.w	r3, r3, #1
     aba:	b2db      	uxtb	r3, r3
     abc:	2b00      	cmp	r3, #0
     abe:	d00c      	beq.n	ada <sjsu::lpc40xx::Gpio::ValidPortCheck() const+0x3e>
     ac0:	687b      	ldr	r3, [r7, #4]
     ac2:	3308      	adds	r3, #8
     ac4:	4618      	mov	r0, r3
     ac6:	f7ff fc4f 	bl	368 <sjsu::Pin::GetPort() const>
     aca:	4603      	mov	r3, r0
     acc:	9300      	str	r3, [sp, #0]
     ace:	237d      	movs	r3, #125	; 0x7d
     ad0:	4a04      	ldr	r2, [pc, #16]	; (ae4 <sjsu::lpc40xx::Gpio::ValidPortCheck() const+0x48>)
     ad2:	4905      	ldr	r1, [pc, #20]	; (ae8 <sjsu::lpc40xx::Gpio::ValidPortCheck() const+0x4c>)
     ad4:	4805      	ldr	r0, [pc, #20]	; (aec <sjsu::lpc40xx::Gpio::ValidPortCheck() const+0x50>)
     ad6:	f002 fac7 	bl	3068 <printf>
                       "Port %d cannot be used for External Interrupts. Need "
                       "to use GPIO on Port 0 or 2.",
                       pin_.GetPort());
    return is_valid;
     ada:	7bfb      	ldrb	r3, [r7, #15]
  }
     adc:	4618      	mov	r0, r3
     ade:	3710      	adds	r7, #16
     ae0:	46bd      	mov	sp, r7
     ae2:	bd80      	pop	{r7, pc}
     ae4:	000066b4 	.word	0x000066b4
     ae8:	000065ac 	.word	0x000065ac
     aec:	000061e0 	.word	0x000061e0

00000af0 <sjsu::lpc40xx::Gpio::SetInterruptRoutine(void (*)()) const>:

  // Assigns the developer's ISR function to the port/pin gpio instance.
  void SetInterruptRoutine(IsrPointer function) const
     af0:	b5b0      	push	{r4, r5, r7, lr}
     af2:	b082      	sub	sp, #8
     af4:	af00      	add	r7, sp, #0
     af6:	6078      	str	r0, [r7, #4]
     af8:	6039      	str	r1, [r7, #0]
  {
    ValidPortCheck();
     afa:	6878      	ldr	r0, [r7, #4]
     afc:	f7ff ffce 	bl	a9c <sjsu::lpc40xx::Gpio::ValidPortCheck() const>
    interrupthandlers[interupt_port_][pin_.GetPin()] = function;
     b00:	683c      	ldr	r4, [r7, #0]
     b02:	687b      	ldr	r3, [r7, #4]
     b04:	791b      	ldrb	r3, [r3, #4]
     b06:	461d      	mov	r5, r3
     b08:	687b      	ldr	r3, [r7, #4]
     b0a:	3308      	adds	r3, #8
     b0c:	4618      	mov	r0, r3
     b0e:	f7ff fc37 	bl	380 <sjsu::Pin::GetPin() const>
     b12:	4603      	mov	r3, r0
     b14:	4619      	mov	r1, r3
     b16:	4a04      	ldr	r2, [pc, #16]	; (b28 <sjsu::lpc40xx::Gpio::SetInterruptRoutine(void (*)()) const+0x38>)
     b18:	016b      	lsls	r3, r5, #5
     b1a:	440b      	add	r3, r1
     b1c:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
  }
     b20:	bf00      	nop
     b22:	3708      	adds	r7, #8
     b24:	46bd      	mov	sp, r7
     b26:	bdb0      	pop	{r4, r5, r7, pc}
     b28:	10000210 	.word	0x10000210

00000b2c <sjsu::lpc40xx::Gpio::ClearInterruptRoutine() const>:

  // Clears the developers ISR function from the port/pin gio instance.
  void ClearInterruptRoutine() const
     b2c:	b590      	push	{r4, r7, lr}
     b2e:	b083      	sub	sp, #12
     b30:	af00      	add	r7, sp, #0
     b32:	6078      	str	r0, [r7, #4]
  {
    interrupthandlers[interupt_port_][pin_.GetPin()] = nullptr;
     b34:	687b      	ldr	r3, [r7, #4]
     b36:	791b      	ldrb	r3, [r3, #4]
     b38:	461c      	mov	r4, r3
     b3a:	687b      	ldr	r3, [r7, #4]
     b3c:	3308      	adds	r3, #8
     b3e:	4618      	mov	r0, r3
     b40:	f7ff fc1e 	bl	380 <sjsu::Pin::GetPin() const>
     b44:	4603      	mov	r3, r0
     b46:	4619      	mov	r1, r3
     b48:	4a04      	ldr	r2, [pc, #16]	; (b5c <sjsu::lpc40xx::Gpio::ClearInterruptRoutine() const+0x30>)
     b4a:	0163      	lsls	r3, r4, #5
     b4c:	440b      	add	r3, r1
     b4e:	2100      	movs	r1, #0
     b50:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  }
     b54:	bf00      	nop
     b56:	370c      	adds	r7, #12
     b58:	46bd      	mov	sp, r7
     b5a:	bd90      	pop	{r4, r7, pc}
     b5c:	10000210 	.word	0x10000210

00000b60 <unsigned char sjsu::util::Value<sjsu::Gpio::Edge, unsigned char>(sjsu::Gpio::Edge)>:
//
// @param enum_type_value variable you would like to get the value of.
// @return the value of the enum class type variable of with the underlying
//         type of the enum class.
template <typename Enum, typename Type = typename std::underlying_type_t<Enum>>
constexpr Type Value(Enum enum_type_value)
     b60:	b480      	push	{r7}
     b62:	b083      	sub	sp, #12
     b64:	af00      	add	r7, sp, #0
     b66:	4603      	mov	r3, r0
     b68:	71fb      	strb	r3, [r7, #7]
{
  return static_cast<Type>(enum_type_value);
     b6a:	79fb      	ldrb	r3, [r7, #7]
}
     b6c:	4618      	mov	r0, r3
     b6e:	370c      	adds	r7, #12
     b70:	46bd      	mov	sp, r7
     b72:	f85d 7b04 	ldr.w	r7, [sp], #4
     b76:	4770      	bx	lr

00000b78 <sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const>:

  // Sets the selected edge that the gpio interrupt will be triggered on.
  void SetInterruptEdge(Edge edge) const
     b78:	b580      	push	{r7, lr}
     b7a:	b084      	sub	sp, #16
     b7c:	af02      	add	r7, sp, #8
     b7e:	6078      	str	r0, [r7, #4]
     b80:	460b      	mov	r3, r1
     b82:	70fb      	strb	r3, [r7, #3]
  {
    ValidPortCheck();
     b84:	6878      	ldr	r0, [r7, #4]
     b86:	f7ff ff89 	bl	a9c <sjsu::lpc40xx::Gpio::ValidPortCheck() const>
    switch (edge)
     b8a:	78fb      	ldrb	r3, [r7, #3]
     b8c:	2b01      	cmp	r3, #1
     b8e:	d008      	beq.n	ba2 <sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const+0x2a>
     b90:	2b01      	cmp	r3, #1
     b92:	d302      	bcc.n	b9a <sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const+0x22>
     b94:	2b02      	cmp	r3, #2
     b96:	d008      	beq.n	baa <sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const+0x32>
     b98:	e00e      	b.n	bb8 <sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const+0x40>
    {
      case Edge::kEdgeRising:
      {
        SetEdgeRising();
     b9a:	6878      	ldr	r0, [r7, #4]
     b9c:	f000 f84e 	bl	c3c <sjsu::lpc40xx::Gpio::SetEdgeRising() const>
        break;
     ba0:	e016      	b.n	bd0 <sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const+0x58>
      }
      case Edge::kEdgeFalling:
      {
        SetEdgeFalling();
     ba2:	6878      	ldr	r0, [r7, #4]
     ba4:	f000 f878 	bl	c98 <sjsu::lpc40xx::Gpio::SetEdgeFalling() const>
        break;
     ba8:	e012      	b.n	bd0 <sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const+0x58>
      }
      case Edge::kEdgeBoth:
      {
        SetEdgeRising();
     baa:	6878      	ldr	r0, [r7, #4]
     bac:	f000 f846 	bl	c3c <sjsu::lpc40xx::Gpio::SetEdgeRising() const>
        SetEdgeFalling();
     bb0:	6878      	ldr	r0, [r7, #4]
     bb2:	f000 f871 	bl	c98 <sjsu::lpc40xx::Gpio::SetEdgeFalling() const>
        break;
     bb6:	e00b      	b.n	bd0 <sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const+0x58>
      }
      default:
      {
        LOG_WARNING(
     bb8:	78fb      	ldrb	r3, [r7, #3]
     bba:	4618      	mov	r0, r3
     bbc:	f7ff ffd0 	bl	b60 <unsigned char sjsu::util::Value<sjsu::Gpio::Edge, unsigned char>(sjsu::Gpio::Edge)>
     bc0:	4603      	mov	r3, r0
     bc2:	9300      	str	r3, [sp, #0]
     bc4:	23a9      	movs	r3, #169	; 0xa9
     bc6:	4a04      	ldr	r2, [pc, #16]	; (bd8 <sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const+0x60>)
     bc8:	4904      	ldr	r1, [pc, #16]	; (bdc <sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const+0x64>)
     bca:	4805      	ldr	r0, [pc, #20]	; (be0 <sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const+0x68>)
     bcc:	f002 fa4c 	bl	3068 <printf>
            "Edge %d cannot be used for External Interrupts."
            "Need to use a rising, falling, or both configuration.",
            util::Value(edge));
      }
    }
  }
     bd0:	bf00      	nop
     bd2:	3708      	adds	r7, #8
     bd4:	46bd      	mov	sp, r7
     bd6:	bd80      	pop	{r7, pc}
     bd8:	000066e8 	.word	0x000066e8
     bdc:	000065b8 	.word	0x000065b8
     be0:	00006270 	.word	0x00006270

00000be4 <sjsu::lpc40xx::Gpio::AttachInterrupt(void (*)(), sjsu::Gpio::Edge) const>:
    }
  }

  // Assign the developer's ISR and sets the selected edge that the gpio
  // interrupt will be triggered on.
  void AttachInterrupt(IsrPointer function, Edge edge) const override
     be4:	b580      	push	{r7, lr}
     be6:	b084      	sub	sp, #16
     be8:	af00      	add	r7, sp, #0
     bea:	60f8      	str	r0, [r7, #12]
     bec:	60b9      	str	r1, [r7, #8]
     bee:	4613      	mov	r3, r2
     bf0:	71fb      	strb	r3, [r7, #7]
  {
    ValidPortCheck();
     bf2:	68f8      	ldr	r0, [r7, #12]
     bf4:	f7ff ff52 	bl	a9c <sjsu::lpc40xx::Gpio::ValidPortCheck() const>
    SetInterruptRoutine(function);
     bf8:	68b9      	ldr	r1, [r7, #8]
     bfa:	68f8      	ldr	r0, [r7, #12]
     bfc:	f7ff ff78 	bl	af0 <sjsu::lpc40xx::Gpio::SetInterruptRoutine(void (*)()) const>
    SetInterruptEdge(edge);
     c00:	79fb      	ldrb	r3, [r7, #7]
     c02:	4619      	mov	r1, r3
     c04:	68f8      	ldr	r0, [r7, #12]
     c06:	f7ff ffb7 	bl	b78 <sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const>
  }
     c0a:	bf00      	nop
     c0c:	3710      	adds	r7, #16
     c0e:	46bd      	mov	sp, r7
     c10:	bd80      	pop	{r7, pc}

00000c12 <sjsu::lpc40xx::Gpio::DetachInterrupt() const>:

  // Removes the developer's ISR and clears the selected edge of the gpio
  // interrupt from being triggered.
  void DetachInterrupt() const override
     c12:	b580      	push	{r7, lr}
     c14:	b082      	sub	sp, #8
     c16:	af00      	add	r7, sp, #0
     c18:	6078      	str	r0, [r7, #4]
  {
    ValidPortCheck();
     c1a:	6878      	ldr	r0, [r7, #4]
     c1c:	f7ff ff3e 	bl	a9c <sjsu::lpc40xx::Gpio::ValidPortCheck() const>
    ClearInterruptRoutine();
     c20:	6878      	ldr	r0, [r7, #4]
     c22:	f7ff ff83 	bl	b2c <sjsu::lpc40xx::Gpio::ClearInterruptRoutine() const>
    ClearEdgeRising();
     c26:	6878      	ldr	r0, [r7, #4]
     c28:	f000 f864 	bl	cf4 <sjsu::lpc40xx::Gpio::ClearEdgeRising() const>
    ClearEdgeFalling();
     c2c:	6878      	ldr	r0, [r7, #4]
     c2e:	f000 f88f 	bl	d50 <sjsu::lpc40xx::Gpio::ClearEdgeFalling() const>
  }
     c32:	bf00      	nop
     c34:	3708      	adds	r7, #8
     c36:	46bd      	mov	sp, r7
     c38:	bd80      	pop	{r7, pc}
     c3a:	Address 0x0000000000000c3a is out of bounds.


00000c3c <sjsu::lpc40xx::Gpio::SetEdgeRising() const>:
    *interrupt[triggered_port].clear |= (1 << triggered_pin);
  }

 private:
  // Sets the gpio interrupt to trigger on a rising edge.
  void SetEdgeRising() const
     c3c:	b590      	push	{r4, r7, lr}
     c3e:	b083      	sub	sp, #12
     c40:	af00      	add	r7, sp, #0
     c42:	6078      	str	r0, [r7, #4]
  {
    *interrupt[interupt_port_].enable_rising_edge |= (1 << pin_.GetPin());
     c44:	687b      	ldr	r3, [r7, #4]
     c46:	3308      	adds	r3, #8
     c48:	4618      	mov	r0, r3
     c4a:	f7ff fb99 	bl	380 <sjsu::Pin::GetPin() const>
     c4e:	4603      	mov	r3, r0
     c50:	461a      	mov	r2, r3
     c52:	2301      	movs	r3, #1
     c54:	fa03 f002 	lsl.w	r0, r3, r2
     c58:	687b      	ldr	r3, [r7, #4]
     c5a:	791b      	ldrb	r3, [r3, #4]
     c5c:	4619      	mov	r1, r3
     c5e:	4a0d      	ldr	r2, [pc, #52]	; (c94 <sjsu::lpc40xx::Gpio::SetEdgeRising() const+0x58>)
     c60:	460b      	mov	r3, r1
     c62:	009b      	lsls	r3, r3, #2
     c64:	440b      	add	r3, r1
     c66:	009b      	lsls	r3, r3, #2
     c68:	4413      	add	r3, r2
     c6a:	330c      	adds	r3, #12
     c6c:	681b      	ldr	r3, [r3, #0]
     c6e:	681a      	ldr	r2, [r3, #0]
     c70:	4604      	mov	r4, r0
     c72:	687b      	ldr	r3, [r7, #4]
     c74:	791b      	ldrb	r3, [r3, #4]
     c76:	4618      	mov	r0, r3
     c78:	4906      	ldr	r1, [pc, #24]	; (c94 <sjsu::lpc40xx::Gpio::SetEdgeRising() const+0x58>)
     c7a:	4603      	mov	r3, r0
     c7c:	009b      	lsls	r3, r3, #2
     c7e:	4403      	add	r3, r0
     c80:	009b      	lsls	r3, r3, #2
     c82:	440b      	add	r3, r1
     c84:	330c      	adds	r3, #12
     c86:	681b      	ldr	r3, [r3, #0]
     c88:	4322      	orrs	r2, r4
     c8a:	601a      	str	r2, [r3, #0]
  }
     c8c:	bf00      	nop
     c8e:	370c      	adds	r7, #12
     c90:	46bd      	mov	sp, r7
     c92:	bd90      	pop	{r4, r7, pc}
     c94:	10000310 	.word	0x10000310

00000c98 <sjsu::lpc40xx::Gpio::SetEdgeFalling() const>:

  // Sets the gpio interrupt to trigger on a falling edge.
  void SetEdgeFalling() const
     c98:	b590      	push	{r4, r7, lr}
     c9a:	b083      	sub	sp, #12
     c9c:	af00      	add	r7, sp, #0
     c9e:	6078      	str	r0, [r7, #4]
  {
    *interrupt[interupt_port_].enable_falling_edge |= (1 << pin_.GetPin());
     ca0:	687b      	ldr	r3, [r7, #4]
     ca2:	3308      	adds	r3, #8
     ca4:	4618      	mov	r0, r3
     ca6:	f7ff fb6b 	bl	380 <sjsu::Pin::GetPin() const>
     caa:	4603      	mov	r3, r0
     cac:	461a      	mov	r2, r3
     cae:	2301      	movs	r3, #1
     cb0:	fa03 f002 	lsl.w	r0, r3, r2
     cb4:	687b      	ldr	r3, [r7, #4]
     cb6:	791b      	ldrb	r3, [r3, #4]
     cb8:	4619      	mov	r1, r3
     cba:	4a0d      	ldr	r2, [pc, #52]	; (cf0 <sjsu::lpc40xx::Gpio::SetEdgeFalling() const+0x58>)
     cbc:	460b      	mov	r3, r1
     cbe:	009b      	lsls	r3, r3, #2
     cc0:	440b      	add	r3, r1
     cc2:	009b      	lsls	r3, r3, #2
     cc4:	4413      	add	r3, r2
     cc6:	3310      	adds	r3, #16
     cc8:	681b      	ldr	r3, [r3, #0]
     cca:	681a      	ldr	r2, [r3, #0]
     ccc:	4604      	mov	r4, r0
     cce:	687b      	ldr	r3, [r7, #4]
     cd0:	791b      	ldrb	r3, [r3, #4]
     cd2:	4618      	mov	r0, r3
     cd4:	4906      	ldr	r1, [pc, #24]	; (cf0 <sjsu::lpc40xx::Gpio::SetEdgeFalling() const+0x58>)
     cd6:	4603      	mov	r3, r0
     cd8:	009b      	lsls	r3, r3, #2
     cda:	4403      	add	r3, r0
     cdc:	009b      	lsls	r3, r3, #2
     cde:	440b      	add	r3, r1
     ce0:	3310      	adds	r3, #16
     ce2:	681b      	ldr	r3, [r3, #0]
     ce4:	4322      	orrs	r2, r4
     ce6:	601a      	str	r2, [r3, #0]
  }
     ce8:	bf00      	nop
     cea:	370c      	adds	r7, #12
     cec:	46bd      	mov	sp, r7
     cee:	bd90      	pop	{r4, r7, pc}
     cf0:	10000310 	.word	0x10000310

00000cf4 <sjsu::lpc40xx::Gpio::ClearEdgeRising() const>:

  // Clears the gpio interrupt to no longer trigger on a rising edge.
  void ClearEdgeRising() const
     cf4:	b590      	push	{r4, r7, lr}
     cf6:	b083      	sub	sp, #12
     cf8:	af00      	add	r7, sp, #0
     cfa:	6078      	str	r0, [r7, #4]
  {
    *interrupt[interupt_port_].enable_rising_edge &= ~(1 << pin_.GetPin());
     cfc:	687b      	ldr	r3, [r7, #4]
     cfe:	3308      	adds	r3, #8
     d00:	4618      	mov	r0, r3
     d02:	f7ff fb3d 	bl	380 <sjsu::Pin::GetPin() const>
     d06:	4603      	mov	r3, r0
     d08:	461a      	mov	r2, r3
     d0a:	2301      	movs	r3, #1
     d0c:	4093      	lsls	r3, r2
     d0e:	43d8      	mvns	r0, r3
     d10:	687b      	ldr	r3, [r7, #4]
     d12:	791b      	ldrb	r3, [r3, #4]
     d14:	4619      	mov	r1, r3
     d16:	4a0d      	ldr	r2, [pc, #52]	; (d4c <sjsu::lpc40xx::Gpio::ClearEdgeRising() const+0x58>)
     d18:	460b      	mov	r3, r1
     d1a:	009b      	lsls	r3, r3, #2
     d1c:	440b      	add	r3, r1
     d1e:	009b      	lsls	r3, r3, #2
     d20:	4413      	add	r3, r2
     d22:	330c      	adds	r3, #12
     d24:	681b      	ldr	r3, [r3, #0]
     d26:	681a      	ldr	r2, [r3, #0]
     d28:	4604      	mov	r4, r0
     d2a:	687b      	ldr	r3, [r7, #4]
     d2c:	791b      	ldrb	r3, [r3, #4]
     d2e:	4618      	mov	r0, r3
     d30:	4906      	ldr	r1, [pc, #24]	; (d4c <sjsu::lpc40xx::Gpio::ClearEdgeRising() const+0x58>)
     d32:	4603      	mov	r3, r0
     d34:	009b      	lsls	r3, r3, #2
     d36:	4403      	add	r3, r0
     d38:	009b      	lsls	r3, r3, #2
     d3a:	440b      	add	r3, r1
     d3c:	330c      	adds	r3, #12
     d3e:	681b      	ldr	r3, [r3, #0]
     d40:	4022      	ands	r2, r4
     d42:	601a      	str	r2, [r3, #0]
  }
     d44:	bf00      	nop
     d46:	370c      	adds	r7, #12
     d48:	46bd      	mov	sp, r7
     d4a:	bd90      	pop	{r4, r7, pc}
     d4c:	10000310 	.word	0x10000310

00000d50 <sjsu::lpc40xx::Gpio::ClearEdgeFalling() const>:

  // Clears the gpio interrupt to no longer trigger on a falling edge.
  void ClearEdgeFalling() const
     d50:	b590      	push	{r4, r7, lr}
     d52:	b083      	sub	sp, #12
     d54:	af00      	add	r7, sp, #0
     d56:	6078      	str	r0, [r7, #4]
  {
    *interrupt[interupt_port_].enable_falling_edge &= ~(1 << pin_.GetPin());
     d58:	687b      	ldr	r3, [r7, #4]
     d5a:	3308      	adds	r3, #8
     d5c:	4618      	mov	r0, r3
     d5e:	f7ff fb0f 	bl	380 <sjsu::Pin::GetPin() const>
     d62:	4603      	mov	r3, r0
     d64:	461a      	mov	r2, r3
     d66:	2301      	movs	r3, #1
     d68:	4093      	lsls	r3, r2
     d6a:	43d8      	mvns	r0, r3
     d6c:	687b      	ldr	r3, [r7, #4]
     d6e:	791b      	ldrb	r3, [r3, #4]
     d70:	4619      	mov	r1, r3
     d72:	4a0d      	ldr	r2, [pc, #52]	; (da8 <sjsu::lpc40xx::Gpio::ClearEdgeFalling() const+0x58>)
     d74:	460b      	mov	r3, r1
     d76:	009b      	lsls	r3, r3, #2
     d78:	440b      	add	r3, r1
     d7a:	009b      	lsls	r3, r3, #2
     d7c:	4413      	add	r3, r2
     d7e:	3310      	adds	r3, #16
     d80:	681b      	ldr	r3, [r3, #0]
     d82:	681a      	ldr	r2, [r3, #0]
     d84:	4604      	mov	r4, r0
     d86:	687b      	ldr	r3, [r7, #4]
     d88:	791b      	ldrb	r3, [r3, #4]
     d8a:	4618      	mov	r0, r3
     d8c:	4906      	ldr	r1, [pc, #24]	; (da8 <sjsu::lpc40xx::Gpio::ClearEdgeFalling() const+0x58>)
     d8e:	4603      	mov	r3, r0
     d90:	009b      	lsls	r3, r3, #2
     d92:	4403      	add	r3, r0
     d94:	009b      	lsls	r3, r3, #2
     d96:	440b      	add	r3, r1
     d98:	3310      	adds	r3, #16
     d9a:	681b      	ldr	r3, [r3, #0]
     d9c:	4022      	ands	r2, r4
     d9e:	601a      	str	r2, [r3, #0]
  }
     da0:	bf00      	nop
     da2:	370c      	adds	r7, #12
     da4:	46bd      	mov	sp, r7
     da6:	bd90      	pop	{r4, r7, pc}
     da8:	10000310 	.word	0x10000310

00000dac <Bus::Initialize()>:
	{
		kMemory = 0,
		kIO
	};

	void Initialize()
     dac:	b580      	push	{r7, lr}
     dae:	b082      	sub	sp, #8
     db0:	af00      	add	r7, sp, #0
     db2:	6078      	str	r0, [r7, #4]
	{
		//Setting each pin as Open Drain

		ad[0].GetPin().SetAsOpenDrain();
     db4:	687b      	ldr	r3, [r7, #4]
     db6:	4618      	mov	r0, r3
     db8:	f7ff fe64 	bl	a84 <sjsu::lpc40xx::Gpio::GetPin() const>
     dbc:	4602      	mov	r2, r0
     dbe:	6813      	ldr	r3, [r2, #0]
     dc0:	3308      	adds	r3, #8
     dc2:	681b      	ldr	r3, [r3, #0]
     dc4:	2101      	movs	r1, #1
     dc6:	4610      	mov	r0, r2
     dc8:	4798      	blx	r3
		ad[1].GetPin().SetAsOpenDrain();
     dca:	687b      	ldr	r3, [r7, #4]
     dcc:	3314      	adds	r3, #20
     dce:	4618      	mov	r0, r3
     dd0:	f7ff fe58 	bl	a84 <sjsu::lpc40xx::Gpio::GetPin() const>
     dd4:	4602      	mov	r2, r0
     dd6:	6813      	ldr	r3, [r2, #0]
     dd8:	3308      	adds	r3, #8
     dda:	681b      	ldr	r3, [r3, #0]
     ddc:	2101      	movs	r1, #1
     dde:	4610      	mov	r0, r2
     de0:	4798      	blx	r3
		ad[2].GetPin().SetAsOpenDrain();
     de2:	687b      	ldr	r3, [r7, #4]
     de4:	3328      	adds	r3, #40	; 0x28
     de6:	4618      	mov	r0, r3
     de8:	f7ff fe4c 	bl	a84 <sjsu::lpc40xx::Gpio::GetPin() const>
     dec:	4602      	mov	r2, r0
     dee:	6813      	ldr	r3, [r2, #0]
     df0:	3308      	adds	r3, #8
     df2:	681b      	ldr	r3, [r3, #0]
     df4:	2101      	movs	r1, #1
     df6:	4610      	mov	r0, r2
     df8:	4798      	blx	r3
		ad[3].GetPin().SetAsOpenDrain();
     dfa:	687b      	ldr	r3, [r7, #4]
     dfc:	333c      	adds	r3, #60	; 0x3c
     dfe:	4618      	mov	r0, r3
     e00:	f7ff fe40 	bl	a84 <sjsu::lpc40xx::Gpio::GetPin() const>
     e04:	4602      	mov	r2, r0
     e06:	6813      	ldr	r3, [r2, #0]
     e08:	3308      	adds	r3, #8
     e0a:	681b      	ldr	r3, [r3, #0]
     e0c:	2101      	movs	r1, #1
     e0e:	4610      	mov	r0, r2
     e10:	4798      	blx	r3
		ad[4].GetPin().SetAsOpenDrain();
     e12:	687b      	ldr	r3, [r7, #4]
     e14:	3350      	adds	r3, #80	; 0x50
     e16:	4618      	mov	r0, r3
     e18:	f7ff fe34 	bl	a84 <sjsu::lpc40xx::Gpio::GetPin() const>
     e1c:	4602      	mov	r2, r0
     e1e:	6813      	ldr	r3, [r2, #0]
     e20:	3308      	adds	r3, #8
     e22:	681b      	ldr	r3, [r3, #0]
     e24:	2101      	movs	r1, #1
     e26:	4610      	mov	r0, r2
     e28:	4798      	blx	r3
		ad[5].GetPin().SetAsOpenDrain();
     e2a:	687b      	ldr	r3, [r7, #4]
     e2c:	3364      	adds	r3, #100	; 0x64
     e2e:	4618      	mov	r0, r3
     e30:	f7ff fe28 	bl	a84 <sjsu::lpc40xx::Gpio::GetPin() const>
     e34:	4602      	mov	r2, r0
     e36:	6813      	ldr	r3, [r2, #0]
     e38:	3308      	adds	r3, #8
     e3a:	681b      	ldr	r3, [r3, #0]
     e3c:	2101      	movs	r1, #1
     e3e:	4610      	mov	r0, r2
     e40:	4798      	blx	r3
		ad[6].GetPin().SetAsOpenDrain();
     e42:	687b      	ldr	r3, [r7, #4]
     e44:	3378      	adds	r3, #120	; 0x78
     e46:	4618      	mov	r0, r3
     e48:	f7ff fe1c 	bl	a84 <sjsu::lpc40xx::Gpio::GetPin() const>
     e4c:	4602      	mov	r2, r0
     e4e:	6813      	ldr	r3, [r2, #0]
     e50:	3308      	adds	r3, #8
     e52:	681b      	ldr	r3, [r3, #0]
     e54:	2101      	movs	r1, #1
     e56:	4610      	mov	r0, r2
     e58:	4798      	blx	r3
		ad[7].GetPin().SetAsOpenDrain();
     e5a:	687b      	ldr	r3, [r7, #4]
     e5c:	338c      	adds	r3, #140	; 0x8c
     e5e:	4618      	mov	r0, r3
     e60:	f7ff fe10 	bl	a84 <sjsu::lpc40xx::Gpio::GetPin() const>
     e64:	4602      	mov	r2, r0
     e66:	6813      	ldr	r3, [r2, #0]
     e68:	3308      	adds	r3, #8
     e6a:	681b      	ldr	r3, [r3, #0]
     e6c:	2101      	movs	r1, #1
     e6e:	4610      	mov	r0, r2
     e70:	4798      	blx	r3
		//To disable Open drain do the following:
		//ad[1].GetPin().SetAsOpenDrain(false);

		//Do the rest of the setup here...//

		write_enable.SetAsOutput();
     e72:	687b      	ldr	r3, [r7, #4]
     e74:	33a0      	adds	r3, #160	; 0xa0
     e76:	4618      	mov	r0, r3
     e78:	f7ff fbca 	bl	610 <sjsu::Gpio::SetAsOutput() const>
		ale.SetAsOutput();
     e7c:	687b      	ldr	r3, [r7, #4]
     e7e:	33b4      	adds	r3, #180	; 0xb4
     e80:	4618      	mov	r0, r3
     e82:	f7ff fbc5 	bl	610 <sjsu::Gpio::SetAsOutput() const>
		m_io.SetAsOutput();
     e86:	687b      	ldr	r3, [r7, #4]
     e88:	33c8      	adds	r3, #200	; 0xc8
     e8a:	4618      	mov	r0, r3
     e8c:	f7ff fbc0 	bl	610 <sjsu::Gpio::SetAsOutput() const>
		interrupt.SetAsInput();
     e90:	687b      	ldr	r3, [r7, #4]
     e92:	33dc      	adds	r3, #220	; 0xdc
     e94:	4618      	mov	r0, r3
     e96:	f7ff fbad 	bl	5f4 <sjsu::Gpio::SetAsInput() const>
	}
     e9a:	bf00      	nop
     e9c:	3708      	adds	r7, #8
     e9e:	46bd      	mov	sp, r7
     ea0:	bd80      	pop	{r7, pc}

00000ea2 <std::chrono::duration<long long, std::ratio<1ll, 1ll> > std::literals::chrono_literals::operator"" s<(char)49>()>:
    operator""s(long double __secs)
    { return chrono::duration<long double>{__secs}; }

    template <char... _Digits>
      constexpr chrono::seconds
      operator""s()
     ea2:	b580      	push	{r7, lr}
     ea4:	b082      	sub	sp, #8
     ea6:	af00      	add	r7, sp, #0
     ea8:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::seconds, _Digits...>(); }
     eaa:	687b      	ldr	r3, [r7, #4]
     eac:	4618      	mov	r0, r3
     eae:	f000 f805 	bl	ebc <std::chrono::duration<long long, std::ratio<1ll, 1ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1ll> >, (char)49>()>
     eb2:	6878      	ldr	r0, [r7, #4]
     eb4:	3708      	adds	r7, #8
     eb6:	46bd      	mov	sp, r7
     eb8:	bd80      	pop	{r7, pc}
     eba:	Address 0x0000000000000eba is out of bounds.


00000ebc <std::chrono::duration<long long, std::ratio<1ll, 1ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1ll> >, (char)49>()>:
      constexpr _Dur __check_overflow()
     ebc:	b580      	push	{r7, lr}
     ebe:	b082      	sub	sp, #8
     ec0:	af00      	add	r7, sp, #0
     ec2:	6078      	str	r0, [r7, #4]
	return _Dur{_CheckedVal::value};
     ec4:	4903      	ldr	r1, [pc, #12]	; (ed4 <std::chrono::duration<long long, std::ratio<1ll, 1ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1ll> >, (char)49>()+0x18>)
     ec6:	6878      	ldr	r0, [r7, #4]
     ec8:	f7ff fbb0 	bl	62c <std::chrono::duration<long long, std::ratio<1ll, 1ll> >::duration<long long, void>(long long const&)>
      }
     ecc:	6878      	ldr	r0, [r7, #4]
     ece:	3708      	adds	r7, #8
     ed0:	46bd      	mov	sp, r7
     ed2:	bd80      	pop	{r7, pc}
     ed4:	00006148 	.word	0x00006148

00000ed8 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, long long, std::ratio<1ll, 1ll> >(std::chrono::duration<long long, std::ratio<1ll, 1ll> > const&)>:
      duration_cast(const duration<_Rep, _Period>& __d)
     ed8:	b580      	push	{r7, lr}
     eda:	b082      	sub	sp, #8
     edc:	af00      	add	r7, sp, #0
     ede:	6078      	str	r0, [r7, #4]
     ee0:	6039      	str	r1, [r7, #0]
	return __dc::__cast(__d);
     ee2:	687b      	ldr	r3, [r7, #4]
     ee4:	6839      	ldr	r1, [r7, #0]
     ee6:	4618      	mov	r0, r3
     ee8:	f000 f811 	bl	f0e <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::ratio<1000000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1ll> >(std::chrono::duration<long long, std::ratio<1ll, 1ll> > const&)>
      }
     eec:	6878      	ldr	r0, [r7, #4]
     eee:	3708      	adds	r7, #8
     ef0:	46bd      	mov	sp, r7
     ef2:	bd80      	pop	{r7, pc}

00000ef4 <std::chrono::duration<long long, std::ratio<1ll, 1ll> >::count() const>:
	count() const
     ef4:	b490      	push	{r4, r7}
     ef6:	b082      	sub	sp, #8
     ef8:	af00      	add	r7, sp, #0
     efa:	6078      	str	r0, [r7, #4]
	{ return __r; }
     efc:	687b      	ldr	r3, [r7, #4]
     efe:	e9d3 3400 	ldrd	r3, r4, [r3]
     f02:	4618      	mov	r0, r3
     f04:	4621      	mov	r1, r4
     f06:	3708      	adds	r7, #8
     f08:	46bd      	mov	sp, r7
     f0a:	bc90      	pop	{r4, r7}
     f0c:	4770      	bx	lr

00000f0e <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::ratio<1000000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1ll> >(std::chrono::duration<long long, std::ratio<1ll, 1ll> > const&)>:
	  __cast(const duration<_Rep, _Period>& __d)
     f0e:	b5f0      	push	{r4, r5, r6, r7, lr}
     f10:	b085      	sub	sp, #20
     f12:	af00      	add	r7, sp, #0
     f14:	6078      	str	r0, [r7, #4]
     f16:	6039      	str	r1, [r7, #0]
	      static_cast<_CR>(__d.count()) * static_cast<_CR>(_CF::num)));
     f18:	6838      	ldr	r0, [r7, #0]
     f1a:	f7ff ffeb 	bl	ef4 <std::chrono::duration<long long, std::ratio<1ll, 1ll> >::count() const>
     f1e:	4605      	mov	r5, r0
     f20:	460e      	mov	r6, r1
     f22:	462b      	mov	r3, r5
     f24:	4634      	mov	r4, r6
     f26:	f04f 0100 	mov.w	r1, #0
     f2a:	f04f 0200 	mov.w	r2, #0
     f2e:	0162      	lsls	r2, r4, #5
     f30:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
     f34:	0159      	lsls	r1, r3, #5
     f36:	460b      	mov	r3, r1
     f38:	4614      	mov	r4, r2
     f3a:	1b5b      	subs	r3, r3, r5
     f3c:	eb64 0406 	sbc.w	r4, r4, r6
     f40:	f04f 0100 	mov.w	r1, #0
     f44:	f04f 0200 	mov.w	r2, #0
     f48:	0262      	lsls	r2, r4, #9
     f4a:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
     f4e:	0259      	lsls	r1, r3, #9
     f50:	460b      	mov	r3, r1
     f52:	4614      	mov	r4, r2
     f54:	195b      	adds	r3, r3, r5
     f56:	eb44 0406 	adc.w	r4, r4, r6
     f5a:	f04f 0100 	mov.w	r1, #0
     f5e:	f04f 0200 	mov.w	r2, #0
     f62:	01a2      	lsls	r2, r4, #6
     f64:	ea42 6293 	orr.w	r2, r2, r3, lsr #26
     f68:	0199      	lsls	r1, r3, #6
     f6a:	1ac9      	subs	r1, r1, r3
     f6c:	eb62 0204 	sbc.w	r2, r2, r4
     f70:	194b      	adds	r3, r1, r5
     f72:	eb42 0406 	adc.w	r4, r2, r6
     f76:	e9c7 3402 	strd	r3, r4, [r7, #8]
     f7a:	f107 0308 	add.w	r3, r7, #8
     f7e:	4619      	mov	r1, r3
     f80:	6878      	ldr	r0, [r7, #4]
     f82:	f7ff fb64 	bl	64e <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
	  }
     f86:	6878      	ldr	r0, [r7, #4]
     f88:	3714      	adds	r7, #20
     f8a:	46bd      	mov	sp, r7
     f8c:	bdf0      	pop	{r4, r5, r6, r7, pc}

00000f8e <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1ll> > const&)>:
	  constexpr duration(const duration<_Rep2, _Period2>& __d)
     f8e:	b590      	push	{r4, r7, lr}
     f90:	b085      	sub	sp, #20
     f92:	af00      	add	r7, sp, #0
     f94:	6078      	str	r0, [r7, #4]
     f96:	6039      	str	r1, [r7, #0]
	  : __r(duration_cast<duration>(__d).count()) { }
     f98:	f107 0308 	add.w	r3, r7, #8
     f9c:	6839      	ldr	r1, [r7, #0]
     f9e:	4618      	mov	r0, r3
     fa0:	f7ff ff9a 	bl	ed8 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, long long, std::ratio<1ll, 1ll> >(std::chrono::duration<long long, std::ratio<1ll, 1ll> > const&)>
     fa4:	f107 0308 	add.w	r3, r7, #8
     fa8:	4618      	mov	r0, r3
     faa:	f000 f80a 	bl	fc2 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
     fae:	4603      	mov	r3, r0
     fb0:	460c      	mov	r4, r1
     fb2:	687a      	ldr	r2, [r7, #4]
     fb4:	e9c2 3400 	strd	r3, r4, [r2]
     fb8:	687b      	ldr	r3, [r7, #4]
     fba:	4618      	mov	r0, r3
     fbc:	3714      	adds	r7, #20
     fbe:	46bd      	mov	sp, r7
     fc0:	bd90      	pop	{r4, r7, pc}

00000fc2 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>:
	count() const
     fc2:	b490      	push	{r4, r7}
     fc4:	b082      	sub	sp, #8
     fc6:	af00      	add	r7, sp, #0
     fc8:	6078      	str	r0, [r7, #4]
	{ return __r; }
     fca:	687b      	ldr	r3, [r7, #4]
     fcc:	e9d3 3400 	ldrd	r3, r4, [r3]
     fd0:	4618      	mov	r0, r3
     fd2:	4621      	mov	r1, r4
     fd4:	3708      	adds	r7, #8
     fd6:	46bd      	mov	sp, r7
     fd8:	bc90      	pop	{r4, r7}
     fda:	4770      	bx	lr

00000fdc <Bus::Write(unsigned char, unsigned char)>:

	void Write(uint8_t address, uint8_t data) //void Write(ControlType control, uint8_t address, uint8_t data)
     fdc:	b580      	push	{r7, lr}
     fde:	b08e      	sub	sp, #56	; 0x38
     fe0:	af02      	add	r7, sp, #8
     fe2:	6078      	str	r0, [r7, #4]
     fe4:	460b      	mov	r3, r1
     fe6:	70fb      	strb	r3, [r7, #3]
     fe8:	4613      	mov	r3, r2
     fea:	70bb      	strb	r3, [r7, #2]
	{
		LOG_INFO("Address Recieved: 0x%X", address);
     fec:	78fb      	ldrb	r3, [r7, #3]
     fee:	9300      	str	r3, [sp, #0]
     ff0:	232e      	movs	r3, #46	; 0x2e
     ff2:	4a5d      	ldr	r2, [pc, #372]	; (1168 <Bus::Write(unsigned char, unsigned char)+0x18c>)
     ff4:	495d      	ldr	r1, [pc, #372]	; (116c <Bus::Write(unsigned char, unsigned char)+0x190>)
     ff6:	485e      	ldr	r0, [pc, #376]	; (1170 <Bus::Write(unsigned char, unsigned char)+0x194>)
     ff8:	f002 f836 	bl	3068 <printf>
		LOG_INFO("Data Recieved: 0x%X", data);
     ffc:	78bb      	ldrb	r3, [r7, #2]
     ffe:	9300      	str	r3, [sp, #0]
    1000:	232f      	movs	r3, #47	; 0x2f
    1002:	4a59      	ldr	r2, [pc, #356]	; (1168 <Bus::Write(unsigned char, unsigned char)+0x18c>)
    1004:	495b      	ldr	r1, [pc, #364]	; (1174 <Bus::Write(unsigned char, unsigned char)+0x198>)
    1006:	485c      	ldr	r0, [pc, #368]	; (1178 <Bus::Write(unsigned char, unsigned char)+0x19c>)
    1008:	f002 f82e 	bl	3068 <printf>
		write_enable.SetHigh();
    100c:	687b      	ldr	r3, [r7, #4]
    100e:	33a0      	adds	r3, #160	; 0xa0
    1010:	4618      	mov	r0, r3
    1012:	f7ff fad1 	bl	5b8 <sjsu::Gpio::SetHigh() const>
		//Set pins to output and puts address on the pins
		for (int i = 0; i <= 7; i++)
    1016:	2300      	movs	r3, #0
    1018:	62fb      	str	r3, [r7, #44]	; 0x2c
    101a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    101c:	2b07      	cmp	r3, #7
    101e:	dc2a      	bgt.n	1076 <Bus::Write(unsigned char, unsigned char)+0x9a>
		{
			ad[i].SetAsOutput();
    1020:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1022:	4613      	mov	r3, r2
    1024:	009b      	lsls	r3, r3, #2
    1026:	4413      	add	r3, r2
    1028:	009b      	lsls	r3, r3, #2
    102a:	687a      	ldr	r2, [r7, #4]
    102c:	4413      	add	r3, r2
    102e:	4618      	mov	r0, r3
    1030:	f7ff faee 	bl	610 <sjsu::Gpio::SetAsOutput() const>
			if(address & (1 << i))
    1034:	78fa      	ldrb	r2, [r7, #3]
    1036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1038:	fa42 f303 	asr.w	r3, r2, r3
    103c:	f003 0301 	and.w	r3, r3, #1
    1040:	2b00      	cmp	r3, #0
    1042:	d00a      	beq.n	105a <Bus::Write(unsigned char, unsigned char)+0x7e>
				ad[i].SetHigh();
    1044:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    1046:	4613      	mov	r3, r2
    1048:	009b      	lsls	r3, r3, #2
    104a:	4413      	add	r3, r2
    104c:	009b      	lsls	r3, r3, #2
    104e:	687a      	ldr	r2, [r7, #4]
    1050:	4413      	add	r3, r2
    1052:	4618      	mov	r0, r3
    1054:	f7ff fab0 	bl	5b8 <sjsu::Gpio::SetHigh() const>
    1058:	e009      	b.n	106e <Bus::Write(unsigned char, unsigned char)+0x92>
			else
				ad[i].SetLow();
    105a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
    105c:	4613      	mov	r3, r2
    105e:	009b      	lsls	r3, r3, #2
    1060:	4413      	add	r3, r2
    1062:	009b      	lsls	r3, r3, #2
    1064:	687a      	ldr	r2, [r7, #4]
    1066:	4413      	add	r3, r2
    1068:	4618      	mov	r0, r3
    106a:	f7ff fab4 	bl	5d6 <sjsu::Gpio::SetLow() const>
		for (int i = 0; i <= 7; i++)
    106e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    1070:	3301      	adds	r3, #1
    1072:	62fb      	str	r3, [r7, #44]	; 0x2c
    1074:	e7d1      	b.n	101a <Bus::Write(unsigned char, unsigned char)+0x3e>
		}
		LOG_INFO("A/D pins set to output and address put on.");
    1076:	233a      	movs	r3, #58	; 0x3a
    1078:	4a3b      	ldr	r2, [pc, #236]	; (1168 <Bus::Write(unsigned char, unsigned char)+0x18c>)
    107a:	4940      	ldr	r1, [pc, #256]	; (117c <Bus::Write(unsigned char, unsigned char)+0x1a0>)
    107c:	4840      	ldr	r0, [pc, #256]	; (1180 <Bus::Write(unsigned char, unsigned char)+0x1a4>)
    107e:	f001 fff3 	bl	3068 <printf>
	


		LOG_INFO("Enabling Control Pins");
    1082:	233e      	movs	r3, #62	; 0x3e
    1084:	4a38      	ldr	r2, [pc, #224]	; (1168 <Bus::Write(unsigned char, unsigned char)+0x18c>)
    1086:	493f      	ldr	r1, [pc, #252]	; (1184 <Bus::Write(unsigned char, unsigned char)+0x1a8>)
    1088:	483f      	ldr	r0, [pc, #252]	; (1188 <Bus::Write(unsigned char, unsigned char)+0x1ac>)
    108a:	f001 ffed 	bl	3068 <printf>
		//Enable buffer and latches
		ale.SetHigh();
    108e:	687b      	ldr	r3, [r7, #4]
    1090:	33b4      	adds	r3, #180	; 0xb4
    1092:	4618      	mov	r0, r3
    1094:	f7ff fa90 	bl	5b8 <sjsu::Gpio::SetHigh() const>
		sjsu::Delay(1s); //100ns is overtimed, find the actual time.
    1098:	f107 0310 	add.w	r3, r7, #16
    109c:	4618      	mov	r0, r3
    109e:	f7ff ff00 	bl	ea2 <std::chrono::duration<long long, std::ratio<1ll, 1ll> > std::literals::chrono_literals::operator"" s<(char)49>()>
    10a2:	f107 0210 	add.w	r2, r7, #16
    10a6:	f107 0308 	add.w	r3, r7, #8
    10aa:	4611      	mov	r1, r2
    10ac:	4618      	mov	r0, r3
    10ae:	f7ff ff6e 	bl	f8e <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1ll> > const&)>
    10b2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
    10b6:	f7ff fb55 	bl	764 <sjsu::Delay(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>
		LOG_INFO("Disabling ALE control pin");
    10ba:	2342      	movs	r3, #66	; 0x42
    10bc:	4a2a      	ldr	r2, [pc, #168]	; (1168 <Bus::Write(unsigned char, unsigned char)+0x18c>)
    10be:	4933      	ldr	r1, [pc, #204]	; (118c <Bus::Write(unsigned char, unsigned char)+0x1b0>)
    10c0:	4833      	ldr	r0, [pc, #204]	; (1190 <Bus::Write(unsigned char, unsigned char)+0x1b4>)
    10c2:	f001 ffd1 	bl	3068 <printf>
		ale.SetLow();
    10c6:	687b      	ldr	r3, [r7, #4]
    10c8:	33b4      	adds	r3, #180	; 0xb4
    10ca:	4618      	mov	r0, r3
    10cc:	f7ff fa83 	bl	5d6 <sjsu::Gpio::SetLow() const>
		sjsu::Delay(1s);
    10d0:	f107 0320 	add.w	r3, r7, #32
    10d4:	4618      	mov	r0, r3
    10d6:	f7ff fee4 	bl	ea2 <std::chrono::duration<long long, std::ratio<1ll, 1ll> > std::literals::chrono_literals::operator"" s<(char)49>()>
    10da:	f107 0220 	add.w	r2, r7, #32
    10de:	f107 0318 	add.w	r3, r7, #24
    10e2:	4611      	mov	r1, r2
    10e4:	4618      	mov	r0, r3
    10e6:	f7ff ff52 	bl	f8e <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1ll> > const&)>
    10ea:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
    10ee:	f7ff fb39 	bl	764 <sjsu::Delay(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>

		//Put data on the pins.
		for (int i = 0; i <= 7; i++)
    10f2:	2300      	movs	r3, #0
    10f4:	62bb      	str	r3, [r7, #40]	; 0x28
    10f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    10f8:	2b07      	cmp	r3, #7
    10fa:	dc2a      	bgt.n	1152 <Bus::Write(unsigned char, unsigned char)+0x176>
		{
			ad[i].SetAsOutput();
    10fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
    10fe:	4613      	mov	r3, r2
    1100:	009b      	lsls	r3, r3, #2
    1102:	4413      	add	r3, r2
    1104:	009b      	lsls	r3, r3, #2
    1106:	687a      	ldr	r2, [r7, #4]
    1108:	4413      	add	r3, r2
    110a:	4618      	mov	r0, r3
    110c:	f7ff fa80 	bl	610 <sjsu::Gpio::SetAsOutput() const>
			if(data & (1 << i))
    1110:	78ba      	ldrb	r2, [r7, #2]
    1112:	6abb      	ldr	r3, [r7, #40]	; 0x28
    1114:	fa42 f303 	asr.w	r3, r2, r3
    1118:	f003 0301 	and.w	r3, r3, #1
    111c:	2b00      	cmp	r3, #0
    111e:	d00a      	beq.n	1136 <Bus::Write(unsigned char, unsigned char)+0x15a>
				ad[i].SetHigh();
    1120:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1122:	4613      	mov	r3, r2
    1124:	009b      	lsls	r3, r3, #2
    1126:	4413      	add	r3, r2
    1128:	009b      	lsls	r3, r3, #2
    112a:	687a      	ldr	r2, [r7, #4]
    112c:	4413      	add	r3, r2
    112e:	4618      	mov	r0, r3
    1130:	f7ff fa42 	bl	5b8 <sjsu::Gpio::SetHigh() const>
    1134:	e009      	b.n	114a <Bus::Write(unsigned char, unsigned char)+0x16e>
			else
				ad[i].SetLow();
    1136:	6aba      	ldr	r2, [r7, #40]	; 0x28
    1138:	4613      	mov	r3, r2
    113a:	009b      	lsls	r3, r3, #2
    113c:	4413      	add	r3, r2
    113e:	009b      	lsls	r3, r3, #2
    1140:	687a      	ldr	r2, [r7, #4]
    1142:	4413      	add	r3, r2
    1144:	4618      	mov	r0, r3
    1146:	f7ff fa46 	bl	5d6 <sjsu::Gpio::SetLow() const>
		for (int i = 0; i <= 7; i++)
    114a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    114c:	3301      	adds	r3, #1
    114e:	62bb      	str	r3, [r7, #40]	; 0x28
    1150:	e7d1      	b.n	10f6 <Bus::Write(unsigned char, unsigned char)+0x11a>
		}
		LOG_INFO("A/D pins set to data");
    1152:	234f      	movs	r3, #79	; 0x4f
    1154:	4a04      	ldr	r2, [pc, #16]	; (1168 <Bus::Write(unsigned char, unsigned char)+0x18c>)
    1156:	490f      	ldr	r1, [pc, #60]	; (1194 <Bus::Write(unsigned char, unsigned char)+0x1b8>)
    1158:	480f      	ldr	r0, [pc, #60]	; (1198 <Bus::Write(unsigned char, unsigned char)+0x1bc>)
    115a:	f001 ff85 	bl	3068 <printf>
	}
    115e:	bf00      	nop
    1160:	3730      	adds	r7, #48	; 0x30
    1162:	46bd      	mov	sp, r7
    1164:	bd80      	pop	{r7, pc}
    1166:	bf00      	nop
    1168:	0000672c 	.word	0x0000672c
    116c:	000065c4 	.word	0x000065c4
    1170:	00006310 	.word	0x00006310
    1174:	000065cc 	.word	0x000065cc
    1178:	00006360 	.word	0x00006360
    117c:	000065d4 	.word	0x000065d4
    1180:	000063b0 	.word	0x000063b0
    1184:	000065dc 	.word	0x000065dc
    1188:	00006414 	.word	0x00006414
    118c:	000065e4 	.word	0x000065e4
    1190:	00006464 	.word	0x00006464
    1194:	000065ec 	.word	0x000065ec
    1198:	000064b8 	.word	0x000064b8

0000119c <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()>:
    operator""ms(long double __msecs)
    { return chrono::duration<long double, milli>{__msecs}; }

    template <char... _Digits>
      constexpr chrono::milliseconds
      operator""ms()
    119c:	b580      	push	{r7, lr}
    119e:	b082      	sub	sp, #8
    11a0:	af00      	add	r7, sp, #0
    11a2:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::milliseconds, _Digits...>(); }
    11a4:	687b      	ldr	r3, [r7, #4]
    11a6:	4618      	mov	r0, r3
    11a8:	f000 f804 	bl	11b4 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()>
    11ac:	6878      	ldr	r0, [r7, #4]
    11ae:	3708      	adds	r7, #8
    11b0:	46bd      	mov	sp, r7
    11b2:	bd80      	pop	{r7, pc}

000011b4 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()>:
      constexpr _Dur __check_overflow()
    11b4:	b580      	push	{r7, lr}
    11b6:	b082      	sub	sp, #8
    11b8:	af00      	add	r7, sp, #0
    11ba:	6078      	str	r0, [r7, #4]
	return _Dur{_CheckedVal::value};
    11bc:	4903      	ldr	r1, [pc, #12]	; (11cc <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()+0x18>)
    11be:	6878      	ldr	r0, [r7, #4]
    11c0:	f000 f806 	bl	11d0 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)>
      }
    11c4:	6878      	ldr	r0, [r7, #4]
    11c6:	3708      	adds	r7, #8
    11c8:	46bd      	mov	sp, r7
    11ca:	bd80      	pop	{r7, pc}
    11cc:	00006148 	.word	0x00006148

000011d0 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)>:
	  constexpr explicit duration(const _Rep2& __rep)
    11d0:	b490      	push	{r4, r7}
    11d2:	b082      	sub	sp, #8
    11d4:	af00      	add	r7, sp, #0
    11d6:	6078      	str	r0, [r7, #4]
    11d8:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
    11da:	683b      	ldr	r3, [r7, #0]
    11dc:	e9d3 3400 	ldrd	r3, r4, [r3]
    11e0:	687a      	ldr	r2, [r7, #4]
    11e2:	e9c2 3400 	strd	r3, r4, [r2]
    11e6:	687b      	ldr	r3, [r7, #4]
    11e8:	4618      	mov	r0, r3
    11ea:	3708      	adds	r7, #8
    11ec:	46bd      	mov	sp, r7
    11ee:	bc90      	pop	{r4, r7}
    11f0:	4770      	bx	lr

000011f2 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
      duration_cast(const duration<_Rep, _Period>& __d)
    11f2:	b580      	push	{r7, lr}
    11f4:	b082      	sub	sp, #8
    11f6:	af00      	add	r7, sp, #0
    11f8:	6078      	str	r0, [r7, #4]
    11fa:	6039      	str	r1, [r7, #0]
	return __dc::__cast(__d);
    11fc:	687b      	ldr	r3, [r7, #4]
    11fe:	6839      	ldr	r1, [r7, #0]
    1200:	4618      	mov	r0, r3
    1202:	f000 f811 	bl	1228 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
      }
    1206:	6878      	ldr	r0, [r7, #4]
    1208:	3708      	adds	r7, #8
    120a:	46bd      	mov	sp, r7
    120c:	bd80      	pop	{r7, pc}

0000120e <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const>:
	count() const
    120e:	b490      	push	{r4, r7}
    1210:	b082      	sub	sp, #8
    1212:	af00      	add	r7, sp, #0
    1214:	6078      	str	r0, [r7, #4]
	{ return __r; }
    1216:	687b      	ldr	r3, [r7, #4]
    1218:	e9d3 3400 	ldrd	r3, r4, [r3]
    121c:	4618      	mov	r0, r3
    121e:	4621      	mov	r1, r4
    1220:	3708      	adds	r7, #8
    1222:	46bd      	mov	sp, r7
    1224:	bc90      	pop	{r4, r7}
    1226:	4770      	bx	lr

00001228 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
	  __cast(const duration<_Rep, _Period>& __d)
    1228:	b5f0      	push	{r4, r5, r6, r7, lr}
    122a:	b085      	sub	sp, #20
    122c:	af00      	add	r7, sp, #0
    122e:	6078      	str	r0, [r7, #4]
    1230:	6039      	str	r1, [r7, #0]
	      static_cast<_CR>(__d.count()) * static_cast<_CR>(_CF::num)));
    1232:	6838      	ldr	r0, [r7, #0]
    1234:	f7ff ffeb 	bl	120e <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const>
    1238:	4605      	mov	r5, r0
    123a:	460e      	mov	r6, r1
    123c:	462b      	mov	r3, r5
    123e:	4634      	mov	r4, r6
    1240:	f04f 0100 	mov.w	r1, #0
    1244:	f04f 0200 	mov.w	r2, #0
    1248:	0162      	lsls	r2, r4, #5
    124a:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
    124e:	0159      	lsls	r1, r3, #5
    1250:	460b      	mov	r3, r1
    1252:	4614      	mov	r4, r2
    1254:	1b5b      	subs	r3, r3, r5
    1256:	eb64 0406 	sbc.w	r4, r4, r6
    125a:	f04f 0100 	mov.w	r1, #0
    125e:	f04f 0200 	mov.w	r2, #0
    1262:	00a2      	lsls	r2, r4, #2
    1264:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
    1268:	0099      	lsls	r1, r3, #2
    126a:	460b      	mov	r3, r1
    126c:	4614      	mov	r4, r2
    126e:	195b      	adds	r3, r3, r5
    1270:	eb44 0406 	adc.w	r4, r4, r6
    1274:	f04f 0100 	mov.w	r1, #0
    1278:	f04f 0200 	mov.w	r2, #0
    127c:	00e2      	lsls	r2, r4, #3
    127e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
    1282:	00d9      	lsls	r1, r3, #3
    1284:	460b      	mov	r3, r1
    1286:	4614      	mov	r4, r2
    1288:	e9c7 3402 	strd	r3, r4, [r7, #8]
    128c:	f107 0308 	add.w	r3, r7, #8
    1290:	4619      	mov	r1, r3
    1292:	6878      	ldr	r0, [r7, #4]
    1294:	f7ff f9db 	bl	64e <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
	  }
    1298:	6878      	ldr	r0, [r7, #4]
    129a:	3714      	adds	r7, #20
    129c:	46bd      	mov	sp, r7
    129e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000012a0 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
	  constexpr duration(const duration<_Rep2, _Period2>& __d)
    12a0:	b590      	push	{r4, r7, lr}
    12a2:	b085      	sub	sp, #20
    12a4:	af00      	add	r7, sp, #0
    12a6:	6078      	str	r0, [r7, #4]
    12a8:	6039      	str	r1, [r7, #0]
	  : __r(duration_cast<duration>(__d).count()) { }
    12aa:	f107 0308 	add.w	r3, r7, #8
    12ae:	6839      	ldr	r1, [r7, #0]
    12b0:	4618      	mov	r0, r3
    12b2:	f7ff ff9e 	bl	11f2 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
    12b6:	f107 0308 	add.w	r3, r7, #8
    12ba:	4618      	mov	r0, r3
    12bc:	f7ff fe81 	bl	fc2 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    12c0:	4603      	mov	r3, r0
    12c2:	460c      	mov	r4, r1
    12c4:	687a      	ldr	r2, [r7, #4]
    12c6:	e9c2 3400 	strd	r3, r4, [r2]
    12ca:	687b      	ldr	r3, [r7, #4]
    12cc:	4618      	mov	r0, r3
    12ce:	3714      	adds	r7, #20
    12d0:	46bd      	mov	sp, r7
    12d2:	bd90      	pop	{r4, r7, pc}

000012d4 <main>:
#include "utility/log.hpp"
#include "utility/time.hpp"


int main()
{
    12d4:	b580      	push	{r7, lr}
    12d6:	b0c2      	sub	sp, #264	; 0x108
    12d8:	af00      	add	r7, sp, #0
  LOG_INFO("Staring W/R Application");
    12da:	230b      	movs	r3, #11
    12dc:	4aa1      	ldr	r2, [pc, #644]	; (1564 <main+0x290>)
    12de:	49a2      	ldr	r1, [pc, #648]	; (1568 <main+0x294>)
    12e0:	48a2      	ldr	r0, [pc, #648]	; (156c <main+0x298>)
    12e2:	f001 fec1 	bl	3068 <printf>
  		uint8_t data = 0b000000000;
    12e6:	2300      	movs	r3, #0
    12e8:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
		uint8_t address = 0b01010101;
    12ec:	2355      	movs	r3, #85	; 0x55
    12ee:	f887 3105 	strb.w	r3, [r7, #261]	; 0x105
		Bus test;
    12f2:	4a9f      	ldr	r2, [pc, #636]	; (1570 <main+0x29c>)
    12f4:	463b      	mov	r3, r7
    12f6:	601a      	str	r2, [r3, #0]
    12f8:	463b      	mov	r3, r7
    12fa:	2201      	movs	r2, #1
    12fc:	711a      	strb	r2, [r3, #4]
    12fe:	4a9d      	ldr	r2, [pc, #628]	; (1574 <main+0x2a0>)
    1300:	463b      	mov	r3, r7
    1302:	609a      	str	r2, [r3, #8]
    1304:	463b      	mov	r3, r7
    1306:	2202      	movs	r2, #2
    1308:	731a      	strb	r2, [r3, #12]
    130a:	463b      	mov	r3, r7
    130c:	2202      	movs	r2, #2
    130e:	735a      	strb	r2, [r3, #13]
    1310:	463b      	mov	r3, r7
    1312:	4a99      	ldr	r2, [pc, #612]	; (1578 <main+0x2a4>)
    1314:	611a      	str	r2, [r3, #16]
    1316:	4a96      	ldr	r2, [pc, #600]	; (1570 <main+0x29c>)
    1318:	463b      	mov	r3, r7
    131a:	615a      	str	r2, [r3, #20]
    131c:	463b      	mov	r3, r7
    131e:	2201      	movs	r2, #1
    1320:	761a      	strb	r2, [r3, #24]
    1322:	4a94      	ldr	r2, [pc, #592]	; (1574 <main+0x2a0>)
    1324:	463b      	mov	r3, r7
    1326:	61da      	str	r2, [r3, #28]
    1328:	463b      	mov	r3, r7
    132a:	2202      	movs	r2, #2
    132c:	f883 2020 	strb.w	r2, [r3, #32]
    1330:	463b      	mov	r3, r7
    1332:	2205      	movs	r2, #5
    1334:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    1338:	463b      	mov	r3, r7
    133a:	4a8f      	ldr	r2, [pc, #572]	; (1578 <main+0x2a4>)
    133c:	625a      	str	r2, [r3, #36]	; 0x24
    133e:	4a8c      	ldr	r2, [pc, #560]	; (1570 <main+0x29c>)
    1340:	463b      	mov	r3, r7
    1342:	629a      	str	r2, [r3, #40]	; 0x28
    1344:	463b      	mov	r3, r7
    1346:	2201      	movs	r2, #1
    1348:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    134c:	4a89      	ldr	r2, [pc, #548]	; (1574 <main+0x2a0>)
    134e:	463b      	mov	r3, r7
    1350:	631a      	str	r2, [r3, #48]	; 0x30
    1352:	463b      	mov	r3, r7
    1354:	2202      	movs	r2, #2
    1356:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    135a:	463b      	mov	r3, r7
    135c:	2207      	movs	r2, #7
    135e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    1362:	463b      	mov	r3, r7
    1364:	4a84      	ldr	r2, [pc, #528]	; (1578 <main+0x2a4>)
    1366:	639a      	str	r2, [r3, #56]	; 0x38
    1368:	4a81      	ldr	r2, [pc, #516]	; (1570 <main+0x29c>)
    136a:	463b      	mov	r3, r7
    136c:	63da      	str	r2, [r3, #60]	; 0x3c
    136e:	463b      	mov	r3, r7
    1370:	2201      	movs	r2, #1
    1372:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    1376:	4a7f      	ldr	r2, [pc, #508]	; (1574 <main+0x2a0>)
    1378:	463b      	mov	r3, r7
    137a:	645a      	str	r2, [r3, #68]	; 0x44
    137c:	463b      	mov	r3, r7
    137e:	2202      	movs	r2, #2
    1380:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    1384:	463b      	mov	r3, r7
    1386:	2209      	movs	r2, #9
    1388:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
    138c:	463b      	mov	r3, r7
    138e:	4a7a      	ldr	r2, [pc, #488]	; (1578 <main+0x2a4>)
    1390:	64da      	str	r2, [r3, #76]	; 0x4c
    1392:	4a77      	ldr	r2, [pc, #476]	; (1570 <main+0x29c>)
    1394:	463b      	mov	r3, r7
    1396:	651a      	str	r2, [r3, #80]	; 0x50
    1398:	463b      	mov	r3, r7
    139a:	2200      	movs	r2, #0
    139c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    13a0:	4a74      	ldr	r2, [pc, #464]	; (1574 <main+0x2a0>)
    13a2:	463b      	mov	r3, r7
    13a4:	659a      	str	r2, [r3, #88]	; 0x58
    13a6:	463b      	mov	r3, r7
    13a8:	2200      	movs	r2, #0
    13aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    13ae:	463b      	mov	r3, r7
    13b0:	220f      	movs	r2, #15
    13b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    13b6:	463b      	mov	r3, r7
    13b8:	4a6f      	ldr	r2, [pc, #444]	; (1578 <main+0x2a4>)
    13ba:	661a      	str	r2, [r3, #96]	; 0x60
    13bc:	4a6c      	ldr	r2, [pc, #432]	; (1570 <main+0x29c>)
    13be:	463b      	mov	r3, r7
    13c0:	665a      	str	r2, [r3, #100]	; 0x64
    13c2:	463b      	mov	r3, r7
    13c4:	2200      	movs	r2, #0
    13c6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
    13ca:	4a6a      	ldr	r2, [pc, #424]	; (1574 <main+0x2a0>)
    13cc:	463b      	mov	r3, r7
    13ce:	66da      	str	r2, [r3, #108]	; 0x6c
    13d0:	463b      	mov	r3, r7
    13d2:	2200      	movs	r2, #0
    13d4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
    13d8:	463b      	mov	r3, r7
    13da:	2212      	movs	r2, #18
    13dc:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
    13e0:	463b      	mov	r3, r7
    13e2:	4a65      	ldr	r2, [pc, #404]	; (1578 <main+0x2a4>)
    13e4:	675a      	str	r2, [r3, #116]	; 0x74
    13e6:	4a62      	ldr	r2, [pc, #392]	; (1570 <main+0x29c>)
    13e8:	463b      	mov	r3, r7
    13ea:	679a      	str	r2, [r3, #120]	; 0x78
    13ec:	463b      	mov	r3, r7
    13ee:	2200      	movs	r2, #0
    13f0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
    13f4:	4a5f      	ldr	r2, [pc, #380]	; (1574 <main+0x2a0>)
    13f6:	463b      	mov	r3, r7
    13f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    13fc:	463b      	mov	r3, r7
    13fe:	2200      	movs	r2, #0
    1400:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84
    1404:	463b      	mov	r3, r7
    1406:	2201      	movs	r2, #1
    1408:	f883 2085 	strb.w	r2, [r3, #133]	; 0x85
    140c:	463b      	mov	r3, r7
    140e:	4a5a      	ldr	r2, [pc, #360]	; (1578 <main+0x2a4>)
    1410:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    1414:	4a56      	ldr	r2, [pc, #344]	; (1570 <main+0x29c>)
    1416:	463b      	mov	r3, r7
    1418:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    141c:	463b      	mov	r3, r7
    141e:	2200      	movs	r2, #0
    1420:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
    1424:	4a53      	ldr	r2, [pc, #332]	; (1574 <main+0x2a0>)
    1426:	463b      	mov	r3, r7
    1428:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    142c:	463b      	mov	r3, r7
    142e:	2200      	movs	r2, #0
    1430:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
    1434:	463b      	mov	r3, r7
    1436:	220a      	movs	r2, #10
    1438:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
    143c:	463b      	mov	r3, r7
    143e:	4a4e      	ldr	r2, [pc, #312]	; (1578 <main+0x2a4>)
    1440:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    1444:	4a4a      	ldr	r2, [pc, #296]	; (1570 <main+0x29c>)
    1446:	463b      	mov	r3, r7
    1448:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    144c:	463b      	mov	r3, r7
    144e:	2200      	movs	r2, #0
    1450:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
    1454:	4a47      	ldr	r2, [pc, #284]	; (1574 <main+0x2a0>)
    1456:	463b      	mov	r3, r7
    1458:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    145c:	463b      	mov	r3, r7
    145e:	2200      	movs	r2, #0
    1460:	f883 20ac 	strb.w	r2, [r3, #172]	; 0xac
    1464:	463b      	mov	r3, r7
    1466:	2211      	movs	r2, #17
    1468:	f883 20ad 	strb.w	r2, [r3, #173]	; 0xad
    146c:	463b      	mov	r3, r7
    146e:	4a42      	ldr	r2, [pc, #264]	; (1578 <main+0x2a4>)
    1470:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    1474:	4a3e      	ldr	r2, [pc, #248]	; (1570 <main+0x29c>)
    1476:	463b      	mov	r3, r7
    1478:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
    147c:	463b      	mov	r3, r7
    147e:	2200      	movs	r2, #0
    1480:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
    1484:	4a3b      	ldr	r2, [pc, #236]	; (1574 <main+0x2a0>)
    1486:	463b      	mov	r3, r7
    1488:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
    148c:	463b      	mov	r3, r7
    148e:	2200      	movs	r2, #0
    1490:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
    1494:	463b      	mov	r3, r7
    1496:	2216      	movs	r2, #22
    1498:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1
    149c:	463b      	mov	r3, r7
    149e:	4a36      	ldr	r2, [pc, #216]	; (1578 <main+0x2a4>)
    14a0:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
    14a4:	4a32      	ldr	r2, [pc, #200]	; (1570 <main+0x29c>)
    14a6:	463b      	mov	r3, r7
    14a8:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
    14ac:	463b      	mov	r3, r7
    14ae:	2200      	movs	r2, #0
    14b0:	f883 20cc 	strb.w	r2, [r3, #204]	; 0xcc
    14b4:	4a2f      	ldr	r2, [pc, #188]	; (1574 <main+0x2a0>)
    14b6:	463b      	mov	r3, r7
    14b8:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
    14bc:	463b      	mov	r3, r7
    14be:	2200      	movs	r2, #0
    14c0:	f883 20d4 	strb.w	r2, [r3, #212]	; 0xd4
    14c4:	463b      	mov	r3, r7
    14c6:	2200      	movs	r2, #0
    14c8:	f883 20d5 	strb.w	r2, [r3, #213]	; 0xd5
    14cc:	463b      	mov	r3, r7
    14ce:	4a2a      	ldr	r2, [pc, #168]	; (1578 <main+0x2a4>)
    14d0:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
    14d4:	4a26      	ldr	r2, [pc, #152]	; (1570 <main+0x29c>)
    14d6:	463b      	mov	r3, r7
    14d8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
    14dc:	463b      	mov	r3, r7
    14de:	2200      	movs	r2, #0
    14e0:	f883 20e0 	strb.w	r2, [r3, #224]	; 0xe0
    14e4:	4a23      	ldr	r2, [pc, #140]	; (1574 <main+0x2a0>)
    14e6:	463b      	mov	r3, r7
    14e8:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    14ec:	463b      	mov	r3, r7
    14ee:	2200      	movs	r2, #0
    14f0:	f883 20e8 	strb.w	r2, [r3, #232]	; 0xe8
    14f4:	463b      	mov	r3, r7
    14f6:	220b      	movs	r2, #11
    14f8:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
    14fc:	463b      	mov	r3, r7
    14fe:	4a1e      	ldr	r2, [pc, #120]	; (1578 <main+0x2a4>)
    1500:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
		LOG_INFO("Created Bus Object");
    1504:	230f      	movs	r3, #15
    1506:	4a17      	ldr	r2, [pc, #92]	; (1564 <main+0x290>)
    1508:	491c      	ldr	r1, [pc, #112]	; (157c <main+0x2a8>)
    150a:	481d      	ldr	r0, [pc, #116]	; (1580 <main+0x2ac>)
    150c:	f001 fdac 	bl	3068 <printf>
		int read;
  while (true)
  {
    for (uint8_t i = 0; i < 16; i++)
    1510:	2300      	movs	r3, #0
    1512:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
    1516:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
    151a:	2b0f      	cmp	r3, #15
    151c:	d8f8      	bhi.n	1510 <main+0x23c>
    {
		test.Initialize();
    151e:	463b      	mov	r3, r7
    1520:	4618      	mov	r0, r3
    1522:	f7ff fc43 	bl	dac <Bus::Initialize()>
		test.Write(address, data);
    1526:	f897 2106 	ldrb.w	r2, [r7, #262]	; 0x106
    152a:	f897 1105 	ldrb.w	r1, [r7, #261]	; 0x105
    152e:	463b      	mov	r3, r7
    1530:	4618      	mov	r0, r3
    1532:	f7ff fd53 	bl	fdc <Bus::Write(unsigned char, unsigned char)>
		sjsu::Delay(1ms);
    1536:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
    153a:	4618      	mov	r0, r3
    153c:	f7ff fe2e 	bl	119c <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()>
    1540:	f107 02f8 	add.w	r2, r7, #248	; 0xf8
    1544:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
    1548:	4611      	mov	r1, r2
    154a:	4618      	mov	r0, r3
    154c:	f7ff fea8 	bl	12a0 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
    1550:	e9d7 013c 	ldrd	r0, r1, [r7, #240]	; 0xf0
    1554:	f7ff f906 	bl	764 <sjsu::Delay(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >)>
    for (uint8_t i = 0; i < 16; i++)
    1558:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
    155c:	3301      	adds	r3, #1
    155e:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
    1562:	e7d8      	b.n	1516 <main+0x242>
    1564:	00006658 	.word	0x00006658
    1568:	000065f4 	.word	0x000065f4
    156c:	00006508 	.word	0x00006508
    1570:	00006614 	.word	0x00006614
    1574:	00006648 	.word	0x00006648
    1578:	000065a8 	.word	0x000065a8
    157c:	00006600 	.word	0x00006600
    1580:	0000655c 	.word	0x0000655c

00001584 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>:
  // Shift masked value into bit position and OR with target value.
  target |= (value & mask) << position;
  return static_cast<T>(target);
}
template <typename T, typename U>
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    1584:	b580      	push	{r7, lr}
    1586:	b084      	sub	sp, #16
    1588:	af00      	add	r7, sp, #0
    158a:	60f8      	str	r0, [r7, #12]
    158c:	460b      	mov	r3, r1
    158e:	80ba      	strh	r2, [r7, #4]
    1590:	72fb      	strb	r3, [r7, #11]
{
  return Insert(target, value, bitmask.position, bitmask.width);
    1592:	793b      	ldrb	r3, [r7, #4]
    1594:	461a      	mov	r2, r3
    1596:	797b      	ldrb	r3, [r7, #5]
    1598:	7af9      	ldrb	r1, [r7, #11]
    159a:	68f8      	ldr	r0, [r7, #12]
    159c:	f000 f8a0 	bl	16e0 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)>
    15a0:	4603      	mov	r3, r0
}
    15a2:	4618      	mov	r0, r3
    15a4:	3710      	adds	r7, #16
    15a6:	46bd      	mov	sp, r7
    15a8:	bd80      	pop	{r7, pc}

000015aa <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator++(int)>:
	operator++(int)
    15aa:	b590      	push	{r4, r7, lr}
    15ac:	b087      	sub	sp, #28
    15ae:	af00      	add	r7, sp, #0
    15b0:	60f8      	str	r0, [r7, #12]
    15b2:	60b9      	str	r1, [r7, #8]
    15b4:	607a      	str	r2, [r7, #4]
	{ return duration(__r++); }
    15b6:	68bb      	ldr	r3, [r7, #8]
    15b8:	e9d3 3400 	ldrd	r3, r4, [r3]
    15bc:	1c59      	adds	r1, r3, #1
    15be:	f144 0200 	adc.w	r2, r4, #0
    15c2:	68b8      	ldr	r0, [r7, #8]
    15c4:	e9c0 1200 	strd	r1, r2, [r0]
    15c8:	e9c7 3404 	strd	r3, r4, [r7, #16]
    15cc:	f107 0310 	add.w	r3, r7, #16
    15d0:	4619      	mov	r1, r3
    15d2:	68f8      	ldr	r0, [r7, #12]
    15d4:	f7ff f83b 	bl	64e <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
    15d8:	68f8      	ldr	r0, [r7, #12]
    15da:	371c      	adds	r7, #28
    15dc:	46bd      	mov	sp, r7
    15de:	bd90      	pop	{r4, r7, pc}

000015e0 <std::chrono::duration_values<long long>::max()>:
	max()
    15e0:	b598      	push	{r3, r4, r7, lr}
    15e2:	af00      	add	r7, sp, #0
	{ return numeric_limits<_Rep>::max(); }
    15e4:	f7fe ff32 	bl	44c <std::numeric_limits<long long>::max()>
    15e8:	4603      	mov	r3, r0
    15ea:	460c      	mov	r4, r1
    15ec:	4618      	mov	r0, r3
    15ee:	4621      	mov	r1, r4
    15f0:	bd98      	pop	{r3, r4, r7, pc}

000015f2 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>:
	max()
    15f2:	b590      	push	{r4, r7, lr}
    15f4:	b085      	sub	sp, #20
    15f6:	af00      	add	r7, sp, #0
    15f8:	6078      	str	r0, [r7, #4]
	{ return duration(duration_values<rep>::max()); }
    15fa:	f7ff fff1 	bl	15e0 <std::chrono::duration_values<long long>::max()>
    15fe:	4603      	mov	r3, r0
    1600:	460c      	mov	r4, r1
    1602:	e9c7 3402 	strd	r3, r4, [r7, #8]
    1606:	f107 0308 	add.w	r3, r7, #8
    160a:	4619      	mov	r1, r3
    160c:	6878      	ldr	r0, [r7, #4]
    160e:	f7ff f81e 	bl	64e <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
    1612:	6878      	ldr	r0, [r7, #4]
    1614:	3714      	adds	r7, #20
    1616:	46bd      	mov	sp, r7
    1618:	bd90      	pop	{r4, r7, pc}

0000161a <bool std::chrono::operator==<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
      operator==(const duration<_Rep1, _Period1>& __lhs,
    161a:	b5f0      	push	{r4, r5, r6, r7, lr}
    161c:	b087      	sub	sp, #28
    161e:	af00      	add	r7, sp, #0
    1620:	6078      	str	r0, [r7, #4]
    1622:	6039      	str	r1, [r7, #0]
	return __ct(__lhs).count() == __ct(__rhs).count();
    1624:	687b      	ldr	r3, [r7, #4]
    1626:	e9d3 3400 	ldrd	r3, r4, [r3]
    162a:	e9c7 3402 	strd	r3, r4, [r7, #8]
    162e:	f107 0308 	add.w	r3, r7, #8
    1632:	4618      	mov	r0, r3
    1634:	f7ff fcc5 	bl	fc2 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    1638:	4605      	mov	r5, r0
    163a:	460e      	mov	r6, r1
    163c:	683b      	ldr	r3, [r7, #0]
    163e:	e9d3 3400 	ldrd	r3, r4, [r3]
    1642:	e9c7 3404 	strd	r3, r4, [r7, #16]
    1646:	f107 0310 	add.w	r3, r7, #16
    164a:	4618      	mov	r0, r3
    164c:	f7ff fcb9 	bl	fc2 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    1650:	4603      	mov	r3, r0
    1652:	460c      	mov	r4, r1
    1654:	42a6      	cmp	r6, r4
    1656:	bf06      	itte	eq
    1658:	429d      	cmpeq	r5, r3
    165a:	2301      	moveq	r3, #1
    165c:	2300      	movne	r3, #0
    165e:	b2db      	uxtb	r3, r3
      }
    1660:	4618      	mov	r0, r3
    1662:	371c      	adds	r7, #28
    1664:	46bd      	mov	sp, r7
    1666:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001668 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>:
/// return   =        0b0000'0001
///
/// @param target the value you want to change
/// @param position the position of the bit you would like to change to 0
template <typename T>
[[nodiscard]] constexpr T Clear(T target, uint32_t position)
    1668:	b480      	push	{r7}
    166a:	b083      	sub	sp, #12
    166c:	af00      	add	r7, sp, #0
    166e:	6078      	str	r0, [r7, #4]
    1670:	6039      	str	r1, [r7, #0]
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Clear only accepts intergers.");
  return static_cast<T>(target & ~(1 << position));
    1672:	2201      	movs	r2, #1
    1674:	683b      	ldr	r3, [r7, #0]
    1676:	fa02 f303 	lsl.w	r3, r2, r3
    167a:	43db      	mvns	r3, r3
    167c:	461a      	mov	r2, r3
    167e:	687b      	ldr	r3, [r7, #4]
    1680:	4013      	ands	r3, r2
}
    1682:	4618      	mov	r0, r3
    1684:	370c      	adds	r7, #12
    1686:	46bd      	mov	sp, r7
    1688:	f85d 7b04 	ldr.w	r7, [sp], #4
    168c:	4770      	bx	lr

0000168e <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Set(T target, uint32_t position)
    168e:	b480      	push	{r7}
    1690:	b083      	sub	sp, #12
    1692:	af00      	add	r7, sp, #0
    1694:	6078      	str	r0, [r7, #4]
    1696:	6039      	str	r1, [r7, #0]
  return static_cast<T>(target | (1 << position));
    1698:	2201      	movs	r2, #1
    169a:	683b      	ldr	r3, [r7, #0]
    169c:	fa02 f303 	lsl.w	r3, r2, r3
    16a0:	461a      	mov	r2, r3
    16a2:	687b      	ldr	r3, [r7, #4]
    16a4:	4313      	orrs	r3, r2
}
    16a6:	4618      	mov	r0, r3
    16a8:	370c      	adds	r7, #12
    16aa:	46bd      	mov	sp, r7
    16ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    16b0:	4770      	bx	lr

000016b2 <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>:
/// return   =               true
///
/// @param target the value you want to change
/// @param position the position of the bit you would like to toggle
template <typename T>
[[nodiscard]] constexpr bool Read(T target, uint32_t position)
    16b2:	b480      	push	{r7}
    16b4:	b083      	sub	sp, #12
    16b6:	af00      	add	r7, sp, #0
    16b8:	6078      	str	r0, [r7, #4]
    16ba:	6039      	str	r1, [r7, #0]
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Read only accepts intergers.");
  return static_cast<bool>(target & (1 << position));
    16bc:	2201      	movs	r2, #1
    16be:	683b      	ldr	r3, [r7, #0]
    16c0:	fa02 f303 	lsl.w	r3, r2, r3
    16c4:	461a      	mov	r2, r3
    16c6:	687b      	ldr	r3, [r7, #4]
    16c8:	4013      	ands	r3, r2
    16ca:	2b00      	cmp	r3, #0
    16cc:	bf14      	ite	ne
    16ce:	2301      	movne	r3, #1
    16d0:	2300      	moveq	r3, #0
    16d2:	b2db      	uxtb	r3, r3
}
    16d4:	4618      	mov	r0, r3
    16d6:	370c      	adds	r7, #12
    16d8:	46bd      	mov	sp, r7
    16da:	f85d 7b04 	ldr.w	r7, [sp], #4
    16de:	4770      	bx	lr

000016e0 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    16e0:	b480      	push	{r7}
    16e2:	b089      	sub	sp, #36	; 0x24
    16e4:	af00      	add	r7, sp, #0
    16e6:	60f8      	str	r0, [r7, #12]
    16e8:	607a      	str	r2, [r7, #4]
    16ea:	603b      	str	r3, [r7, #0]
    16ec:	460b      	mov	r3, r1
    16ee:	72fb      	strb	r3, [r7, #11]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    16f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    16f4:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    16f6:	2320      	movs	r3, #32
    16f8:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    16fa:	683b      	ldr	r3, [r7, #0]
    16fc:	f1c3 0320 	rsb	r3, r3, #32
    1700:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1704:	fa22 f303 	lsr.w	r3, r2, r3
    1708:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    170a:	697a      	ldr	r2, [r7, #20]
    170c:	687b      	ldr	r3, [r7, #4]
    170e:	fa02 f303 	lsl.w	r3, r2, r3
    1712:	43db      	mvns	r3, r3
    1714:	68fa      	ldr	r2, [r7, #12]
    1716:	4013      	ands	r3, r2
    1718:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    171a:	7afa      	ldrb	r2, [r7, #11]
    171c:	697b      	ldr	r3, [r7, #20]
    171e:	401a      	ands	r2, r3
    1720:	687b      	ldr	r3, [r7, #4]
    1722:	fa02 f303 	lsl.w	r3, r2, r3
    1726:	68fa      	ldr	r2, [r7, #12]
    1728:	4313      	orrs	r3, r2
    172a:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    172c:	68fb      	ldr	r3, [r7, #12]
}
    172e:	4618      	mov	r0, r3
    1730:	3724      	adds	r7, #36	; 0x24
    1732:	46bd      	mov	sp, r7
    1734:	f85d 7b04 	ldr.w	r7, [sp], #4
    1738:	4770      	bx	lr

0000173a <std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
      operator+(const duration<_Rep1, _Period1>& __lhs,
    173a:	b5f0      	push	{r4, r5, r6, r7, lr}
    173c:	b08b      	sub	sp, #44	; 0x2c
    173e:	af00      	add	r7, sp, #0
    1740:	60f8      	str	r0, [r7, #12]
    1742:	60b9      	str	r1, [r7, #8]
    1744:	607a      	str	r2, [r7, #4]
	return __cd(__cd(__lhs).count() + __cd(__rhs).count());
    1746:	68bb      	ldr	r3, [r7, #8]
    1748:	e9d3 3400 	ldrd	r3, r4, [r3]
    174c:	e9c7 3406 	strd	r3, r4, [r7, #24]
    1750:	f107 0318 	add.w	r3, r7, #24
    1754:	4618      	mov	r0, r3
    1756:	f7ff fc34 	bl	fc2 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    175a:	4605      	mov	r5, r0
    175c:	460e      	mov	r6, r1
    175e:	687b      	ldr	r3, [r7, #4]
    1760:	e9d3 3400 	ldrd	r3, r4, [r3]
    1764:	e9c7 3408 	strd	r3, r4, [r7, #32]
    1768:	f107 0320 	add.w	r3, r7, #32
    176c:	4618      	mov	r0, r3
    176e:	f7ff fc28 	bl	fc2 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    1772:	460a      	mov	r2, r1
    1774:	4601      	mov	r1, r0
    1776:	194b      	adds	r3, r1, r5
    1778:	eb42 0406 	adc.w	r4, r2, r6
    177c:	e9c7 3404 	strd	r3, r4, [r7, #16]
    1780:	f107 0310 	add.w	r3, r7, #16
    1784:	4619      	mov	r1, r3
    1786:	68f8      	ldr	r0, [r7, #12]
    1788:	f7fe ff61 	bl	64e <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
      }
    178c:	68f8      	ldr	r0, [r7, #12]
    178e:	372c      	adds	r7, #44	; 0x2c
    1790:	46bd      	mov	sp, r7
    1792:	bdf0      	pop	{r4, r5, r6, r7, pc}

00001794 <bool std::chrono::operator< <long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
      operator<(const duration<_Rep1, _Period1>& __lhs,
    1794:	b5f0      	push	{r4, r5, r6, r7, lr}
    1796:	b087      	sub	sp, #28
    1798:	af00      	add	r7, sp, #0
    179a:	6078      	str	r0, [r7, #4]
    179c:	6039      	str	r1, [r7, #0]
	return __ct(__lhs).count() < __ct(__rhs).count();
    179e:	687b      	ldr	r3, [r7, #4]
    17a0:	e9d3 3400 	ldrd	r3, r4, [r3]
    17a4:	e9c7 3402 	strd	r3, r4, [r7, #8]
    17a8:	f107 0308 	add.w	r3, r7, #8
    17ac:	4618      	mov	r0, r3
    17ae:	f7ff fc08 	bl	fc2 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    17b2:	4605      	mov	r5, r0
    17b4:	460e      	mov	r6, r1
    17b6:	683b      	ldr	r3, [r7, #0]
    17b8:	e9d3 3400 	ldrd	r3, r4, [r3]
    17bc:	e9c7 3404 	strd	r3, r4, [r7, #16]
    17c0:	f107 0310 	add.w	r3, r7, #16
    17c4:	4618      	mov	r0, r3
    17c6:	f7ff fbfc 	bl	fc2 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    17ca:	4603      	mov	r3, r0
    17cc:	460c      	mov	r4, r1
    17ce:	429d      	cmp	r5, r3
    17d0:	eb76 0304 	sbcs.w	r3, r6, r4
    17d4:	bfb4      	ite	lt
    17d6:	2301      	movlt	r3, #1
    17d8:	2300      	movge	r3, #0
    17da:	b2db      	uxtb	r3, r3
      }
    17dc:	4618      	mov	r0, r3
    17de:	371c      	adds	r7, #28
    17e0:	46bd      	mov	sp, r7
    17e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000017e4 <__static_initialization_and_destruction_0(int, int)>:
		
    }
  }

  return -1;
}
    17e4:	b580      	push	{r7, lr}
    17e6:	b082      	sub	sp, #8
    17e8:	af00      	add	r7, sp, #0
    17ea:	6078      	str	r0, [r7, #4]
    17ec:	6039      	str	r1, [r7, #0]
    17ee:	687b      	ldr	r3, [r7, #4]
    17f0:	2b01      	cmp	r3, #1
    17f2:	d16e      	bne.n	18d2 <__static_initialization_and_destruction_0(int, int)+0xee>
    17f4:	683b      	ldr	r3, [r7, #0]
    17f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    17fa:	4293      	cmp	r3, r2
    17fc:	d169      	bne.n	18d2 <__static_initialization_and_destruction_0(int, int)+0xee>
  inline static PinMap_t * pin_map = reinterpret_cast<PinMap_t *>(LPC_IOCON);
    17fe:	4b37      	ldr	r3, [pc, #220]	; (18dc <__static_initialization_and_destruction_0(int, int)+0xf8>)
    1800:	681b      	ldr	r3, [r3, #0]
    1802:	f003 0301 	and.w	r3, r3, #1
    1806:	2b00      	cmp	r3, #0
    1808:	d105      	bne.n	1816 <__static_initialization_and_destruction_0(int, int)+0x32>
    180a:	4b34      	ldr	r3, [pc, #208]	; (18dc <__static_initialization_and_destruction_0(int, int)+0xf8>)
    180c:	2201      	movs	r2, #1
    180e:	601a      	str	r2, [r3, #0]
    1810:	4a33      	ldr	r2, [pc, #204]	; (18e0 <__static_initialization_and_destruction_0(int, int)+0xfc>)
    1812:	4b34      	ldr	r3, [pc, #208]	; (18e4 <__static_initialization_and_destruction_0(int, int)+0x100>)
    1814:	601a      	str	r2, [r3, #0]
  inline static VectorTable_t table = VectorTable_t::GenerateDefaultTable();
    1816:	4b34      	ldr	r3, [pc, #208]	; (18e8 <__static_initialization_and_destruction_0(int, int)+0x104>)
    1818:	681b      	ldr	r3, [r3, #0]
    181a:	f003 0301 	and.w	r3, r3, #1
    181e:	2b00      	cmp	r3, #0
    1820:	d106      	bne.n	1830 <__static_initialization_and_destruction_0(int, int)+0x4c>
    1822:	4b31      	ldr	r3, [pc, #196]	; (18e8 <__static_initialization_and_destruction_0(int, int)+0x104>)
    1824:	2201      	movs	r2, #1
    1826:	601a      	str	r2, [r3, #0]
    1828:	4b30      	ldr	r3, [pc, #192]	; (18ec <__static_initialization_and_destruction_0(int, int)+0x108>)
    182a:	4618      	mov	r0, r3
    182c:	f7fe ffd8 	bl	7e0 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>
  inline static LPC_GPIO_TypeDef * gpio_port[6] = {
    1830:	4b2f      	ldr	r3, [pc, #188]	; (18f0 <__static_initialization_and_destruction_0(int, int)+0x10c>)
    1832:	681b      	ldr	r3, [r3, #0]
    1834:	f003 0301 	and.w	r3, r3, #1
    1838:	2b00      	cmp	r3, #0
    183a:	d114      	bne.n	1866 <__static_initialization_and_destruction_0(int, int)+0x82>
    183c:	4b2c      	ldr	r3, [pc, #176]	; (18f0 <__static_initialization_and_destruction_0(int, int)+0x10c>)
    183e:	2201      	movs	r2, #1
    1840:	601a      	str	r2, [r3, #0]
  };
    1842:	4a2c      	ldr	r2, [pc, #176]	; (18f4 <__static_initialization_and_destruction_0(int, int)+0x110>)
    1844:	4b2c      	ldr	r3, [pc, #176]	; (18f8 <__static_initialization_and_destruction_0(int, int)+0x114>)
    1846:	601a      	str	r2, [r3, #0]
    1848:	4a2c      	ldr	r2, [pc, #176]	; (18fc <__static_initialization_and_destruction_0(int, int)+0x118>)
    184a:	4b2b      	ldr	r3, [pc, #172]	; (18f8 <__static_initialization_and_destruction_0(int, int)+0x114>)
    184c:	605a      	str	r2, [r3, #4]
    184e:	4a2c      	ldr	r2, [pc, #176]	; (1900 <__static_initialization_and_destruction_0(int, int)+0x11c>)
    1850:	4b29      	ldr	r3, [pc, #164]	; (18f8 <__static_initialization_and_destruction_0(int, int)+0x114>)
    1852:	609a      	str	r2, [r3, #8]
    1854:	4a2b      	ldr	r2, [pc, #172]	; (1904 <__static_initialization_and_destruction_0(int, int)+0x120>)
    1856:	4b28      	ldr	r3, [pc, #160]	; (18f8 <__static_initialization_and_destruction_0(int, int)+0x114>)
    1858:	60da      	str	r2, [r3, #12]
    185a:	4a2b      	ldr	r2, [pc, #172]	; (1908 <__static_initialization_and_destruction_0(int, int)+0x124>)
    185c:	4b26      	ldr	r3, [pc, #152]	; (18f8 <__static_initialization_and_destruction_0(int, int)+0x114>)
    185e:	611a      	str	r2, [r3, #16]
    1860:	4a2a      	ldr	r2, [pc, #168]	; (190c <__static_initialization_and_destruction_0(int, int)+0x128>)
    1862:	4b25      	ldr	r3, [pc, #148]	; (18f8 <__static_initialization_and_destruction_0(int, int)+0x114>)
    1864:	615a      	str	r2, [r3, #20]
  inline static GpioInterruptRegisterMap_t interrupt[kNumberOfPorts] = {
    1866:	4b2a      	ldr	r3, [pc, #168]	; (1910 <__static_initialization_and_destruction_0(int, int)+0x12c>)
    1868:	681b      	ldr	r3, [r3, #0]
    186a:	f003 0301 	and.w	r3, r3, #1
    186e:	2b00      	cmp	r3, #0
    1870:	d122      	bne.n	18b8 <__static_initialization_and_destruction_0(int, int)+0xd4>
    1872:	4b27      	ldr	r3, [pc, #156]	; (1910 <__static_initialization_and_destruction_0(int, int)+0x12c>)
    1874:	2201      	movs	r2, #1
    1876:	601a      	str	r2, [r3, #0]
  };
    1878:	4b26      	ldr	r3, [pc, #152]	; (1914 <__static_initialization_and_destruction_0(int, int)+0x130>)
    { .rising_edge_status  = &(LPC_GPIOINT->IO0IntStatR),
    187a:	4a27      	ldr	r2, [pc, #156]	; (1918 <__static_initialization_and_destruction_0(int, int)+0x134>)
    187c:	3204      	adds	r2, #4
  };
    187e:	601a      	str	r2, [r3, #0]
      .falling_edge_status = &(LPC_GPIOINT->IO0IntStatF),
    1880:	4a25      	ldr	r2, [pc, #148]	; (1918 <__static_initialization_and_destruction_0(int, int)+0x134>)
    1882:	3208      	adds	r2, #8
  };
    1884:	605a      	str	r2, [r3, #4]
      .clear               = &(LPC_GPIOINT->IO0IntClr),
    1886:	4a24      	ldr	r2, [pc, #144]	; (1918 <__static_initialization_and_destruction_0(int, int)+0x134>)
    1888:	320c      	adds	r2, #12
  };
    188a:	609a      	str	r2, [r3, #8]
      .enable_rising_edge  = &(LPC_GPIOINT->IO0IntEnR),
    188c:	4a22      	ldr	r2, [pc, #136]	; (1918 <__static_initialization_and_destruction_0(int, int)+0x134>)
    188e:	3210      	adds	r2, #16
  };
    1890:	60da      	str	r2, [r3, #12]
      .enable_falling_edge = &(LPC_GPIOINT->IO0IntEnF) },
    1892:	4a21      	ldr	r2, [pc, #132]	; (1918 <__static_initialization_and_destruction_0(int, int)+0x134>)
    1894:	3214      	adds	r2, #20
  };
    1896:	611a      	str	r2, [r3, #16]
    1898:	3314      	adds	r3, #20
    { .rising_edge_status  = &(LPC_GPIOINT->IO2IntStatR),
    189a:	4a1f      	ldr	r2, [pc, #124]	; (1918 <__static_initialization_and_destruction_0(int, int)+0x134>)
    189c:	3224      	adds	r2, #36	; 0x24
  };
    189e:	601a      	str	r2, [r3, #0]
      .falling_edge_status = &(LPC_GPIOINT->IO2IntStatF),
    18a0:	4a1d      	ldr	r2, [pc, #116]	; (1918 <__static_initialization_and_destruction_0(int, int)+0x134>)
    18a2:	3228      	adds	r2, #40	; 0x28
  };
    18a4:	605a      	str	r2, [r3, #4]
      .clear               = &(LPC_GPIOINT->IO2IntClr),
    18a6:	4a1c      	ldr	r2, [pc, #112]	; (1918 <__static_initialization_and_destruction_0(int, int)+0x134>)
    18a8:	322c      	adds	r2, #44	; 0x2c
  };
    18aa:	609a      	str	r2, [r3, #8]
      .enable_rising_edge  = &(LPC_GPIOINT->IO2IntEnR),
    18ac:	4a1a      	ldr	r2, [pc, #104]	; (1918 <__static_initialization_and_destruction_0(int, int)+0x134>)
    18ae:	3230      	adds	r2, #48	; 0x30
  };
    18b0:	60da      	str	r2, [r3, #12]
      .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) }
    18b2:	4a19      	ldr	r2, [pc, #100]	; (1918 <__static_initialization_and_destruction_0(int, int)+0x134>)
    18b4:	3234      	adds	r2, #52	; 0x34
  };
    18b6:	611a      	str	r2, [r3, #16]
  inline static volatile uint32_t * port_status = &(LPC_GPIOINT->IntStatus);
    18b8:	4b18      	ldr	r3, [pc, #96]	; (191c <__static_initialization_and_destruction_0(int, int)+0x138>)
    18ba:	681b      	ldr	r3, [r3, #0]
    18bc:	f003 0301 	and.w	r3, r3, #1
    18c0:	2b00      	cmp	r3, #0
    18c2:	d106      	bne.n	18d2 <__static_initialization_and_destruction_0(int, int)+0xee>
    18c4:	4b15      	ldr	r3, [pc, #84]	; (191c <__static_initialization_and_destruction_0(int, int)+0x138>)
    18c6:	2201      	movs	r2, #1
    18c8:	601a      	str	r2, [r3, #0]
    18ca:	4b13      	ldr	r3, [pc, #76]	; (1918 <__static_initialization_and_destruction_0(int, int)+0x134>)
    18cc:	461a      	mov	r2, r3
    18ce:	4b14      	ldr	r3, [pc, #80]	; (1920 <__static_initialization_and_destruction_0(int, int)+0x13c>)
    18d0:	601a      	str	r2, [r3, #0]
    18d2:	bf00      	nop
    18d4:	3708      	adds	r7, #8
    18d6:	46bd      	mov	sp, r7
    18d8:	bd80      	pop	{r7, pc}
    18da:	bf00      	nop
    18dc:	1000033c 	.word	0x1000033c
    18e0:	4002c000 	.word	0x4002c000
    18e4:	100000ec 	.word	0x100000ec
    18e8:	10000340 	.word	0x10000340
    18ec:	100000f8 	.word	0x100000f8
    18f0:	10000344 	.word	0x10000344
    18f4:	20098000 	.word	0x20098000
    18f8:	100001f8 	.word	0x100001f8
    18fc:	20098020 	.word	0x20098020
    1900:	20098040 	.word	0x20098040
    1904:	20098060 	.word	0x20098060
    1908:	20098080 	.word	0x20098080
    190c:	200980a0 	.word	0x200980a0
    1910:	10000348 	.word	0x10000348
    1914:	10000310 	.word	0x10000310
    1918:	40028080 	.word	0x40028080
    191c:	1000034c 	.word	0x1000034c
    1920:	10000338 	.word	0x10000338

00001924 <_GLOBAL__sub_I_main>:
    1924:	b580      	push	{r7, lr}
    1926:	af00      	add	r7, sp, #0
    1928:	f64f 71ff 	movw	r1, #65535	; 0xffff
    192c:	2001      	movs	r0, #1
    192e:	f7ff ff59 	bl	17e4 <__static_initialization_and_destruction_0(int, int)>
    1932:	bd80      	pop	{r7, pc}

00001934 <_Unwind_GetGR>:
  _Unwind_Reason_Code __gnu_unwind_execute (_Unwind_Context *,
					    __gnu_unwind_state *);

  static inline _Unwind_Word
  _Unwind_GetGR (_Unwind_Context *context, int regno)
    {
    1934:	b580      	push	{r7, lr}
    1936:	b086      	sub	sp, #24
    1938:	af02      	add	r7, sp, #8
    193a:	6078      	str	r0, [r7, #4]
    193c:	6039      	str	r1, [r7, #0]
      _uw val;
      _Unwind_VRS_Get (context, _UVRSC_CORE, regno, _UVRSD_UINT32, &val);
    193e:	683a      	ldr	r2, [r7, #0]
    1940:	f107 030c 	add.w	r3, r7, #12
    1944:	9300      	str	r3, [sp, #0]
    1946:	2300      	movs	r3, #0
    1948:	2100      	movs	r1, #0
    194a:	6878      	ldr	r0, [r7, #4]
    194c:	f003 fda8 	bl	54a0 <_Unwind_VRS_Get>
      return val;
    1950:	68fb      	ldr	r3, [r7, #12]
    }
    1952:	4618      	mov	r0, r3
    1954:	3710      	adds	r7, #16
    1956:	46bd      	mov	sp, r7
    1958:	bd80      	pop	{r7, pc}
    195a:	Address 0x000000000000195a is out of bounds.


0000195c <sjsu::build::Stringify(sjsu::build::Target)>:

constexpr const Target kTarget     = Target::TARGET;
constexpr const Platform kPlatform = Platform::PLATFORM;

constexpr const char * Stringify(Target target)
{
    195c:	b480      	push	{r7}
    195e:	b085      	sub	sp, #20
    1960:	af00      	add	r7, sp, #0
    1962:	6078      	str	r0, [r7, #4]
  const char * result = "invalid";
    1964:	4b0a      	ldr	r3, [pc, #40]	; (1990 <sjsu::build::Stringify(sjsu::build::Target)+0x34>)
    1966:	60fb      	str	r3, [r7, #12]
  switch (target)
    1968:	687b      	ldr	r3, [r7, #4]
    196a:	2b00      	cmp	r3, #0
    196c:	d002      	beq.n	1974 <sjsu::build::Stringify(sjsu::build::Target)+0x18>
    196e:	2b01      	cmp	r3, #1
    1970:	d003      	beq.n	197a <sjsu::build::Stringify(sjsu::build::Target)+0x1e>
  {
    case Target::Application: result = "application"; break;
    case Target::HostTest: result = "host test"; break;
    default: break;
    1972:	e005      	b.n	1980 <sjsu::build::Stringify(sjsu::build::Target)+0x24>
    case Target::Application: result = "application"; break;
    1974:	4b07      	ldr	r3, [pc, #28]	; (1994 <sjsu::build::Stringify(sjsu::build::Target)+0x38>)
    1976:	60fb      	str	r3, [r7, #12]
    1978:	e002      	b.n	1980 <sjsu::build::Stringify(sjsu::build::Target)+0x24>
    case Target::HostTest: result = "host test"; break;
    197a:	4b07      	ldr	r3, [pc, #28]	; (1998 <sjsu::build::Stringify(sjsu::build::Target)+0x3c>)
    197c:	60fb      	str	r3, [r7, #12]
    197e:	bf00      	nop
  }
  return result;
    1980:	68fb      	ldr	r3, [r7, #12]
}
    1982:	4618      	mov	r0, r3
    1984:	3714      	adds	r7, #20
    1986:	46bd      	mov	sp, r7
    1988:	f85d 7b04 	ldr.w	r7, [sp], #4
    198c:	4770      	bx	lr
    198e:	bf00      	nop
    1990:	00006750 	.word	0x00006750
    1994:	00006758 	.word	0x00006758
    1998:	00006764 	.word	0x00006764

0000199c <sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)>:
// ==============================================
// Hidden Backtrace Utility Functions
// ==============================================
inline _Unwind_Reason_Code PrintAddressAsList(_Unwind_Context * context,
                                                     void * depth_pointer)
{
    199c:	b580      	push	{r7, lr}
    199e:	b084      	sub	sp, #16
    19a0:	af00      	add	r7, sp, #0
    19a2:	6078      	str	r0, [r7, #4]
    19a4:	6039      	str	r1, [r7, #0]
  int * depth      = static_cast<int *>(depth_pointer);
    19a6:	683b      	ldr	r3, [r7, #0]
    19a8:	60fb      	str	r3, [r7, #12]
  intptr_t address = static_cast<intptr_t>(_Unwind_GetIP(context));
    19aa:	210f      	movs	r1, #15
    19ac:	6878      	ldr	r0, [r7, #4]
    19ae:	f7ff ffc1 	bl	1934 <_Unwind_GetGR>
    19b2:	4603      	mov	r3, r0
    19b4:	f023 0301 	bic.w	r3, r3, #1
    19b8:	60bb      	str	r3, [r7, #8]
  printf("  %d) 0x%08" PRIXPTR "\n", *depth,
    19ba:	68fb      	ldr	r3, [r7, #12]
    19bc:	6819      	ldr	r1, [r3, #0]
    19be:	68bb      	ldr	r3, [r7, #8]
    19c0:	3b04      	subs	r3, #4
    19c2:	461a      	mov	r2, r3
    19c4:	4806      	ldr	r0, [pc, #24]	; (19e0 <sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)+0x44>)
    19c6:	f001 fb4f 	bl	3068 <printf>
         address - config::kBacktraceAddressOffset);
  (*depth)++;
    19ca:	68fb      	ldr	r3, [r7, #12]
    19cc:	681b      	ldr	r3, [r3, #0]
    19ce:	1c5a      	adds	r2, r3, #1
    19d0:	68fb      	ldr	r3, [r7, #12]
    19d2:	601a      	str	r2, [r3, #0]
  return _URC_NO_REASON;
    19d4:	2300      	movs	r3, #0
}
    19d6:	4618      	mov	r0, r3
    19d8:	3710      	adds	r7, #16
    19da:	46bd      	mov	sp, r7
    19dc:	bd80      	pop	{r7, pc}
    19de:	bf00      	nop
    19e0:	00006770 	.word	0x00006770

000019e4 <sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)>:
inline _Unwind_Reason_Code PrintAddressInRow(_Unwind_Context * context,
                                                    void * depth_pointer)
{
    19e4:	b580      	push	{r7, lr}
    19e6:	b084      	sub	sp, #16
    19e8:	af00      	add	r7, sp, #0
    19ea:	6078      	str	r0, [r7, #4]
    19ec:	6039      	str	r1, [r7, #0]
  int * depth      = static_cast<int *>(depth_pointer);
    19ee:	683b      	ldr	r3, [r7, #0]
    19f0:	60fb      	str	r3, [r7, #12]
  intptr_t address = static_cast<intptr_t>(_Unwind_GetIP(context));
    19f2:	210f      	movs	r1, #15
    19f4:	6878      	ldr	r0, [r7, #4]
    19f6:	f7ff ff9d 	bl	1934 <_Unwind_GetGR>
    19fa:	4603      	mov	r3, r0
    19fc:	f023 0301 	bic.w	r3, r3, #1
    1a00:	60bb      	str	r3, [r7, #8]
  printf(" 0x%08" PRIXPTR, address - config::kBacktraceAddressOffset);
    1a02:	68bb      	ldr	r3, [r7, #8]
    1a04:	3b04      	subs	r3, #4
    1a06:	4619      	mov	r1, r3
    1a08:	4806      	ldr	r0, [pc, #24]	; (1a24 <sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)+0x40>)
    1a0a:	f001 fb2d 	bl	3068 <printf>
  (*depth)++;
    1a0e:	68fb      	ldr	r3, [r7, #12]
    1a10:	681b      	ldr	r3, [r3, #0]
    1a12:	1c5a      	adds	r2, r3, #1
    1a14:	68fb      	ldr	r3, [r7, #12]
    1a16:	601a      	str	r2, [r3, #0]
  return _URC_NO_REASON;
    1a18:	2300      	movs	r3, #0
}
    1a1a:	4618      	mov	r0, r3
    1a1c:	3710      	adds	r7, #16
    1a1e:	46bd      	mov	sp, r7
    1a20:	bd80      	pop	{r7, pc}
    1a22:	bf00      	nop
    1a24:	00006780 	.word	0x00006780

00001a28 <sjsu::debug::PrintBacktrace(bool, void*)>:
///        to print the file and line number that corresponds to the printed
///        addresses.
/// @param length - the number of bytes to read from the starting location
inline void PrintBacktrace(bool show_make_command = false,
                           void * final_address   = nullptr)
{
    1a28:	b580      	push	{r7, lr}
    1a2a:	b084      	sub	sp, #16
    1a2c:	af00      	add	r7, sp, #0
    1a2e:	4603      	mov	r3, r0
    1a30:	6039      	str	r1, [r7, #0]
    1a32:	71fb      	strb	r3, [r7, #7]
  if constexpr (config::kIncludeBacktrace)
  {
    int depth = 0;
    1a34:	2300      	movs	r3, #0
    1a36:	60fb      	str	r3, [r7, #12]
    _Unwind_Backtrace(&PrintAddressAsList, &depth);
    1a38:	f107 030c 	add.w	r3, r7, #12
    1a3c:	4619      	mov	r1, r3
    1a3e:	481a      	ldr	r0, [pc, #104]	; (1aa8 <sjsu::debug::PrintBacktrace(bool, void*)+0x80>)
    1a40:	f004 f920 	bl	5c84 <_Unwind_Backtrace>
    if (final_address)
    1a44:	683b      	ldr	r3, [r7, #0]
    1a46:	2b00      	cmp	r3, #0
    1a48:	d005      	beq.n	1a56 <sjsu::debug::PrintBacktrace(bool, void*)+0x2e>
    {
      printf("  %d) 0x%p\n", depth, final_address);
    1a4a:	68fb      	ldr	r3, [r7, #12]
    1a4c:	683a      	ldr	r2, [r7, #0]
    1a4e:	4619      	mov	r1, r3
    1a50:	4816      	ldr	r0, [pc, #88]	; (1aac <sjsu::debug::PrintBacktrace(bool, void*)+0x84>)
    1a52:	f001 fb09 	bl	3068 <printf>
    }

    if (show_make_command)
    1a56:	79fb      	ldrb	r3, [r7, #7]
    1a58:	2b00      	cmp	r3, #0
    1a5a:	d020      	beq.n	1a9e <sjsu::debug::PrintBacktrace(bool, void*)+0x76>
    {
      printf("\nRun: the following command in your project directory");
    1a5c:	4814      	ldr	r0, [pc, #80]	; (1ab0 <sjsu::debug::PrintBacktrace(bool, void*)+0x88>)
    1a5e:	f001 fb03 	bl	3068 <printf>
      printf("\n\n  " SJ2_BOLD_WHITE);
    1a62:	4814      	ldr	r0, [pc, #80]	; (1ab4 <sjsu::debug::PrintBacktrace(bool, void*)+0x8c>)
    1a64:	f001 fb00 	bl	3068 <printf>
      printf("make stacktrace-%s TRACES=\"", Stringify(build::kTarget));
    1a68:	2000      	movs	r0, #0
    1a6a:	f7ff ff77 	bl	195c <sjsu::build::Stringify(sjsu::build::Target)>
    1a6e:	4603      	mov	r3, r0
    1a70:	4619      	mov	r1, r3
    1a72:	4811      	ldr	r0, [pc, #68]	; (1ab8 <sjsu::debug::PrintBacktrace(bool, void*)+0x90>)
    1a74:	f001 faf8 	bl	3068 <printf>

      _Unwind_Backtrace(&PrintAddressInRow, &depth);
    1a78:	f107 030c 	add.w	r3, r7, #12
    1a7c:	4619      	mov	r1, r3
    1a7e:	480f      	ldr	r0, [pc, #60]	; (1abc <sjsu::debug::PrintBacktrace(bool, void*)+0x94>)
    1a80:	f004 f900 	bl	5c84 <_Unwind_Backtrace>
      if (final_address)
    1a84:	683b      	ldr	r3, [r7, #0]
    1a86:	2b00      	cmp	r3, #0
    1a88:	d003      	beq.n	1a92 <sjsu::debug::PrintBacktrace(bool, void*)+0x6a>
      {
        printf(" 0x%p", final_address);
    1a8a:	6839      	ldr	r1, [r7, #0]
    1a8c:	480c      	ldr	r0, [pc, #48]	; (1ac0 <sjsu::debug::PrintBacktrace(bool, void*)+0x98>)
    1a8e:	f001 faeb 	bl	3068 <printf>
      }

      printf("\"\n\n" SJ2_COLOR_RESET);
    1a92:	480c      	ldr	r0, [pc, #48]	; (1ac4 <sjsu::debug::PrintBacktrace(bool, void*)+0x9c>)
    1a94:	f001 fae8 	bl	3068 <printf>
      printf(
    1a98:	480b      	ldr	r0, [pc, #44]	; (1ac8 <sjsu::debug::PrintBacktrace(bool, void*)+0xa0>)
    1a9a:	f000 f9c9 	bl	1e30 <puts>
          "This will report the file and line number that led to this function "
          "being called.\n");
    }
  }
}
    1a9e:	bf00      	nop
    1aa0:	3710      	adds	r7, #16
    1aa2:	46bd      	mov	sp, r7
    1aa4:	bd80      	pop	{r7, pc}
    1aa6:	bf00      	nop
    1aa8:	0000199d 	.word	0x0000199d
    1aac:	00006788 	.word	0x00006788
    1ab0:	00006794 	.word	0x00006794
    1ab4:	000067cc 	.word	0x000067cc
    1ab8:	000067d8 	.word	0x000067d8
    1abc:	000019e5 	.word	0x000019e5
    1ac0:	000067f4 	.word	0x000067f4
    1ac4:	000067fc 	.word	0x000067fc
    1ac8:	00006804 	.word	0x00006804

00001acc <sjsu::InitializeDataSection()>:

namespace sjsu
{
// Functions to carry out the initialization of RW and BSS data sections.
inline void InitializeDataSection()
{
    1acc:	b480      	push	{r7}
    1ace:	b087      	sub	sp, #28
    1ad0:	af00      	add	r7, sp, #0
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
    1ad2:	2300      	movs	r3, #0
    1ad4:	617b      	str	r3, [r7, #20]
    1ad6:	697a      	ldr	r2, [r7, #20]
    1ad8:	4613      	mov	r3, r2
    1ada:	005b      	lsls	r3, r3, #1
    1adc:	4413      	add	r3, r2
    1ade:	009b      	lsls	r3, r3, #2
    1ae0:	4a1f      	ldr	r2, [pc, #124]	; (1b60 <sjsu::InitializeDataSection()+0x94>)
    1ae2:	4413      	add	r3, r2
    1ae4:	4a1f      	ldr	r2, [pc, #124]	; (1b64 <sjsu::InitializeDataSection()+0x98>)
    1ae6:	4293      	cmp	r3, r2
    1ae8:	d233      	bcs.n	1b52 <sjsu::InitializeDataSection()+0x86>
  {
    uint32_t * rom_location = data_section_table[i].rom_location;
    1aea:	491d      	ldr	r1, [pc, #116]	; (1b60 <sjsu::InitializeDataSection()+0x94>)
    1aec:	697a      	ldr	r2, [r7, #20]
    1aee:	4613      	mov	r3, r2
    1af0:	005b      	lsls	r3, r3, #1
    1af2:	4413      	add	r3, r2
    1af4:	009b      	lsls	r3, r3, #2
    1af6:	440b      	add	r3, r1
    1af8:	681b      	ldr	r3, [r3, #0]
    1afa:	60fb      	str	r3, [r7, #12]
    uint32_t * ram_location = data_section_table[i].ram_location;
    1afc:	4918      	ldr	r1, [pc, #96]	; (1b60 <sjsu::InitializeDataSection()+0x94>)
    1afe:	697a      	ldr	r2, [r7, #20]
    1b00:	4613      	mov	r3, r2
    1b02:	005b      	lsls	r3, r3, #1
    1b04:	4413      	add	r3, r2
    1b06:	009b      	lsls	r3, r3, #2
    1b08:	440b      	add	r3, r1
    1b0a:	685b      	ldr	r3, [r3, #4]
    1b0c:	60bb      	str	r3, [r7, #8]
    uint32_t length         = data_section_table[i].length;
    1b0e:	4914      	ldr	r1, [pc, #80]	; (1b60 <sjsu::InitializeDataSection()+0x94>)
    1b10:	697a      	ldr	r2, [r7, #20]
    1b12:	4613      	mov	r3, r2
    1b14:	005b      	lsls	r3, r3, #1
    1b16:	4413      	add	r3, r2
    1b18:	009b      	lsls	r3, r3, #2
    1b1a:	440b      	add	r3, r1
    1b1c:	3308      	adds	r3, #8
    1b1e:	681b      	ldr	r3, [r3, #0]
    1b20:	607b      	str	r3, [r7, #4]
    for (size_t j = 0; j < length; j++)
    1b22:	2300      	movs	r3, #0
    1b24:	613b      	str	r3, [r7, #16]
    1b26:	693a      	ldr	r2, [r7, #16]
    1b28:	687b      	ldr	r3, [r7, #4]
    1b2a:	429a      	cmp	r2, r3
    1b2c:	d20d      	bcs.n	1b4a <sjsu::InitializeDataSection()+0x7e>
    {
      ram_location[j] = rom_location[j];
    1b2e:	693b      	ldr	r3, [r7, #16]
    1b30:	009b      	lsls	r3, r3, #2
    1b32:	68fa      	ldr	r2, [r7, #12]
    1b34:	441a      	add	r2, r3
    1b36:	693b      	ldr	r3, [r7, #16]
    1b38:	009b      	lsls	r3, r3, #2
    1b3a:	68b9      	ldr	r1, [r7, #8]
    1b3c:	440b      	add	r3, r1
    1b3e:	6812      	ldr	r2, [r2, #0]
    1b40:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
    1b42:	693b      	ldr	r3, [r7, #16]
    1b44:	3301      	adds	r3, #1
    1b46:	613b      	str	r3, [r7, #16]
    1b48:	e7ed      	b.n	1b26 <sjsu::InitializeDataSection()+0x5a>
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
    1b4a:	697b      	ldr	r3, [r7, #20]
    1b4c:	3301      	adds	r3, #1
    1b4e:	617b      	str	r3, [r7, #20]
    1b50:	e7c1      	b.n	1ad6 <sjsu::InitializeDataSection()+0xa>
    }
  }
}
    1b52:	bf00      	nop
    1b54:	371c      	adds	r7, #28
    1b56:	46bd      	mov	sp, r7
    1b58:	f85d 7b04 	ldr.w	r7, [sp], #4
    1b5c:	4770      	bx	lr
    1b5e:	bf00      	nop
    1b60:	000000e4 	.word	0x000000e4
    1b64:	000000fc 	.word	0x000000fc

00001b68 <sjsu::InitializeBssSection()>:
// Functions to initialization BSS data sections. This is important because
// the std c libs assume that BSS is set to zero.
inline void InitializeBssSection()
{
    1b68:	b480      	push	{r7}
    1b6a:	b085      	sub	sp, #20
    1b6c:	af00      	add	r7, sp, #0
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
    1b6e:	2300      	movs	r3, #0
    1b70:	60fb      	str	r3, [r7, #12]
    1b72:	68fb      	ldr	r3, [r7, #12]
    1b74:	00db      	lsls	r3, r3, #3
    1b76:	4a15      	ldr	r2, [pc, #84]	; (1bcc <sjsu::InitializeBssSection()+0x64>)
    1b78:	4413      	add	r3, r2
    1b7a:	4a15      	ldr	r2, [pc, #84]	; (1bd0 <sjsu::InitializeBssSection()+0x68>)
    1b7c:	4293      	cmp	r3, r2
    1b7e:	d21e      	bcs.n	1bbe <sjsu::InitializeBssSection()+0x56>
  {
    uint32_t * ram_location = bss_section_table[i].ram_location;
    1b80:	4a12      	ldr	r2, [pc, #72]	; (1bcc <sjsu::InitializeBssSection()+0x64>)
    1b82:	68fb      	ldr	r3, [r7, #12]
    1b84:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    1b88:	607b      	str	r3, [r7, #4]
    uint32_t length         = bss_section_table[i].length;
    1b8a:	4a10      	ldr	r2, [pc, #64]	; (1bcc <sjsu::InitializeBssSection()+0x64>)
    1b8c:	68fb      	ldr	r3, [r7, #12]
    1b8e:	00db      	lsls	r3, r3, #3
    1b90:	4413      	add	r3, r2
    1b92:	685b      	ldr	r3, [r3, #4]
    1b94:	603b      	str	r3, [r7, #0]
    for (size_t j = 0; j < length; j++)
    1b96:	2300      	movs	r3, #0
    1b98:	60bb      	str	r3, [r7, #8]
    1b9a:	68ba      	ldr	r2, [r7, #8]
    1b9c:	683b      	ldr	r3, [r7, #0]
    1b9e:	429a      	cmp	r2, r3
    1ba0:	d209      	bcs.n	1bb6 <sjsu::InitializeBssSection()+0x4e>
    {
      ram_location[j] = 0;
    1ba2:	68bb      	ldr	r3, [r7, #8]
    1ba4:	009b      	lsls	r3, r3, #2
    1ba6:	687a      	ldr	r2, [r7, #4]
    1ba8:	4413      	add	r3, r2
    1baa:	2200      	movs	r2, #0
    1bac:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
    1bae:	68bb      	ldr	r3, [r7, #8]
    1bb0:	3301      	adds	r3, #1
    1bb2:	60bb      	str	r3, [r7, #8]
    1bb4:	e7f1      	b.n	1b9a <sjsu::InitializeBssSection()+0x32>
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
    1bb6:	68fb      	ldr	r3, [r7, #12]
    1bb8:	3301      	adds	r3, #1
    1bba:	60fb      	str	r3, [r7, #12]
    1bbc:	e7d9      	b.n	1b72 <sjsu::InitializeBssSection()+0xa>
    }
  }
}
    1bbe:	bf00      	nop
    1bc0:	3714      	adds	r7, #20
    1bc2:	46bd      	mov	sp, r7
    1bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
    1bc8:	4770      	bx	lr
    1bca:	bf00      	nop
    1bcc:	000000fc 	.word	0x000000fc
    1bd0:	0000010c 	.word	0x0000010c

00001bd4 <sjsu::SystemInitialize()>:

namespace sjsu
{
// Sets up the .data, .bss sections, run C++ constructors.
inline void SystemInitialize()
{
    1bd4:	b580      	push	{r7, lr}
    1bd6:	af00      	add	r7, sp, #0
  // SysInit 1. Transfer data section values from flash to RAM
  //            (ALREADY DONE FOR YOU)
  InitializeDataSection();
    1bd8:	f7ff ff78 	bl	1acc <sjsu::InitializeDataSection()>
  // SysInit 2. Clear BSS section of RAM
  //            This is required because the nano implementation of the
  //            standard C/C++ libraries assumes that the BSS section is
  //            initialized to 0.
  //            (ALREADY DONE FOR YOU)
  InitializeBssSection();
    1bdc:	f7ff ffc4 	bl	1b68 <sjsu::InitializeBssSection()>
  //  SysInit 3. Initialisation C++ libraries
  //            (ALREADY DONE FOR YOU)
  __libc_init_array();
    1be0:	f004 fa26 	bl	6030 <__libc_init_array>
}
    1be4:	bf00      	nop
    1be6:	bd80      	pop	{r7, pc}

00001be8 <GetRegistersFromStack>:
#include "utility/time.hpp"

extern "C"
{
  void GetRegistersFromStack(uint32_t * fault_stack_address)
  {
    1be8:	b580      	push	{r7, lr}
    1bea:	b08c      	sub	sp, #48	; 0x30
    1bec:	af02      	add	r7, sp, #8
    1bee:	6078      	str	r0, [r7, #4]
    // These are volatile to try and prevent the compiler/linker optimizing them
    // away as the variables never actually get used.  If the debugger won't
    // show the values of the variables, make them global my moving their
    // declaration outside of this function.
    volatile uint32_t r0  = fault_stack_address[0];
    1bf0:	687b      	ldr	r3, [r7, #4]
    1bf2:	681b      	ldr	r3, [r3, #0]
    1bf4:	627b      	str	r3, [r7, #36]	; 0x24
    volatile uint32_t r1  = fault_stack_address[1];
    1bf6:	687b      	ldr	r3, [r7, #4]
    1bf8:	685b      	ldr	r3, [r3, #4]
    1bfa:	623b      	str	r3, [r7, #32]
    volatile uint32_t r2  = fault_stack_address[2];
    1bfc:	687b      	ldr	r3, [r7, #4]
    1bfe:	689b      	ldr	r3, [r3, #8]
    1c00:	61fb      	str	r3, [r7, #28]
    volatile uint32_t r3  = fault_stack_address[3];
    1c02:	687b      	ldr	r3, [r7, #4]
    1c04:	68db      	ldr	r3, [r3, #12]
    1c06:	61bb      	str	r3, [r7, #24]
    volatile uint32_t r12 = fault_stack_address[4];
    1c08:	687b      	ldr	r3, [r7, #4]
    1c0a:	691b      	ldr	r3, [r3, #16]
    1c0c:	617b      	str	r3, [r7, #20]
    // Link register.
    volatile uint32_t lr = fault_stack_address[5];
    1c0e:	687b      	ldr	r3, [r7, #4]
    1c10:	695b      	ldr	r3, [r3, #20]
    1c12:	613b      	str	r3, [r7, #16]
    // Program counter.
    volatile uint32_t pc = fault_stack_address[6];
    1c14:	687b      	ldr	r3, [r7, #4]
    1c16:	699b      	ldr	r3, [r3, #24]
    1c18:	60fb      	str	r3, [r7, #12]
    // Program status register.
    volatile uint32_t psr = fault_stack_address[7];
    1c1a:	687b      	ldr	r3, [r7, #4]
    1c1c:	69db      	ldr	r3, [r3, #28]
    1c1e:	60bb      	str	r3, [r7, #8]

    printf(SJ2_BACKGROUND_RED
    1c20:	480d      	ldr	r0, [pc, #52]	; (1c58 <GetRegistersFromStack+0x70>)
    1c22:	f001 fa21 	bl	3068 <printf>
           "Hard Fault Exception Occurred!\n" SJ2_COLOR_RESET);
    printf("r0: 0x%08" PRIX32 ", r1: 0x%08" PRIX32
    1c26:	6a79      	ldr	r1, [r7, #36]	; 0x24
    1c28:	6a3a      	ldr	r2, [r7, #32]
    1c2a:	69f8      	ldr	r0, [r7, #28]
    1c2c:	69bb      	ldr	r3, [r7, #24]
    1c2e:	9300      	str	r3, [sp, #0]
    1c30:	4603      	mov	r3, r0
    1c32:	480a      	ldr	r0, [pc, #40]	; (1c5c <GetRegistersFromStack+0x74>)
    1c34:	f001 fa18 	bl	3068 <printf>
           "r2: 0x%08" PRIX32 ", r3: 0x%08" PRIX32 "\n",
           r0,
           r1,
           r2,
           r3);
    printf("r12: 0x%08" PRIX32 ", lr: 0x%08" PRIX32
    1c38:	6979      	ldr	r1, [r7, #20]
    1c3a:	693a      	ldr	r2, [r7, #16]
    1c3c:	68f8      	ldr	r0, [r7, #12]
    1c3e:	68bb      	ldr	r3, [r7, #8]
    1c40:	9300      	str	r3, [sp, #0]
    1c42:	4603      	mov	r3, r0
    1c44:	4806      	ldr	r0, [pc, #24]	; (1c60 <GetRegistersFromStack+0x78>)
    1c46:	f001 fa0f 	bl	3068 <printf>
           "pc: 0x%08" PRIX32 ", psr: 0x%08" PRIX32 "\n",
           r12,
           lr,
           pc,
           psr);
    sjsu::debug::PrintBacktrace(true, reinterpret_cast<void *>(pc));
    1c4a:	68fb      	ldr	r3, [r7, #12]
    1c4c:	4619      	mov	r1, r3
    1c4e:	2001      	movs	r0, #1
    1c50:	f7ff feea 	bl	1a28 <sjsu::debug::PrintBacktrace(bool, void*)>
    1c54:	e7fe      	b.n	1c54 <GetRegistersFromStack+0x6c>
    1c56:	bf00      	nop
    1c58:	00006de4 	.word	0x00006de4
    1c5c:	00006e10 	.word	0x00006e10
    1c60:	00006e44 	.word	0x00006e44

00001c64 <ArmHardFaultHandler>:
    // Use a JTAG debugger to inspect these variables
    sjsu::Halt();
  }

  void ArmHardFaultHandler(void)
  {
    1c64:	b480      	push	{r7}
    1c66:	af00      	add	r7, sp, #0
          " mrseq r0, msp                                       \n"
          " mrsne r0, psp                                       \n"
          " ldr r1, [r0, #24]                                   \n"
          " ldr r2, handler2_address_const                      \n"
          " bx r2                                               \n"
          " handler2_address_const: .word GetRegistersFromStack \n");
    1c68:	f01e 0f04 	tst.w	lr, #4
    1c6c:	bf0c      	ite	eq
    1c6e:	f3ef 8008 	mrseq	r0, MSP
    1c72:	f3ef 8009 	mrsne	r0, PSP
    1c76:	6981      	ldr	r1, [r0, #24]
    1c78:	4a00      	ldr	r2, [pc, #0]	; (1c7c <handler2_address_const>)
    1c7a:	4710      	bx	r2

00001c7c <handler2_address_const>:
    1c7c:	00001be9 	.word	0x00001be9
    }
  }
    1c80:	bf00      	nop
    1c82:	46bd      	mov	sp, r7
    1c84:	f85d 7b04 	ldr.w	r7, [sp], #4
    1c88:	4770      	bx	lr
    1c8a:	Address 0x0000000000001c8a is out of bounds.


00001c8c <ArmResetHandler>:

  // Reset entry point for your code.
  // Sets up a simple runtime environment and initializes the C/C++ library.
  void ArmResetHandler()
  {
    1c8c:	b580      	push	{r7, lr}
    1c8e:	b084      	sub	sp, #16
    1c90:	af00      	add	r7, sp, #0
    // script
    // The Hyperload bootloader takes up stack space to execute. The Hyperload
    // bootloader function launches this ISR manually, but it never returns thus
    // it never cleans up the memory it uses. To get that memory back, we have
    // to manually move the stack pointers back to the top of stack.
    const uint32_t kTopOfStack = reinterpret_cast<intptr_t>(&StackTop);
    1c92:	4b10      	ldr	r3, [pc, #64]	; (1cd4 <ArmResetHandler+0x48>)
    1c94:	60fb      	str	r3, [r7, #12]
    1c96:	68fb      	ldr	r3, [r7, #12]
    1c98:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM (volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp"));
    1c9a:	683b      	ldr	r3, [r7, #0]
    1c9c:	f383 8809 	msr	PSP, r3
    1ca0:	68fb      	ldr	r3, [r7, #12]
    1ca2:	607b      	str	r3, [r7, #4]

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM (volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp"));
    1ca4:	687b      	ldr	r3, [r7, #4]
    1ca6:	f383 8808 	msr	MSP, r3
    sjsu::cortex::__set_PSP(kTopOfStack);
    sjsu::cortex::__set_MSP(kTopOfStack);

    sjsu::SystemInitialize();
    1caa:	f7ff ff93 	bl	1bd4 <sjsu::SystemInitialize()>
    sjsu::InitializePlatform();
    1cae:	f002 fcb1 	bl	4614 <sjsu::InitializePlatform()>
// #pragma ignored "-Wpedantic" to suppress main function call warning
#pragma GCC diagnostic push ignored "-Wpedantic"
    int32_t result = main();
    1cb2:	f7ff fb0f 	bl	12d4 <main>
    1cb6:	60b8      	str	r0, [r7, #8]
// Enforce the warning after this point
#pragma GCC diagnostic pop
    // main() shouldn't return, but if it does, we'll just enter an infinite
    // loop
    if (result >= 0)
    1cb8:	68bb      	ldr	r3, [r7, #8]
    1cba:	2b00      	cmp	r3, #0
    1cbc:	db04      	blt.n	1cc8 <ArmResetHandler+0x3c>
    {
      printf("\n" SJ2_BOLD_WHITE SJ2_BACKGROUND_GREEN
    1cbe:	68b9      	ldr	r1, [r7, #8]
    1cc0:	4805      	ldr	r0, [pc, #20]	; (1cd8 <ArmResetHandler+0x4c>)
    1cc2:	f001 f9d1 	bl	3068 <printf>
    1cc6:	e003      	b.n	1cd0 <ArmResetHandler+0x44>
             "Program Returned Exit Code: %" PRId32 "\n" SJ2_COLOR_RESET,
             result);
    }
    else
    {
      printf("\n" SJ2_BOLD_WHITE SJ2_BACKGROUND_RED
    1cc8:	68b9      	ldr	r1, [r7, #8]
    1cca:	4804      	ldr	r0, [pc, #16]	; (1cdc <ArmResetHandler+0x50>)
    1ccc:	f001 f9cc 	bl	3068 <printf>
    1cd0:	e7fe      	b.n	1cd0 <ArmResetHandler+0x44>
    1cd2:	bf00      	nop
    1cd4:	10010000 	.word	0x10010000
    1cd8:	00006e7c 	.word	0x00006e7c
    1cdc:	00006eb0 	.word	0x00006eb0

00001ce0 <__static_initialization_and_destruction_0(int, int)>:
             result);
    }
    sjsu::Halt();
  }

}  // extern "C"
    1ce0:	b580      	push	{r7, lr}
    1ce2:	b082      	sub	sp, #8
    1ce4:	af00      	add	r7, sp, #0
    1ce6:	6078      	str	r0, [r7, #4]
    1ce8:	6039      	str	r1, [r7, #0]
    1cea:	687b      	ldr	r3, [r7, #4]
    1cec:	2b01      	cmp	r3, #1
    1cee:	d111      	bne.n	1d14 <__static_initialization_and_destruction_0(int, int)+0x34>
    1cf0:	683b      	ldr	r3, [r7, #0]
    1cf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    1cf6:	4293      	cmp	r3, r2
    1cf8:	d10c      	bne.n	1d14 <__static_initialization_and_destruction_0(int, int)+0x34>
    1cfa:	4b08      	ldr	r3, [pc, #32]	; (1d1c <__static_initialization_and_destruction_0(int, int)+0x3c>)
    1cfc:	681b      	ldr	r3, [r3, #0]
    1cfe:	f003 0301 	and.w	r3, r3, #1
    1d02:	2b00      	cmp	r3, #0
    1d04:	d106      	bne.n	1d14 <__static_initialization_and_destruction_0(int, int)+0x34>
    1d06:	4b05      	ldr	r3, [pc, #20]	; (1d1c <__static_initialization_and_destruction_0(int, int)+0x3c>)
    1d08:	2201      	movs	r2, #1
    1d0a:	601a      	str	r2, [r3, #0]
    1d0c:	4b04      	ldr	r3, [pc, #16]	; (1d20 <__static_initialization_and_destruction_0(int, int)+0x40>)
    1d0e:	4618      	mov	r0, r3
    1d10:	f7fe fd66 	bl	7e0 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>
    1d14:	bf00      	nop
    1d16:	3708      	adds	r7, #8
    1d18:	46bd      	mov	sp, r7
    1d1a:	bd80      	pop	{r7, pc}
    1d1c:	10000340 	.word	0x10000340
    1d20:	100000f8 	.word	0x100000f8

00001d24 <_GLOBAL__sub_I_GetRegistersFromStack>:
    1d24:	b580      	push	{r7, lr}
    1d26:	af00      	add	r7, sp, #0
    1d28:	f64f 71ff 	movw	r1, #65535	; 0xffff
    1d2c:	2001      	movs	r0, #1
    1d2e:	f7ff ffd7 	bl	1ce0 <__static_initialization_and_destruction_0(int, int)>
    1d32:	bd80      	pop	{r7, pc}

00001d34 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    1d34:	b580      	push	{r7, lr}
    1d36:	b084      	sub	sp, #16
    1d38:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    1d3a:	4b28      	ldr	r3, [pc, #160]	; (1ddc <vTaskSwitchContext+0xa8>)
    1d3c:	681b      	ldr	r3, [r3, #0]
    1d3e:	2b00      	cmp	r3, #0
    1d40:	d003      	beq.n	1d4a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    1d42:	4b27      	ldr	r3, [pc, #156]	; (1de0 <vTaskSwitchContext+0xac>)
    1d44:	2201      	movs	r2, #1
    1d46:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    1d48:	e043      	b.n	1dd2 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
    1d4a:	4b25      	ldr	r3, [pc, #148]	; (1de0 <vTaskSwitchContext+0xac>)
    1d4c:	2200      	movs	r2, #0
    1d4e:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
    1d50:	f002 fc56 	bl	4600 <ThreadRuntimeCounter>
    1d54:	4602      	mov	r2, r0
    1d56:	4b23      	ldr	r3, [pc, #140]	; (1de4 <vTaskSwitchContext+0xb0>)
    1d58:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
    1d5a:	4b22      	ldr	r3, [pc, #136]	; (1de4 <vTaskSwitchContext+0xb0>)
    1d5c:	681a      	ldr	r2, [r3, #0]
    1d5e:	4b22      	ldr	r3, [pc, #136]	; (1de8 <vTaskSwitchContext+0xb4>)
    1d60:	681b      	ldr	r3, [r3, #0]
    1d62:	429a      	cmp	r2, r3
    1d64:	d909      	bls.n	1d7a <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
    1d66:	4b21      	ldr	r3, [pc, #132]	; (1dec <vTaskSwitchContext+0xb8>)
    1d68:	681b      	ldr	r3, [r3, #0]
    1d6a:	6d59      	ldr	r1, [r3, #84]	; 0x54
    1d6c:	4a1d      	ldr	r2, [pc, #116]	; (1de4 <vTaskSwitchContext+0xb0>)
    1d6e:	6810      	ldr	r0, [r2, #0]
    1d70:	4a1d      	ldr	r2, [pc, #116]	; (1de8 <vTaskSwitchContext+0xb4>)
    1d72:	6812      	ldr	r2, [r2, #0]
    1d74:	1a82      	subs	r2, r0, r2
    1d76:	440a      	add	r2, r1
    1d78:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
    1d7a:	4b1a      	ldr	r3, [pc, #104]	; (1de4 <vTaskSwitchContext+0xb0>)
    1d7c:	681b      	ldr	r3, [r3, #0]
    1d7e:	4a1a      	ldr	r2, [pc, #104]	; (1de8 <vTaskSwitchContext+0xb4>)
    1d80:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
    1d82:	4b1b      	ldr	r3, [pc, #108]	; (1df0 <vTaskSwitchContext+0xbc>)
    1d84:	681b      	ldr	r3, [r3, #0]
    1d86:	607b      	str	r3, [r7, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
    1d88:	687b      	ldr	r3, [r7, #4]
    1d8a:	fab3 f383 	clz	r3, r3
    1d8e:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
    1d90:	78fb      	ldrb	r3, [r7, #3]
    1d92:	f1c3 031f 	rsb	r3, r3, #31
    1d96:	60fb      	str	r3, [r7, #12]
    1d98:	68fa      	ldr	r2, [r7, #12]
    1d9a:	4613      	mov	r3, r2
    1d9c:	009b      	lsls	r3, r3, #2
    1d9e:	4413      	add	r3, r2
    1da0:	009b      	lsls	r3, r3, #2
    1da2:	4a14      	ldr	r2, [pc, #80]	; (1df4 <vTaskSwitchContext+0xc0>)
    1da4:	4413      	add	r3, r2
    1da6:	60bb      	str	r3, [r7, #8]
    1da8:	68bb      	ldr	r3, [r7, #8]
    1daa:	685b      	ldr	r3, [r3, #4]
    1dac:	685a      	ldr	r2, [r3, #4]
    1dae:	68bb      	ldr	r3, [r7, #8]
    1db0:	605a      	str	r2, [r3, #4]
    1db2:	68bb      	ldr	r3, [r7, #8]
    1db4:	685a      	ldr	r2, [r3, #4]
    1db6:	68bb      	ldr	r3, [r7, #8]
    1db8:	3308      	adds	r3, #8
    1dba:	429a      	cmp	r2, r3
    1dbc:	d104      	bne.n	1dc8 <vTaskSwitchContext+0x94>
    1dbe:	68bb      	ldr	r3, [r7, #8]
    1dc0:	685b      	ldr	r3, [r3, #4]
    1dc2:	685a      	ldr	r2, [r3, #4]
    1dc4:	68bb      	ldr	r3, [r7, #8]
    1dc6:	605a      	str	r2, [r3, #4]
    1dc8:	68bb      	ldr	r3, [r7, #8]
    1dca:	685b      	ldr	r3, [r3, #4]
    1dcc:	68db      	ldr	r3, [r3, #12]
    1dce:	4a07      	ldr	r2, [pc, #28]	; (1dec <vTaskSwitchContext+0xb8>)
    1dd0:	6013      	str	r3, [r2, #0]
}
    1dd2:	bf00      	nop
    1dd4:	3710      	adds	r7, #16
    1dd6:	46bd      	mov	sp, r7
    1dd8:	bd80      	pop	{r7, pc}
    1dda:	bf00      	nop
    1ddc:	100003c0 	.word	0x100003c0
    1de0:	100003bc 	.word	0x100003bc
    1de4:	100003c8 	.word	0x100003c8
    1de8:	100003c4 	.word	0x100003c4
    1dec:	10000350 	.word	0x10000350
    1df0:	100003b8 	.word	0x100003b8
    1df4:	10000354 	.word	0x10000354

00001df8 <_exit>:
  }
  // Dummy implementation of exit with return code placed into
  // Arm register r3
  // NOLINTNEXTLINE(readability-identifier-naming)
  void _exit([[maybe_unused]] int rc)
  {
    1df8:	b480      	push	{r7}
    1dfa:	b083      	sub	sp, #12
    1dfc:	af00      	add	r7, sp, #0
    1dfe:	6078      	str	r0, [r7, #4]
    while (1)
    {
      continue;
    1e00:	bf00      	nop
    while (1)
    1e02:	e7fd      	b.n	1e00 <_exit+0x8>

00001e04 <_getpid>:
    }
  }
  // Dummy implementation of getpid
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _getpid()
  {
    1e04:	b480      	push	{r7}
    1e06:	af00      	add	r7, sp, #0
    return 1;
    1e08:	2301      	movs	r3, #1
  }
    1e0a:	4618      	mov	r0, r3
    1e0c:	46bd      	mov	sp, r7
    1e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e12:	4770      	bx	lr

00001e14 <_kill>:
  // Dummy implementation of kill
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _kill(int, int)
  {
    1e14:	b480      	push	{r7}
    1e16:	b083      	sub	sp, #12
    1e18:	af00      	add	r7, sp, #0
    1e1a:	6078      	str	r0, [r7, #4]
    1e1c:	6039      	str	r1, [r7, #0]
    return -1;
    1e1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
    1e22:	4618      	mov	r0, r3
    1e24:	370c      	adds	r7, #12
    1e26:	46bd      	mov	sp, r7
    1e28:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e2c:	4770      	bx	lr
    1e2e:	Address 0x0000000000001e2e is out of bounds.


00001e30 <puts>:
  }

  // Overload default libnano puts() with a more optimal version that does
  // not use dynamic memory
  int puts(const char * str)  // NOLINT
  {
    1e30:	b580      	push	{r7, lr}
    1e32:	b084      	sub	sp, #16
    1e34:	af00      	add	r7, sp, #0
    1e36:	6078      	str	r0, [r7, #4]
    size_t string_length = strlen(str);
    1e38:	6878      	ldr	r0, [r7, #4]
    1e3a:	f004 f975 	bl	6128 <strlen>
    1e3e:	60f8      	str	r0, [r7, #12]
    int result           = 0;
    1e40:	2300      	movs	r3, #0
    1e42:	60bb      	str	r3, [r7, #8]
    result += sjsu::newlib::out(str, string_length);
    1e44:	4b0b      	ldr	r3, [pc, #44]	; (1e74 <puts+0x44>)
    1e46:	681b      	ldr	r3, [r3, #0]
    1e48:	68f9      	ldr	r1, [r7, #12]
    1e4a:	6878      	ldr	r0, [r7, #4]
    1e4c:	4798      	blx	r3
    1e4e:	4602      	mov	r2, r0
    1e50:	68bb      	ldr	r3, [r7, #8]
    1e52:	4413      	add	r3, r2
    1e54:	60bb      	str	r3, [r7, #8]
    result += sjsu::newlib::out("\n", 1);
    1e56:	4b07      	ldr	r3, [pc, #28]	; (1e74 <puts+0x44>)
    1e58:	681b      	ldr	r3, [r3, #0]
    1e5a:	2101      	movs	r1, #1
    1e5c:	4806      	ldr	r0, [pc, #24]	; (1e78 <puts+0x48>)
    1e5e:	4798      	blx	r3
    1e60:	4602      	mov	r2, r0
    1e62:	68bb      	ldr	r3, [r7, #8]
    1e64:	4413      	add	r3, r2
    1e66:	60bb      	str	r3, [r7, #8]
    // + 1 because puts adds an additional newline '\n' character.
    return result;
    1e68:	68bb      	ldr	r3, [r7, #8]
  }
    1e6a:	4618      	mov	r0, r3
    1e6c:	3710      	adds	r7, #16
    1e6e:	46bd      	mov	sp, r7
    1e70:	bd80      	pop	{r7, pc}
    1e72:	bf00      	nop
    1e74:	10000008 	.word	0x10000008
    1e78:	00006ee4 	.word	0x00006ee4

00001e7c <_out_null(char, void*, unsigned int, unsigned int)>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
    1e7c:	b480      	push	{r7}
    1e7e:	b085      	sub	sp, #20
    1e80:	af00      	add	r7, sp, #0
    1e82:	60b9      	str	r1, [r7, #8]
    1e84:	607a      	str	r2, [r7, #4]
    1e86:	603b      	str	r3, [r7, #0]
    1e88:	4603      	mov	r3, r0
    1e8a:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
    1e8c:	bf00      	nop
    1e8e:	3714      	adds	r7, #20
    1e90:	46bd      	mov	sp, r7
    1e92:	f85d 7b04 	ldr.w	r7, [sp], #4
    1e96:	4770      	bx	lr

00001e98 <_out_char(char, void*, unsigned int, unsigned int)>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
    1e98:	b580      	push	{r7, lr}
    1e9a:	b084      	sub	sp, #16
    1e9c:	af00      	add	r7, sp, #0
    1e9e:	60b9      	str	r1, [r7, #8]
    1ea0:	607a      	str	r2, [r7, #4]
    1ea2:	603b      	str	r3, [r7, #0]
    1ea4:	4603      	mov	r3, r0
    1ea6:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
    1ea8:	7bfb      	ldrb	r3, [r7, #15]
    1eaa:	2b00      	cmp	r3, #0
    1eac:	d003      	beq.n	1eb6 <_out_char(char, void*, unsigned int, unsigned int)+0x1e>
    _putchar(character);
    1eae:	7bfb      	ldrb	r3, [r7, #15]
    1eb0:	4618      	mov	r0, r3
    1eb2:	f002 fe29 	bl	4b08 <_putchar>
  }
}
    1eb6:	bf00      	nop
    1eb8:	3710      	adds	r7, #16
    1eba:	46bd      	mov	sp, r7
    1ebc:	bd80      	pop	{r7, pc}

00001ebe <_strlen(char const*)>:


// internal strlen
// \return The length of the string (excluding the terminating 0)
static inline unsigned int _strlen(const char* str)
{
    1ebe:	b480      	push	{r7}
    1ec0:	b085      	sub	sp, #20
    1ec2:	af00      	add	r7, sp, #0
    1ec4:	6078      	str	r0, [r7, #4]
  const char* s;
  for (s = str; *s; ++s);
    1ec6:	687b      	ldr	r3, [r7, #4]
    1ec8:	60fb      	str	r3, [r7, #12]
    1eca:	68fb      	ldr	r3, [r7, #12]
    1ecc:	781b      	ldrb	r3, [r3, #0]
    1ece:	2b00      	cmp	r3, #0
    1ed0:	d003      	beq.n	1eda <_strlen(char const*)+0x1c>
    1ed2:	68fb      	ldr	r3, [r7, #12]
    1ed4:	3301      	adds	r3, #1
    1ed6:	60fb      	str	r3, [r7, #12]
    1ed8:	e7f7      	b.n	1eca <_strlen(char const*)+0xc>
  return (unsigned int)(s - str);
    1eda:	68fa      	ldr	r2, [r7, #12]
    1edc:	687b      	ldr	r3, [r7, #4]
    1ede:	1ad3      	subs	r3, r2, r3
}
    1ee0:	4618      	mov	r0, r3
    1ee2:	3714      	adds	r7, #20
    1ee4:	46bd      	mov	sp, r7
    1ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
    1eea:	4770      	bx	lr

00001eec <_is_digit(char)>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
    1eec:	b480      	push	{r7}
    1eee:	b083      	sub	sp, #12
    1ef0:	af00      	add	r7, sp, #0
    1ef2:	4603      	mov	r3, r0
    1ef4:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
    1ef6:	79fb      	ldrb	r3, [r7, #7]
    1ef8:	2b2f      	cmp	r3, #47	; 0x2f
    1efa:	d904      	bls.n	1f06 <_is_digit(char)+0x1a>
    1efc:	79fb      	ldrb	r3, [r7, #7]
    1efe:	2b39      	cmp	r3, #57	; 0x39
    1f00:	d801      	bhi.n	1f06 <_is_digit(char)+0x1a>
    1f02:	2301      	movs	r3, #1
    1f04:	e000      	b.n	1f08 <_is_digit(char)+0x1c>
    1f06:	2300      	movs	r3, #0
}
    1f08:	4618      	mov	r0, r3
    1f0a:	370c      	adds	r7, #12
    1f0c:	46bd      	mov	sp, r7
    1f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1f12:	4770      	bx	lr

00001f14 <_atoi(char const**)>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
    1f14:	b580      	push	{r7, lr}
    1f16:	b084      	sub	sp, #16
    1f18:	af00      	add	r7, sp, #0
    1f1a:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
    1f1c:	2300      	movs	r3, #0
    1f1e:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
    1f20:	687b      	ldr	r3, [r7, #4]
    1f22:	681b      	ldr	r3, [r3, #0]
    1f24:	781b      	ldrb	r3, [r3, #0]
    1f26:	4618      	mov	r0, r3
    1f28:	f7ff ffe0 	bl	1eec <_is_digit(char)>
    1f2c:	4603      	mov	r3, r0
    1f2e:	2b00      	cmp	r3, #0
    1f30:	d00f      	beq.n	1f52 <_atoi(char const**)+0x3e>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    1f32:	68fa      	ldr	r2, [r7, #12]
    1f34:	4613      	mov	r3, r2
    1f36:	009b      	lsls	r3, r3, #2
    1f38:	4413      	add	r3, r2
    1f3a:	005b      	lsls	r3, r3, #1
    1f3c:	4618      	mov	r0, r3
    1f3e:	687b      	ldr	r3, [r7, #4]
    1f40:	681b      	ldr	r3, [r3, #0]
    1f42:	1c59      	adds	r1, r3, #1
    1f44:	687a      	ldr	r2, [r7, #4]
    1f46:	6011      	str	r1, [r2, #0]
    1f48:	781b      	ldrb	r3, [r3, #0]
    1f4a:	4403      	add	r3, r0
    1f4c:	3b30      	subs	r3, #48	; 0x30
    1f4e:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
    1f50:	e7e6      	b.n	1f20 <_atoi(char const**)+0xc>
  }
  return i;
    1f52:	68fb      	ldr	r3, [r7, #12]
}
    1f54:	4618      	mov	r0, r3
    1f56:	3710      	adds	r7, #16
    1f58:	46bd      	mov	sp, r7
    1f5a:	bd80      	pop	{r7, pc}

00001f5c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
    1f5c:	b590      	push	{r4, r7, lr}
    1f5e:	b089      	sub	sp, #36	; 0x24
    1f60:	af00      	add	r7, sp, #0
    1f62:	60f8      	str	r0, [r7, #12]
    1f64:	60b9      	str	r1, [r7, #8]
    1f66:	607a      	str	r2, [r7, #4]
    1f68:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
    1f6a:	687b      	ldr	r3, [r7, #4]
    1f6c:	617b      	str	r3, [r7, #20]

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    1f6e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1f70:	f003 0302 	and.w	r3, r3, #2
    1f74:	2b00      	cmp	r3, #0
    1f76:	d10e      	bne.n	1f96 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    1f78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    1f7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1f7c:	429a      	cmp	r2, r3
    1f7e:	d20a      	bcs.n	1f96 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    1f80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1f82:	2b1f      	cmp	r3, #31
    1f84:	d807      	bhi.n	1f96 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    buf[len++] = '0';
    1f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1f88:	1c5a      	adds	r2, r3, #1
    1f8a:	637a      	str	r2, [r7, #52]	; 0x34
    1f8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1f8e:	4413      	add	r3, r2
    1f90:	2230      	movs	r2, #48	; 0x30
    1f92:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    1f94:	e7eb      	b.n	1f6e <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x12>
  }
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    1f96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1f98:	f003 0302 	and.w	r3, r3, #2
    1f9c:	2b00      	cmp	r3, #0
    1f9e:	d113      	bne.n	1fc8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    1fa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1fa2:	f003 0301 	and.w	r3, r3, #1
    1fa6:	2b00      	cmp	r3, #0
    1fa8:	d00e      	beq.n	1fc8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    1faa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    1fac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1fae:	429a      	cmp	r2, r3
    1fb0:	d20a      	bcs.n	1fc8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    1fb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1fb4:	2b1f      	cmp	r3, #31
    1fb6:	d807      	bhi.n	1fc8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    buf[len++] = '0';
    1fb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1fba:	1c5a      	adds	r2, r3, #1
    1fbc:	637a      	str	r2, [r7, #52]	; 0x34
    1fbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1fc0:	4413      	add	r3, r2
    1fc2:	2230      	movs	r2, #48	; 0x30
    1fc4:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    1fc6:	e7e6      	b.n	1f96 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
  }

  // handle hash
  if (flags & FLAGS_HASH) {
    1fc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1fca:	f003 0310 	and.w	r3, r3, #16
    1fce:	2b00      	cmp	r3, #0
    1fd0:	d058      	beq.n	2084 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x128>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    1fd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    1fd8:	2b00      	cmp	r3, #0
    1fda:	d116      	bne.n	200a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    1fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1fde:	2b00      	cmp	r3, #0
    1fe0:	d013      	beq.n	200a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    1fe2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    1fe4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1fe6:	429a      	cmp	r2, r3
    1fe8:	d003      	beq.n	1ff2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x96>
    1fea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    1fec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1fee:	429a      	cmp	r2, r3
    1ff0:	d10b      	bne.n	200a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
      len--;
    1ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1ff4:	3b01      	subs	r3, #1
    1ff6:	637b      	str	r3, [r7, #52]	; 0x34
      if (len && (base == 16U)) {
    1ff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1ffa:	2b00      	cmp	r3, #0
    1ffc:	d005      	beq.n	200a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    1ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2000:	2b10      	cmp	r3, #16
    2002:	d102      	bne.n	200a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
        len--;
    2004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2006:	3b01      	subs	r3, #1
    2008:	637b      	str	r3, [r7, #52]	; 0x34
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    200a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    200c:	2b10      	cmp	r3, #16
    200e:	d10f      	bne.n	2030 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
    2010:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2012:	f003 0320 	and.w	r3, r3, #32
    2016:	2b00      	cmp	r3, #0
    2018:	d10a      	bne.n	2030 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
    201a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    201c:	2b1f      	cmp	r3, #31
    201e:	d807      	bhi.n	2030 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
      buf[len++] = 'x';
    2020:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2022:	1c5a      	adds	r2, r3, #1
    2024:	637a      	str	r2, [r7, #52]	; 0x34
    2026:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2028:	4413      	add	r3, r2
    202a:	2278      	movs	r2, #120	; 0x78
    202c:	701a      	strb	r2, [r3, #0]
    202e:	e01f      	b.n	2070 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2032:	2b10      	cmp	r3, #16
    2034:	d10f      	bne.n	2056 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
    2036:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2038:	f003 0320 	and.w	r3, r3, #32
    203c:	2b00      	cmp	r3, #0
    203e:	d00a      	beq.n	2056 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
    2040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2042:	2b1f      	cmp	r3, #31
    2044:	d807      	bhi.n	2056 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
      buf[len++] = 'X';
    2046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2048:	1c5a      	adds	r2, r3, #1
    204a:	637a      	str	r2, [r7, #52]	; 0x34
    204c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    204e:	4413      	add	r3, r2
    2050:	2258      	movs	r2, #88	; 0x58
    2052:	701a      	strb	r2, [r3, #0]
    2054:	e00c      	b.n	2070 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2058:	2b02      	cmp	r3, #2
    205a:	d109      	bne.n	2070 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    205c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    205e:	2b1f      	cmp	r3, #31
    2060:	d806      	bhi.n	2070 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
      buf[len++] = 'b';
    2062:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2064:	1c5a      	adds	r2, r3, #1
    2066:	637a      	str	r2, [r7, #52]	; 0x34
    2068:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    206a:	4413      	add	r3, r2
    206c:	2262      	movs	r2, #98	; 0x62
    206e:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    2070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2072:	2b1f      	cmp	r3, #31
    2074:	d806      	bhi.n	2084 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x128>
      buf[len++] = '0';
    2076:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2078:	1c5a      	adds	r2, r3, #1
    207a:	637a      	str	r2, [r7, #52]	; 0x34
    207c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    207e:	4413      	add	r3, r2
    2080:	2230      	movs	r2, #48	; 0x30
    2082:	701a      	strb	r2, [r3, #0]
    }
  }

  // handle sign
  if (len && (len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
    2084:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2086:	2b00      	cmp	r3, #0
    2088:	d014      	beq.n	20b4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    208a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    208c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    208e:	429a      	cmp	r2, r3
    2090:	d110      	bne.n	20b4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    2092:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    2096:	2b00      	cmp	r3, #0
    2098:	d109      	bne.n	20ae <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x152>
    209a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    209c:	f003 0304 	and.w	r3, r3, #4
    20a0:	2b00      	cmp	r3, #0
    20a2:	d104      	bne.n	20ae <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x152>
    20a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    20a6:	f003 0308 	and.w	r3, r3, #8
    20aa:	2b00      	cmp	r3, #0
    20ac:	d002      	beq.n	20b4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    len--;
    20ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    20b0:	3b01      	subs	r3, #1
    20b2:	637b      	str	r3, [r7, #52]	; 0x34
  }
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
    20b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    20b6:	2b1f      	cmp	r3, #31
    20b8:	d824      	bhi.n	2104 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    if (negative) {
    20ba:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    20be:	2b00      	cmp	r3, #0
    20c0:	d007      	beq.n	20d2 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x176>
      buf[len++] = '-';
    20c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    20c4:	1c5a      	adds	r2, r3, #1
    20c6:	637a      	str	r2, [r7, #52]	; 0x34
    20c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    20ca:	4413      	add	r3, r2
    20cc:	222d      	movs	r2, #45	; 0x2d
    20ce:	701a      	strb	r2, [r3, #0]
    20d0:	e018      	b.n	2104 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    }
    else if (flags & FLAGS_PLUS) {
    20d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    20d4:	f003 0304 	and.w	r3, r3, #4
    20d8:	2b00      	cmp	r3, #0
    20da:	d007      	beq.n	20ec <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x190>
      buf[len++] = '+';  // ignore the space if the '+' exists
    20dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    20de:	1c5a      	adds	r2, r3, #1
    20e0:	637a      	str	r2, [r7, #52]	; 0x34
    20e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    20e4:	4413      	add	r3, r2
    20e6:	222b      	movs	r2, #43	; 0x2b
    20e8:	701a      	strb	r2, [r3, #0]
    20ea:	e00b      	b.n	2104 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    }
    else if (flags & FLAGS_SPACE) {
    20ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    20ee:	f003 0308 	and.w	r3, r3, #8
    20f2:	2b00      	cmp	r3, #0
    20f4:	d006      	beq.n	2104 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
      buf[len++] = ' ';
    20f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    20f8:	1c5a      	adds	r2, r3, #1
    20fa:	637a      	str	r2, [r7, #52]	; 0x34
    20fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    20fe:	4413      	add	r3, r2
    2100:	2220      	movs	r2, #32
    2102:	701a      	strb	r2, [r3, #0]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    2104:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2106:	f003 0302 	and.w	r3, r3, #2
    210a:	2b00      	cmp	r3, #0
    210c:	d116      	bne.n	213c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
    210e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2110:	f003 0301 	and.w	r3, r3, #1
    2114:	2b00      	cmp	r3, #0
    2116:	d111      	bne.n	213c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
    for (size_t i = len; i < width; i++) {
    2118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    211a:	61fb      	str	r3, [r7, #28]
    211c:	69fa      	ldr	r2, [r7, #28]
    211e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2120:	429a      	cmp	r2, r3
    2122:	d20b      	bcs.n	213c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
      out(' ', buffer, idx++, maxlen);
    2124:	687a      	ldr	r2, [r7, #4]
    2126:	1c53      	adds	r3, r2, #1
    2128:	607b      	str	r3, [r7, #4]
    212a:	68fc      	ldr	r4, [r7, #12]
    212c:	683b      	ldr	r3, [r7, #0]
    212e:	68b9      	ldr	r1, [r7, #8]
    2130:	2020      	movs	r0, #32
    2132:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
    2134:	69fb      	ldr	r3, [r7, #28]
    2136:	3301      	adds	r3, #1
    2138:	61fb      	str	r3, [r7, #28]
    213a:	e7ef      	b.n	211c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1c0>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
    213c:	2300      	movs	r3, #0
    213e:	61bb      	str	r3, [r7, #24]
    2140:	69ba      	ldr	r2, [r7, #24]
    2142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2144:	429a      	cmp	r2, r3
    2146:	d211      	bcs.n	216c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x210>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
    2148:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    214a:	69bb      	ldr	r3, [r7, #24]
    214c:	1ad3      	subs	r3, r2, r3
    214e:	3b01      	subs	r3, #1
    2150:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    2152:	4413      	add	r3, r2
    2154:	7818      	ldrb	r0, [r3, #0]
    2156:	687a      	ldr	r2, [r7, #4]
    2158:	1c53      	adds	r3, r2, #1
    215a:	607b      	str	r3, [r7, #4]
    215c:	68fc      	ldr	r4, [r7, #12]
    215e:	683b      	ldr	r3, [r7, #0]
    2160:	68b9      	ldr	r1, [r7, #8]
    2162:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
    2164:	69bb      	ldr	r3, [r7, #24]
    2166:	3301      	adds	r3, #1
    2168:	61bb      	str	r3, [r7, #24]
    216a:	e7e9      	b.n	2140 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e4>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
    216c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    216e:	f003 0302 	and.w	r3, r3, #2
    2172:	2b00      	cmp	r3, #0
    2174:	d00e      	beq.n	2194 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x238>
    while (idx - start_idx < width) {
    2176:	687a      	ldr	r2, [r7, #4]
    2178:	697b      	ldr	r3, [r7, #20]
    217a:	1ad3      	subs	r3, r2, r3
    217c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    217e:	429a      	cmp	r2, r3
    2180:	d908      	bls.n	2194 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x238>
      out(' ', buffer, idx++, maxlen);
    2182:	687a      	ldr	r2, [r7, #4]
    2184:	1c53      	adds	r3, r2, #1
    2186:	607b      	str	r3, [r7, #4]
    2188:	68fc      	ldr	r4, [r7, #12]
    218a:	683b      	ldr	r3, [r7, #0]
    218c:	68b9      	ldr	r1, [r7, #8]
    218e:	2020      	movs	r0, #32
    2190:	47a0      	blx	r4
    while (idx - start_idx < width) {
    2192:	e7f0      	b.n	2176 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x21a>
    }
  }

  return idx;
    2194:	687b      	ldr	r3, [r7, #4]
}
    2196:	4618      	mov	r0, r3
    2198:	3724      	adds	r7, #36	; 0x24
    219a:	46bd      	mov	sp, r7
    219c:	bd90      	pop	{r4, r7, pc}

0000219e <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    219e:	b580      	push	{r7, lr}
    21a0:	b096      	sub	sp, #88	; 0x58
    21a2:	af08      	add	r7, sp, #32
    21a4:	60f8      	str	r0, [r7, #12]
    21a6:	60b9      	str	r1, [r7, #8]
    21a8:	607a      	str	r2, [r7, #4]
    21aa:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
    21ac:	2300      	movs	r3, #0
    21ae:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
    21b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    21b2:	2b00      	cmp	r3, #0
    21b4:	d103      	bne.n	21be <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x20>
    flags &= ~FLAGS_HASH;
    21b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    21b8:	f023 0310 	bic.w	r3, r3, #16
    21bc:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    21be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    21c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    21c4:	2b00      	cmp	r3, #0
    21c6:	d002      	beq.n	21ce <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x30>
    21c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    21ca:	2b00      	cmp	r3, #0
    21cc:	d034      	beq.n	2238 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    do {
      const char digit = (char)(value % base);
    21ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    21d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
    21d2:	fbb3 f2f2 	udiv	r2, r3, r2
    21d6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    21d8:	fb01 f202 	mul.w	r2, r1, r2
    21dc:	1a9b      	subs	r3, r3, r2
    21de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    21e2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    21e6:	2b09      	cmp	r3, #9
    21e8:	d804      	bhi.n	21f4 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x56>
    21ea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    21ee:	3330      	adds	r3, #48	; 0x30
    21f0:	b2da      	uxtb	r2, r3
    21f2:	e00d      	b.n	2210 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x72>
    21f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    21f6:	f003 0320 	and.w	r3, r3, #32
    21fa:	2b00      	cmp	r3, #0
    21fc:	d001      	beq.n	2202 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x64>
    21fe:	2241      	movs	r2, #65	; 0x41
    2200:	e000      	b.n	2204 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x66>
    2202:	2261      	movs	r2, #97	; 0x61
    2204:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    2208:	4413      	add	r3, r2
    220a:	b2db      	uxtb	r3, r3
    220c:	3b0a      	subs	r3, #10
    220e:	b2da      	uxtb	r2, r3
    2210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2212:	1c59      	adds	r1, r3, #1
    2214:	6379      	str	r1, [r7, #52]	; 0x34
    2216:	f107 0138 	add.w	r1, r7, #56	; 0x38
    221a:	440b      	add	r3, r1
    221c:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
    2220:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    2222:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2224:	fbb2 f3f3 	udiv	r3, r2, r3
    2228:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    222a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    222c:	2b00      	cmp	r3, #0
    222e:	d003      	beq.n	2238 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    2230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2232:	2b1f      	cmp	r3, #31
    2234:	d800      	bhi.n	2238 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    do {
    2236:	e7ca      	b.n	21ce <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    2238:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    223a:	9306      	str	r3, [sp, #24]
    223c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    223e:	9305      	str	r3, [sp, #20]
    2240:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    2242:	9304      	str	r3, [sp, #16]
    2244:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2246:	9303      	str	r3, [sp, #12]
    2248:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
    224c:	9302      	str	r3, [sp, #8]
    224e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2250:	9301      	str	r3, [sp, #4]
    2252:	f107 0310 	add.w	r3, r7, #16
    2256:	9300      	str	r3, [sp, #0]
    2258:	683b      	ldr	r3, [r7, #0]
    225a:	687a      	ldr	r2, [r7, #4]
    225c:	68b9      	ldr	r1, [r7, #8]
    225e:	68f8      	ldr	r0, [r7, #12]
    2260:	f7ff fe7c 	bl	1f5c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
    2264:	4603      	mov	r3, r0
}
    2266:	4618      	mov	r0, r3
    2268:	3738      	adds	r7, #56	; 0x38
    226a:	46bd      	mov	sp, r7
    226c:	bd80      	pop	{r7, pc}

0000226e <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    226e:	b590      	push	{r4, r7, lr}
    2270:	b097      	sub	sp, #92	; 0x5c
    2272:	af08      	add	r7, sp, #32
    2274:	60f8      	str	r0, [r7, #12]
    2276:	60b9      	str	r1, [r7, #8]
    2278:	607a      	str	r2, [r7, #4]
    227a:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
    227c:	2300      	movs	r3, #0
    227e:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
    2280:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    2284:	4323      	orrs	r3, r4
    2286:	d103      	bne.n	2290 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x22>
    flags &= ~FLAGS_HASH;
    2288:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    228a:	f023 0310 	bic.w	r3, r3, #16
    228e:	66bb      	str	r3, [r7, #104]	; 0x68
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    2290:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2292:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    2296:	2b00      	cmp	r3, #0
    2298:	d003      	beq.n	22a2 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x34>
    229a:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    229e:	4323      	orrs	r3, r4
    22a0:	d03a      	beq.n	2318 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xaa>
    do {
      const char digit = (char)(value % base);
    22a2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    22a6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
    22aa:	f002 fdb3 	bl	4e14 <__aeabi_uldivmod>
    22ae:	461c      	mov	r4, r3
    22b0:	4613      	mov	r3, r2
    22b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    22b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    22ba:	2b09      	cmp	r3, #9
    22bc:	d804      	bhi.n	22c8 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x5a>
    22be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    22c2:	3330      	adds	r3, #48	; 0x30
    22c4:	b2da      	uxtb	r2, r3
    22c6:	e00d      	b.n	22e4 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x76>
    22c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    22ca:	f003 0320 	and.w	r3, r3, #32
    22ce:	2b00      	cmp	r3, #0
    22d0:	d001      	beq.n	22d6 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x68>
    22d2:	2241      	movs	r2, #65	; 0x41
    22d4:	e000      	b.n	22d8 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x6a>
    22d6:	2261      	movs	r2, #97	; 0x61
    22d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    22dc:	4413      	add	r3, r2
    22de:	b2db      	uxtb	r3, r3
    22e0:	3b0a      	subs	r3, #10
    22e2:	b2da      	uxtb	r2, r3
    22e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    22e6:	1c59      	adds	r1, r3, #1
    22e8:	6379      	str	r1, [r7, #52]	; 0x34
    22ea:	f107 0138 	add.w	r1, r7, #56	; 0x38
    22ee:	440b      	add	r3, r1
    22f0:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
    22f4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
    22f8:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    22fc:	f002 fd8a 	bl	4e14 <__aeabi_uldivmod>
    2300:	4603      	mov	r3, r0
    2302:	460c      	mov	r4, r1
    2304:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    2308:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    230c:	4323      	orrs	r3, r4
    230e:	d003      	beq.n	2318 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xaa>
    2310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2312:	2b1f      	cmp	r3, #31
    2314:	d800      	bhi.n	2318 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xaa>
    do {
    2316:	e7c4      	b.n	22a2 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    2318:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    231a:	6eba      	ldr	r2, [r7, #104]	; 0x68
    231c:	9206      	str	r2, [sp, #24]
    231e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    2320:	9205      	str	r2, [sp, #20]
    2322:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    2324:	9204      	str	r2, [sp, #16]
    2326:	9303      	str	r3, [sp, #12]
    2328:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
    232c:	9302      	str	r3, [sp, #8]
    232e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2330:	9301      	str	r3, [sp, #4]
    2332:	f107 0310 	add.w	r3, r7, #16
    2336:	9300      	str	r3, [sp, #0]
    2338:	683b      	ldr	r3, [r7, #0]
    233a:	687a      	ldr	r2, [r7, #4]
    233c:	68b9      	ldr	r1, [r7, #8]
    233e:	68f8      	ldr	r0, [r7, #12]
    2340:	f7ff fe0c 	bl	1f5c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
    2344:	4603      	mov	r3, r0
}
    2346:	4618      	mov	r0, r3
    2348:	373c      	adds	r7, #60	; 0x3c
    234a:	46bd      	mov	sp, r7
    234c:	bd90      	pop	{r4, r7, pc}
    234e:	Address 0x000000000000234e is out of bounds.


00002350 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>:
#endif  // PRINTF_SUPPORT_LONG_LONG


#if defined(PRINTF_SUPPORT_FLOAT)
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value_param, unsigned int prec, unsigned int width, unsigned int flags)
{
    2350:	b590      	push	{r4, r7, lr}
    2352:	b09b      	sub	sp, #108	; 0x6c
    2354:	af00      	add	r7, sp, #0
    2356:	6178      	str	r0, [r7, #20]
    2358:	6139      	str	r1, [r7, #16]
    235a:	60fa      	str	r2, [r7, #12]
    235c:	60bb      	str	r3, [r7, #8]
    235e:	ed87 0b00 	vstr	d0, [r7]
  const size_t start_idx = idx;
    2362:	68fb      	ldr	r3, [r7, #12]
    2364:	647b      	str	r3, [r7, #68]	; 0x44

  float value = static_cast<float>(value_param);
    2366:	e9d7 0100 	ldrd	r0, r1, [r7]
    236a:	f002 fbf5 	bl	4b58 <__aeabi_d2f>
    236e:	4603      	mov	r3, r0
    2370:	667b      	str	r3, [r7, #100]	; 0x64

  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
    2372:	2300      	movs	r3, #0
    2374:	663b      	str	r3, [r7, #96]	; 0x60
  float diff = 0.0;
    2376:	f04f 0300 	mov.w	r3, #0
    237a:	643b      	str	r3, [r7, #64]	; 0x40

  // if input is larger than thres_max, revert to exponential
  const float thres_max = (float)0x7FFFFFFF;
    237c:	f04f 439e 	mov.w	r3, #1325400064	; 0x4f000000
    2380:	63fb      	str	r3, [r7, #60]	; 0x3c

  // powers of 10
  static const float pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for negative
  bool negative = false;
    2382:	2300      	movs	r3, #0
    2384:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (value < 0) {
    2388:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    238c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    2390:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2394:	d50a      	bpl.n	23ac <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x5c>
    negative = true;
    2396:	2301      	movs	r3, #1
    2398:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    value = 0 - value;
    239c:	ed9f 7aab 	vldr	s14, [pc, #684]	; 264c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2fc>
    23a0:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    23a4:	ee77 7a67 	vsub.f32	s15, s14, s15
    23a8:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
  }

  // set default precision to 6, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
    23ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    23b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    23b4:	2b00      	cmp	r3, #0
    23b6:	d101      	bne.n	23bc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x6c>
    prec = 6U;
    23b8:	2306      	movs	r3, #6
    23ba:	67bb      	str	r3, [r7, #120]	; 0x78
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    23bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    23be:	2b1f      	cmp	r3, #31
    23c0:	d80f      	bhi.n	23e2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x92>
    23c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    23c4:	2b09      	cmp	r3, #9
    23c6:	d90c      	bls.n	23e2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x92>
    buf[len++] = '0';
    23c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    23ca:	1c5a      	adds	r2, r3, #1
    23cc:	663a      	str	r2, [r7, #96]	; 0x60
    23ce:	f107 0268 	add.w	r2, r7, #104	; 0x68
    23d2:	4413      	add	r3, r2
    23d4:	2230      	movs	r2, #48	; 0x30
    23d6:	f803 2c50 	strb.w	r2, [r3, #-80]
    prec--;
    23da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    23dc:	3b01      	subs	r3, #1
    23de:	67bb      	str	r3, [r7, #120]	; 0x78
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    23e0:	e7ec      	b.n	23bc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x6c>
  }

  int whole = (int)value;
    23e2:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    23e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    23ea:	ee17 3a90 	vmov	r3, s15
    23ee:	65bb      	str	r3, [r7, #88]	; 0x58
  float tmp = (value - whole) * pow10[prec];
    23f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    23f2:	ee07 3a90 	vmov	s15, r3
    23f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    23fa:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
    23fe:	ee37 7a67 	vsub.f32	s14, s14, s15
    2402:	4a93      	ldr	r2, [pc, #588]	; (2650 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x300>)
    2404:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    2406:	009b      	lsls	r3, r3, #2
    2408:	4413      	add	r3, r2
    240a:	edd3 7a00 	vldr	s15, [r3]
    240e:	ee67 7a27 	vmul.f32	s15, s14, s15
    2412:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
    2416:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    241a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    241e:	ee17 3a90 	vmov	r3, s15
    2422:	657b      	str	r3, [r7, #84]	; 0x54
  diff = tmp - frac;
    2424:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2426:	ee07 3a90 	vmov	s15, r3
    242a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    242e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
    2432:	ee77 7a67 	vsub.f32	s15, s14, s15
    2436:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

  if (diff > 0.5) {
    243a:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    243e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    2442:	eef4 7ac7 	vcmpe.f32	s15, s14
    2446:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    244a:	dd18      	ble.n	247e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x12e>
    ++frac;
    244c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    244e:	3301      	adds	r3, #1
    2450:	657b      	str	r3, [r7, #84]	; 0x54
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
    2452:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2454:	ee07 3a90 	vmov	s15, r3
    2458:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    245c:	4a7c      	ldr	r2, [pc, #496]	; (2650 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x300>)
    245e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    2460:	009b      	lsls	r3, r3, #2
    2462:	4413      	add	r3, r2
    2464:	edd3 7a00 	vldr	s15, [r3]
    2468:	eeb4 7ae7 	vcmpe.f32	s14, s15
    246c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2470:	db19      	blt.n	24a6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
      frac = 0;
    2472:	2300      	movs	r3, #0
    2474:	657b      	str	r3, [r7, #84]	; 0x54
      ++whole;
    2476:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    2478:	3301      	adds	r3, #1
    247a:	65bb      	str	r3, [r7, #88]	; 0x58
    247c:	e013      	b.n	24a6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
    }
  }
  else if ((diff == 0.5) && ((frac == 0U) || (frac & 1U))) {
    247e:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    2482:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    2486:	eef4 7a47 	vcmp.f32	s15, s14
    248a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    248e:	d10a      	bne.n	24a6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
    2490:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2492:	2b00      	cmp	r3, #0
    2494:	d004      	beq.n	24a0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x150>
    2496:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2498:	f003 0301 	and.w	r3, r3, #1
    249c:	2b00      	cmp	r3, #0
    249e:	d002      	beq.n	24a6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
    // if halfway, round up if odd, OR if last digit is 0
    ++frac;
    24a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    24a2:	3301      	adds	r3, #1
    24a4:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // TBD: for very large numbers switch back to native sprintf for exponentials. Anyone want to write code to replace this?
  // Normal printf behavior is to print EVERY whole number digit which can be 100s of characters overflowing your buffers == bad
  if (value > thres_max) {
    24a6:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    24aa:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 2654 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x304>
    24ae:	eef4 7ac7 	vcmpe.f32	s15, s14
    24b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    24b6:	dd01      	ble.n	24bc <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x16c>
    return 0U;
    24b8:	2300      	movs	r3, #0
    24ba:	e166      	b.n	278a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x43a>
  }

  if (prec == 0U) {
    24bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    24be:	2b00      	cmp	r3, #0
    24c0:	d129      	bne.n	2516 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1c6>
    diff = value - (float)whole;
    24c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    24c4:	ee07 3a90 	vmov	s15, r3
    24c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    24cc:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
    24d0:	ee77 7a67 	vsub.f32	s15, s14, s15
    24d4:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    if (diff > 0.5) {
    24d8:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    24dc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    24e0:	eef4 7ac7 	vcmpe.f32	s15, s14
    24e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    24e8:	dd03      	ble.n	24f2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1a2>
      // greater than 0.5, round up, e.g. 1.6 -> 2
      ++whole;
    24ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    24ec:	3301      	adds	r3, #1
    24ee:	65bb      	str	r3, [r7, #88]	; 0x58
    24f0:	e062      	b.n	25b8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
    else if ((diff == 0.5) && (whole & 1)) {
    24f2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    24f6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    24fa:	eef4 7a47 	vcmp.f32	s15, s14
    24fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2502:	d159      	bne.n	25b8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    2504:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    2506:	f003 0301 	and.w	r3, r3, #1
    250a:	2b00      	cmp	r3, #0
    250c:	d054      	beq.n	25b8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
    250e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    2510:	3301      	adds	r3, #1
    2512:	65bb      	str	r3, [r7, #88]	; 0x58
    2514:	e050      	b.n	25b8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
  }
  else {
    unsigned int count = prec;
    2516:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    2518:	653b      	str	r3, [r7, #80]	; 0x50
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    251a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    251c:	2b1f      	cmp	r3, #31
    251e:	d828      	bhi.n	2572 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x222>
      --count;
    2520:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    2522:	3b01      	subs	r3, #1
    2524:	653b      	str	r3, [r7, #80]	; 0x50
      buf[len++] = (char)(48U + (frac % 10U));
    2526:	6d79      	ldr	r1, [r7, #84]	; 0x54
    2528:	4b4b      	ldr	r3, [pc, #300]	; (2658 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
    252a:	fba3 2301 	umull	r2, r3, r3, r1
    252e:	08da      	lsrs	r2, r3, #3
    2530:	4613      	mov	r3, r2
    2532:	009b      	lsls	r3, r3, #2
    2534:	4413      	add	r3, r2
    2536:	005b      	lsls	r3, r3, #1
    2538:	1aca      	subs	r2, r1, r3
    253a:	b2d3      	uxtb	r3, r2
    253c:	3330      	adds	r3, #48	; 0x30
    253e:	b2d9      	uxtb	r1, r3
    2540:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    2542:	1c5a      	adds	r2, r3, #1
    2544:	663a      	str	r2, [r7, #96]	; 0x60
    2546:	f107 0268 	add.w	r2, r7, #104	; 0x68
    254a:	4413      	add	r3, r2
    254c:	460a      	mov	r2, r1
    254e:	f803 2c50 	strb.w	r2, [r3, #-80]
      if (!(frac /= 10U)) {
    2552:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2554:	4a40      	ldr	r2, [pc, #256]	; (2658 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
    2556:	fba2 2303 	umull	r2, r3, r2, r3
    255a:	08db      	lsrs	r3, r3, #3
    255c:	657b      	str	r3, [r7, #84]	; 0x54
    255e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2560:	2b00      	cmp	r3, #0
    2562:	bf0c      	ite	eq
    2564:	2301      	moveq	r3, #1
    2566:	2300      	movne	r3, #0
    2568:	b2db      	uxtb	r3, r3
    256a:	2b00      	cmp	r3, #0
    256c:	d100      	bne.n	2570 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x220>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    256e:	e7d4      	b.n	251a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1ca>
        break;
    2570:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    2572:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    2574:	2b1f      	cmp	r3, #31
    2576:	d806      	bhi.n	2586 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x236>
    2578:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    257a:	1e5a      	subs	r2, r3, #1
    257c:	653a      	str	r2, [r7, #80]	; 0x50
    257e:	2b00      	cmp	r3, #0
    2580:	d001      	beq.n	2586 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x236>
    2582:	2301      	movs	r3, #1
    2584:	e000      	b.n	2588 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x238>
    2586:	2300      	movs	r3, #0
    2588:	2b00      	cmp	r3, #0
    258a:	d009      	beq.n	25a0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x250>
      buf[len++] = '0';
    258c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    258e:	1c5a      	adds	r2, r3, #1
    2590:	663a      	str	r2, [r7, #96]	; 0x60
    2592:	f107 0268 	add.w	r2, r7, #104	; 0x68
    2596:	4413      	add	r3, r2
    2598:	2230      	movs	r2, #48	; 0x30
    259a:	f803 2c50 	strb.w	r2, [r3, #-80]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    259e:	e7e8      	b.n	2572 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x222>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
    25a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    25a2:	2b1f      	cmp	r3, #31
    25a4:	d808      	bhi.n	25b8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // add decimal
      buf[len++] = '.';
    25a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    25a8:	1c5a      	adds	r2, r3, #1
    25aa:	663a      	str	r2, [r7, #96]	; 0x60
    25ac:	f107 0268 	add.w	r2, r7, #104	; 0x68
    25b0:	4413      	add	r3, r2
    25b2:	222e      	movs	r2, #46	; 0x2e
    25b4:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    25b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    25ba:	2b1f      	cmp	r3, #31
    25bc:	d829      	bhi.n	2612 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c2>
    buf[len++] = (char)(48 + (whole % 10));
    25be:	6dba      	ldr	r2, [r7, #88]	; 0x58
    25c0:	4b26      	ldr	r3, [pc, #152]	; (265c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>)
    25c2:	fb83 1302 	smull	r1, r3, r3, r2
    25c6:	1099      	asrs	r1, r3, #2
    25c8:	17d3      	asrs	r3, r2, #31
    25ca:	1ac9      	subs	r1, r1, r3
    25cc:	460b      	mov	r3, r1
    25ce:	009b      	lsls	r3, r3, #2
    25d0:	440b      	add	r3, r1
    25d2:	005b      	lsls	r3, r3, #1
    25d4:	1ad1      	subs	r1, r2, r3
    25d6:	b2cb      	uxtb	r3, r1
    25d8:	3330      	adds	r3, #48	; 0x30
    25da:	b2d9      	uxtb	r1, r3
    25dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    25de:	1c5a      	adds	r2, r3, #1
    25e0:	663a      	str	r2, [r7, #96]	; 0x60
    25e2:	f107 0268 	add.w	r2, r7, #104	; 0x68
    25e6:	4413      	add	r3, r2
    25e8:	460a      	mov	r2, r1
    25ea:	f803 2c50 	strb.w	r2, [r3, #-80]
    if (!(whole /= 10)) {
    25ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    25f0:	4a1a      	ldr	r2, [pc, #104]	; (265c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>)
    25f2:	fb82 1203 	smull	r1, r2, r2, r3
    25f6:	1092      	asrs	r2, r2, #2
    25f8:	17db      	asrs	r3, r3, #31
    25fa:	1ad3      	subs	r3, r2, r3
    25fc:	65bb      	str	r3, [r7, #88]	; 0x58
    25fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    2600:	2b00      	cmp	r3, #0
    2602:	bf0c      	ite	eq
    2604:	2301      	moveq	r3, #1
    2606:	2300      	movne	r3, #0
    2608:	b2db      	uxtb	r3, r3
    260a:	2b00      	cmp	r3, #0
    260c:	d100      	bne.n	2610 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    260e:	e7d3      	b.n	25b8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      break;
    2610:	bf00      	nop
    }
  }

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    2612:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    2616:	f003 0302 	and.w	r3, r3, #2
    261a:	2b00      	cmp	r3, #0
    261c:	d120      	bne.n	2660 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    261e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    2622:	f003 0301 	and.w	r3, r3, #1
    2626:	2b00      	cmp	r3, #0
    2628:	d01a      	beq.n	2660 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    262a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    262c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    262e:	429a      	cmp	r2, r3
    2630:	d216      	bcs.n	2660 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    2632:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    2634:	2b1f      	cmp	r3, #31
    2636:	d813      	bhi.n	2660 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    buf[len++] = '0';
    2638:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    263a:	1c5a      	adds	r2, r3, #1
    263c:	663a      	str	r2, [r7, #96]	; 0x60
    263e:	f107 0268 	add.w	r2, r7, #104	; 0x68
    2642:	4413      	add	r3, r2
    2644:	2230      	movs	r2, #48	; 0x30
    2646:	f803 2c50 	strb.w	r2, [r3, #-80]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    264a:	e7e2      	b.n	2612 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c2>
    264c:	00000000 	.word	0x00000000
    2650:	00006ee8 	.word	0x00006ee8
    2654:	4f000000 	.word	0x4f000000
    2658:	cccccccd 	.word	0xcccccccd
    265c:	66666667 	.word	0x66666667
  }

  // handle sign
  if ((len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
    2660:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    2662:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    2664:	429a      	cmp	r2, r3
    2666:	d112      	bne.n	268e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x33e>
    2668:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    266c:	2b00      	cmp	r3, #0
    266e:	d10b      	bne.n	2688 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x338>
    2670:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    2674:	f003 0304 	and.w	r3, r3, #4
    2678:	2b00      	cmp	r3, #0
    267a:	d105      	bne.n	2688 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x338>
    267c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    2680:	f003 0308 	and.w	r3, r3, #8
    2684:	2b00      	cmp	r3, #0
    2686:	d002      	beq.n	268e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x33e>
    len--;
    2688:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    268a:	3b01      	subs	r3, #1
    268c:	663b      	str	r3, [r7, #96]	; 0x60
  }
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
    268e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    2690:	2b1f      	cmp	r3, #31
    2692:	d82c      	bhi.n	26ee <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
    if (negative) {
    2694:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    2698:	2b00      	cmp	r3, #0
    269a:	d009      	beq.n	26b0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x360>
      buf[len++] = '-';
    269c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    269e:	1c5a      	adds	r2, r3, #1
    26a0:	663a      	str	r2, [r7, #96]	; 0x60
    26a2:	f107 0268 	add.w	r2, r7, #104	; 0x68
    26a6:	4413      	add	r3, r2
    26a8:	222d      	movs	r2, #45	; 0x2d
    26aa:	f803 2c50 	strb.w	r2, [r3, #-80]
    26ae:	e01e      	b.n	26ee <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
    }
    else if (flags & FLAGS_PLUS) {
    26b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    26b4:	f003 0304 	and.w	r3, r3, #4
    26b8:	2b00      	cmp	r3, #0
    26ba:	d009      	beq.n	26d0 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x380>
      buf[len++] = '+';  // ignore the space if the '+' exists
    26bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    26be:	1c5a      	adds	r2, r3, #1
    26c0:	663a      	str	r2, [r7, #96]	; 0x60
    26c2:	f107 0268 	add.w	r2, r7, #104	; 0x68
    26c6:	4413      	add	r3, r2
    26c8:	222b      	movs	r2, #43	; 0x2b
    26ca:	f803 2c50 	strb.w	r2, [r3, #-80]
    26ce:	e00e      	b.n	26ee <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
    }
    else if (flags & FLAGS_SPACE) {
    26d0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    26d4:	f003 0308 	and.w	r3, r3, #8
    26d8:	2b00      	cmp	r3, #0
    26da:	d008      	beq.n	26ee <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
      buf[len++] = ' ';
    26dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    26de:	1c5a      	adds	r2, r3, #1
    26e0:	663a      	str	r2, [r7, #96]	; 0x60
    26e2:	f107 0268 	add.w	r2, r7, #104	; 0x68
    26e6:	4413      	add	r3, r2
    26e8:	2220      	movs	r2, #32
    26ea:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    26ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    26f2:	f003 0302 	and.w	r3, r3, #2
    26f6:	2b00      	cmp	r3, #0
    26f8:	d117      	bne.n	272a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3da>
    26fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    26fe:	f003 0301 	and.w	r3, r3, #1
    2702:	2b00      	cmp	r3, #0
    2704:	d111      	bne.n	272a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3da>
    for (size_t i = len; i < width; i++) {
    2706:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    2708:	64fb      	str	r3, [r7, #76]	; 0x4c
    270a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    270c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    270e:	429a      	cmp	r2, r3
    2710:	d20b      	bcs.n	272a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3da>
      out(' ', buffer, idx++, maxlen);
    2712:	68fa      	ldr	r2, [r7, #12]
    2714:	1c53      	adds	r3, r2, #1
    2716:	60fb      	str	r3, [r7, #12]
    2718:	697c      	ldr	r4, [r7, #20]
    271a:	68bb      	ldr	r3, [r7, #8]
    271c:	6939      	ldr	r1, [r7, #16]
    271e:	2020      	movs	r0, #32
    2720:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
    2722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    2724:	3301      	adds	r3, #1
    2726:	64fb      	str	r3, [r7, #76]	; 0x4c
    2728:	e7ef      	b.n	270a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3ba>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
    272a:	2300      	movs	r3, #0
    272c:	64bb      	str	r3, [r7, #72]	; 0x48
    272e:	6cba      	ldr	r2, [r7, #72]	; 0x48
    2730:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    2732:	429a      	cmp	r2, r3
    2734:	d213      	bcs.n	275e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x40e>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
    2736:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    2738:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    273a:	1ad3      	subs	r3, r2, r3
    273c:	3b01      	subs	r3, #1
    273e:	f107 0268 	add.w	r2, r7, #104	; 0x68
    2742:	4413      	add	r3, r2
    2744:	f813 0c50 	ldrb.w	r0, [r3, #-80]
    2748:	68fa      	ldr	r2, [r7, #12]
    274a:	1c53      	adds	r3, r2, #1
    274c:	60fb      	str	r3, [r7, #12]
    274e:	697c      	ldr	r4, [r7, #20]
    2750:	68bb      	ldr	r3, [r7, #8]
    2752:	6939      	ldr	r1, [r7, #16]
    2754:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
    2756:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    2758:	3301      	adds	r3, #1
    275a:	64bb      	str	r3, [r7, #72]	; 0x48
    275c:	e7e7      	b.n	272e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3de>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
    275e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    2762:	f003 0302 	and.w	r3, r3, #2
    2766:	2b00      	cmp	r3, #0
    2768:	d00e      	beq.n	2788 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x438>
    while (idx - start_idx < width) {
    276a:	68fa      	ldr	r2, [r7, #12]
    276c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    276e:	1ad3      	subs	r3, r2, r3
    2770:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    2772:	429a      	cmp	r2, r3
    2774:	d908      	bls.n	2788 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x438>
      out(' ', buffer, idx++, maxlen);
    2776:	68fa      	ldr	r2, [r7, #12]
    2778:	1c53      	adds	r3, r2, #1
    277a:	60fb      	str	r3, [r7, #12]
    277c:	697c      	ldr	r4, [r7, #20]
    277e:	68bb      	ldr	r3, [r7, #8]
    2780:	6939      	ldr	r1, [r7, #16]
    2782:	2020      	movs	r0, #32
    2784:	47a0      	blx	r4
    while (idx - start_idx < width) {
    2786:	e7f0      	b.n	276a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x41a>
    }
  }

  return idx;
    2788:	68fb      	ldr	r3, [r7, #12]
}
    278a:	4618      	mov	r0, r3
    278c:	376c      	adds	r7, #108	; 0x6c
    278e:	46bd      	mov	sp, r7
    2790:	bd90      	pop	{r4, r7, pc}
    2792:	bf00      	nop

00002794 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
    2794:	b5b0      	push	{r4, r5, r7, lr}
    2796:	b0a0      	sub	sp, #128	; 0x80
    2798:	af0a      	add	r7, sp, #40	; 0x28
    279a:	60f8      	str	r0, [r7, #12]
    279c:	60b9      	str	r1, [r7, #8]
    279e:	607a      	str	r2, [r7, #4]
    27a0:	603b      	str	r3, [r7, #0]
    }
    return i;
  }

  unsigned int flags, width, precision, n;
  size_t idx = 0U;
    27a2:	2300      	movs	r3, #0
    27a4:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
    27a6:	68bb      	ldr	r3, [r7, #8]
    27a8:	2b00      	cmp	r3, #0
    27aa:	d101      	bne.n	27b0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c>
    // use null output function
    out = _out_null;
    27ac:	4ba2      	ldr	r3, [pc, #648]	; (2a38 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a4>)
    27ae:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
    27b0:	683b      	ldr	r3, [r7, #0]
    27b2:	781b      	ldrb	r3, [r3, #0]
    27b4:	2b00      	cmp	r3, #0
    27b6:	f000 8445 	beq.w	3044 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8b0>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
    27ba:	683b      	ldr	r3, [r7, #0]
    27bc:	781b      	ldrb	r3, [r3, #0]
    27be:	2b25      	cmp	r3, #37	; 0x25
    27c0:	d00d      	beq.n	27de <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4a>
      // no
      out(*format, buffer, idx++, maxlen);
    27c2:	683b      	ldr	r3, [r7, #0]
    27c4:	7818      	ldrb	r0, [r3, #0]
    27c6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    27c8:	1c53      	adds	r3, r2, #1
    27ca:	647b      	str	r3, [r7, #68]	; 0x44
    27cc:	68fc      	ldr	r4, [r7, #12]
    27ce:	687b      	ldr	r3, [r7, #4]
    27d0:	68b9      	ldr	r1, [r7, #8]
    27d2:	47a0      	blx	r4
      format++;
    27d4:	683b      	ldr	r3, [r7, #0]
    27d6:	3301      	adds	r3, #1
    27d8:	603b      	str	r3, [r7, #0]
      continue;
    27da:	f000 bc31 	b.w	3040 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
    }
    else {
      // yes, evaluate it
      format++;
    27de:	683b      	ldr	r3, [r7, #0]
    27e0:	3301      	adds	r3, #1
    27e2:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
    27e4:	2300      	movs	r3, #0
    27e6:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
    27e8:	683b      	ldr	r3, [r7, #0]
    27ea:	781b      	ldrb	r3, [r3, #0]
    27ec:	3b20      	subs	r3, #32
    27ee:	2b10      	cmp	r3, #16
    27f0:	d856      	bhi.n	28a0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x10c>
    27f2:	a201      	add	r2, pc, #4	; (adr r2, 27f8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x64>)
    27f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    27f8:	00002879 	.word	0x00002879
    27fc:	000028a1 	.word	0x000028a1
    2800:	000028a1 	.word	0x000028a1
    2804:	0000288d 	.word	0x0000288d
    2808:	000028a1 	.word	0x000028a1
    280c:	000028a1 	.word	0x000028a1
    2810:	000028a1 	.word	0x000028a1
    2814:	000028a1 	.word	0x000028a1
    2818:	000028a1 	.word	0x000028a1
    281c:	000028a1 	.word	0x000028a1
    2820:	000028a1 	.word	0x000028a1
    2824:	00002865 	.word	0x00002865
    2828:	000028a1 	.word	0x000028a1
    282c:	00002851 	.word	0x00002851
    2830:	000028a1 	.word	0x000028a1
    2834:	000028a1 	.word	0x000028a1
    2838:	0000283d 	.word	0x0000283d
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
    283c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    283e:	f043 0301 	orr.w	r3, r3, #1
    2842:	657b      	str	r3, [r7, #84]	; 0x54
    2844:	683b      	ldr	r3, [r7, #0]
    2846:	3301      	adds	r3, #1
    2848:	603b      	str	r3, [r7, #0]
    284a:	2301      	movs	r3, #1
    284c:	64bb      	str	r3, [r7, #72]	; 0x48
    284e:	e02a      	b.n	28a6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
    2850:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2852:	f043 0302 	orr.w	r3, r3, #2
    2856:	657b      	str	r3, [r7, #84]	; 0x54
    2858:	683b      	ldr	r3, [r7, #0]
    285a:	3301      	adds	r3, #1
    285c:	603b      	str	r3, [r7, #0]
    285e:	2301      	movs	r3, #1
    2860:	64bb      	str	r3, [r7, #72]	; 0x48
    2862:	e020      	b.n	28a6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
    2864:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2866:	f043 0304 	orr.w	r3, r3, #4
    286a:	657b      	str	r3, [r7, #84]	; 0x54
    286c:	683b      	ldr	r3, [r7, #0]
    286e:	3301      	adds	r3, #1
    2870:	603b      	str	r3, [r7, #0]
    2872:	2301      	movs	r3, #1
    2874:	64bb      	str	r3, [r7, #72]	; 0x48
    2876:	e016      	b.n	28a6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
    2878:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    287a:	f043 0308 	orr.w	r3, r3, #8
    287e:	657b      	str	r3, [r7, #84]	; 0x54
    2880:	683b      	ldr	r3, [r7, #0]
    2882:	3301      	adds	r3, #1
    2884:	603b      	str	r3, [r7, #0]
    2886:	2301      	movs	r3, #1
    2888:	64bb      	str	r3, [r7, #72]	; 0x48
    288a:	e00c      	b.n	28a6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
    288c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    288e:	f043 0310 	orr.w	r3, r3, #16
    2892:	657b      	str	r3, [r7, #84]	; 0x54
    2894:	683b      	ldr	r3, [r7, #0]
    2896:	3301      	adds	r3, #1
    2898:	603b      	str	r3, [r7, #0]
    289a:	2301      	movs	r3, #1
    289c:	64bb      	str	r3, [r7, #72]	; 0x48
    289e:	e002      	b.n	28a6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        default :                                   n = 0U; break;
    28a0:	2300      	movs	r3, #0
    28a2:	64bb      	str	r3, [r7, #72]	; 0x48
    28a4:	bf00      	nop
      }
    } while (n);
    28a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    28a8:	2b00      	cmp	r3, #0
    28aa:	d000      	beq.n	28ae <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11a>
    do {
    28ac:	e79c      	b.n	27e8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x54>

    // evaluate width field
    width = 0U;
    28ae:	2300      	movs	r3, #0
    28b0:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
    28b2:	683b      	ldr	r3, [r7, #0]
    28b4:	781b      	ldrb	r3, [r3, #0]
    28b6:	4618      	mov	r0, r3
    28b8:	f7ff fb18 	bl	1eec <_is_digit(char)>
    28bc:	4603      	mov	r3, r0
    28be:	2b00      	cmp	r3, #0
    28c0:	d005      	beq.n	28ce <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x13a>
      width = _atoi(&format);
    28c2:	463b      	mov	r3, r7
    28c4:	4618      	mov	r0, r3
    28c6:	f7ff fb25 	bl	1f14 <_atoi(char const**)>
    28ca:	6538      	str	r0, [r7, #80]	; 0x50
    28cc:	e018      	b.n	2900 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x16c>
    }
    else if (*format == '*') {
    28ce:	683b      	ldr	r3, [r7, #0]
    28d0:	781b      	ldrb	r3, [r3, #0]
    28d2:	2b2a      	cmp	r3, #42	; 0x2a
    28d4:	d114      	bne.n	2900 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x16c>
      const int w = va_arg(va, int);
    28d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    28d8:	1d1a      	adds	r2, r3, #4
    28da:	66ba      	str	r2, [r7, #104]	; 0x68
    28dc:	681b      	ldr	r3, [r3, #0]
    28de:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
    28e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    28e2:	2b00      	cmp	r3, #0
    28e4:	da07      	bge.n	28f6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x162>
        flags |= FLAGS_LEFT;    // reverse padding
    28e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    28e8:	f043 0302 	orr.w	r3, r3, #2
    28ec:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
    28ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    28f0:	425b      	negs	r3, r3
    28f2:	653b      	str	r3, [r7, #80]	; 0x50
    28f4:	e001      	b.n	28fa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x166>
      }
      else {
        width = (unsigned int)w;
    28f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    28f8:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
    28fa:	683b      	ldr	r3, [r7, #0]
    28fc:	3301      	adds	r3, #1
    28fe:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
    2900:	2300      	movs	r3, #0
    2902:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
    2904:	683b      	ldr	r3, [r7, #0]
    2906:	781b      	ldrb	r3, [r3, #0]
    2908:	2b2e      	cmp	r3, #46	; 0x2e
    290a:	d124      	bne.n	2956 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
      flags |= FLAGS_PRECISION;
    290c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    290e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    2912:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
    2914:	683b      	ldr	r3, [r7, #0]
    2916:	3301      	adds	r3, #1
    2918:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
    291a:	683b      	ldr	r3, [r7, #0]
    291c:	781b      	ldrb	r3, [r3, #0]
    291e:	4618      	mov	r0, r3
    2920:	f7ff fae4 	bl	1eec <_is_digit(char)>
    2924:	4603      	mov	r3, r0
    2926:	2b00      	cmp	r3, #0
    2928:	d005      	beq.n	2936 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1a2>
        precision = _atoi(&format);
    292a:	463b      	mov	r3, r7
    292c:	4618      	mov	r0, r3
    292e:	f7ff faf1 	bl	1f14 <_atoi(char const**)>
    2932:	64f8      	str	r0, [r7, #76]	; 0x4c
    2934:	e00f      	b.n	2956 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
      }
      else if (*format == '*') {
    2936:	683b      	ldr	r3, [r7, #0]
    2938:	781b      	ldrb	r3, [r3, #0]
    293a:	2b2a      	cmp	r3, #42	; 0x2a
    293c:	d10b      	bne.n	2956 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
        const int prec = (int)va_arg(va, int);
    293e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2940:	1d1a      	adds	r2, r3, #4
    2942:	66ba      	str	r2, [r7, #104]	; 0x68
    2944:	681b      	ldr	r3, [r3, #0]
    2946:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
    2948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    294a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    294e:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
    2950:	683b      	ldr	r3, [r7, #0]
    2952:	3301      	adds	r3, #1
    2954:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
    2956:	683b      	ldr	r3, [r7, #0]
    2958:	781b      	ldrb	r3, [r3, #0]
    295a:	3b68      	subs	r3, #104	; 0x68
    295c:	2b12      	cmp	r3, #18
    295e:	d867      	bhi.n	2a30 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x29c>
    2960:	a201      	add	r2, pc, #4	; (adr r2, 2968 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1d4>)
    2962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2966:	bf00      	nop
    2968:	000029db 	.word	0x000029db
    296c:	00002a31 	.word	0x00002a31
    2970:	00002a11 	.word	0x00002a11
    2974:	00002a31 	.word	0x00002a31
    2978:	000029b5 	.word	0x000029b5
    297c:	00002a31 	.word	0x00002a31
    2980:	00002a31 	.word	0x00002a31
    2984:	00002a31 	.word	0x00002a31
    2988:	00002a31 	.word	0x00002a31
    298c:	00002a31 	.word	0x00002a31
    2990:	00002a31 	.word	0x00002a31
    2994:	00002a31 	.word	0x00002a31
    2998:	00002a01 	.word	0x00002a01
    299c:	00002a31 	.word	0x00002a31
    29a0:	00002a31 	.word	0x00002a31
    29a4:	00002a31 	.word	0x00002a31
    29a8:	00002a31 	.word	0x00002a31
    29ac:	00002a31 	.word	0x00002a31
    29b0:	00002a21 	.word	0x00002a21
      case 'l' :
        flags |= FLAGS_LONG;
    29b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    29b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    29ba:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    29bc:	683b      	ldr	r3, [r7, #0]
    29be:	3301      	adds	r3, #1
    29c0:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
    29c2:	683b      	ldr	r3, [r7, #0]
    29c4:	781b      	ldrb	r3, [r3, #0]
    29c6:	2b6c      	cmp	r3, #108	; 0x6c
    29c8:	d134      	bne.n	2a34 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a0>
          flags |= FLAGS_LONG_LONG;
    29ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    29cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    29d0:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
    29d2:	683b      	ldr	r3, [r7, #0]
    29d4:	3301      	adds	r3, #1
    29d6:	603b      	str	r3, [r7, #0]
        }
        break;
    29d8:	e02c      	b.n	2a34 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a0>
      case 'h' :
        flags |= FLAGS_SHORT;
    29da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    29dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    29e0:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    29e2:	683b      	ldr	r3, [r7, #0]
    29e4:	3301      	adds	r3, #1
    29e6:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
    29e8:	683b      	ldr	r3, [r7, #0]
    29ea:	781b      	ldrb	r3, [r3, #0]
    29ec:	2b68      	cmp	r3, #104	; 0x68
    29ee:	d125      	bne.n	2a3c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a8>
          flags |= FLAGS_CHAR;
    29f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    29f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    29f6:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
    29f8:	683b      	ldr	r3, [r7, #0]
    29fa:	3301      	adds	r3, #1
    29fc:	603b      	str	r3, [r7, #0]
        }
        break;
    29fe:	e01d      	b.n	2a3c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a8>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    2a00:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2a02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2a06:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    2a08:	683b      	ldr	r3, [r7, #0]
    2a0a:	3301      	adds	r3, #1
    2a0c:	603b      	str	r3, [r7, #0]
        break;
    2a0e:	e016      	b.n	2a3e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    2a10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2a12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    2a16:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    2a18:	683b      	ldr	r3, [r7, #0]
    2a1a:	3301      	adds	r3, #1
    2a1c:	603b      	str	r3, [r7, #0]
        break;
    2a1e:	e00e      	b.n	2a3e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    2a20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    2a26:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    2a28:	683b      	ldr	r3, [r7, #0]
    2a2a:	3301      	adds	r3, #1
    2a2c:	603b      	str	r3, [r7, #0]
        break;
    2a2e:	e006      	b.n	2a3e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
      default :
        break;
    2a30:	bf00      	nop
    2a32:	e004      	b.n	2a3e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
        break;
    2a34:	bf00      	nop
    2a36:	e002      	b.n	2a3e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
    2a38:	00001e7d 	.word	0x00001e7d
        break;
    2a3c:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
    2a3e:	683b      	ldr	r3, [r7, #0]
    2a40:	781b      	ldrb	r3, [r3, #0]
    2a42:	3b25      	subs	r3, #37	; 0x25
    2a44:	2b53      	cmp	r3, #83	; 0x53
    2a46:	f200 82ee 	bhi.w	3026 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x892>
    2a4a:	a201      	add	r2, pc, #4	; (adr r2, 2a50 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2bc>)
    2a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2a50:	0000300f 	.word	0x0000300f
    2a54:	00003027 	.word	0x00003027
    2a58:	00003027 	.word	0x00003027
    2a5c:	00003027 	.word	0x00003027
    2a60:	00003027 	.word	0x00003027
    2a64:	00003027 	.word	0x00003027
    2a68:	00003027 	.word	0x00003027
    2a6c:	00003027 	.word	0x00003027
    2a70:	00003027 	.word	0x00003027
    2a74:	00003027 	.word	0x00003027
    2a78:	00003027 	.word	0x00003027
    2a7c:	00003027 	.word	0x00003027
    2a80:	00003027 	.word	0x00003027
    2a84:	00003027 	.word	0x00003027
    2a88:	00003027 	.word	0x00003027
    2a8c:	00003027 	.word	0x00003027
    2a90:	00003027 	.word	0x00003027
    2a94:	00003027 	.word	0x00003027
    2a98:	00003027 	.word	0x00003027
    2a9c:	00003027 	.word	0x00003027
    2aa0:	00003027 	.word	0x00003027
    2aa4:	00003027 	.word	0x00003027
    2aa8:	00003027 	.word	0x00003027
    2aac:	00003027 	.word	0x00003027
    2ab0:	00003027 	.word	0x00003027
    2ab4:	00003027 	.word	0x00003027
    2ab8:	00003027 	.word	0x00003027
    2abc:	00003027 	.word	0x00003027
    2ac0:	00003027 	.word	0x00003027
    2ac4:	00003027 	.word	0x00003027
    2ac8:	00003027 	.word	0x00003027
    2acc:	00003027 	.word	0x00003027
    2ad0:	00003027 	.word	0x00003027
    2ad4:	00002e2d 	.word	0x00002e2d
    2ad8:	00003027 	.word	0x00003027
    2adc:	00003027 	.word	0x00003027
    2ae0:	00003027 	.word	0x00003027
    2ae4:	00003027 	.word	0x00003027
    2ae8:	00003027 	.word	0x00003027
    2aec:	00003027 	.word	0x00003027
    2af0:	00003027 	.word	0x00003027
    2af4:	00003027 	.word	0x00003027
    2af8:	00003027 	.word	0x00003027
    2afc:	00003027 	.word	0x00003027
    2b00:	00003027 	.word	0x00003027
    2b04:	00003027 	.word	0x00003027
    2b08:	00003027 	.word	0x00003027
    2b0c:	00003027 	.word	0x00003027
    2b10:	00003027 	.word	0x00003027
    2b14:	00003027 	.word	0x00003027
    2b18:	00003027 	.word	0x00003027
    2b1c:	00002ba1 	.word	0x00002ba1
    2b20:	00003027 	.word	0x00003027
    2b24:	00003027 	.word	0x00003027
    2b28:	00003027 	.word	0x00003027
    2b2c:	00003027 	.word	0x00003027
    2b30:	00003027 	.word	0x00003027
    2b34:	00003027 	.word	0x00003027
    2b38:	00003027 	.word	0x00003027
    2b3c:	00003027 	.word	0x00003027
    2b40:	00003027 	.word	0x00003027
    2b44:	00002ba1 	.word	0x00002ba1
    2b48:	00002e69 	.word	0x00002e69
    2b4c:	00002ba1 	.word	0x00002ba1
    2b50:	00003027 	.word	0x00003027
    2b54:	00002e2d 	.word	0x00002e2d
    2b58:	00003027 	.word	0x00003027
    2b5c:	00003027 	.word	0x00003027
    2b60:	00002ba1 	.word	0x00002ba1
    2b64:	00003027 	.word	0x00003027
    2b68:	00003027 	.word	0x00003027
    2b6c:	00003027 	.word	0x00003027
    2b70:	00003027 	.word	0x00003027
    2b74:	00003027 	.word	0x00003027
    2b78:	00002ba1 	.word	0x00002ba1
    2b7c:	00002fc7 	.word	0x00002fc7
    2b80:	00003027 	.word	0x00003027
    2b84:	00003027 	.word	0x00003027
    2b88:	00002ef1 	.word	0x00002ef1
    2b8c:	00003027 	.word	0x00003027
    2b90:	00002ba1 	.word	0x00002ba1
    2b94:	00003027 	.word	0x00003027
    2b98:	00003027 	.word	0x00003027
    2b9c:	00002ba1 	.word	0x00002ba1
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
    2ba0:	683b      	ldr	r3, [r7, #0]
    2ba2:	781b      	ldrb	r3, [r3, #0]
    2ba4:	2b78      	cmp	r3, #120	; 0x78
    2ba6:	d003      	beq.n	2bb0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x41c>
    2ba8:	683b      	ldr	r3, [r7, #0]
    2baa:	781b      	ldrb	r3, [r3, #0]
    2bac:	2b58      	cmp	r3, #88	; 0x58
    2bae:	d102      	bne.n	2bb6 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x422>
          base = 16U;
    2bb0:	2310      	movs	r3, #16
    2bb2:	643b      	str	r3, [r7, #64]	; 0x40
    2bb4:	e013      	b.n	2bde <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else if (*format == 'o') {
    2bb6:	683b      	ldr	r3, [r7, #0]
    2bb8:	781b      	ldrb	r3, [r3, #0]
    2bba:	2b6f      	cmp	r3, #111	; 0x6f
    2bbc:	d102      	bne.n	2bc4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x430>
          base =  8U;
    2bbe:	2308      	movs	r3, #8
    2bc0:	643b      	str	r3, [r7, #64]	; 0x40
    2bc2:	e00c      	b.n	2bde <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else if (*format == 'b') {
    2bc4:	683b      	ldr	r3, [r7, #0]
    2bc6:	781b      	ldrb	r3, [r3, #0]
    2bc8:	2b62      	cmp	r3, #98	; 0x62
    2bca:	d102      	bne.n	2bd2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x43e>
          base =  2U;
    2bcc:	2302      	movs	r3, #2
    2bce:	643b      	str	r3, [r7, #64]	; 0x40
    2bd0:	e005      	b.n	2bde <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else {
          base = 10U;
    2bd2:	230a      	movs	r3, #10
    2bd4:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
    2bd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2bd8:	f023 0310 	bic.w	r3, r3, #16
    2bdc:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
    2bde:	683b      	ldr	r3, [r7, #0]
    2be0:	781b      	ldrb	r3, [r3, #0]
    2be2:	2b58      	cmp	r3, #88	; 0x58
    2be4:	d103      	bne.n	2bee <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
          flags |= FLAGS_UPPERCASE;
    2be6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2be8:	f043 0320 	orr.w	r3, r3, #32
    2bec:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
    2bee:	683b      	ldr	r3, [r7, #0]
    2bf0:	781b      	ldrb	r3, [r3, #0]
    2bf2:	2b69      	cmp	r3, #105	; 0x69
    2bf4:	d007      	beq.n	2c06 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x472>
    2bf6:	683b      	ldr	r3, [r7, #0]
    2bf8:	781b      	ldrb	r3, [r3, #0]
    2bfa:	2b64      	cmp	r3, #100	; 0x64
    2bfc:	d003      	beq.n	2c06 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x472>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    2bfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2c00:	f023 030c 	bic.w	r3, r3, #12
    2c04:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
    2c06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    2c0c:	2b00      	cmp	r3, #0
    2c0e:	d003      	beq.n	2c18 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x484>
          flags &= ~FLAGS_ZEROPAD;
    2c10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2c12:	f023 0301 	bic.w	r3, r3, #1
    2c16:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
    2c18:	683b      	ldr	r3, [r7, #0]
    2c1a:	781b      	ldrb	r3, [r3, #0]
    2c1c:	2b69      	cmp	r3, #105	; 0x69
    2c1e:	d004      	beq.n	2c2a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x496>
    2c20:	683b      	ldr	r3, [r7, #0]
    2c22:	781b      	ldrb	r3, [r3, #0]
    2c24:	2b64      	cmp	r3, #100	; 0x64
    2c26:	f040 808d 	bne.w	2d44 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5b0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
    2c2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2c2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
    2c30:	2b00      	cmp	r3, #0
    2c32:	d02e      	beq.n	2c92 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4fe>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
    2c34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2c36:	3307      	adds	r3, #7
    2c38:	f023 0307 	bic.w	r3, r3, #7
    2c3c:	f103 0208 	add.w	r2, r3, #8
    2c40:	66ba      	str	r2, [r7, #104]	; 0x68
    2c42:	e9d3 3400 	ldrd	r3, r4, [r3]
    2c46:	e9c7 3404 	strd	r3, r4, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    2c4a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
    2c4e:	2b00      	cmp	r3, #0
    2c50:	f174 0200 	sbcs.w	r2, r4, #0
    2c54:	da02      	bge.n	2c5c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4c8>
    2c56:	425b      	negs	r3, r3
    2c58:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    2c5c:	4619      	mov	r1, r3
    2c5e:	4622      	mov	r2, r4
    2c60:	697b      	ldr	r3, [r7, #20]
    2c62:	0fdb      	lsrs	r3, r3, #31
    2c64:	b2d8      	uxtb	r0, r3
    2c66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2c68:	f04f 0400 	mov.w	r4, #0
    2c6c:	6d7d      	ldr	r5, [r7, #84]	; 0x54
    2c6e:	9508      	str	r5, [sp, #32]
    2c70:	6d3d      	ldr	r5, [r7, #80]	; 0x50
    2c72:	9507      	str	r5, [sp, #28]
    2c74:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
    2c76:	9506      	str	r5, [sp, #24]
    2c78:	e9cd 3404 	strd	r3, r4, [sp, #16]
    2c7c:	9002      	str	r0, [sp, #8]
    2c7e:	e9cd 1200 	strd	r1, r2, [sp]
    2c82:	687b      	ldr	r3, [r7, #4]
    2c84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2c86:	68b9      	ldr	r1, [r7, #8]
    2c88:	68f8      	ldr	r0, [r7, #12]
    2c8a:	f7ff faf0 	bl	226e <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
    2c8e:	6478      	str	r0, [r7, #68]	; 0x44
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
    2c90:	e0c8      	b.n	2e24 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
          else if (flags & FLAGS_LONG) {
    2c92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
    2c98:	2b00      	cmp	r3, #0
    2c9a:	d01e      	beq.n	2cda <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x546>
            const long value = va_arg(va, long);
    2c9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2c9e:	1d1a      	adds	r2, r3, #4
    2ca0:	66ba      	str	r2, [r7, #104]	; 0x68
    2ca2:	681b      	ldr	r3, [r3, #0]
    2ca4:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    2ca6:	69fb      	ldr	r3, [r7, #28]
    2ca8:	2b00      	cmp	r3, #0
    2caa:	bfb8      	it	lt
    2cac:	425b      	neglt	r3, r3
    2cae:	4619      	mov	r1, r3
    2cb0:	69fb      	ldr	r3, [r7, #28]
    2cb2:	0fdb      	lsrs	r3, r3, #31
    2cb4:	b2db      	uxtb	r3, r3
    2cb6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    2cb8:	9205      	str	r2, [sp, #20]
    2cba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    2cbc:	9204      	str	r2, [sp, #16]
    2cbe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    2cc0:	9203      	str	r2, [sp, #12]
    2cc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    2cc4:	9202      	str	r2, [sp, #8]
    2cc6:	9301      	str	r3, [sp, #4]
    2cc8:	9100      	str	r1, [sp, #0]
    2cca:	687b      	ldr	r3, [r7, #4]
    2ccc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2cce:	68b9      	ldr	r1, [r7, #8]
    2cd0:	68f8      	ldr	r0, [r7, #12]
    2cd2:	f7ff fa64 	bl	219e <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    2cd6:	6478      	str	r0, [r7, #68]	; 0x44
          }
    2cd8:	e0a4      	b.n	2e24 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    2cda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
    2ce0:	2b00      	cmp	r3, #0
    2ce2:	d005      	beq.n	2cf0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x55c>
    2ce4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2ce6:	1d1a      	adds	r2, r3, #4
    2ce8:	66ba      	str	r2, [r7, #104]	; 0x68
    2cea:	681b      	ldr	r3, [r3, #0]
    2cec:	b2db      	uxtb	r3, r3
    2cee:	e00e      	b.n	2d0e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x57a>
    2cf0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2cf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
    2cf6:	2b00      	cmp	r3, #0
    2cf8:	d005      	beq.n	2d06 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x572>
    2cfa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2cfc:	1d1a      	adds	r2, r3, #4
    2cfe:	66ba      	str	r2, [r7, #104]	; 0x68
    2d00:	681b      	ldr	r3, [r3, #0]
    2d02:	b21b      	sxth	r3, r3
    2d04:	e003      	b.n	2d0e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x57a>
    2d06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2d08:	1d1a      	adds	r2, r3, #4
    2d0a:	66ba      	str	r2, [r7, #104]	; 0x68
    2d0c:	681b      	ldr	r3, [r3, #0]
    2d0e:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    2d10:	6a3b      	ldr	r3, [r7, #32]
    2d12:	2b00      	cmp	r3, #0
    2d14:	bfb8      	it	lt
    2d16:	425b      	neglt	r3, r3
    2d18:	4619      	mov	r1, r3
    2d1a:	6a3b      	ldr	r3, [r7, #32]
    2d1c:	0fdb      	lsrs	r3, r3, #31
    2d1e:	b2db      	uxtb	r3, r3
    2d20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    2d22:	9205      	str	r2, [sp, #20]
    2d24:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    2d26:	9204      	str	r2, [sp, #16]
    2d28:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    2d2a:	9203      	str	r2, [sp, #12]
    2d2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    2d2e:	9202      	str	r2, [sp, #8]
    2d30:	9301      	str	r3, [sp, #4]
    2d32:	9100      	str	r1, [sp, #0]
    2d34:	687b      	ldr	r3, [r7, #4]
    2d36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2d38:	68b9      	ldr	r1, [r7, #8]
    2d3a:	68f8      	ldr	r0, [r7, #12]
    2d3c:	f7ff fa2f 	bl	219e <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    2d40:	6478      	str	r0, [r7, #68]	; 0x44
          }
    2d42:	e06f      	b.n	2e24 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
    2d44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2d46:	f403 7300 	and.w	r3, r3, #512	; 0x200
    2d4a:	2b00      	cmp	r3, #0
    2d4c:	d020      	beq.n	2d90 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5fc>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
    2d4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2d50:	3307      	adds	r3, #7
    2d52:	f023 0307 	bic.w	r3, r3, #7
    2d56:	f103 0208 	add.w	r2, r3, #8
    2d5a:	66ba      	str	r2, [r7, #104]	; 0x68
    2d5c:	e9d3 3400 	ldrd	r3, r4, [r3]
    2d60:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    2d62:	4611      	mov	r1, r2
    2d64:	f04f 0200 	mov.w	r2, #0
    2d68:	6d78      	ldr	r0, [r7, #84]	; 0x54
    2d6a:	9008      	str	r0, [sp, #32]
    2d6c:	6d38      	ldr	r0, [r7, #80]	; 0x50
    2d6e:	9007      	str	r0, [sp, #28]
    2d70:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    2d72:	9006      	str	r0, [sp, #24]
    2d74:	e9cd 1204 	strd	r1, r2, [sp, #16]
    2d78:	2200      	movs	r2, #0
    2d7a:	9202      	str	r2, [sp, #8]
    2d7c:	e9cd 3400 	strd	r3, r4, [sp]
    2d80:	687b      	ldr	r3, [r7, #4]
    2d82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2d84:	68b9      	ldr	r1, [r7, #8]
    2d86:	68f8      	ldr	r0, [r7, #12]
    2d88:	f7ff fa71 	bl	226e <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
    2d8c:	6478      	str	r0, [r7, #68]	; 0x44
    2d8e:	e049      	b.n	2e24 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
#endif
          }
          else if (flags & FLAGS_LONG) {
    2d90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
    2d96:	2b00      	cmp	r3, #0
    2d98:	d016      	beq.n	2dc8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x634>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    2d9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2d9c:	1d1a      	adds	r2, r3, #4
    2d9e:	66ba      	str	r2, [r7, #104]	; 0x68
    2da0:	681b      	ldr	r3, [r3, #0]
    2da2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    2da4:	9205      	str	r2, [sp, #20]
    2da6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    2da8:	9204      	str	r2, [sp, #16]
    2daa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    2dac:	9203      	str	r2, [sp, #12]
    2dae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    2db0:	9202      	str	r2, [sp, #8]
    2db2:	2200      	movs	r2, #0
    2db4:	9201      	str	r2, [sp, #4]
    2db6:	9300      	str	r3, [sp, #0]
    2db8:	687b      	ldr	r3, [r7, #4]
    2dba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2dbc:	68b9      	ldr	r1, [r7, #8]
    2dbe:	68f8      	ldr	r0, [r7, #12]
    2dc0:	f7ff f9ed 	bl	219e <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    2dc4:	6478      	str	r0, [r7, #68]	; 0x44
    2dc6:	e02d      	b.n	2e24 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    2dc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2dca:	f003 0340 	and.w	r3, r3, #64	; 0x40
    2dce:	2b00      	cmp	r3, #0
    2dd0:	d005      	beq.n	2dde <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x64a>
    2dd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2dd4:	1d1a      	adds	r2, r3, #4
    2dd6:	66ba      	str	r2, [r7, #104]	; 0x68
    2dd8:	681b      	ldr	r3, [r3, #0]
    2dda:	b2db      	uxtb	r3, r3
    2ddc:	e00e      	b.n	2dfc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x668>
    2dde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2de0:	f003 0380 	and.w	r3, r3, #128	; 0x80
    2de4:	2b00      	cmp	r3, #0
    2de6:	d005      	beq.n	2df4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x660>
    2de8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2dea:	1d1a      	adds	r2, r3, #4
    2dec:	66ba      	str	r2, [r7, #104]	; 0x68
    2dee:	681b      	ldr	r3, [r3, #0]
    2df0:	b29b      	uxth	r3, r3
    2df2:	e003      	b.n	2dfc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x668>
    2df4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2df6:	1d1a      	adds	r2, r3, #4
    2df8:	66ba      	str	r2, [r7, #104]	; 0x68
    2dfa:	681b      	ldr	r3, [r3, #0]
    2dfc:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    2dfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2e00:	9305      	str	r3, [sp, #20]
    2e02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    2e04:	9304      	str	r3, [sp, #16]
    2e06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    2e08:	9303      	str	r3, [sp, #12]
    2e0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    2e0c:	9302      	str	r3, [sp, #8]
    2e0e:	2300      	movs	r3, #0
    2e10:	9301      	str	r3, [sp, #4]
    2e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2e14:	9300      	str	r3, [sp, #0]
    2e16:	687b      	ldr	r3, [r7, #4]
    2e18:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2e1a:	68b9      	ldr	r1, [r7, #8]
    2e1c:	68f8      	ldr	r0, [r7, #12]
    2e1e:	f7ff f9be 	bl	219e <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    2e22:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
    2e24:	683b      	ldr	r3, [r7, #0]
    2e26:	3301      	adds	r3, #1
    2e28:	603b      	str	r3, [r7, #0]
        break;
    2e2a:	e109      	b.n	3040 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    2e2c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2e2e:	3307      	adds	r3, #7
    2e30:	f023 0307 	bic.w	r3, r3, #7
    2e34:	f103 0208 	add.w	r2, r3, #8
    2e38:	66ba      	str	r2, [r7, #104]	; 0x68
    2e3a:	ed93 7b00 	vldr	d7, [r3]
    2e3e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2e40:	9302      	str	r3, [sp, #8]
    2e42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    2e44:	9301      	str	r3, [sp, #4]
    2e46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    2e48:	9300      	str	r3, [sp, #0]
    2e4a:	eeb0 0a47 	vmov.f32	s0, s14
    2e4e:	eef0 0a67 	vmov.f32	s1, s15
    2e52:	687b      	ldr	r3, [r7, #4]
    2e54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2e56:	68b9      	ldr	r1, [r7, #8]
    2e58:	68f8      	ldr	r0, [r7, #12]
    2e5a:	f7ff fa79 	bl	2350 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>
    2e5e:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
    2e60:	683b      	ldr	r3, [r7, #0]
    2e62:	3301      	adds	r3, #1
    2e64:	603b      	str	r3, [r7, #0]
        break;
    2e66:	e0eb      	b.n	3040 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
    2e68:	2301      	movs	r3, #1
    2e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
    2e6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2e6e:	f003 0302 	and.w	r3, r3, #2
    2e72:	2b00      	cmp	r3, #0
    2e74:	d113      	bne.n	2e9e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x70a>
          while (l++ < width) {
    2e76:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2e78:	1c5a      	adds	r2, r3, #1
    2e7a:	63fa      	str	r2, [r7, #60]	; 0x3c
    2e7c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    2e7e:	429a      	cmp	r2, r3
    2e80:	bf8c      	ite	hi
    2e82:	2301      	movhi	r3, #1
    2e84:	2300      	movls	r3, #0
    2e86:	b2db      	uxtb	r3, r3
    2e88:	2b00      	cmp	r3, #0
    2e8a:	d008      	beq.n	2e9e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x70a>
            out(' ', buffer, idx++, maxlen);
    2e8c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2e8e:	1c53      	adds	r3, r2, #1
    2e90:	647b      	str	r3, [r7, #68]	; 0x44
    2e92:	68fc      	ldr	r4, [r7, #12]
    2e94:	687b      	ldr	r3, [r7, #4]
    2e96:	68b9      	ldr	r1, [r7, #8]
    2e98:	2020      	movs	r0, #32
    2e9a:	47a0      	blx	r4
          while (l++ < width) {
    2e9c:	e7eb      	b.n	2e76 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6e2>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    2e9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2ea0:	1d1a      	adds	r2, r3, #4
    2ea2:	66ba      	str	r2, [r7, #104]	; 0x68
    2ea4:	681b      	ldr	r3, [r3, #0]
    2ea6:	b2d8      	uxtb	r0, r3
    2ea8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2eaa:	1c53      	adds	r3, r2, #1
    2eac:	647b      	str	r3, [r7, #68]	; 0x44
    2eae:	68fc      	ldr	r4, [r7, #12]
    2eb0:	687b      	ldr	r3, [r7, #4]
    2eb2:	68b9      	ldr	r1, [r7, #8]
    2eb4:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
    2eb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2eb8:	f003 0302 	and.w	r3, r3, #2
    2ebc:	2b00      	cmp	r3, #0
    2ebe:	d013      	beq.n	2ee8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x754>
          while (l++ < width) {
    2ec0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2ec2:	1c5a      	adds	r2, r3, #1
    2ec4:	63fa      	str	r2, [r7, #60]	; 0x3c
    2ec6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    2ec8:	429a      	cmp	r2, r3
    2eca:	bf8c      	ite	hi
    2ecc:	2301      	movhi	r3, #1
    2ece:	2300      	movls	r3, #0
    2ed0:	b2db      	uxtb	r3, r3
    2ed2:	2b00      	cmp	r3, #0
    2ed4:	d008      	beq.n	2ee8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x754>
            out(' ', buffer, idx++, maxlen);
    2ed6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2ed8:	1c53      	adds	r3, r2, #1
    2eda:	647b      	str	r3, [r7, #68]	; 0x44
    2edc:	68fc      	ldr	r4, [r7, #12]
    2ede:	687b      	ldr	r3, [r7, #4]
    2ee0:	68b9      	ldr	r1, [r7, #8]
    2ee2:	2020      	movs	r0, #32
    2ee4:	47a0      	blx	r4
          while (l++ < width) {
    2ee6:	e7eb      	b.n	2ec0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x72c>
          }
        }
        format++;
    2ee8:	683b      	ldr	r3, [r7, #0]
    2eea:	3301      	adds	r3, #1
    2eec:	603b      	str	r3, [r7, #0]
        break;
    2eee:	e0a7      	b.n	3040 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
      }

      case 's' : {
        char* p = va_arg(va, char*);
    2ef0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2ef2:	1d1a      	adds	r2, r3, #4
    2ef4:	66ba      	str	r2, [r7, #104]	; 0x68
    2ef6:	681b      	ldr	r3, [r3, #0]
    2ef8:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strlen(p);
    2efa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    2efc:	f7fe ffdf 	bl	1ebe <_strlen(char const*)>
    2f00:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
    2f02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    2f08:	2b00      	cmp	r3, #0
    2f0a:	d007      	beq.n	2f1c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x788>
          l = (l < precision ? l : precision);
    2f0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    2f0e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    2f10:	429a      	cmp	r2, r3
    2f12:	d201      	bcs.n	2f18 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x784>
    2f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2f16:	e000      	b.n	2f1a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x786>
    2f18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    2f1a:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
    2f1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2f1e:	f003 0302 	and.w	r3, r3, #2
    2f22:	2b00      	cmp	r3, #0
    2f24:	d113      	bne.n	2f4e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ba>
          while (l++ < width) {
    2f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2f28:	1c5a      	adds	r2, r3, #1
    2f2a:	637a      	str	r2, [r7, #52]	; 0x34
    2f2c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    2f2e:	429a      	cmp	r2, r3
    2f30:	bf8c      	ite	hi
    2f32:	2301      	movhi	r3, #1
    2f34:	2300      	movls	r3, #0
    2f36:	b2db      	uxtb	r3, r3
    2f38:	2b00      	cmp	r3, #0
    2f3a:	d008      	beq.n	2f4e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ba>
            out(' ', buffer, idx++, maxlen);
    2f3c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2f3e:	1c53      	adds	r3, r2, #1
    2f40:	647b      	str	r3, [r7, #68]	; 0x44
    2f42:	68fc      	ldr	r4, [r7, #12]
    2f44:	687b      	ldr	r3, [r7, #4]
    2f46:	68b9      	ldr	r1, [r7, #8]
    2f48:	2020      	movs	r0, #32
    2f4a:	47a0      	blx	r4
          while (l++ < width) {
    2f4c:	e7eb      	b.n	2f26 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x792>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    2f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2f50:	781b      	ldrb	r3, [r3, #0]
    2f52:	2b00      	cmp	r3, #0
    2f54:	d00b      	beq.n	2f6e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7da>
    2f56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2f58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    2f5c:	2b00      	cmp	r3, #0
    2f5e:	d004      	beq.n	2f6a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7d6>
    2f60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    2f62:	1e5a      	subs	r2, r3, #1
    2f64:	64fa      	str	r2, [r7, #76]	; 0x4c
    2f66:	2b00      	cmp	r3, #0
    2f68:	d001      	beq.n	2f6e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7da>
    2f6a:	2301      	movs	r3, #1
    2f6c:	e000      	b.n	2f70 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7dc>
    2f6e:	2300      	movs	r3, #0
    2f70:	2b00      	cmp	r3, #0
    2f72:	d00b      	beq.n	2f8c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7f8>
          out(*(p++), buffer, idx++, maxlen);
    2f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2f76:	1c5a      	adds	r2, r3, #1
    2f78:	63ba      	str	r2, [r7, #56]	; 0x38
    2f7a:	7818      	ldrb	r0, [r3, #0]
    2f7c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2f7e:	1c53      	adds	r3, r2, #1
    2f80:	647b      	str	r3, [r7, #68]	; 0x44
    2f82:	68fc      	ldr	r4, [r7, #12]
    2f84:	687b      	ldr	r3, [r7, #4]
    2f86:	68b9      	ldr	r1, [r7, #8]
    2f88:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    2f8a:	e7e0      	b.n	2f4e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ba>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
    2f8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2f8e:	f003 0302 	and.w	r3, r3, #2
    2f92:	2b00      	cmp	r3, #0
    2f94:	d013      	beq.n	2fbe <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x82a>
          while (l++ < width) {
    2f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2f98:	1c5a      	adds	r2, r3, #1
    2f9a:	637a      	str	r2, [r7, #52]	; 0x34
    2f9c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    2f9e:	429a      	cmp	r2, r3
    2fa0:	bf8c      	ite	hi
    2fa2:	2301      	movhi	r3, #1
    2fa4:	2300      	movls	r3, #0
    2fa6:	b2db      	uxtb	r3, r3
    2fa8:	2b00      	cmp	r3, #0
    2faa:	d008      	beq.n	2fbe <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x82a>
            out(' ', buffer, idx++, maxlen);
    2fac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2fae:	1c53      	adds	r3, r2, #1
    2fb0:	647b      	str	r3, [r7, #68]	; 0x44
    2fb2:	68fc      	ldr	r4, [r7, #12]
    2fb4:	687b      	ldr	r3, [r7, #4]
    2fb6:	68b9      	ldr	r1, [r7, #8]
    2fb8:	2020      	movs	r0, #32
    2fba:	47a0      	blx	r4
          while (l++ < width) {
    2fbc:	e7eb      	b.n	2f96 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x802>
          }
        }
        format++;
    2fbe:	683b      	ldr	r3, [r7, #0]
    2fc0:	3301      	adds	r3, #1
    2fc2:	603b      	str	r3, [r7, #0]
        break;
    2fc4:	e03c      	b.n	3040 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
    2fc6:	2308      	movs	r3, #8
    2fc8:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
    2fca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2fcc:	f043 0321 	orr.w	r3, r3, #33	; 0x21
    2fd0:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
    2fd2:	2300      	movs	r3, #0
    2fd4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    2fd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2fda:	1d1a      	adds	r2, r3, #4
    2fdc:	66ba      	str	r2, [r7, #104]	; 0x68
    2fde:	681b      	ldr	r3, [r3, #0]
    2fe0:	461a      	mov	r2, r3
    2fe2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2fe4:	9305      	str	r3, [sp, #20]
    2fe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    2fe8:	9304      	str	r3, [sp, #16]
    2fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    2fec:	9303      	str	r3, [sp, #12]
    2fee:	2310      	movs	r3, #16
    2ff0:	9302      	str	r3, [sp, #8]
    2ff2:	2300      	movs	r3, #0
    2ff4:	9301      	str	r3, [sp, #4]
    2ff6:	9200      	str	r2, [sp, #0]
    2ff8:	687b      	ldr	r3, [r7, #4]
    2ffa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2ffc:	68b9      	ldr	r1, [r7, #8]
    2ffe:	68f8      	ldr	r0, [r7, #12]
    3000:	f7ff f8cd 	bl	219e <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    3004:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
    3006:	683b      	ldr	r3, [r7, #0]
    3008:	3301      	adds	r3, #1
    300a:	603b      	str	r3, [r7, #0]
        break;
    300c:	e018      	b.n	3040 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
    300e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3010:	1c53      	adds	r3, r2, #1
    3012:	647b      	str	r3, [r7, #68]	; 0x44
    3014:	68fc      	ldr	r4, [r7, #12]
    3016:	687b      	ldr	r3, [r7, #4]
    3018:	68b9      	ldr	r1, [r7, #8]
    301a:	2025      	movs	r0, #37	; 0x25
    301c:	47a0      	blx	r4
        format++;
    301e:	683b      	ldr	r3, [r7, #0]
    3020:	3301      	adds	r3, #1
    3022:	603b      	str	r3, [r7, #0]
        break;
    3024:	e00c      	b.n	3040 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>

      default :
        out(*format, buffer, idx++, maxlen);
    3026:	683b      	ldr	r3, [r7, #0]
    3028:	7818      	ldrb	r0, [r3, #0]
    302a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    302c:	1c53      	adds	r3, r2, #1
    302e:	647b      	str	r3, [r7, #68]	; 0x44
    3030:	68fc      	ldr	r4, [r7, #12]
    3032:	687b      	ldr	r3, [r7, #4]
    3034:	68b9      	ldr	r1, [r7, #8]
    3036:	47a0      	blx	r4
        format++;
    3038:	683b      	ldr	r3, [r7, #0]
    303a:	3301      	adds	r3, #1
    303c:	603b      	str	r3, [r7, #0]
        break;
    303e:	bf00      	nop
  while (*format)
    3040:	f7ff bbb6 	b.w	27b0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    3044:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3046:	687b      	ldr	r3, [r7, #4]
    3048:	429a      	cmp	r2, r3
    304a:	d302      	bcc.n	3052 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8be>
    304c:	687b      	ldr	r3, [r7, #4]
    304e:	1e5a      	subs	r2, r3, #1
    3050:	e000      	b.n	3054 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8c0>
    3052:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    3054:	68fc      	ldr	r4, [r7, #12]
    3056:	687b      	ldr	r3, [r7, #4]
    3058:	68b9      	ldr	r1, [r7, #8]
    305a:	2000      	movs	r0, #0
    305c:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
    305e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
    3060:	4618      	mov	r0, r3
    3062:	3758      	adds	r7, #88	; 0x58
    3064:	46bd      	mov	sp, r7
    3066:	bdb0      	pop	{r4, r5, r7, pc}

00003068 <printf>:

///////////////////////////////////////////////////////////////////////////////


int printf(const char* format, ...)
{
    3068:	b40f      	push	{r0, r1, r2, r3}
    306a:	b580      	push	{r7, lr}
    306c:	b086      	sub	sp, #24
    306e:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
    3070:	f107 031c 	add.w	r3, r7, #28
    3074:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    3076:	1d39      	adds	r1, r7, #4
    3078:	68bb      	ldr	r3, [r7, #8]
    307a:	9300      	str	r3, [sp, #0]
    307c:	69bb      	ldr	r3, [r7, #24]
    307e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    3082:	4806      	ldr	r0, [pc, #24]	; (309c <printf+0x34>)
    3084:	f7ff fb86 	bl	2794 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>
    3088:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
    308a:	68fb      	ldr	r3, [r7, #12]
}
    308c:	4618      	mov	r0, r3
    308e:	3710      	adds	r7, #16
    3090:	46bd      	mov	sp, r7
    3092:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    3096:	b004      	add	sp, #16
    3098:	4770      	bx	lr
    309a:	bf00      	nop
    309c:	00001e99 	.word	0x00001e99

000030a0 <sjsu::cortex::DwtCounter::Initialize()>:
{
 public:
  static inline DWT_Type * dwt = DWT;
  static inline CoreDebug_Type * core = CoreDebug;

  void Initialize()
    30a0:	b480      	push	{r7}
    30a2:	b083      	sub	sp, #12
    30a4:	af00      	add	r7, sp, #0
    30a6:	6078      	str	r0, [r7, #4]
  {
    core->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    30a8:	4b0c      	ldr	r3, [pc, #48]	; (30dc <sjsu::cortex::DwtCounter::Initialize()+0x3c>)
    30aa:	681b      	ldr	r3, [r3, #0]
    30ac:	68da      	ldr	r2, [r3, #12]
    30ae:	4b0b      	ldr	r3, [pc, #44]	; (30dc <sjsu::cortex::DwtCounter::Initialize()+0x3c>)
    30b0:	681b      	ldr	r3, [r3, #0]
    30b2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    30b6:	60da      	str	r2, [r3, #12]
    dwt->CYCCNT  = 0;
    30b8:	4b09      	ldr	r3, [pc, #36]	; (30e0 <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    30ba:	681b      	ldr	r3, [r3, #0]
    30bc:	2200      	movs	r2, #0
    30be:	605a      	str	r2, [r3, #4]
    dwt->CTRL   |= DWT_CTRL_CYCCNTENA_Msk;
    30c0:	4b07      	ldr	r3, [pc, #28]	; (30e0 <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    30c2:	681b      	ldr	r3, [r3, #0]
    30c4:	681a      	ldr	r2, [r3, #0]
    30c6:	4b06      	ldr	r3, [pc, #24]	; (30e0 <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    30c8:	681b      	ldr	r3, [r3, #0]
    30ca:	f042 0201 	orr.w	r2, r2, #1
    30ce:	601a      	str	r2, [r3, #0]
  }
    30d0:	bf00      	nop
    30d2:	370c      	adds	r7, #12
    30d4:	46bd      	mov	sp, r7
    30d6:	f85d 7b04 	ldr.w	r7, [sp], #4
    30da:	4770      	bx	lr
    30dc:	10000014 	.word	0x10000014
    30e0:	10000010 	.word	0x10000010

000030e4 <sjsu::cortex::DwtCounter::GetCount()>:
  uint32_t GetCount()
    30e4:	b480      	push	{r7}
    30e6:	b083      	sub	sp, #12
    30e8:	af00      	add	r7, sp, #0
    30ea:	6078      	str	r0, [r7, #4]
  {
    return dwt->CYCCNT;
    30ec:	4b04      	ldr	r3, [pc, #16]	; (3100 <sjsu::cortex::DwtCounter::GetCount()+0x1c>)
    30ee:	681b      	ldr	r3, [r3, #0]
    30f0:	685b      	ldr	r3, [r3, #4]
  }
    30f2:	4618      	mov	r0, r3
    30f4:	370c      	adds	r7, #12
    30f6:	46bd      	mov	sp, r7
    30f8:	f85d 7b04 	ldr.w	r7, [sp], #4
    30fc:	4770      	bx	lr
    30fe:	bf00      	nop
    3100:	10000010 	.word	0x10000010

00003104 <sjsu::cortex::InitializeFloatingPointUnit()>:
// are executed on an ARM platform
// Found here:
// http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0553a/BABGHFIB.html
// // NOLINT
inline void InitializeFloatingPointUnit()
{
    3104:	b480      	push	{r7}
    3106:	af00      	add	r7, sp, #0
        // Write back the modified value to the CPACR
        "STR     R1, [R0]\n"
        // Wait for store to complete
        "DSB\n"
        // reset pipeline now the FPU is enabled
        "ISB\n");
    3108:	f8df 001c 	ldr.w	r0, [pc, #28]	; 3128 <sjsu::cortex::InitializeFloatingPointUnit()+0x24>
    310c:	6801      	ldr	r1, [r0, #0]
    310e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    3112:	6001      	str	r1, [r0, #0]
    3114:	f3bf 8f4f 	dsb	sy
    3118:	f3bf 8f6f 	isb	sy
  }
}
    311c:	bf00      	nop
    311e:	46bd      	mov	sp, r7
    3120:	f85d 7b04 	ldr.w	r7, [sp], #4
    3124:	4770      	bx	lr
    3126:	0000      	.short	0x0000
    3128:	e000ed88 	.word	0xe000ed88

0000312c <units::literals::operator"" _Hz(unsigned long long)>:
	 *				`frequency_unit`.
	 * @anchor		frequencyContainers
	 * @sa			See unit_t for more information on unit type containers.
	 */
#if !defined(DISABLE_PREDEFINED_UNITS) || defined(ENABLE_PREDEFINED_FREQUENCY_UNITS)
	UNIT_ADD_WITH_METRIC_PREFIXES(frequency, hertz, hertz, Hz, unit<std::ratio<1>, units::category::frequency_unit>)
    312c:	b580      	push	{r7, lr}
    312e:	b084      	sub	sp, #16
    3130:	af00      	add	r7, sp, #0
    3132:	e9c7 0100 	strd	r0, r1, [r7]

/// Used to set the FreeRTOS tick frequency defined in Hz
#if !defined(SJ2_RTOS_FREQUENCY)
#define SJ2_RTOS_FREQUENCY 1'000_Hz
#endif  // !defined(SJ2_RTOS_FREQUENCY)
SJ2_DECLARE_CONSTANT(RTOS_FREQUENCY, units::frequency::hertz_t, kRtosFrequency);
    3136:	e9d7 0100 	ldrd	r0, r1, [r7]
    313a:	f001 fe25 	bl	4d88 <__aeabi_ul2f>
    313e:	4602      	mov	r2, r0
    3140:	f107 030c 	add.w	r3, r7, #12
    3144:	ee00 2a10 	vmov	s0, r2
    3148:	4618      	mov	r0, r3
    314a:	f000 f85c 	bl	3206 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    314e:	68fb      	ldr	r3, [r7, #12]
    3150:	4618      	mov	r0, r3
    3152:	3710      	adds	r7, #16
    3154:	46bd      	mov	sp, r7
    3156:	bd80      	pop	{r7, pc}

00003158 <units::literals::operator"" _MHz(unsigned long long)>:
    3158:	b580      	push	{r7, lr}
    315a:	b084      	sub	sp, #16
    315c:	af00      	add	r7, sp, #0
    315e:	e9c7 0100 	strd	r0, r1, [r7]
SJ2_DECLARE_CONSTANT(SYSTEM_CLOCK_RATE_MHZ,
    3162:	e9d7 0100 	ldrd	r0, r1, [r7]
    3166:	f001 fe0f 	bl	4d88 <__aeabi_ul2f>
    316a:	4602      	mov	r2, r0
    316c:	f107 030c 	add.w	r3, r7, #12
    3170:	ee00 2a10 	vmov	s0, r2
    3174:	4618      	mov	r0, r3
    3176:	f000 f805 	bl	3184 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    317a:	68fb      	ldr	r3, [r7, #12]
    317c:	4618      	mov	r0, r3
    317e:	3710      	adds	r7, #16
    3180:	46bd      	mov	sp, r7
    3182:	bd80      	pop	{r7, pc}

00003184 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
    3184:	b580      	push	{r7, lr}
    3186:	b082      	sub	sp, #8
    3188:	af00      	add	r7, sp, #0
    318a:	6078      	str	r0, [r7, #4]
    318c:	ed87 0a00 	vstr	s0, [r7]
    3190:	687b      	ldr	r3, [r7, #4]
    3192:	463a      	mov	r2, r7
    3194:	4611      	mov	r1, r2
    3196:	4618      	mov	r0, r3
    3198:	f000 f805 	bl	31a6 <units::linear_scale<float>::linear_scale<>(float const&)>
		}
    319c:	687b      	ldr	r3, [r7, #4]
    319e:	4618      	mov	r0, r3
    31a0:	3708      	adds	r7, #8
    31a2:	46bd      	mov	sp, r7
    31a4:	bd80      	pop	{r7, pc}

000031a6 <units::linear_scale<float>::linear_scale<>(float const&)>:
		inline constexpr linear_scale(const T& value, Args&&...) noexcept : m_value(value) {}	///< constructor.
    31a6:	b480      	push	{r7}
    31a8:	b083      	sub	sp, #12
    31aa:	af00      	add	r7, sp, #0
    31ac:	6078      	str	r0, [r7, #4]
    31ae:	6039      	str	r1, [r7, #0]
    31b0:	683b      	ldr	r3, [r7, #0]
    31b2:	681a      	ldr	r2, [r3, #0]
    31b4:	687b      	ldr	r3, [r7, #4]
    31b6:	601a      	str	r2, [r3, #0]
    31b8:	687b      	ldr	r3, [r7, #4]
    31ba:	4618      	mov	r0, r3
    31bc:	370c      	adds	r7, #12
    31be:	46bd      	mov	sp, r7
    31c0:	f85d 7b04 	ldr.w	r7, [sp], #4
    31c4:	4770      	bx	lr

000031c6 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    31c6:	b580      	push	{r7, lr}
    31c8:	b086      	sub	sp, #24
    31ca:	af00      	add	r7, sp, #0
    31cc:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    31ce:	6878      	ldr	r0, [r7, #4]
    31d0:	f000 f807 	bl	31e2 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    31d4:	eef0 7a40 	vmov.f32	s15, s0
	}
    31d8:	eeb0 0a67 	vmov.f32	s0, s15
    31dc:	3718      	adds	r7, #24
    31de:	46bd      	mov	sp, r7
    31e0:	bd80      	pop	{r7, pc}

000031e2 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
    31e2:	b480      	push	{r7}
    31e4:	b085      	sub	sp, #20
    31e6:	af00      	add	r7, sp, #0
    31e8:	60f8      	str	r0, [r7, #12]
    31ea:	7239      	strb	r1, [r7, #8]
    31ec:	713a      	strb	r2, [r7, #4]
    31ee:	703b      	strb	r3, [r7, #0]
			return value;
    31f0:	68fb      	ldr	r3, [r7, #12]
    31f2:	681b      	ldr	r3, [r3, #0]
    31f4:	ee07 3a90 	vmov	s15, r3
		}
    31f8:	eeb0 0a67 	vmov.f32	s0, s15
    31fc:	3714      	adds	r7, #20
    31fe:	46bd      	mov	sp, r7
    3200:	f85d 7b04 	ldr.w	r7, [sp], #4
    3204:	4770      	bx	lr

00003206 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
    3206:	b580      	push	{r7, lr}
    3208:	b082      	sub	sp, #8
    320a:	af00      	add	r7, sp, #0
    320c:	6078      	str	r0, [r7, #4]
    320e:	ed87 0a00 	vstr	s0, [r7]
    3212:	687b      	ldr	r3, [r7, #4]
    3214:	463a      	mov	r2, r7
    3216:	4611      	mov	r1, r2
    3218:	4618      	mov	r0, r3
    321a:	f7ff ffc4 	bl	31a6 <units::linear_scale<float>::linear_scale<>(float const&)>
		}
    321e:	687b      	ldr	r3, [r7, #4]
    3220:	4618      	mov	r0, r3
    3222:	3708      	adds	r7, #8
    3224:	46bd      	mov	sp, r7
    3226:	bd80      	pop	{r7, pc}

00003228 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    3228:	b580      	push	{r7, lr}
    322a:	b086      	sub	sp, #24
    322c:	af00      	add	r7, sp, #0
    322e:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    3230:	6878      	ldr	r0, [r7, #4]
    3232:	f000 f807 	bl	3244 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    3236:	eef0 7a40 	vmov.f32	s15, s0
	}
    323a:	eeb0 0a67 	vmov.f32	s0, s15
    323e:	3718      	adds	r7, #24
    3240:	46bd      	mov	sp, r7
    3242:	bd80      	pop	{r7, pc}

00003244 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
    3244:	b480      	push	{r7}
    3246:	b085      	sub	sp, #20
    3248:	af00      	add	r7, sp, #0
    324a:	60f8      	str	r0, [r7, #12]
    324c:	7239      	strb	r1, [r7, #8]
    324e:	713a      	strb	r2, [r7, #4]
    3250:	703b      	strb	r3, [r7, #0]
			return value;
    3252:	68fb      	ldr	r3, [r7, #12]
    3254:	681b      	ldr	r3, [r3, #0]
    3256:	ee07 3a90 	vmov	s15, r3
		}
    325a:	eeb0 0a67 	vmov.f32	s0, s15
    325e:	3714      	adds	r7, #20
    3260:	46bd      	mov	sp, r7
    3262:	f85d 7b04 	ldr.w	r7, [sp], #4
    3266:	4770      	bx	lr

00003268 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator<=(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    3268:	b580      	push	{r7, lr}
    326a:	ed2d 8b02 	vpush	{d8}
    326e:	b082      	sub	sp, #8
    3270:	af00      	add	r7, sp, #0
    3272:	6078      	str	r0, [r7, #4]
    3274:	6039      	str	r1, [r7, #0]
			return (nls::m_value <= units::convert<UnitsRhs, Units>(rhs.m_value));
    3276:	687b      	ldr	r3, [r7, #4]
    3278:	ed93 8a00 	vldr	s16, [r3]
    327c:	683b      	ldr	r3, [r7, #0]
    327e:	4618      	mov	r0, r3
    3280:	f7ff ffd2 	bl	3228 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    3284:	eef0 7a40 	vmov.f32	s15, s0
    3288:	eeb4 8ae7 	vcmpe.f32	s16, s15
    328c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3290:	bf94      	ite	ls
    3292:	2301      	movls	r3, #1
    3294:	2300      	movhi	r3, #0
    3296:	b2db      	uxtb	r3, r3
		}
    3298:	4618      	mov	r0, r3
    329a:	3708      	adds	r7, #8
    329c:	46bd      	mov	sp, r7
    329e:	ecbd 8b02 	vpop	{d8}
    32a2:	bd80      	pop	{r7, pc}

000032a4 <sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())>:
{
    32a4:	b480      	push	{r7}
    32a6:	b083      	sub	sp, #12
    32a8:	af00      	add	r7, sp, #0
    32aa:	6078      	str	r0, [r7, #4]
  Uptime = uptime_function;
    32ac:	4a04      	ldr	r2, [pc, #16]	; (32c0 <sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())+0x1c>)
    32ae:	687b      	ldr	r3, [r7, #4]
    32b0:	6013      	str	r3, [r2, #0]
}
    32b2:	bf00      	nop
    32b4:	370c      	adds	r7, #12
    32b6:	46bd      	mov	sp, r7
    32b8:	f85d 7b04 	ldr.w	r7, [sp], #4
    32bc:	4770      	bx	lr
    32be:	bf00      	nop
    32c0:	10000000 	.word	0x10000000

000032c4 <sjsu::cortex::InterruptController::LookupHandler()>:
  static void LookupHandler()
    32c4:	b580      	push	{r7, lr}
    32c6:	b082      	sub	sp, #8
    32c8:	af00      	add	r7, sp, #0
    int active_isr = (scb->ICSR & 0xFF);
    32ca:	4b09      	ldr	r3, [pc, #36]	; (32f0 <sjsu::cortex::InterruptController::LookupHandler()+0x2c>)
    32cc:	681b      	ldr	r3, [r3, #0]
    32ce:	685b      	ldr	r3, [r3, #4]
    32d0:	b2db      	uxtb	r3, r3
    32d2:	607b      	str	r3, [r7, #4]
    current_vector = active_isr;
    32d4:	4a07      	ldr	r2, [pc, #28]	; (32f4 <sjsu::cortex::InterruptController::LookupHandler()+0x30>)
    32d6:	687b      	ldr	r3, [r7, #4]
    32d8:	6013      	str	r3, [r2, #0]
    IsrPointer isr = table.vector[active_isr];
    32da:	4a07      	ldr	r2, [pc, #28]	; (32f8 <sjsu::cortex::InterruptController::LookupHandler()+0x34>)
    32dc:	687b      	ldr	r3, [r7, #4]
    32de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    32e2:	603b      	str	r3, [r7, #0]
    isr();
    32e4:	683b      	ldr	r3, [r7, #0]
    32e6:	4798      	blx	r3
  }
    32e8:	bf00      	nop
    32ea:	3708      	adds	r7, #8
    32ec:	46bd      	mov	sp, r7
    32ee:	bd80      	pop	{r7, pc}
    32f0:	10000018 	.word	0x10000018
    32f4:	10000004 	.word	0x10000004
    32f8:	100000f8 	.word	0x100000f8

000032fc <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>:
  // ==============================
  // Utility Methods
  // ==============================

  /// @returns current bus/peripheral operating frequency
  units::frequency::hertz_t GetPeripheralFrequency(
    32fc:	b580      	push	{r7, lr}
    32fe:	b086      	sub	sp, #24
    3300:	af00      	add	r7, sp, #0
    3302:	6078      	str	r0, [r7, #4]
    3304:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const
  {
    uint32_t peripheral_clock_divider =
        GetPeripheralClockDivider(peripheral_select);
    3306:	687b      	ldr	r3, [r7, #4]
    3308:	681b      	ldr	r3, [r3, #0]
    330a:	3308      	adds	r3, #8
    330c:	681b      	ldr	r3, [r3, #0]
    330e:	6839      	ldr	r1, [r7, #0]
    3310:	6878      	ldr	r0, [r7, #4]
    3312:	4798      	blx	r3
    3314:	6178      	str	r0, [r7, #20]
    // return 0 if peripheral_clock_divider == 0
    units::frequency::hertz_t result = 0_Hz;
    3316:	f04f 0300 	mov.w	r3, #0
    331a:	60fb      	str	r3, [r7, #12]
    if (peripheral_clock_divider != 0)
    331c:	697b      	ldr	r3, [r7, #20]
    331e:	2b00      	cmp	r3, #0
    3320:	d00f      	beq.n	3342 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const+0x46>
    {
      result = GetSystemFrequency() / peripheral_clock_divider;
    3322:	687b      	ldr	r3, [r7, #4]
    3324:	681b      	ldr	r3, [r3, #0]
    3326:	330c      	adds	r3, #12
    3328:	681b      	ldr	r3, [r3, #0]
    332a:	6878      	ldr	r0, [r7, #4]
    332c:	4798      	blx	r3
    332e:	4603      	mov	r3, r0
    3330:	613b      	str	r3, [r7, #16]
    3332:	f107 0310 	add.w	r3, r7, #16
    3336:	6979      	ldr	r1, [r7, #20]
    3338:	4618      	mov	r0, r3
    333a:	f001 f9c7 	bl	46cc <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)>
    333e:	4603      	mov	r3, r0
    3340:	60fb      	str	r3, [r7, #12]
    }
    return result;
    3342:	68fb      	ldr	r3, [r7, #12]
  }
    3344:	4618      	mov	r0, r3
    3346:	3718      	adds	r7, #24
    3348:	46bd      	mov	sp, r7
    334a:	bd80      	pop	{r7, pc}

0000334c <sjsu::SystemTimer::SystemTimer()>:
#include "utility/status.hpp"
#include "utility/units.hpp"

namespace sjsu
{
class SystemTimer
    334c:	b480      	push	{r7}
    334e:	b083      	sub	sp, #12
    3350:	af00      	add	r7, sp, #0
    3352:	6078      	str	r0, [r7, #4]
    3354:	4a04      	ldr	r2, [pc, #16]	; (3368 <sjsu::SystemTimer::SystemTimer()+0x1c>)
    3356:	687b      	ldr	r3, [r7, #4]
    3358:	601a      	str	r2, [r3, #0]
    335a:	687b      	ldr	r3, [r7, #4]
    335c:	4618      	mov	r0, r3
    335e:	370c      	adds	r7, #12
    3360:	46bd      	mov	sp, r7
    3362:	f85d 7b04 	ldr.w	r7, [sp], #4
    3366:	4770      	bx	lr
    3368:	000075e8 	.word	0x000075e8

0000336c <sjsu::cortex::SystemTimer::SystemTimer(sjsu::SystemController const&, sjsu::InterruptController const&)>:
  /// milliseconds counter.
  inline static std::chrono::microseconds counter = 0us;
  inline static const sjsu::cortex::InterruptController
      kCortexInterruptController = sjsu::cortex::InterruptController();

  explicit SystemTimer(const sjsu::SystemController & system_controller,
    336c:	b580      	push	{r7, lr}
    336e:	b084      	sub	sp, #16
    3370:	af00      	add	r7, sp, #0
    3372:	60f8      	str	r0, [r7, #12]
    3374:	60b9      	str	r1, [r7, #8]
    3376:	607a      	str	r2, [r7, #4]
                       const sjsu::InterruptController & interrupt_controller =
                           kCortexInterruptController)
      : system_controller_(system_controller),
        interrupt_controller_(interrupt_controller)
    3378:	68fb      	ldr	r3, [r7, #12]
    337a:	4618      	mov	r0, r3
    337c:	f7ff ffe6 	bl	334c <sjsu::SystemTimer::SystemTimer()>
    3380:	4a06      	ldr	r2, [pc, #24]	; (339c <sjsu::cortex::SystemTimer::SystemTimer(sjsu::SystemController const&, sjsu::InterruptController const&)+0x30>)
    3382:	68fb      	ldr	r3, [r7, #12]
    3384:	601a      	str	r2, [r3, #0]
    3386:	68fb      	ldr	r3, [r7, #12]
    3388:	68ba      	ldr	r2, [r7, #8]
    338a:	605a      	str	r2, [r3, #4]
    338c:	68fb      	ldr	r3, [r7, #12]
    338e:	687a      	ldr	r2, [r7, #4]
    3390:	609a      	str	r2, [r3, #8]
  {
  }
    3392:	68fb      	ldr	r3, [r7, #12]
    3394:	4618      	mov	r0, r3
    3396:	3710      	adds	r7, #16
    3398:	46bd      	mov	sp, r7
    339a:	bd80      	pop	{r7, pc}
    339c:	000075d4 	.word	0x000075d4

000033a0 <sjsu::cortex::SystemTimer::SystemTimerHandler()>:
  {
    sys_tick->LOAD = 0;
    sys_tick->VAL  = 0;
    sys_tick->CTRL = 0;
  }
  static void SystemTimerHandler()
    33a0:	b580      	push	{r7, lr}
    33a2:	b084      	sub	sp, #16
    33a4:	af00      	add	r7, sp, #0
  {
    counter += 1ms;
    33a6:	f107 0308 	add.w	r3, r7, #8
    33aa:	4618      	mov	r0, r3
    33ac:	f7fd fef6 	bl	119c <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()>
    33b0:	f107 0208 	add.w	r2, r7, #8
    33b4:	463b      	mov	r3, r7
    33b6:	4611      	mov	r1, r2
    33b8:	4618      	mov	r0, r3
    33ba:	f7fd ff71 	bl	12a0 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
    33be:	463b      	mov	r3, r7
    33c0:	4619      	mov	r1, r3
    33c2:	4807      	ldr	r0, [pc, #28]	; (33e0 <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x40>)
    33c4:	f001 f9a0 	bl	4708 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    // This assumes that SysTickHandler is called every millisecond.
    // Changing that frequency will distort the milliseconds time.
    if (system_timer_isr != nullptr)
    33c8:	4b06      	ldr	r3, [pc, #24]	; (33e4 <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x44>)
    33ca:	681b      	ldr	r3, [r3, #0]
    33cc:	2b00      	cmp	r3, #0
    33ce:	d002      	beq.n	33d6 <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x36>
    {
      system_timer_isr();
    33d0:	4b04      	ldr	r3, [pc, #16]	; (33e4 <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x44>)
    33d2:	681b      	ldr	r3, [r3, #0]
    33d4:	4798      	blx	r3
    }
  }
    33d6:	bf00      	nop
    33d8:	3710      	adds	r7, #16
    33da:	46bd      	mov	sp, r7
    33dc:	bd80      	pop	{r7, pc}
    33de:	bf00      	nop
    33e0:	100003d0 	.word	0x100003d0
    33e4:	100003cc 	.word	0x100003cc

000033e8 <sjsu::cortex::SystemTimer::GetCount()>:
  static std::chrono::microseconds GetCount()
    33e8:	b490      	push	{r4, r7}
    33ea:	b082      	sub	sp, #8
    33ec:	af00      	add	r7, sp, #0
    33ee:	6078      	str	r0, [r7, #4]
  {
    return counter;
    33f0:	687a      	ldr	r2, [r7, #4]
    33f2:	4b05      	ldr	r3, [pc, #20]	; (3408 <sjsu::cortex::SystemTimer::GetCount()+0x20>)
    33f4:	e9d3 3400 	ldrd	r3, r4, [r3]
    33f8:	e9c2 3400 	strd	r3, r4, [r2]
  }
    33fc:	6878      	ldr	r0, [r7, #4]
    33fe:	3708      	adds	r7, #8
    3400:	46bd      	mov	sp, r7
    3402:	bc90      	pop	{r4, r7}
    3404:	4770      	bx	lr
    3406:	bf00      	nop
    3408:	100003d0 	.word	0x100003d0

0000340c <sjsu::cortex::SystemTimer::SetInterrupt(void (*)()) const>:

  void SetInterrupt(IsrPointer isr) const override
    340c:	b480      	push	{r7}
    340e:	b083      	sub	sp, #12
    3410:	af00      	add	r7, sp, #0
    3412:	6078      	str	r0, [r7, #4]
    3414:	6039      	str	r1, [r7, #0]
  {
    system_timer_isr = isr;
    3416:	4a04      	ldr	r2, [pc, #16]	; (3428 <sjsu::cortex::SystemTimer::SetInterrupt(void (*)()) const+0x1c>)
    3418:	683b      	ldr	r3, [r7, #0]
    341a:	6013      	str	r3, [r2, #0]
  }
    341c:	bf00      	nop
    341e:	370c      	adds	r7, #12
    3420:	46bd      	mov	sp, r7
    3422:	f85d 7b04 	ldr.w	r7, [sp], #4
    3426:	4770      	bx	lr
    3428:	100003cc 	.word	0x100003cc

0000342c <sjsu::cortex::SystemTimer::StartTimer() const>:

  Status StartTimer() const override
    342c:	b5f0      	push	{r4, r5, r6, r7, lr}
    342e:	b08b      	sub	sp, #44	; 0x2c
    3430:	af02      	add	r7, sp, #8
    3432:	6078      	str	r0, [r7, #4]
  {
    Status status = Status::kInvalidSettings;
    3434:	2304      	movs	r3, #4
    3436:	61fb      	str	r3, [r7, #28]

    if (sys_tick->LOAD != 0)
    3438:	4b1f      	ldr	r3, [pc, #124]	; (34b8 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    343a:	681b      	ldr	r3, [r3, #0]
    343c:	685b      	ldr	r3, [r3, #4]
    343e:	2b00      	cmp	r3, #0
    3440:	bf14      	ite	ne
    3442:	2301      	movne	r3, #1
    3444:	2300      	moveq	r3, #0
    3446:	b2db      	uxtb	r3, r3
    3448:	2b00      	cmp	r3, #0
    344a:	d030      	beq.n	34ae <sjsu::cortex::SystemTimer::StartTimer() const+0x82>
    {
      sys_tick->VAL = 0;
    344c:	4b1a      	ldr	r3, [pc, #104]	; (34b8 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    344e:	681b      	ldr	r3, [r3, #0]
    3450:	2200      	movs	r2, #0
    3452:	609a      	str	r2, [r3, #8]
      sys_tick->CTRL |= (1 << ControlBitMap::kTickInterupt);
    3454:	4b18      	ldr	r3, [pc, #96]	; (34b8 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    3456:	681b      	ldr	r3, [r3, #0]
    3458:	681a      	ldr	r2, [r3, #0]
    345a:	4b17      	ldr	r3, [pc, #92]	; (34b8 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    345c:	681b      	ldr	r3, [r3, #0]
    345e:	f042 0202 	orr.w	r2, r2, #2
    3462:	601a      	str	r2, [r3, #0]
      sys_tick->CTRL |= (1 << ControlBitMap::kEnableCounter);
    3464:	4b14      	ldr	r3, [pc, #80]	; (34b8 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    3466:	681b      	ldr	r3, [r3, #0]
    3468:	681a      	ldr	r2, [r3, #0]
    346a:	4b13      	ldr	r3, [pc, #76]	; (34b8 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    346c:	681b      	ldr	r3, [r3, #0]
    346e:	f042 0201 	orr.w	r2, r2, #1
    3472:	601a      	str	r2, [r3, #0]
      sys_tick->CTRL |= (1 << ControlBitMap::kClkSource);
    3474:	4b10      	ldr	r3, [pc, #64]	; (34b8 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    3476:	681b      	ldr	r3, [r3, #0]
    3478:	681a      	ldr	r2, [r3, #0]
    347a:	4b0f      	ldr	r3, [pc, #60]	; (34b8 <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    347c:	681b      	ldr	r3, [r3, #0]
    347e:	f042 0204 	orr.w	r2, r2, #4
    3482:	601a      	str	r2, [r3, #0]

      interrupt_controller_.Register({
    3484:	687b      	ldr	r3, [r7, #4]
    3486:	689e      	ldr	r6, [r3, #8]
    3488:	687b      	ldr	r3, [r7, #4]
    348a:	689b      	ldr	r3, [r3, #8]
          .interrupt_request_number  = cortex::SysTick_IRQn,
          .interrupt_service_routine = SystemTimerHandler,
      });
    348c:	681b      	ldr	r3, [r3, #0]
    348e:	681d      	ldr	r5, [r3, #0]
      interrupt_controller_.Register({
    3490:	4b0a      	ldr	r3, [pc, #40]	; (34bc <sjsu::cortex::SystemTimer::StartTimer() const+0x90>)
    3492:	f107 040c 	add.w	r4, r7, #12
    3496:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    3498:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    349c:	69bb      	ldr	r3, [r7, #24]
    349e:	9300      	str	r3, [sp, #0]
    34a0:	f107 030c 	add.w	r3, r7, #12
    34a4:	cb0e      	ldmia	r3, {r1, r2, r3}
    34a6:	4630      	mov	r0, r6
    34a8:	47a8      	blx	r5
      status = Status::kSuccess;
    34aa:	2300      	movs	r3, #0
    34ac:	61fb      	str	r3, [r7, #28]
    }

    return status;
    34ae:	69fb      	ldr	r3, [r7, #28]
  }
    34b0:	4618      	mov	r0, r3
    34b2:	3724      	adds	r7, #36	; 0x24
    34b4:	46bd      	mov	sp, r7
    34b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    34b8:	1000001c 	.word	0x1000001c
    34bc:	00007098 	.word	0x00007098

000034c0 <units::linear_scale<float>::operator()() const>:
		inline constexpr T operator()() const noexcept { return m_value; }							///< returns value.
    34c0:	b480      	push	{r7}
    34c2:	b083      	sub	sp, #12
    34c4:	af00      	add	r7, sp, #0
    34c6:	6078      	str	r0, [r7, #4]
    34c8:	687b      	ldr	r3, [r7, #4]
    34ca:	681b      	ldr	r3, [r3, #0]
    34cc:	ee07 3a90 	vmov	s15, r3
    34d0:	eeb0 0a67 	vmov.f32	s0, s15
    34d4:	370c      	adds	r7, #12
    34d6:	46bd      	mov	sp, r7
    34d8:	f85d 7b04 	ldr.w	r7, [sp], #4
    34dc:	4770      	bx	lr

000034de <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline constexpr dimensionless::scalar_t operator/(const UnitTypeLhs& lhs, const UnitTypeRhs& rhs) noexcept
    34de:	b580      	push	{r7, lr}
    34e0:	ed2d 8b02 	vpush	{d8}
    34e4:	b084      	sub	sp, #16
    34e6:	af00      	add	r7, sp, #0
    34e8:	6078      	str	r0, [r7, #4]
    34ea:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() / convert<UnitsRhs, UnitsLhs>(rhs()));
    34ec:	687b      	ldr	r3, [r7, #4]
    34ee:	4618      	mov	r0, r3
    34f0:	f7ff ffe6 	bl	34c0 <units::linear_scale<float>::operator()() const>
    34f4:	eeb0 8a40 	vmov.f32	s16, s0
    34f8:	683b      	ldr	r3, [r7, #0]
    34fa:	4618      	mov	r0, r3
    34fc:	f7ff ffe0 	bl	34c0 <units::linear_scale<float>::operator()() const>
    3500:	eef0 7a40 	vmov.f32	s15, s0
    3504:	edc7 7a03 	vstr	s15, [r7, #12]
    3508:	f107 030c 	add.w	r3, r7, #12
    350c:	4618      	mov	r0, r3
    350e:	f7ff fe8b 	bl	3228 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    3512:	eeb0 7a40 	vmov.f32	s14, s0
    3516:	eec8 7a07 	vdiv.f32	s15, s16, s14
    351a:	f107 0308 	add.w	r3, r7, #8
    351e:	eeb0 0a67 	vmov.f32	s0, s15
    3522:	4618      	mov	r0, r3
    3524:	f000 f807 	bl	3536 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    3528:	68bb      	ldr	r3, [r7, #8]
	}
    352a:	4618      	mov	r0, r3
    352c:	3710      	adds	r7, #16
    352e:	46bd      	mov	sp, r7
    3530:	ecbd 8b02 	vpop	{d8}
    3534:	bd80      	pop	{r7, pc}

00003536 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
    3536:	b580      	push	{r7, lr}
    3538:	b082      	sub	sp, #8
    353a:	af00      	add	r7, sp, #0
    353c:	6078      	str	r0, [r7, #4]
    353e:	ed87 0a00 	vstr	s0, [r7]
    3542:	687b      	ldr	r3, [r7, #4]
    3544:	463a      	mov	r2, r7
    3546:	4611      	mov	r1, r2
    3548:	4618      	mov	r0, r3
    354a:	f7ff fe2c 	bl	31a6 <units::linear_scale<float>::linear_scale<>(float const&)>
		}
    354e:	687b      	ldr	r3, [r7, #4]
    3550:	4618      	mov	r0, r3
    3552:	3708      	adds	r7, #8
    3554:	46bd      	mov	sp, r7
    3556:	bd80      	pop	{r7, pc}

00003558 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>:
	inline constexpr dimensionless::scalar_t operator-(const dimensionless::scalar_t& lhs, T rhs) noexcept
    3558:	b580      	push	{r7, lr}
    355a:	b084      	sub	sp, #16
    355c:	af00      	add	r7, sp, #0
    355e:	6078      	str	r0, [r7, #4]
    3560:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() - rhs);
    3562:	687b      	ldr	r3, [r7, #4]
    3564:	4618      	mov	r0, r3
    3566:	f7ff ffab 	bl	34c0 <units::linear_scale<float>::operator()() const>
    356a:	eeb0 7a40 	vmov.f32	s14, s0
    356e:	683b      	ldr	r3, [r7, #0]
    3570:	ee07 3a90 	vmov	s15, r3
    3574:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3578:	ee77 7a67 	vsub.f32	s15, s14, s15
    357c:	f107 030c 	add.w	r3, r7, #12
    3580:	eeb0 0a67 	vmov.f32	s0, s15
    3584:	4618      	mov	r0, r3
    3586:	f7ff ffd6 	bl	3536 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    358a:	68fb      	ldr	r3, [r7, #12]
	}
    358c:	4618      	mov	r0, r3
    358e:	3710      	adds	r7, #16
    3590:	46bd      	mov	sp, r7
    3592:	bd80      	pop	{r7, pc}

00003594 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
	inline constexpr T unit_cast(const Units& value) noexcept
    3594:	b580      	push	{r7, lr}
    3596:	b082      	sub	sp, #8
    3598:	af00      	add	r7, sp, #0
    359a:	6078      	str	r0, [r7, #4]
		return static_cast<T>(value);
    359c:	6878      	ldr	r0, [r7, #4]
    359e:	f001 f8cb 	bl	4738 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    35a2:	4603      	mov	r3, r0
	}
    35a4:	4618      	mov	r0, r3
    35a6:	3708      	adds	r7, #8
    35a8:	46bd      	mov	sp, r7
    35aa:	bd80      	pop	{r7, pc}

000035ac <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
	inline constexpr T unit_cast(const Units& value) noexcept
    35ac:	b580      	push	{r7, lr}
    35ae:	b082      	sub	sp, #8
    35b0:	af00      	add	r7, sp, #0
    35b2:	6078      	str	r0, [r7, #4]
		return static_cast<T>(value);
    35b4:	6878      	ldr	r0, [r7, #4]
    35b6:	f000 f805 	bl	35c4 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    35ba:	4603      	mov	r3, r0
	}
    35bc:	4618      	mov	r0, r3
    35be:	3708      	adds	r7, #8
    35c0:	46bd      	mov	sp, r7
    35c2:	bd80      	pop	{r7, pc}

000035c4 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
    35c4:	b580      	push	{r7, lr}
    35c6:	b082      	sub	sp, #8
    35c8:	af00      	add	r7, sp, #0
    35ca:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
    35cc:	687b      	ldr	r3, [r7, #4]
    35ce:	4618      	mov	r0, r3
    35d0:	f7ff ff76 	bl	34c0 <units::linear_scale<float>::operator()() const>
    35d4:	eef0 7a40 	vmov.f32	s15, s0
    35d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    35dc:	ee17 3a90 	vmov	r3, s15
		}
    35e0:	4618      	mov	r0, r3
    35e2:	3708      	adds	r7, #8
    35e4:	46bd      	mov	sp, r7
    35e6:	bd80      	pop	{r7, pc}

000035e8 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
  ///          remainder will be returned.
  ///          If the freqency supplied is less then 1Hz, the function will
  ///          return without changing any hardware and return -1.
  ///          If the reload value exceeds the SysTick_LOAD_RELOAD_Msk, the
  ///          returned value is the SysTick_LOAD_RELOAD_Msk.
  int32_t SetTickFrequency(units::frequency::hertz_t frequency) const override
    35e8:	b590      	push	{r4, r7, lr}
    35ea:	b089      	sub	sp, #36	; 0x24
    35ec:	af00      	add	r7, sp, #0
    35ee:	6078      	str	r0, [r7, #4]
    35f0:	6039      	str	r1, [r7, #0]
  {
    if (frequency <= 1_Hz)
    35f2:	f04f 0001 	mov.w	r0, #1
    35f6:	f04f 0100 	mov.w	r1, #0
    35fa:	f7ff fd97 	bl	312c <units::literals::operator"" _Hz(unsigned long long)>
    35fe:	4603      	mov	r3, r0
    3600:	60fb      	str	r3, [r7, #12]
    3602:	f107 020c 	add.w	r2, r7, #12
    3606:	463b      	mov	r3, r7
    3608:	4611      	mov	r1, r2
    360a:	4618      	mov	r0, r3
    360c:	f7ff fe2c 	bl	3268 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    3610:	4603      	mov	r3, r0
    3612:	2b00      	cmp	r3, #0
    3614:	d002      	beq.n	361c <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x34>
    {
      return -1;
    3616:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    361a:	e041      	b.n	36a0 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xb8>
    }

    units::frequency::hertz_t system_frequency =
        system_controller_.GetSystemFrequency();
    361c:	687b      	ldr	r3, [r7, #4]
    361e:	685a      	ldr	r2, [r3, #4]
    3620:	687b      	ldr	r3, [r7, #4]
    3622:	685b      	ldr	r3, [r3, #4]
    3624:	681b      	ldr	r3, [r3, #0]
    3626:	330c      	adds	r3, #12
    3628:	681b      	ldr	r3, [r3, #0]
    362a:	4610      	mov	r0, r2
    362c:	4798      	blx	r3
    362e:	4603      	mov	r3, r0
    3630:	60bb      	str	r3, [r7, #8]

    uint32_t reload_value =
        units::unit_cast<uint32_t>((system_frequency / frequency) - 1);
    3632:	463a      	mov	r2, r7
    3634:	f107 0308 	add.w	r3, r7, #8
    3638:	4611      	mov	r1, r2
    363a:	4618      	mov	r0, r3
    363c:	f7ff ff4f 	bl	34de <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    3640:	4603      	mov	r3, r0
    3642:	617b      	str	r3, [r7, #20]
    3644:	f107 0314 	add.w	r3, r7, #20
    3648:	2101      	movs	r1, #1
    364a:	4618      	mov	r0, r3
    364c:	f7ff ff84 	bl	3558 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>
    3650:	4603      	mov	r3, r0
    3652:	613b      	str	r3, [r7, #16]
    3654:	f107 0310 	add.w	r3, r7, #16
    3658:	4618      	mov	r0, r3
    365a:	f7ff ff9b 	bl	3594 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    365e:	61f8      	str	r0, [r7, #28]

    int remainder = (units::unit_cast<uint32_t>(system_frequency) %
    3660:	f107 0308 	add.w	r3, r7, #8
    3664:	4618      	mov	r0, r3
    3666:	f7ff ffa1 	bl	35ac <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    366a:	4604      	mov	r4, r0
                     units::unit_cast<uint32_t>(frequency));
    366c:	463b      	mov	r3, r7
    366e:	4618      	mov	r0, r3
    3670:	f7ff ff9c 	bl	35ac <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    3674:	4603      	mov	r3, r0
    int remainder = (units::unit_cast<uint32_t>(system_frequency) %
    3676:	fbb4 f2f3 	udiv	r2, r4, r3
    367a:	fb03 f302 	mul.w	r3, r3, r2
    367e:	1ae3      	subs	r3, r4, r3
                     units::unit_cast<uint32_t>(frequency));
    3680:	61bb      	str	r3, [r7, #24]

    if (reload_value > SysTick_LOAD_RELOAD_Msk)
    3682:	69fb      	ldr	r3, [r7, #28]
    3684:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    3688:	d305      	bcc.n	3696 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xae>
    {
      reload_value = SysTick_LOAD_RELOAD_Msk;
    368a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    368e:	61fb      	str	r3, [r7, #28]
      remainder    = SysTick_LOAD_RELOAD_Msk;
    3690:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    3694:	61bb      	str	r3, [r7, #24]
    }

    sys_tick->LOAD = reload_value;
    3696:	4b04      	ldr	r3, [pc, #16]	; (36a8 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc0>)
    3698:	681b      	ldr	r3, [r3, #0]
    369a:	69fa      	ldr	r2, [r7, #28]
    369c:	605a      	str	r2, [r3, #4]
    return remainder;
    369e:	69bb      	ldr	r3, [r7, #24]
  }
    36a0:	4618      	mov	r0, r3
    36a2:	3724      	adds	r7, #36	; 0x24
    36a4:	46bd      	mov	sp, r7
    36a6:	bd90      	pop	{r4, r7, pc}
    36a8:	1000001c 	.word	0x1000001c

000036ac <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    36ac:	b580      	push	{r7, lr}
    36ae:	b086      	sub	sp, #24
    36b0:	af00      	add	r7, sp, #0
    36b2:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    36b4:	6878      	ldr	r0, [r7, #4]
    36b6:	f000 f807 	bl	36c8 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    36ba:	eef0 7a40 	vmov.f32	s15, s0
	}
    36be:	eeb0 0a67 	vmov.f32	s0, s15
    36c2:	3718      	adds	r7, #24
    36c4:	46bd      	mov	sp, r7
    36c6:	bd80      	pop	{r7, pc}

000036c8 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::false_type, std::false_type, std::false_type) noexcept
    36c8:	b480      	push	{r7}
    36ca:	b085      	sub	sp, #20
    36cc:	af00      	add	r7, sp, #0
    36ce:	60f8      	str	r0, [r7, #12]
    36d0:	7239      	strb	r1, [r7, #8]
    36d2:	713a      	strb	r2, [r7, #4]
    36d4:	703b      	strb	r3, [r7, #0]
			return ((value * Ratio::num) / Ratio::den);
    36d6:	68fb      	ldr	r3, [r7, #12]
    36d8:	edd3 7a00 	vldr	s15, [r3]
    36dc:	ed9f 7a05 	vldr	s14, [pc, #20]	; 36f4 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)+0x2c>
    36e0:	ee67 7a87 	vmul.f32	s15, s15, s14
		}
    36e4:	eeb0 0a67 	vmov.f32	s0, s15
    36e8:	3714      	adds	r7, #20
    36ea:	46bd      	mov	sp, r7
    36ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    36f0:	4770      	bx	lr
    36f2:	bf00      	nop
    36f4:	49742400 	.word	0x49742400

000036f8 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
    static constexpr bit::Mask kSelect  = bit::CreateMaskFromRange(8, 9);
  };

  inline static LPC_SC_TypeDef * system_controller = LPC_SC;

  void SetSystemClockFrequency(
    36f8:	b580      	push	{r7, lr}
    36fa:	b084      	sub	sp, #16
    36fc:	af00      	add	r7, sp, #0
    36fe:	6078      	str	r0, [r7, #4]
    3700:	6039      	str	r1, [r7, #0]
      units::frequency::megahertz_t frequency) const override
  {
    SelectOscillatorSource(OscillatorSource::kIrc);
    3702:	2100      	movs	r1, #0
    3704:	6878      	ldr	r0, [r7, #4]
    3706:	f000 f8e3 	bl	38d0 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const>
    if (frequency > 12_MHz)
    370a:	f04f 000c 	mov.w	r0, #12
    370e:	f04f 0100 	mov.w	r1, #0
    3712:	f7ff fd21 	bl	3158 <units::literals::operator"" _MHz(unsigned long long)>
    3716:	4603      	mov	r3, r0
    3718:	60bb      	str	r3, [r7, #8]
    371a:	f107 0208 	add.w	r2, r7, #8
    371e:	463b      	mov	r3, r7
    3720:	4611      	mov	r1, r2
    3722:	4618      	mov	r0, r3
    3724:	f001 f823 	bl	476e <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    3728:	4603      	mov	r3, r0
    372a:	2b00      	cmp	r3, #0
    372c:	d00f      	beq.n	374e <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x56>
    {
      SetMainPll(PllInput::kIrc, frequency);
    372e:	4b16      	ldr	r3, [pc, #88]	; (3788 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x90>)
    3730:	683a      	ldr	r2, [r7, #0]
    3732:	6819      	ldr	r1, [r3, #0]
    3734:	6878      	ldr	r0, [r7, #4]
    3736:	f000 fabf 	bl	3cb8 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
      SelectMainClockSource(MainClockSource::kPllClock);
    373a:	2101      	movs	r1, #1
    373c:	6878      	ldr	r0, [r7, #4]
    373e:	f000 f8eb 	bl	3918 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>
      speed_in_hertz = frequency;
    3742:	463b      	mov	r3, r7
    3744:	4619      	mov	r1, r3
    3746:	4811      	ldr	r0, [pc, #68]	; (378c <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x94>)
    3748:	f001 f82f 	bl	47aa <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    374c:	e007      	b.n	375e <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x66>
    }
    else
    {
      SelectMainClockSource(MainClockSource::kBaseClock);
    374e:	2100      	movs	r1, #0
    3750:	6878      	ldr	r0, [r7, #4]
    3752:	f000 f8e1 	bl	3918 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>
      speed_in_hertz = kDefaultIRCFrequency;
    3756:	490e      	ldr	r1, [pc, #56]	; (3790 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x98>)
    3758:	480c      	ldr	r0, [pc, #48]	; (378c <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x94>)
    375a:	f001 f826 	bl	47aa <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    }
    SetCpuClockDivider(1);
    375e:	2101      	movs	r1, #1
    3760:	6878      	ldr	r0, [r7, #4]
    3762:	f000 fb0d 	bl	3d80 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const>
    SetPeripheralClockDivider({}, 1);
    3766:	23ff      	movs	r3, #255	; 0xff
    3768:	733b      	strb	r3, [r7, #12]
    376a:	f107 030c 	add.w	r3, r7, #12
    376e:	2201      	movs	r2, #1
    3770:	4619      	mov	r1, r3
    3772:	6878      	ldr	r0, [r7, #4]
    3774:	f000 f80e 	bl	3794 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>
    SetEmcClockDivider(EmcDivider::kSameSpeedAsCpu);
    3778:	2100      	movs	r1, #0
    377a:	6878      	ldr	r0, [r7, #4]
    377c:	f000 fb3e 	bl	3dfc <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const>
  }
    3780:	bf00      	nop
    3782:	3710      	adds	r7, #16
    3784:	46bd      	mov	sp, r7
    3786:	bd80      	pop	{r7, pc}
    3788:	00007490 	.word	0x00007490
    378c:	10000020 	.word	0x10000020
    3790:	00007494 	.word	0x00007494

00003794 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>:

  void SetPeripheralClockDivider(const PeripheralID &,
    3794:	b580      	push	{r7, lr}
    3796:	b084      	sub	sp, #16
    3798:	af00      	add	r7, sp, #0
    379a:	60f8      	str	r0, [r7, #12]
    379c:	60b9      	str	r1, [r7, #8]
    379e:	4613      	mov	r3, r2
    37a0:	71fb      	strb	r3, [r7, #7]
                                 uint8_t peripheral_divider) const override
  {
    SJ2_ASSERT_FATAL(peripheral_divider <= 4, "Divider mustn't exceed 32");
    37a2:	79fb      	ldrb	r3, [r7, #7]
    37a4:	2b04      	cmp	r3, #4
    37a6:	d90d      	bls.n	37c4 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x30>
    37a8:	23b2      	movs	r3, #178	; 0xb2
    37aa:	4a0b      	ldr	r2, [pc, #44]	; (37d8 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x44>)
    37ac:	490b      	ldr	r1, [pc, #44]	; (37dc <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x48>)
    37ae:	480c      	ldr	r0, [pc, #48]	; (37e0 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x4c>)
    37b0:	f7ff fc5a 	bl	3068 <printf>
    37b4:	480b      	ldr	r0, [pc, #44]	; (37e4 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x50>)
    37b6:	f7fe fb3b 	bl	1e30 <puts>
    37ba:	2100      	movs	r1, #0
    37bc:	2001      	movs	r0, #1
    37be:	f7fe f933 	bl	1a28 <sjsu::debug::PrintBacktrace(bool, void*)>
    37c2:	e7fe      	b.n	37c2 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x2e>
    system_controller->PCLKSEL = peripheral_divider;
    37c4:	4b08      	ldr	r3, [pc, #32]	; (37e8 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x54>)
    37c6:	681b      	ldr	r3, [r3, #0]
    37c8:	79fa      	ldrb	r2, [r7, #7]
    37ca:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
  }
    37ce:	bf00      	nop
    37d0:	3710      	adds	r7, #16
    37d2:	46bd      	mov	sp, r7
    37d4:	bd80      	pop	{r7, pc}
    37d6:	bf00      	nop
    37d8:	000075f4 	.word	0x000075f4
    37dc:	000074b0 	.word	0x000074b0
    37e0:	000070a8 	.word	0x000070a8
    37e4:	00007148 	.word	0x00007148
    37e8:	100003d8 	.word	0x100003d8

000037ec <sjsu::lpc40xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const>:

  uint32_t GetPeripheralClockDivider(const PeripheralID &) const override
    37ec:	b480      	push	{r7}
    37ee:	b083      	sub	sp, #12
    37f0:	af00      	add	r7, sp, #0
    37f2:	6078      	str	r0, [r7, #4]
    37f4:	6039      	str	r1, [r7, #0]
  {
    return system_controller->PCLKSEL;
    37f6:	4b05      	ldr	r3, [pc, #20]	; (380c <sjsu::lpc40xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const+0x20>)
    37f8:	681b      	ldr	r3, [r3, #0]
    37fa:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
  }
    37fe:	4618      	mov	r0, r3
    3800:	370c      	adds	r7, #12
    3802:	46bd      	mov	sp, r7
    3804:	f85d 7b04 	ldr.w	r7, [sp], #4
    3808:	4770      	bx	lr
    380a:	bf00      	nop
    380c:	100003d8 	.word	0x100003d8

00003810 <sjsu::lpc40xx::SystemController::GetSystemFrequency() const>:

  units::frequency::hertz_t GetSystemFrequency() const override
    3810:	b480      	push	{r7}
    3812:	b083      	sub	sp, #12
    3814:	af00      	add	r7, sp, #0
    3816:	6078      	str	r0, [r7, #4]
  {
    return speed_in_hertz;
    3818:	4b03      	ldr	r3, [pc, #12]	; (3828 <sjsu::lpc40xx::SystemController::GetSystemFrequency() const+0x18>)
    381a:	681b      	ldr	r3, [r3, #0]
  }
    381c:	4618      	mov	r0, r3
    381e:	370c      	adds	r7, #12
    3820:	46bd      	mov	sp, r7
    3822:	f85d 7b04 	ldr.w	r7, [sp], #4
    3826:	4770      	bx	lr
    3828:	10000020 	.word	0x10000020

0000382c <sjsu::lpc40xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const>:

  /// Check if a peripheral is powered up by checking the power connection
  /// register. Should typically only be used for unit testing code and
  /// debugging.
  bool IsPeripheralPoweredUp(
    382c:	b480      	push	{r7}
    382e:	b085      	sub	sp, #20
    3830:	af00      	add	r7, sp, #0
    3832:	6078      	str	r0, [r7, #4]
    3834:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const override
  {
    bool peripheral_is_powered_on =
        system_controller->PCONP & (1 << peripheral_select.device_id);
    3836:	4b0b      	ldr	r3, [pc, #44]	; (3864 <sjsu::lpc40xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const+0x38>)
    3838:	681b      	ldr	r3, [r3, #0]
    383a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    383e:	683a      	ldr	r2, [r7, #0]
    3840:	7812      	ldrb	r2, [r2, #0]
    3842:	4611      	mov	r1, r2
    3844:	2201      	movs	r2, #1
    3846:	408a      	lsls	r2, r1
    3848:	4013      	ands	r3, r2
    384a:	2b00      	cmp	r3, #0
    384c:	bf14      	ite	ne
    384e:	2301      	movne	r3, #1
    3850:	2300      	moveq	r3, #0
    3852:	73fb      	strb	r3, [r7, #15]

    return peripheral_is_powered_on;
    3854:	7bfb      	ldrb	r3, [r7, #15]
  }
    3856:	4618      	mov	r0, r3
    3858:	3714      	adds	r7, #20
    385a:	46bd      	mov	sp, r7
    385c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3860:	4770      	bx	lr
    3862:	bf00      	nop
    3864:	100003d8 	.word	0x100003d8

00003868 <sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const>:
  void PowerUpPeripheral(const PeripheralID & peripheral_select) const override
    3868:	b590      	push	{r4, r7, lr}
    386a:	b083      	sub	sp, #12
    386c:	af00      	add	r7, sp, #0
    386e:	6078      	str	r0, [r7, #4]
    3870:	6039      	str	r1, [r7, #0]
  {
    system_controller->PCONP =
        bit::Set(system_controller->PCONP, peripheral_select.device_id);
    3872:	4b09      	ldr	r3, [pc, #36]	; (3898 <sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
    3874:	681b      	ldr	r3, [r3, #0]
    3876:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
    387a:	683b      	ldr	r3, [r7, #0]
    387c:	781b      	ldrb	r3, [r3, #0]
    387e:	4619      	mov	r1, r3
    system_controller->PCONP =
    3880:	4b05      	ldr	r3, [pc, #20]	; (3898 <sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
    3882:	681c      	ldr	r4, [r3, #0]
        bit::Set(system_controller->PCONP, peripheral_select.device_id);
    3884:	4610      	mov	r0, r2
    3886:	f7fd ff02 	bl	168e <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
    388a:	4603      	mov	r3, r0
    system_controller->PCONP =
    388c:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  }
    3890:	bf00      	nop
    3892:	370c      	adds	r7, #12
    3894:	46bd      	mov	sp, r7
    3896:	bd90      	pop	{r4, r7, pc}
    3898:	100003d8 	.word	0x100003d8

0000389c <sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const>:
  void PowerDownPeripheral(
    389c:	b590      	push	{r4, r7, lr}
    389e:	b083      	sub	sp, #12
    38a0:	af00      	add	r7, sp, #0
    38a2:	6078      	str	r0, [r7, #4]
    38a4:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const override
  {
    system_controller->PCONP =
        bit::Clear(system_controller->PCONP, peripheral_select.device_id);
    38a6:	4b09      	ldr	r3, [pc, #36]	; (38cc <sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
    38a8:	681b      	ldr	r3, [r3, #0]
    38aa:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
    38ae:	683b      	ldr	r3, [r7, #0]
    38b0:	781b      	ldrb	r3, [r3, #0]
    38b2:	4619      	mov	r1, r3
    system_controller->PCONP =
    38b4:	4b05      	ldr	r3, [pc, #20]	; (38cc <sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
    38b6:	681c      	ldr	r4, [r3, #0]
        bit::Clear(system_controller->PCONP, peripheral_select.device_id);
    38b8:	4610      	mov	r0, r2
    38ba:	f7fd fed5 	bl	1668 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>
    38be:	4603      	mov	r3, r0
    system_controller->PCONP =
    38c0:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  }
    38c4:	bf00      	nop
    38c6:	370c      	adds	r7, #12
    38c8:	46bd      	mov	sp, r7
    38ca:	bd90      	pop	{r4, r7, pc}
    38cc:	100003d8 	.word	0x100003d8

000038d0 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const>:

 private:
  void SelectOscillatorSource(OscillatorSource source) const
    38d0:	b590      	push	{r4, r7, lr}
    38d2:	b083      	sub	sp, #12
    38d4:	af00      	add	r7, sp, #0
    38d6:	6078      	str	r0, [r7, #4]
    38d8:	460b      	mov	r3, r1
    38da:	807b      	strh	r3, [r7, #2]
  {
    system_controller->CLKSRCSEL = bit::Insert(system_controller->CLKSRCSEL,
    38dc:	4b0c      	ldr	r3, [pc, #48]	; (3910 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const+0x40>)
    38de:	681b      	ldr	r3, [r3, #0]
    38e0:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
    38e4:	8879      	ldrh	r1, [r7, #2]
    38e6:	4b0a      	ldr	r3, [pc, #40]	; (3910 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const+0x40>)
    38e8:	681c      	ldr	r4, [r3, #0]
    38ea:	4b0a      	ldr	r3, [pc, #40]	; (3914 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const+0x44>)
    38ec:	781a      	ldrb	r2, [r3, #0]
    38ee:	785b      	ldrb	r3, [r3, #1]
    38f0:	021b      	lsls	r3, r3, #8
    38f2:	431a      	orrs	r2, r3
    38f4:	2300      	movs	r3, #0
    38f6:	f362 030f 	bfi	r3, r2, #0, #16
    38fa:	461a      	mov	r2, r3
    38fc:	f000 ff68 	bl	47d0 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    3900:	4603      	mov	r3, r0
    3902:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
                                               static_cast<uint32_t>(source),
                                               Oscillator::kSelect);
  }
    3906:	bf00      	nop
    3908:	370c      	adds	r7, #12
    390a:	46bd      	mov	sp, r7
    390c:	bd90      	pop	{r4, r7, pc}
    390e:	bf00      	nop
    3910:	100003d8 	.word	0x100003d8
    3914:	00007498 	.word	0x00007498

00003918 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>:
  void SelectMainClockSource(MainClockSource source) const
    3918:	b590      	push	{r4, r7, lr}
    391a:	b083      	sub	sp, #12
    391c:	af00      	add	r7, sp, #0
    391e:	6078      	str	r0, [r7, #4]
    3920:	460b      	mov	r3, r1
    3922:	807b      	strh	r3, [r7, #2]
  {
    system_controller->CCLKSEL = bit::Insert(system_controller->CCLKSEL,
    3924:	4b0c      	ldr	r3, [pc, #48]	; (3958 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const+0x40>)
    3926:	681b      	ldr	r3, [r3, #0]
    3928:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
    392c:	8879      	ldrh	r1, [r7, #2]
    392e:	4b0a      	ldr	r3, [pc, #40]	; (3958 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const+0x40>)
    3930:	681c      	ldr	r4, [r3, #0]
    3932:	4b0a      	ldr	r3, [pc, #40]	; (395c <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const+0x44>)
    3934:	781a      	ldrb	r2, [r3, #0]
    3936:	785b      	ldrb	r3, [r3, #1]
    3938:	021b      	lsls	r3, r3, #8
    393a:	431a      	orrs	r2, r3
    393c:	2300      	movs	r3, #0
    393e:	f362 030f 	bfi	r3, r2, #0, #16
    3942:	461a      	mov	r2, r3
    3944:	f000 ff44 	bl	47d0 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    3948:	4603      	mov	r3, r0
    394a:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
                                             static_cast<uint32_t>(source),
                                             CpuClock::kSelect);
  }
    394e:	bf00      	nop
    3950:	370c      	adds	r7, #12
    3952:	46bd      	mov	sp, r7
    3954:	bd90      	pop	{r4, r7, pc}
    3956:	bf00      	nop
    3958:	100003d8 	.word	0x100003d8
    395c:	000074a4 	.word	0x000074a4

00003960 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const>:
  void SelectUsbClockSource(UsbSource usb_clock) const
    3960:	b590      	push	{r4, r7, lr}
    3962:	b083      	sub	sp, #12
    3964:	af00      	add	r7, sp, #0
    3966:	6078      	str	r0, [r7, #4]
    3968:	460b      	mov	r3, r1
    396a:	807b      	strh	r3, [r7, #2]
  {
    system_controller->USBCLKSEL = bit::Insert(system_controller->USBCLKSEL,
    396c:	4b0c      	ldr	r3, [pc, #48]	; (39a0 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const+0x40>)
    396e:	681b      	ldr	r3, [r3, #0]
    3970:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    3974:	8879      	ldrh	r1, [r7, #2]
    3976:	4b0a      	ldr	r3, [pc, #40]	; (39a0 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const+0x40>)
    3978:	681c      	ldr	r4, [r3, #0]
    397a:	4b0a      	ldr	r3, [pc, #40]	; (39a4 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const+0x44>)
    397c:	781a      	ldrb	r2, [r3, #0]
    397e:	785b      	ldrb	r3, [r3, #1]
    3980:	021b      	lsls	r3, r3, #8
    3982:	431a      	orrs	r2, r3
    3984:	2300      	movs	r3, #0
    3986:	f362 030f 	bfi	r3, r2, #0, #16
    398a:	461a      	mov	r2, r3
    398c:	f000 ff20 	bl	47d0 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    3990:	4603      	mov	r3, r0
    3992:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
                                               static_cast<uint32_t>(usb_clock),
                                               UsbClock::kSelect);
  }
    3996:	bf00      	nop
    3998:	370c      	adds	r7, #12
    399a:	46bd      	mov	sp, r7
    399c:	bd90      	pop	{r4, r7, pc}
    399e:	bf00      	nop
    39a0:	100003d8 	.word	0x100003d8
    39a4:	000074a8 	.word	0x000074a8

000039a8 <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const>:
  void SelectSpifiClockSource(SpifiSource spifi_clock) const
    39a8:	b590      	push	{r4, r7, lr}
    39aa:	b083      	sub	sp, #12
    39ac:	af00      	add	r7, sp, #0
    39ae:	6078      	str	r0, [r7, #4]
    39b0:	460b      	mov	r3, r1
    39b2:	807b      	strh	r3, [r7, #2]
  {
    system_controller->SPIFISEL =
        bit::Insert(system_controller->SPIFISEL,
    39b4:	4b0c      	ldr	r3, [pc, #48]	; (39e8 <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const+0x40>)
    39b6:	681b      	ldr	r3, [r3, #0]
    39b8:	f8d3 01b4 	ldr.w	r0, [r3, #436]	; 0x1b4
    39bc:	8879      	ldrh	r1, [r7, #2]
    system_controller->SPIFISEL =
    39be:	4b0a      	ldr	r3, [pc, #40]	; (39e8 <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const+0x40>)
    39c0:	681c      	ldr	r4, [r3, #0]
        bit::Insert(system_controller->SPIFISEL,
    39c2:	4b0a      	ldr	r3, [pc, #40]	; (39ec <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const+0x44>)
    39c4:	781a      	ldrb	r2, [r3, #0]
    39c6:	785b      	ldrb	r3, [r3, #1]
    39c8:	021b      	lsls	r3, r3, #8
    39ca:	431a      	orrs	r2, r3
    39cc:	2300      	movs	r3, #0
    39ce:	f362 030f 	bfi	r3, r2, #0, #16
    39d2:	461a      	mov	r2, r3
    39d4:	f000 fefc 	bl	47d0 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    39d8:	4603      	mov	r3, r0
    system_controller->SPIFISEL =
    39da:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
                    static_cast<uint32_t>(spifi_clock),
                    SpiFiClock::kSelect);
  }
    39de:	bf00      	nop
    39e0:	370c      	adds	r7, #12
    39e2:	46bd      	mov	sp, r7
    39e4:	bd90      	pop	{r4, r7, pc}
    39e6:	bf00      	nop
    39e8:	100003d8 	.word	0x100003d8
    39ec:	000074ac 	.word	0x000074ac

000039f0 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator<(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    39f0:	b580      	push	{r7, lr}
    39f2:	ed2d 8b02 	vpush	{d8}
    39f6:	b082      	sub	sp, #8
    39f8:	af00      	add	r7, sp, #0
    39fa:	6078      	str	r0, [r7, #4]
    39fc:	6039      	str	r1, [r7, #0]
			return (nls::m_value < units::convert<UnitsRhs, Units>(rhs.m_value));
    39fe:	687b      	ldr	r3, [r7, #4]
    3a00:	ed93 8a00 	vldr	s16, [r3]
    3a04:	683b      	ldr	r3, [r7, #0]
    3a06:	4618      	mov	r0, r3
    3a08:	f7ff fbdd 	bl	31c6 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    3a0c:	eef0 7a40 	vmov.f32	s15, s0
    3a10:	eeb4 8ae7 	vcmpe.f32	s16, s15
    3a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3a18:	bf4c      	ite	mi
    3a1a:	2301      	movmi	r3, #1
    3a1c:	2300      	movpl	r3, #0
    3a1e:	b2db      	uxtb	r3, r3
		}
    3a20:	4618      	mov	r0, r3
    3a22:	3708      	adds	r7, #8
    3a24:	46bd      	mov	sp, r7
    3a26:	ecbd 8b02 	vpop	{d8}
    3a2a:	bd80      	pop	{r7, pc}

00003a2c <unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>:
		inline constexpr Ty to() const noexcept
    3a2c:	b580      	push	{r7, lr}
    3a2e:	b082      	sub	sp, #8
    3a30:	af00      	add	r7, sp, #0
    3a32:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(*this);
    3a34:	6878      	ldr	r0, [r7, #4]
    3a36:	f000 f805 	bl	3a44 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    3a3a:	4603      	mov	r3, r0
		}
    3a3c:	4618      	mov	r0, r3
    3a3e:	3708      	adds	r7, #8
    3a40:	46bd      	mov	sp, r7
    3a42:	bd80      	pop	{r7, pc}

00003a44 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
    3a44:	b580      	push	{r7, lr}
    3a46:	b082      	sub	sp, #8
    3a48:	af00      	add	r7, sp, #0
    3a4a:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
    3a4c:	687b      	ldr	r3, [r7, #4]
    3a4e:	4618      	mov	r0, r3
    3a50:	f7ff fd36 	bl	34c0 <units::linear_scale<float>::operator()() const>
    3a54:	eef0 7a40 	vmov.f32	s15, s0
    3a58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    3a5c:	ee17 3a90 	vmov	r3, s15
		}
    3a60:	4618      	mov	r0, r3
    3a62:	3708      	adds	r7, #8
    3a64:	46bd      	mov	sp, r7
    3a66:	bd80      	pop	{r7, pc}

00003a68 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline constexpr dimensionless::scalar_t operator/(const UnitTypeLhs& lhs, const UnitTypeRhs& rhs) noexcept
    3a68:	b580      	push	{r7, lr}
    3a6a:	ed2d 8b02 	vpush	{d8}
    3a6e:	b084      	sub	sp, #16
    3a70:	af00      	add	r7, sp, #0
    3a72:	6078      	str	r0, [r7, #4]
    3a74:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() / convert<UnitsRhs, UnitsLhs>(rhs()));
    3a76:	687b      	ldr	r3, [r7, #4]
    3a78:	4618      	mov	r0, r3
    3a7a:	f7ff fd21 	bl	34c0 <units::linear_scale<float>::operator()() const>
    3a7e:	eeb0 8a40 	vmov.f32	s16, s0
    3a82:	683b      	ldr	r3, [r7, #0]
    3a84:	4618      	mov	r0, r3
    3a86:	f7ff fd1b 	bl	34c0 <units::linear_scale<float>::operator()() const>
    3a8a:	eef0 7a40 	vmov.f32	s15, s0
    3a8e:	edc7 7a03 	vstr	s15, [r7, #12]
    3a92:	f107 030c 	add.w	r3, r7, #12
    3a96:	4618      	mov	r0, r3
    3a98:	f7ff fb95 	bl	31c6 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    3a9c:	eeb0 7a40 	vmov.f32	s14, s0
    3aa0:	eec8 7a07 	vdiv.f32	s15, s16, s14
    3aa4:	f107 0308 	add.w	r3, r7, #8
    3aa8:	eeb0 0a67 	vmov.f32	s0, s15
    3aac:	4618      	mov	r0, r3
    3aae:	f7ff fd42 	bl	3536 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    3ab2:	68bb      	ldr	r3, [r7, #8]
	}
    3ab4:	4618      	mov	r0, r3
    3ab6:	3710      	adds	r7, #16
    3ab8:	46bd      	mov	sp, r7
    3aba:	ecbd 8b02 	vpop	{d8}
    3abe:	bd80      	pop	{r7, pc}

00003ac0 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator+<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>:
	inline constexpr dimensionless::scalar_t operator+(const dimensionless::scalar_t& lhs, T rhs) noexcept
    3ac0:	b580      	push	{r7, lr}
    3ac2:	b084      	sub	sp, #16
    3ac4:	af00      	add	r7, sp, #0
    3ac6:	6078      	str	r0, [r7, #4]
    3ac8:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() + rhs);
    3aca:	687b      	ldr	r3, [r7, #4]
    3acc:	4618      	mov	r0, r3
    3ace:	f7ff fcf7 	bl	34c0 <units::linear_scale<float>::operator()() const>
    3ad2:	eeb0 7a40 	vmov.f32	s14, s0
    3ad6:	683b      	ldr	r3, [r7, #0]
    3ad8:	ee07 3a90 	vmov	s15, r3
    3adc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3ae0:	ee77 7a27 	vadd.f32	s15, s14, s15
    3ae4:	f107 030c 	add.w	r3, r7, #12
    3ae8:	eeb0 0a67 	vmov.f32	s0, s15
    3aec:	4618      	mov	r0, r3
    3aee:	f7ff fd22 	bl	3536 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    3af2:	68fb      	ldr	r3, [r7, #12]
	}
    3af4:	4618      	mov	r0, r3
    3af6:	3710      	adds	r7, #16
    3af8:	46bd      	mov	sp, r7
    3afa:	bd80      	pop	{r7, pc}

00003afc <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
    3afc:	b580      	push	{r7, lr}
    3afe:	b082      	sub	sp, #8
    3b00:	af00      	add	r7, sp, #0
    3b02:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
    3b04:	687b      	ldr	r3, [r7, #4]
    3b06:	4618      	mov	r0, r3
    3b08:	f7ff fcda 	bl	34c0 <units::linear_scale<float>::operator()() const>
    3b0c:	eef0 7a40 	vmov.f32	s15, s0
    3b10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    3b14:	ee17 3a90 	vmov	r3, s15
    3b18:	b29b      	uxth	r3, r3
		}
    3b1a:	4618      	mov	r0, r3
    3b1c:	3708      	adds	r7, #8
    3b1e:	46bd      	mov	sp, r7
    3b20:	bd80      	pop	{r7, pc}
    3b22:	Address 0x0000000000003b22 is out of bounds.


00003b24 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
  uint32_t CalculatePll(units::frequency::megahertz_t input_frequency,
    3b24:	b590      	push	{r4, r7, lr}
    3b26:	b08d      	sub	sp, #52	; 0x34
    3b28:	af00      	add	r7, sp, #0
    3b2a:	60f8      	str	r0, [r7, #12]
    3b2c:	60b9      	str	r1, [r7, #8]
    3b2e:	607a      	str	r2, [r7, #4]
                        units::frequency::megahertz_t desired_frequency) const
  {
    SJ2_ASSERT_FATAL(desired_frequency < 384_MHz && desired_frequency > 12_MHz,
    3b30:	f44f 70c0 	mov.w	r0, #384	; 0x180
    3b34:	f04f 0100 	mov.w	r1, #0
    3b38:	f7ff fb0e 	bl	3158 <units::literals::operator"" _MHz(unsigned long long)>
    3b3c:	4603      	mov	r3, r0
    3b3e:	613b      	str	r3, [r7, #16]
    3b40:	f107 0210 	add.w	r2, r7, #16
    3b44:	1d3b      	adds	r3, r7, #4
    3b46:	4611      	mov	r1, r2
    3b48:	4618      	mov	r0, r3
    3b4a:	f7ff ff51 	bl	39f0 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    3b4e:	4603      	mov	r3, r0
    3b50:	f083 0301 	eor.w	r3, r3, #1
    3b54:	b2db      	uxtb	r3, r3
    3b56:	2b00      	cmp	r3, #0
    3b58:	d114      	bne.n	3b84 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x60>
    3b5a:	f04f 000c 	mov.w	r0, #12
    3b5e:	f04f 0100 	mov.w	r1, #0
    3b62:	f7ff faf9 	bl	3158 <units::literals::operator"" _MHz(unsigned long long)>
    3b66:	4603      	mov	r3, r0
    3b68:	617b      	str	r3, [r7, #20]
    3b6a:	f107 0214 	add.w	r2, r7, #20
    3b6e:	1d3b      	adds	r3, r7, #4
    3b70:	4611      	mov	r1, r2
    3b72:	4618      	mov	r0, r3
    3b74:	f000 fdfb 	bl	476e <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    3b78:	4603      	mov	r3, r0
    3b7a:	f083 0301 	eor.w	r3, r3, #1
    3b7e:	b2db      	uxtb	r3, r3
    3b80:	2b00      	cmp	r3, #0
    3b82:	d001      	beq.n	3b88 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x64>
    3b84:	2301      	movs	r3, #1
    3b86:	e000      	b.n	3b8a <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x66>
    3b88:	2300      	movs	r3, #0
    3b8a:	2b00      	cmp	r3, #0
    3b8c:	d00d      	beq.n	3baa <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x86>
    3b8e:	23f6      	movs	r3, #246	; 0xf6
    3b90:	4a43      	ldr	r2, [pc, #268]	; (3ca0 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x17c>)
    3b92:	4944      	ldr	r1, [pc, #272]	; (3ca4 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x180>)
    3b94:	4844      	ldr	r0, [pc, #272]	; (3ca8 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x184>)
    3b96:	f7ff fa67 	bl	3068 <printf>
    3b9a:	4844      	ldr	r0, [pc, #272]	; (3cac <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x188>)
    3b9c:	f7fe f948 	bl	1e30 <puts>
    3ba0:	2100      	movs	r1, #0
    3ba2:	2001      	movs	r0, #1
    3ba4:	f7fd ff40 	bl	1a28 <sjsu::debug::PrintBacktrace(bool, void*)>
    3ba8:	e7fe      	b.n	3ba8 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x84>
                     "Frequency must be lower than 384 MHz"
                     "and greater than or equal to 12 MHz");
    bool calculating = true;
    3baa:	2301      	movs	r3, #1
    3bac:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint32_t multiplier_value;
    if ((desired_frequency.to<uint32_t>() % input_frequency.to<uint32_t>()) > 0)
    3bb0:	1d3b      	adds	r3, r7, #4
    3bb2:	4618      	mov	r0, r3
    3bb4:	f7ff ff3a 	bl	3a2c <unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
    3bb8:	4604      	mov	r4, r0
    3bba:	f107 0308 	add.w	r3, r7, #8
    3bbe:	4618      	mov	r0, r3
    3bc0:	f7ff ff34 	bl	3a2c <unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
    3bc4:	4603      	mov	r3, r0
    3bc6:	fbb4 f2f3 	udiv	r2, r4, r3
    3bca:	fb03 f302 	mul.w	r3, r3, r2
    3bce:	1ae3      	subs	r3, r4, r3
    3bd0:	2b00      	cmp	r3, #0
    3bd2:	bf14      	ite	ne
    3bd4:	2301      	movne	r3, #1
    3bd6:	2300      	moveq	r3, #0
    3bd8:	b2db      	uxtb	r3, r3
    3bda:	2b00      	cmp	r3, #0
    3bdc:	d017      	beq.n	3c0e <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xea>
    {
      multiplier_value =
          static_cast<uint32_t>((desired_frequency / input_frequency) + 1);
    3bde:	f107 0208 	add.w	r2, r7, #8
    3be2:	1d3b      	adds	r3, r7, #4
    3be4:	4611      	mov	r1, r2
    3be6:	4618      	mov	r0, r3
    3be8:	f7ff ff3e 	bl	3a68 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    3bec:	4603      	mov	r3, r0
    3bee:	61fb      	str	r3, [r7, #28]
    3bf0:	f107 031c 	add.w	r3, r7, #28
    3bf4:	2101      	movs	r1, #1
    3bf6:	4618      	mov	r0, r3
    3bf8:	f7ff ff62 	bl	3ac0 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator+<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>
    3bfc:	4603      	mov	r3, r0
    3bfe:	61bb      	str	r3, [r7, #24]
      multiplier_value =
    3c00:	f107 0318 	add.w	r3, r7, #24
    3c04:	4618      	mov	r0, r3
    3c06:	f000 fd97 	bl	4738 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    3c0a:	62b8      	str	r0, [r7, #40]	; 0x28
    3c0c:	e00e      	b.n	3c2c <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x108>
    }
    else
    {
      multiplier_value =
          static_cast<uint32_t>(desired_frequency / input_frequency);
    3c0e:	f107 0208 	add.w	r2, r7, #8
    3c12:	1d3b      	adds	r3, r7, #4
    3c14:	4611      	mov	r1, r2
    3c16:	4618      	mov	r0, r3
    3c18:	f7ff ff26 	bl	3a68 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    3c1c:	4603      	mov	r3, r0
    3c1e:	623b      	str	r3, [r7, #32]
      multiplier_value =
    3c20:	f107 0320 	add.w	r3, r7, #32
    3c24:	4618      	mov	r0, r3
    3c26:	f000 fd87 	bl	4738 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    3c2a:	62b8      	str	r0, [r7, #40]	; 0x28
    }
    uint16_t divider_value = 1;
    3c2c:	2301      	movs	r3, #1
    3c2e:	84fb      	strh	r3, [r7, #38]	; 0x26
    while (calculating)
    3c30:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    3c34:	2b00      	cmp	r3, #0
    3c36:	d02d      	beq.n	3c94 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x170>
    {
      uint16_t current_controlled_oscillator_frequency;
      current_controlled_oscillator_frequency = static_cast<uint16_t>(
          (static_cast<uint16_t>(input_frequency) * multiplier_value * 2) *
    3c38:	f107 0308 	add.w	r3, r7, #8
    3c3c:	4618      	mov	r0, r3
    3c3e:	f7ff ff5d 	bl	3afc <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const>
    3c42:	4603      	mov	r3, r0
    3c44:	461a      	mov	r2, r3
      current_controlled_oscillator_frequency = static_cast<uint16_t>(
    3c46:	6abb      	ldr	r3, [r7, #40]	; 0x28
    3c48:	b29b      	uxth	r3, r3
    3c4a:	fb12 f303 	smulbb	r3, r2, r3
    3c4e:	b29b      	uxth	r3, r3
    3c50:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    3c52:	fb12 f303 	smulbb	r3, r2, r3
    3c56:	b29b      	uxth	r3, r3
    3c58:	005b      	lsls	r3, r3, #1
    3c5a:	84bb      	strh	r3, [r7, #36]	; 0x24
          divider_value);
      if (current_controlled_oscillator_frequency >= 156)
    3c5c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    3c5e:	2b9b      	cmp	r3, #155	; 0x9b
    3c60:	d903      	bls.n	3c6a <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x146>
      {
        calculating = false;
    3c62:	2300      	movs	r3, #0
    3c64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    3c68:	e7e2      	b.n	3c30 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x10c>
      }
      else
      {
        divider_value = static_cast<uint16_t>(divider_value * 2);
    3c6a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    3c6c:	005b      	lsls	r3, r3, #1
    3c6e:	84fb      	strh	r3, [r7, #38]	; 0x26
        SJ2_ASSERT_FATAL(divider_value < 8,
    3c70:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    3c72:	2b07      	cmp	r3, #7
    3c74:	d9dc      	bls.n	3c30 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x10c>
    3c76:	f44f 7389 	mov.w	r3, #274	; 0x112
    3c7a:	4a09      	ldr	r2, [pc, #36]	; (3ca0 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x17c>)
    3c7c:	490c      	ldr	r1, [pc, #48]	; (3cb0 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x18c>)
    3c7e:	480d      	ldr	r0, [pc, #52]	; (3cb4 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x190>)
    3c80:	f7ff f9f2 	bl	3068 <printf>
    3c84:	4809      	ldr	r0, [pc, #36]	; (3cac <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x188>)
    3c86:	f7fe f8d3 	bl	1e30 <puts>
    3c8a:	2100      	movs	r1, #0
    3c8c:	2001      	movs	r0, #1
    3c8e:	f7fd fecb 	bl	1a28 <sjsu::debug::PrintBacktrace(bool, void*)>
    3c92:	e7fe      	b.n	3c92 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x16e>
                         "PLL divider value went out of bounds");
      }
    }

    return multiplier_value;
    3c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
  }
    3c96:	4618      	mov	r0, r3
    3c98:	3734      	adds	r7, #52	; 0x34
    3c9a:	46bd      	mov	sp, r7
    3c9c:	bd90      	pop	{r4, r7, pc}
    3c9e:	bf00      	nop
    3ca0:	00007678 	.word	0x00007678
    3ca4:	000074c8 	.word	0x000074c8
    3ca8:	00007160 	.word	0x00007160
    3cac:	00007148 	.word	0x00007148
    3cb0:	000074e0 	.word	0x000074e0
    3cb4:	00007250 	.word	0x00007250

00003cb8 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:

  void SetMainPll(units::frequency::megahertz_t input_frequency,
    3cb8:	b580      	push	{r7, lr}
    3cba:	b086      	sub	sp, #24
    3cbc:	af00      	add	r7, sp, #0
    3cbe:	60f8      	str	r0, [r7, #12]
    3cc0:	60b9      	str	r1, [r7, #8]
    3cc2:	607a      	str	r2, [r7, #4]
                  units::frequency::megahertz_t desired_frequency) const
  {
    uint16_t divider_value = 1;
    3cc4:	2301      	movs	r3, #1
    3cc6:	82fb      	strh	r3, [r7, #22]
    uint32_t multiplier_value =
        CalculatePll(input_frequency, desired_frequency);
    3cc8:	687a      	ldr	r2, [r7, #4]
    3cca:	68b9      	ldr	r1, [r7, #8]
    3ccc:	68f8      	ldr	r0, [r7, #12]
    3cce:	f7ff ff29 	bl	3b24 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
    3cd2:	6138      	str	r0, [r7, #16]
    // units::frequency::megahertz_t actual_speed =
    //     input_frequency * multiplier_value;
    // TO DO: use registers to retreive values
    SelectOscillatorSource(OscillatorSource::kIrc);
    3cd4:	2100      	movs	r1, #0
    3cd6:	68f8      	ldr	r0, [r7, #12]
    3cd8:	f7ff fdfa 	bl	38d0 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const>
    SelectMainClockSource(MainClockSource::kBaseClock);
    3cdc:	2100      	movs	r1, #0
    3cde:	68f8      	ldr	r0, [r7, #12]
    3ce0:	f7ff fe1a 	bl	3918 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>
    SelectUsbClockSource(UsbSource::kBaseClock);
    3ce4:	2100      	movs	r1, #0
    3ce6:	68f8      	ldr	r0, [r7, #12]
    3ce8:	f7ff fe3a 	bl	3960 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const>
    SelectSpifiClockSource(SpifiSource::kBaseClock);
    3cec:	2100      	movs	r1, #0
    3cee:	68f8      	ldr	r0, [r7, #12]
    3cf0:	f7ff fe5a 	bl	39a8 <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const>
    // must subtract 1 from multiplier value as specified in datasheet
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
    3cf4:	4b21      	ldr	r3, [pc, #132]	; (3d7c <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    3cf6:	681b      	ldr	r3, [r3, #0]
    3cf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    3cfc:	f023 011f 	bic.w	r1, r3, #31
        (multiplier_value - 1);
    3d00:	693b      	ldr	r3, [r7, #16]
    3d02:	1e5a      	subs	r2, r3, #1
    system_controller->PLL0CFG =
    3d04:	4b1d      	ldr	r3, [pc, #116]	; (3d7c <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    3d06:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
    3d08:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
    3d0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
    3d0e:	4b1b      	ldr	r3, [pc, #108]	; (3d7c <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    3d10:	681b      	ldr	r3, [r3, #0]
    3d12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    3d16:	f023 0260 	bic.w	r2, r3, #96	; 0x60
    3d1a:	8afb      	ldrh	r3, [r7, #22]
    3d1c:	015b      	lsls	r3, r3, #5
    3d1e:	4619      	mov	r1, r3
    system_controller->PLL0CFG =
    3d20:	4b16      	ldr	r3, [pc, #88]	; (3d7c <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    3d22:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
    3d24:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
    3d26:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CON |= kEnablePll;
    3d2a:	4b14      	ldr	r3, [pc, #80]	; (3d7c <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    3d2c:	681b      	ldr	r3, [r3, #0]
    3d2e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    3d32:	4b12      	ldr	r3, [pc, #72]	; (3d7c <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    3d34:	681b      	ldr	r3, [r3, #0]
    3d36:	f042 0201 	orr.w	r2, r2, #1
    3d3a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    // Necessary feed sequence to ensure the changes are intentional
    system_controller->PLL0FEED = 0xAA;
    3d3e:	4b0f      	ldr	r3, [pc, #60]	; (3d7c <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    3d40:	681b      	ldr	r3, [r3, #0]
    3d42:	22aa      	movs	r2, #170	; 0xaa
    3d44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    system_controller->PLL0FEED = 0x55;
    3d48:	4b0c      	ldr	r3, [pc, #48]	; (3d7c <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    3d4a:	681b      	ldr	r3, [r3, #0]
    3d4c:	2255      	movs	r2, #85	; 0x55
    3d4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    while (!bit::Read(system_controller->PLL0STAT, kPlock))
    3d52:	4b0a      	ldr	r3, [pc, #40]	; (3d7c <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    3d54:	681b      	ldr	r3, [r3, #0]
    3d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    3d5a:	210a      	movs	r1, #10
    3d5c:	4618      	mov	r0, r3
    3d5e:	f7fd fca8 	bl	16b2 <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>
    3d62:	4603      	mov	r3, r0
    3d64:	f083 0301 	eor.w	r3, r3, #1
    3d68:	b2db      	uxtb	r3, r3
    3d6a:	2b00      	cmp	r3, #0
    3d6c:	d001      	beq.n	3d72 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xba>
    {
      continue;
    3d6e:	bf00      	nop
    while (!bit::Read(system_controller->PLL0STAT, kPlock))
    3d70:	e7ef      	b.n	3d52 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x9a>
    }
  }
    3d72:	bf00      	nop
    3d74:	3718      	adds	r7, #24
    3d76:	46bd      	mov	sp, r7
    3d78:	bd80      	pop	{r7, pc}
    3d7a:	bf00      	nop
    3d7c:	100003d8 	.word	0x100003d8

00003d80 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const>:
    {
      continue;
    }
  }

  void SetCpuClockDivider(uint8_t cpu_divider) const
    3d80:	b590      	push	{r4, r7, lr}
    3d82:	b083      	sub	sp, #12
    3d84:	af00      	add	r7, sp, #0
    3d86:	6078      	str	r0, [r7, #4]
    3d88:	460b      	mov	r3, r1
    3d8a:	70fb      	strb	r3, [r7, #3]
  {
    SJ2_ASSERT_FATAL(cpu_divider < 32, "Divider mustn't exceed 32");
    3d8c:	78fb      	ldrb	r3, [r7, #3]
    3d8e:	2b1f      	cmp	r3, #31
    3d90:	d90e      	bls.n	3db0 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x30>
    3d92:	f44f 73a9 	mov.w	r3, #338	; 0x152
    3d96:	4a13      	ldr	r2, [pc, #76]	; (3de4 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x64>)
    3d98:	4913      	ldr	r1, [pc, #76]	; (3de8 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x68>)
    3d9a:	4814      	ldr	r0, [pc, #80]	; (3dec <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x6c>)
    3d9c:	f7ff f964 	bl	3068 <printf>
    3da0:	4813      	ldr	r0, [pc, #76]	; (3df0 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x70>)
    3da2:	f7fe f845 	bl	1e30 <puts>
    3da6:	2100      	movs	r1, #0
    3da8:	2001      	movs	r0, #1
    3daa:	f7fd fe3d 	bl	1a28 <sjsu::debug::PrintBacktrace(bool, void*)>
    3dae:	e7fe      	b.n	3dae <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x2e>

    system_controller->CCLKSEL = bit::Insert(
    3db0:	4b10      	ldr	r3, [pc, #64]	; (3df4 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x74>)
    3db2:	681b      	ldr	r3, [r3, #0]
        system_controller->CCLKSEL, cpu_divider, CpuClock::kDivider);
    3db4:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
    system_controller->CCLKSEL = bit::Insert(
    3db8:	4b0e      	ldr	r3, [pc, #56]	; (3df4 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x74>)
    3dba:	681c      	ldr	r4, [r3, #0]
    3dbc:	4b0e      	ldr	r3, [pc, #56]	; (3df8 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x78>)
    3dbe:	78f9      	ldrb	r1, [r7, #3]
    3dc0:	781a      	ldrb	r2, [r3, #0]
    3dc2:	785b      	ldrb	r3, [r3, #1]
    3dc4:	021b      	lsls	r3, r3, #8
    3dc6:	431a      	orrs	r2, r3
    3dc8:	2300      	movs	r3, #0
    3dca:	f362 030f 	bfi	r3, r2, #0, #16
    3dce:	461a      	mov	r2, r3
    3dd0:	f7fd fbd8 	bl	1584 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
    3dd4:	4603      	mov	r3, r0
    3dd6:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
  }
    3dda:	bf00      	nop
    3ddc:	370c      	adds	r7, #12
    3dde:	46bd      	mov	sp, r7
    3de0:	bd90      	pop	{r4, r7, pc}
    3de2:	bf00      	nop
    3de4:	000076f4 	.word	0x000076f4
    3de8:	000074f8 	.word	0x000074f8
    3dec:	000072f8 	.word	0x000072f8
    3df0:	00007148 	.word	0x00007148
    3df4:	100003d8 	.word	0x100003d8
    3df8:	000074a0 	.word	0x000074a0

00003dfc <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const>:

  void SetEmcClockDivider(EmcDivider emc_divider) const
    3dfc:	b590      	push	{r4, r7, lr}
    3dfe:	b083      	sub	sp, #12
    3e00:	af00      	add	r7, sp, #0
    3e02:	6078      	str	r0, [r7, #4]
    3e04:	460b      	mov	r3, r1
    3e06:	70fb      	strb	r3, [r7, #3]
  {
    system_controller->EMCCLKSEL =
        bit::Insert(system_controller->EMCCLKSEL,
    3e08:	4b0c      	ldr	r3, [pc, #48]	; (3e3c <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const+0x40>)
    3e0a:	681b      	ldr	r3, [r3, #0]
    3e0c:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
    3e10:	78f9      	ldrb	r1, [r7, #3]
    system_controller->EMCCLKSEL =
    3e12:	4b0a      	ldr	r3, [pc, #40]	; (3e3c <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const+0x40>)
    3e14:	681c      	ldr	r4, [r3, #0]
        bit::Insert(system_controller->EMCCLKSEL,
    3e16:	4b0a      	ldr	r3, [pc, #40]	; (3e40 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const+0x44>)
    3e18:	781a      	ldrb	r2, [r3, #0]
    3e1a:	785b      	ldrb	r3, [r3, #1]
    3e1c:	021b      	lsls	r3, r3, #8
    3e1e:	431a      	orrs	r2, r3
    3e20:	2300      	movs	r3, #0
    3e22:	f362 030f 	bfi	r3, r2, #0, #16
    3e26:	461a      	mov	r2, r3
    3e28:	f000 fcd2 	bl	47d0 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    3e2c:	4603      	mov	r3, r0
    system_controller->EMCCLKSEL =
    3e2e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
                    static_cast<uint32_t>(emc_divider),
                    EmcClock::kDivider);
  }
    3e32:	bf00      	nop
    3e34:	370c      	adds	r7, #12
    3e36:	46bd      	mov	sp, r7
    3e38:	bd90      	pop	{r4, r7, pc}
    3e3a:	bf00      	nop
    3e3c:	100003d8 	.word	0x100003d8
    3e40:	0000749c 	.word	0x0000749c

00003e44 <sjsu::lpc40xx::DefaultSystemController()>:
  // TODO(#181): Set USB and Spifi clock rates
  inline static units::frequency::hertz_t speed_in_hertz = kDefaultIRCFrequency;
};

inline const sjsu::lpc40xx::SystemController & DefaultSystemController()
{
    3e44:	b480      	push	{r7}
    3e46:	af00      	add	r7, sp, #0
  static sjsu::lpc40xx::SystemController default_system_controller =
      sjsu::lpc40xx::SystemController();
  return default_system_controller;
    3e48:	4b02      	ldr	r3, [pc, #8]	; (3e54 <sjsu::lpc40xx::DefaultSystemController()+0x10>)
}
    3e4a:	4618      	mov	r0, r3
    3e4c:	46bd      	mov	sp, r7
    3e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3e52:	4770      	bx	lr
    3e54:	10000024 	.word	0x10000024

00003e58 <sjsu::lpc40xx::uart::FindClosestFractional(float)>:
  uint32_t divide_add   = 0;
  uint32_t multiply     = 1;
};

constexpr UartCalibration_t FindClosestFractional(float decimal)
{
    3e58:	b480      	push	{r7}
    3e5a:	b089      	sub	sp, #36	; 0x24
    3e5c:	af00      	add	r7, sp, #0
    3e5e:	6078      	str	r0, [r7, #4]
    3e60:	ed87 0a00 	vstr	s0, [r7]
  UartCalibration_t result;
    3e64:	687b      	ldr	r3, [r7, #4]
    3e66:	2200      	movs	r2, #0
    3e68:	601a      	str	r2, [r3, #0]
    3e6a:	687b      	ldr	r3, [r7, #4]
    3e6c:	2200      	movs	r2, #0
    3e6e:	605a      	str	r2, [r3, #4]
    3e70:	687b      	ldr	r3, [r7, #4]
    3e72:	2201      	movs	r2, #1
    3e74:	609a      	str	r2, [r3, #8]
  bool finished = false;
    3e76:	2300      	movs	r3, #0
    3e78:	77fb      	strb	r3, [r7, #31]
  for (int div = 0; div < 15 && !finished; div++)
    3e7a:	2300      	movs	r3, #0
    3e7c:	61bb      	str	r3, [r7, #24]
    3e7e:	69bb      	ldr	r3, [r7, #24]
    3e80:	2b0e      	cmp	r3, #14
    3e82:	dc4f      	bgt.n	3f24 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xcc>
    3e84:	7ffb      	ldrb	r3, [r7, #31]
    3e86:	2b00      	cmp	r3, #0
    3e88:	d14c      	bne.n	3f24 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xcc>
  {
    for (int mul = div + 1; mul < 15 && !finished; mul++)
    3e8a:	69bb      	ldr	r3, [r7, #24]
    3e8c:	3301      	adds	r3, #1
    3e8e:	617b      	str	r3, [r7, #20]
    3e90:	697b      	ldr	r3, [r7, #20]
    3e92:	2b0e      	cmp	r3, #14
    3e94:	dc42      	bgt.n	3f1c <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xc4>
    3e96:	7ffb      	ldrb	r3, [r7, #31]
    3e98:	2b00      	cmp	r3, #0
    3e9a:	d13f      	bne.n	3f1c <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xc4>
    {
      float divf         = static_cast<float>(div);
    3e9c:	69bb      	ldr	r3, [r7, #24]
    3e9e:	ee07 3a90 	vmov	s15, r3
    3ea2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3ea6:	edc7 7a04 	vstr	s15, [r7, #16]
      float mulf         = static_cast<float>(mul);
    3eaa:	697b      	ldr	r3, [r7, #20]
    3eac:	ee07 3a90 	vmov	s15, r3
    3eb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3eb4:	edc7 7a03 	vstr	s15, [r7, #12]
      float test_decimal = 1.0f + divf / mulf;
    3eb8:	edd7 6a04 	vldr	s13, [r7, #16]
    3ebc:	ed97 7a03 	vldr	s14, [r7, #12]
    3ec0:	eec6 7a87 	vdiv.f32	s15, s13, s14
    3ec4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    3ec8:	ee77 7a87 	vadd.f32	s15, s15, s14
    3ecc:	edc7 7a02 	vstr	s15, [r7, #8]
      if (decimal <= test_decimal + kThreshold &&
    3ed0:	edd7 7a02 	vldr	s15, [r7, #8]
    3ed4:	ed9f 7a17 	vldr	s14, [pc, #92]	; 3f34 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xdc>
    3ed8:	ee77 7a87 	vadd.f32	s15, s15, s14
    3edc:	ed97 7a00 	vldr	s14, [r7]
    3ee0:	eeb4 7ae7 	vcmpe.f32	s14, s15
    3ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3ee8:	d814      	bhi.n	3f14 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xbc>
          decimal >= test_decimal - kThreshold)
    3eea:	edd7 7a02 	vldr	s15, [r7, #8]
    3eee:	ed9f 7a11 	vldr	s14, [pc, #68]	; 3f34 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xdc>
    3ef2:	ee77 7ac7 	vsub.f32	s15, s15, s14
      if (decimal <= test_decimal + kThreshold &&
    3ef6:	ed97 7a00 	vldr	s14, [r7]
    3efa:	eeb4 7ae7 	vcmpe.f32	s14, s15
    3efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3f02:	db07      	blt.n	3f14 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xbc>
      {
        result.divide_add = div;
    3f04:	69ba      	ldr	r2, [r7, #24]
    3f06:	687b      	ldr	r3, [r7, #4]
    3f08:	605a      	str	r2, [r3, #4]
        result.multiply   = mul;
    3f0a:	697a      	ldr	r2, [r7, #20]
    3f0c:	687b      	ldr	r3, [r7, #4]
    3f0e:	609a      	str	r2, [r3, #8]
        finished          = true;
    3f10:	2301      	movs	r3, #1
    3f12:	77fb      	strb	r3, [r7, #31]
    for (int mul = div + 1; mul < 15 && !finished; mul++)
    3f14:	697b      	ldr	r3, [r7, #20]
    3f16:	3301      	adds	r3, #1
    3f18:	617b      	str	r3, [r7, #20]
    3f1a:	e7b9      	b.n	3e90 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0x38>
  for (int div = 0; div < 15 && !finished; div++)
    3f1c:	69bb      	ldr	r3, [r7, #24]
    3f1e:	3301      	adds	r3, #1
    3f20:	61bb      	str	r3, [r7, #24]
    3f22:	e7ac      	b.n	3e7e <sjsu::lpc40xx::uart::FindClosestFractional(float)+0x26>
      }
    }
  }
  return result;
    3f24:	bf00      	nop
}
    3f26:	6878      	ldr	r0, [r7, #4]
    3f28:	3724      	adds	r7, #36	; 0x24
    3f2a:	46bd      	mov	sp, r7
    3f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f30:	4770      	bx	lr
    3f32:	bf00      	nop
    3f34:	3d4ccccd 	.word	0x3d4ccccd

00003f38 <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>:

constexpr float DividerEstimate(float baud_rate,
                                float fraction_estimate       = 1,
                                uint32_t peripheral_frequency = 1)
{
    3f38:	b480      	push	{r7}
    3f3a:	b087      	sub	sp, #28
    3f3c:	af00      	add	r7, sp, #0
    3f3e:	ed87 0a03 	vstr	s0, [r7, #12]
    3f42:	edc7 0a02 	vstr	s1, [r7, #8]
    3f46:	6078      	str	r0, [r7, #4]
  float clock_frequency = static_cast<float>(peripheral_frequency);
    3f48:	687b      	ldr	r3, [r7, #4]
    3f4a:	ee07 3a90 	vmov	s15, r3
    3f4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
    3f52:	edc7 7a05 	vstr	s15, [r7, #20]
  return clock_frequency / (16.0f * baud_rate * fraction_estimate);
    3f56:	edd7 7a03 	vldr	s15, [r7, #12]
    3f5a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
    3f5e:	ee27 7a87 	vmul.f32	s14, s15, s14
    3f62:	edd7 7a02 	vldr	s15, [r7, #8]
    3f66:	ee67 7a27 	vmul.f32	s15, s14, s15
    3f6a:	ed97 7a05 	vldr	s14, [r7, #20]
    3f6e:	eec7 6a27 	vdiv.f32	s13, s14, s15
    3f72:	eef0 7a66 	vmov.f32	s15, s13
}
    3f76:	eeb0 0a67 	vmov.f32	s0, s15
    3f7a:	371c      	adds	r7, #28
    3f7c:	46bd      	mov	sp, r7
    3f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3f82:	4770      	bx	lr

00003f84 <sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)>:

constexpr float FractionalEstimate(float baud_rate,
                                   float divider,
                                   uint32_t peripheral_frequency)
{
    3f84:	b480      	push	{r7}
    3f86:	b087      	sub	sp, #28
    3f88:	af00      	add	r7, sp, #0
    3f8a:	ed87 0a03 	vstr	s0, [r7, #12]
    3f8e:	edc7 0a02 	vstr	s1, [r7, #8]
    3f92:	6078      	str	r0, [r7, #4]
  float clock_frequency = static_cast<float>(peripheral_frequency);
    3f94:	687b      	ldr	r3, [r7, #4]
    3f96:	ee07 3a90 	vmov	s15, r3
    3f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
    3f9e:	edc7 7a05 	vstr	s15, [r7, #20]
  return clock_frequency / (16.0f * baud_rate * divider);
    3fa2:	edd7 7a03 	vldr	s15, [r7, #12]
    3fa6:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
    3faa:	ee27 7a87 	vmul.f32	s14, s15, s14
    3fae:	edd7 7a02 	vldr	s15, [r7, #8]
    3fb2:	ee67 7a27 	vmul.f32	s15, s14, s15
    3fb6:	ed97 7a05 	vldr	s14, [r7, #20]
    3fba:	eec7 6a27 	vdiv.f32	s13, s14, s15
    3fbe:	eef0 7a66 	vmov.f32	s15, s13
}
    3fc2:	eeb0 0a67 	vmov.f32	s0, s15
    3fc6:	371c      	adds	r7, #28
    3fc8:	46bd      	mov	sp, r7
    3fca:	f85d 7b04 	ldr.w	r7, [sp], #4
    3fce:	4770      	bx	lr

00003fd0 <sjsu::lpc40xx::uart::RoundFloat(float)>:

constexpr float RoundFloat(float value)
{
    3fd0:	b480      	push	{r7}
    3fd2:	b083      	sub	sp, #12
    3fd4:	af00      	add	r7, sp, #0
    3fd6:	ed87 0a01 	vstr	s0, [r7, #4]
  return static_cast<float>(static_cast<int>(value + 0.5f));
    3fda:	edd7 7a01 	vldr	s15, [r7, #4]
    3fde:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    3fe2:	ee77 7a87 	vadd.f32	s15, s15, s14
    3fe6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    3fea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
    3fee:	eeb0 0a67 	vmov.f32	s0, s15
    3ff2:	370c      	adds	r7, #12
    3ff4:	46bd      	mov	sp, r7
    3ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ffa:	4770      	bx	lr

00003ffc <sjsu::lpc40xx::uart::IsDecmial(float)>:

constexpr bool IsDecmial(float value)
{
    3ffc:	b580      	push	{r7, lr}
    3ffe:	b086      	sub	sp, #24
    4000:	af00      	add	r7, sp, #0
    4002:	ed87 0a01 	vstr	s0, [r7, #4]
  bool result         = false;
    4006:	2300      	movs	r3, #0
    4008:	75fb      	strb	r3, [r7, #23]
  float rounded_value = RoundFloat(value);
    400a:	ed97 0a01 	vldr	s0, [r7, #4]
    400e:	f7ff ffdf 	bl	3fd0 <sjsu::lpc40xx::uart::RoundFloat(float)>
    4012:	ed87 0a04 	vstr	s0, [r7, #16]
  float error         = value - rounded_value;
    4016:	ed97 7a01 	vldr	s14, [r7, #4]
    401a:	edd7 7a04 	vldr	s15, [r7, #16]
    401e:	ee77 7a67 	vsub.f32	s15, s14, s15
    4022:	edc7 7a03 	vstr	s15, [r7, #12]
  if (-kThreshold <= error && error <= kThreshold)
    4026:	edd7 7a03 	vldr	s15, [r7, #12]
    402a:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 4058 <sjsu::lpc40xx::uart::IsDecmial(float)+0x5c>
    402e:	eef4 7ac7 	vcmpe.f32	s15, s14
    4032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4036:	db0a      	blt.n	404e <sjsu::lpc40xx::uart::IsDecmial(float)+0x52>
    4038:	edd7 7a03 	vldr	s15, [r7, #12]
    403c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 405c <sjsu::lpc40xx::uart::IsDecmial(float)+0x60>
    4040:	eef4 7ac7 	vcmpe.f32	s15, s14
    4044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4048:	d801      	bhi.n	404e <sjsu::lpc40xx::uart::IsDecmial(float)+0x52>
  {
    result = true;
    404a:	2301      	movs	r3, #1
    404c:	75fb      	strb	r3, [r7, #23]
  }
  return result;
    404e:	7dfb      	ldrb	r3, [r7, #23]
}
    4050:	4618      	mov	r0, r3
    4052:	3718      	adds	r7, #24
    4054:	46bd      	mov	sp, r7
    4056:	bd80      	pop	{r7, pc}
    4058:	bd4ccccd 	.word	0xbd4ccccd
    405c:	3d4ccccd 	.word	0x3d4ccccd

00004060 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>:
  kDone
};

constexpr static UartCalibration_t GenerateUartCalibration(
    uint32_t baud_rate, units::frequency::hertz_t peripheral_frequency)
{
    4060:	b590      	push	{r4, r7, lr}
    4062:	b091      	sub	sp, #68	; 0x44
    4064:	af00      	add	r7, sp, #0
    4066:	61f8      	str	r0, [r7, #28]
    4068:	61b9      	str	r1, [r7, #24]
    406a:	617a      	str	r2, [r7, #20]
  uint32_t integer_peripheral_frequency =
      units::unit_cast<uint32_t>(peripheral_frequency);
    406c:	f107 0314 	add.w	r3, r7, #20
    4070:	4618      	mov	r0, r3
    4072:	f7ff fa9b 	bl	35ac <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    4076:	62b8      	str	r0, [r7, #40]	; 0x28
  States state = States::kCalculateIntegerDivideLatch;
    4078:	2300      	movs	r3, #0
    407a:	63fb      	str	r3, [r7, #60]	; 0x3c
  UartCalibration_t uart_calibration;
    407c:	69fb      	ldr	r3, [r7, #28]
    407e:	2200      	movs	r2, #0
    4080:	601a      	str	r2, [r3, #0]
    4082:	69fb      	ldr	r3, [r7, #28]
    4084:	2200      	movs	r2, #0
    4086:	605a      	str	r2, [r3, #4]
    4088:	69fb      	ldr	r3, [r7, #28]
    408a:	2201      	movs	r2, #1
    408c:	609a      	str	r2, [r3, #8]
  float baud_rate_float = static_cast<float>(baud_rate);
    408e:	69bb      	ldr	r3, [r7, #24]
    4090:	ee07 3a90 	vmov	s15, r3
    4094:	eef8 7a67 	vcvt.f32.u32	s15, s15
    4098:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  float divide_estimate = 0;
    409c:	f04f 0300 	mov.w	r3, #0
    40a0:	63bb      	str	r3, [r7, #56]	; 0x38
  float decimal         = 1.5;
    40a2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    40a6:	637b      	str	r3, [r7, #52]	; 0x34
  float div             = 1;
    40a8:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    40ac:	633b      	str	r3, [r7, #48]	; 0x30
  float mul             = 2;
    40ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    40b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (state != States::kDone)
    40b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    40b6:	2b04      	cmp	r3, #4
    40b8:	f000 80be 	beq.w	4238 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d8>
  {
    switch (state)
    40bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    40be:	2b03      	cmp	r3, #3
    40c0:	f200 80b8 	bhi.w	4234 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d4>
    40c4:	a201      	add	r2, pc, #4	; (adr r2, 40cc <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x6c>)
    40c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    40ca:	bf00      	nop
    40cc:	000040dd 	.word	0x000040dd
    40d0:	00004137 	.word	0x00004137
    40d4:	00004197 	.word	0x00004197
    40d8:	00004207 	.word	0x00004207
    {
      case States::kCalculateIntegerDivideLatch:
      {
        divide_estimate =
    40dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    40de:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
    40e2:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
    40e6:	f7ff ff27 	bl	3f38 <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>
    40ea:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
            DividerEstimate(baud_rate_float, 1, integer_peripheral_frequency);

        if (divide_estimate < 1.0f)
    40ee:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    40f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    40f6:	eef4 7ac7 	vcmpe.f32	s15, s14
    40fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    40fe:	d505      	bpl.n	410c <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0xac>
        {
          uart_calibration.divide_latch = 0;
    4100:	69fb      	ldr	r3, [r7, #28]
    4102:	2200      	movs	r2, #0
    4104:	601a      	str	r2, [r3, #0]
          state                         = States::kDone;
    4106:	2304      	movs	r3, #4
    4108:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          state = States::kCalculateDivideLatchWithDecimal;
        }
        break;
    410a:	e094      	b.n	4236 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
        else if (IsDecmial(divide_estimate))
    410c:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
    4110:	f7ff ff74 	bl	3ffc <sjsu::lpc40xx::uart::IsDecmial(float)>
    4114:	4603      	mov	r3, r0
    4116:	2b00      	cmp	r3, #0
    4118:	d00a      	beq.n	4130 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0xd0>
              static_cast<uint32_t>(divide_estimate);
    411a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    411e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    4122:	ee17 2a90 	vmov	r2, s15
          uart_calibration.divide_latch =
    4126:	69fb      	ldr	r3, [r7, #28]
    4128:	601a      	str	r2, [r3, #0]
          state = States::kDone;
    412a:	2304      	movs	r3, #4
    412c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    412e:	e082      	b.n	4236 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
          state = States::kCalculateDivideLatchWithDecimal;
    4130:	2301      	movs	r3, #1
    4132:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    4134:	e07f      	b.n	4236 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kCalculateDivideLatchWithDecimal:
      {
        divide_estimate = RoundFloat(DividerEstimate(
    4136:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    4138:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
    413c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
    4140:	f7ff fefa 	bl	3f38 <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>
    4144:	eef0 7a40 	vmov.f32	s15, s0
    4148:	eeb0 0a67 	vmov.f32	s0, s15
    414c:	f7ff ff40 	bl	3fd0 <sjsu::lpc40xx::uart::RoundFloat(float)>
    4150:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
            baud_rate_float, decimal, integer_peripheral_frequency));
        decimal         = FractionalEstimate(
    4154:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    4156:	edd7 0a0e 	vldr	s1, [r7, #56]	; 0x38
    415a:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
    415e:	f7ff ff11 	bl	3f84 <sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)>
    4162:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
            baud_rate_float, divide_estimate, integer_peripheral_frequency);
        if (1.1f <= decimal && decimal <= 1.9f)
    4166:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
    416a:	ed9f 7a36 	vldr	s14, [pc, #216]	; 4244 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1e4>
    416e:	eef4 7ac7 	vcmpe.f32	s15, s14
    4172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4176:	db0b      	blt.n	4190 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x130>
    4178:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
    417c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 4248 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1e8>
    4180:	eef4 7ac7 	vcmpe.f32	s15, s14
    4184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4188:	d802      	bhi.n	4190 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x130>
        {
          state = States::kGenerateFractionFromDecimal;
    418a:	2303      	movs	r3, #3
    418c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          state = States::kDecimalFailedGenerateNewDecimal;
        }
        break;
    418e:	e052      	b.n	4236 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
          state = States::kDecimalFailedGenerateNewDecimal;
    4190:	2302      	movs	r3, #2
    4192:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    4194:	e04f      	b.n	4236 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kDecimalFailedGenerateNewDecimal:
      {
        mul += 1;
    4196:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
    419a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    419e:	ee77 7a87 	vadd.f32	s15, s15, s14
    41a2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

        if (div > 15)
    41a6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    41aa:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
    41ae:	eef4 7ac7 	vcmpe.f32	s15, s14
    41b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    41b6:	dd02      	ble.n	41be <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x15e>
        {
          state = States::kDone;
    41b8:	2304      	movs	r3, #4
    41ba:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
    41bc:	e03b      	b.n	4236 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
        }
        else if (mul > 15)
    41be:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
    41c2:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
    41c6:	eef4 7ac7 	vcmpe.f32	s15, s14
    41ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    41ce:	dd0f      	ble.n	41f0 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x190>
        {
          div += 1;
    41d0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    41d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    41d8:	ee77 7a87 	vadd.f32	s15, s15, s14
    41dc:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
          mul = div + 1;
    41e0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    41e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    41e8:	ee77 7a87 	vadd.f32	s15, s15, s14
    41ec:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        }
        decimal = div / mul;
    41f0:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
    41f4:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
    41f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
    41fc:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        state   = States::kCalculateDivideLatchWithDecimal;
    4200:	2301      	movs	r3, #1
    4202:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    4204:	e017      	b.n	4236 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kGenerateFractionFromDecimal:
      {
        uart_calibration              = FindClosestFractional(decimal);
    4206:	69fc      	ldr	r4, [r7, #28]
    4208:	463b      	mov	r3, r7
    420a:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
    420e:	4618      	mov	r0, r3
    4210:	f7ff fe22 	bl	3e58 <sjsu::lpc40xx::uart::FindClosestFractional(float)>
    4214:	463b      	mov	r3, r7
    4216:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    421a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        uart_calibration.divide_latch = static_cast<uint32_t>(divide_estimate);
    421e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    4222:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    4226:	ee17 2a90 	vmov	r2, s15
    422a:	69fb      	ldr	r3, [r7, #28]
    422c:	601a      	str	r2, [r3, #0]
        state                         = States::kDone;
    422e:	2304      	movs	r3, #4
    4230:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    4232:	e000      	b.n	4236 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kDone:
      default: break;
    4234:	bf00      	nop
  while (state != States::kDone)
    4236:	e73d      	b.n	40b4 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x54>
    }
  }
  return uart_calibration;
    4238:	bf00      	nop
}
    423a:	69f8      	ldr	r0, [r7, #28]
    423c:	3744      	adds	r7, #68	; 0x44
    423e:	46bd      	mov	sp, r7
    4240:	bd90      	pop	{r4, r7, pc}
    4242:	bf00      	nop
    4244:	3f8ccccd 	.word	0x3f8ccccd
    4248:	3ff33333 	.word	0x3ff33333

0000424c <sjsu::Uart::Uart()>:
#include "utility/status.hpp"
#include "utility/time.hpp"

namespace sjsu
{
class Uart
    424c:	b480      	push	{r7}
    424e:	b083      	sub	sp, #12
    4250:	af00      	add	r7, sp, #0
    4252:	6078      	str	r0, [r7, #4]
    4254:	4a04      	ldr	r2, [pc, #16]	; (4268 <sjsu::Uart::Uart()+0x1c>)
    4256:	687b      	ldr	r3, [r7, #4]
    4258:	601a      	str	r2, [r3, #0]
    425a:	687b      	ldr	r3, [r7, #4]
    425c:	4618      	mov	r0, r3
    425e:	370c      	adds	r7, #12
    4260:	46bd      	mov	sp, r7
    4262:	f85d 7b04 	ldr.w	r7, [sp], #4
    4266:	4770      	bx	lr
    4268:	00007594 	.word	0x00007594

0000426c <sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)>:
      .tx_function_id = 0b101,
      .rx_function_id = 0b011,
    };
  };

  explicit constexpr Uart(const Port_t & port,
    426c:	b580      	push	{r7, lr}
    426e:	b084      	sub	sp, #16
    4270:	af00      	add	r7, sp, #0
    4272:	60f8      	str	r0, [r7, #12]
    4274:	60b9      	str	r1, [r7, #8]
    4276:	607a      	str	r2, [r7, #4]
                          const sjsu::SystemController & system_controller =
                              DefaultSystemController())
      : port_(port), system_controller_(system_controller)
    4278:	68fb      	ldr	r3, [r7, #12]
    427a:	4618      	mov	r0, r3
    427c:	f7ff ffe6 	bl	424c <sjsu::Uart::Uart()>
    4280:	4a06      	ldr	r2, [pc, #24]	; (429c <sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)+0x30>)
    4282:	68fb      	ldr	r3, [r7, #12]
    4284:	601a      	str	r2, [r3, #0]
    4286:	68fb      	ldr	r3, [r7, #12]
    4288:	68ba      	ldr	r2, [r7, #8]
    428a:	605a      	str	r2, [r3, #4]
    428c:	68fb      	ldr	r3, [r7, #12]
    428e:	687a      	ldr	r2, [r7, #4]
    4290:	609a      	str	r2, [r3, #8]
  {
  }
    4292:	68fb      	ldr	r3, [r7, #12]
    4294:	4618      	mov	r0, r3
    4296:	3710      	adds	r7, #16
    4298:	46bd      	mov	sp, r7
    429a:	bd80      	pop	{r7, pc}
    429c:	00007578 	.word	0x00007578

000042a0 <sjsu::lpc40xx::Uart::Initialize(unsigned long) const>:

  Status Initialize(uint32_t baud_rate) const override
    42a0:	b580      	push	{r7, lr}
    42a2:	b084      	sub	sp, #16
    42a4:	af00      	add	r7, sp, #0
    42a6:	6078      	str	r0, [r7, #4]
    42a8:	6039      	str	r1, [r7, #0]
  {
    constexpr uint8_t kFIFOEnableAndReset = 0b111;
    42aa:	2307      	movs	r3, #7
    42ac:	73fb      	strb	r3, [r7, #15]
    system_controller_.PowerUpPeripheral(port_.power_on_id);
    42ae:	687b      	ldr	r3, [r7, #4]
    42b0:	6898      	ldr	r0, [r3, #8]
    42b2:	687b      	ldr	r3, [r7, #4]
    42b4:	689b      	ldr	r3, [r3, #8]
    42b6:	681b      	ldr	r3, [r3, #0]
    42b8:	3314      	adds	r3, #20
    42ba:	681b      	ldr	r3, [r3, #0]
    42bc:	687a      	ldr	r2, [r7, #4]
    42be:	6852      	ldr	r2, [r2, #4]
    42c0:	3204      	adds	r2, #4
    42c2:	4611      	mov	r1, r2
    42c4:	4798      	blx	r3

    SetBaudRate(baud_rate);
    42c6:	6839      	ldr	r1, [r7, #0]
    42c8:	6878      	ldr	r0, [r7, #4]
    42ca:	f000 f849 	bl	4360 <sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const>

    port_.rx.SetPinFunction(port_.rx_function_id);
    42ce:	687b      	ldr	r3, [r7, #4]
    42d0:	685b      	ldr	r3, [r3, #4]
    42d2:	68d8      	ldr	r0, [r3, #12]
    42d4:	687b      	ldr	r3, [r7, #4]
    42d6:	685b      	ldr	r3, [r3, #4]
    42d8:	68db      	ldr	r3, [r3, #12]
    42da:	681b      	ldr	r3, [r3, #0]
    42dc:	681b      	ldr	r3, [r3, #0]
    42de:	687a      	ldr	r2, [r7, #4]
    42e0:	6852      	ldr	r2, [r2, #4]
    42e2:	7c12      	ldrb	r2, [r2, #16]
    42e4:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    42e8:	b2d2      	uxtb	r2, r2
    42ea:	4611      	mov	r1, r2
    42ec:	4798      	blx	r3
    port_.tx.SetPinFunction(port_.tx_function_id);
    42ee:	687b      	ldr	r3, [r7, #4]
    42f0:	685b      	ldr	r3, [r3, #4]
    42f2:	6898      	ldr	r0, [r3, #8]
    42f4:	687b      	ldr	r3, [r7, #4]
    42f6:	685b      	ldr	r3, [r3, #4]
    42f8:	689b      	ldr	r3, [r3, #8]
    42fa:	681b      	ldr	r3, [r3, #0]
    42fc:	681b      	ldr	r3, [r3, #0]
    42fe:	687a      	ldr	r2, [r7, #4]
    4300:	6852      	ldr	r2, [r2, #4]
    4302:	7c12      	ldrb	r2, [r2, #16]
    4304:	f3c2 0202 	ubfx	r2, r2, #0, #3
    4308:	b2d2      	uxtb	r2, r2
    430a:	4611      	mov	r1, r2
    430c:	4798      	blx	r3
    port_.rx.SetPull(sjsu::Pin::Resistor::kPullUp);
    430e:	687b      	ldr	r3, [r7, #4]
    4310:	685b      	ldr	r3, [r3, #4]
    4312:	68da      	ldr	r2, [r3, #12]
    4314:	687b      	ldr	r3, [r7, #4]
    4316:	685b      	ldr	r3, [r3, #4]
    4318:	68db      	ldr	r3, [r3, #12]
    431a:	681b      	ldr	r3, [r3, #0]
    431c:	3304      	adds	r3, #4
    431e:	681b      	ldr	r3, [r3, #0]
    4320:	2102      	movs	r1, #2
    4322:	4610      	mov	r0, r2
    4324:	4798      	blx	r3
    port_.tx.SetPull(sjsu::Pin::Resistor::kPullUp);
    4326:	687b      	ldr	r3, [r7, #4]
    4328:	685b      	ldr	r3, [r3, #4]
    432a:	689a      	ldr	r2, [r3, #8]
    432c:	687b      	ldr	r3, [r7, #4]
    432e:	685b      	ldr	r3, [r3, #4]
    4330:	689b      	ldr	r3, [r3, #8]
    4332:	681b      	ldr	r3, [r3, #0]
    4334:	3304      	adds	r3, #4
    4336:	681b      	ldr	r3, [r3, #0]
    4338:	2102      	movs	r1, #2
    433a:	4610      	mov	r0, r2
    433c:	4798      	blx	r3
    port_.registers->FCR |= kFIFOEnableAndReset;
    433e:	687b      	ldr	r3, [r7, #4]
    4340:	685b      	ldr	r3, [r3, #4]
    4342:	681b      	ldr	r3, [r3, #0]
    4344:	7a1b      	ldrb	r3, [r3, #8]
    4346:	b2da      	uxtb	r2, r3
    4348:	687b      	ldr	r3, [r7, #4]
    434a:	685b      	ldr	r3, [r3, #4]
    434c:	681b      	ldr	r3, [r3, #0]
    434e:	f042 0207 	orr.w	r2, r2, #7
    4352:	b2d2      	uxtb	r2, r2
    4354:	721a      	strb	r2, [r3, #8]

    return Status::kSuccess;
    4356:	2300      	movs	r3, #0
  }
    4358:	4618      	mov	r0, r3
    435a:	3710      	adds	r7, #16
    435c:	46bd      	mov	sp, r7
    435e:	bd80      	pop	{r7, pc}

00004360 <sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const>:

  bool SetBaudRate(uint32_t baud_rate) const override
    4360:	b580      	push	{r7, lr}
    4362:	b086      	sub	sp, #24
    4364:	af00      	add	r7, sp, #0
    4366:	6078      	str	r0, [r7, #4]
    4368:	6039      	str	r1, [r7, #0]
  {
    uart::UartCalibration_t calibration = uart::GenerateUartCalibration(
        baud_rate,
        system_controller_.GetPeripheralFrequency(port_.power_on_id));
    436a:	687b      	ldr	r3, [r7, #4]
    436c:	689a      	ldr	r2, [r3, #8]
    436e:	687b      	ldr	r3, [r7, #4]
    4370:	685b      	ldr	r3, [r3, #4]
    4372:	3304      	adds	r3, #4
    4374:	4619      	mov	r1, r3
    4376:	4610      	mov	r0, r2
    4378:	f7fe ffc0 	bl	32fc <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>
    437c:	4602      	mov	r2, r0
    437e:	f107 0308 	add.w	r3, r7, #8
    4382:	6839      	ldr	r1, [r7, #0]
    4384:	4618      	mov	r0, r3
    4386:	f7ff fe6b 	bl	4060 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>

    constexpr uint8_t kDlabBit = (1 << 7);
    438a:	2380      	movs	r3, #128	; 0x80
    438c:	75fb      	strb	r3, [r7, #23]

    uint8_t dlm = static_cast<uint8_t>((calibration.divide_latch >> 8) & 0xFF);
    438e:	68bb      	ldr	r3, [r7, #8]
    4390:	0a1b      	lsrs	r3, r3, #8
    4392:	75bb      	strb	r3, [r7, #22]
    uint8_t dll = static_cast<uint8_t>(calibration.divide_latch & 0xFF);
    4394:	68bb      	ldr	r3, [r7, #8]
    4396:	757b      	strb	r3, [r7, #21]
    uint8_t fdr = static_cast<uint8_t>((calibration.multiply & 0xF) << 4 |
    4398:	693b      	ldr	r3, [r7, #16]
    439a:	b2db      	uxtb	r3, r3
    439c:	011b      	lsls	r3, r3, #4
    439e:	b2da      	uxtb	r2, r3
                                       (calibration.divide_add & 0xF));
    43a0:	68fb      	ldr	r3, [r7, #12]
    43a2:	b2db      	uxtb	r3, r3
    43a4:	f003 030f 	and.w	r3, r3, #15
    43a8:	b2db      	uxtb	r3, r3
    uint8_t fdr = static_cast<uint8_t>((calibration.multiply & 0xF) << 4 |
    43aa:	4313      	orrs	r3, r2
    43ac:	753b      	strb	r3, [r7, #20]

    port_.registers->LCR = kDlabBit;
    43ae:	687b      	ldr	r3, [r7, #4]
    43b0:	685b      	ldr	r3, [r3, #4]
    43b2:	681b      	ldr	r3, [r3, #0]
    43b4:	2280      	movs	r2, #128	; 0x80
    43b6:	731a      	strb	r2, [r3, #12]
    port_.registers->DLM = dlm;
    43b8:	687b      	ldr	r3, [r7, #4]
    43ba:	685b      	ldr	r3, [r3, #4]
    43bc:	681b      	ldr	r3, [r3, #0]
    43be:	7dba      	ldrb	r2, [r7, #22]
    43c0:	711a      	strb	r2, [r3, #4]
    port_.registers->DLL = dll;
    43c2:	687b      	ldr	r3, [r7, #4]
    43c4:	685b      	ldr	r3, [r3, #4]
    43c6:	681b      	ldr	r3, [r3, #0]
    43c8:	7d7a      	ldrb	r2, [r7, #21]
    43ca:	701a      	strb	r2, [r3, #0]
    port_.registers->FDR = fdr;
    43cc:	687b      	ldr	r3, [r7, #4]
    43ce:	685b      	ldr	r3, [r3, #4]
    43d0:	681b      	ldr	r3, [r3, #0]
    43d2:	7d3a      	ldrb	r2, [r7, #20]
    43d4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    port_.registers->LCR = kStandardUart;
    43d8:	687b      	ldr	r3, [r7, #4]
    43da:	685b      	ldr	r3, [r3, #4]
    43dc:	681b      	ldr	r3, [r3, #0]
    43de:	2203      	movs	r2, #3
    43e0:	731a      	strb	r2, [r3, #12]
    return true;
    43e2:	2301      	movs	r3, #1
  }
    43e4:	4618      	mov	r0, r3
    43e6:	3718      	adds	r7, #24
    43e8:	46bd      	mov	sp, r7
    43ea:	bd80      	pop	{r7, pc}

000043ec <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const>:

  void Write(const uint8_t * data, size_t size) const override
    43ec:	b580      	push	{r7, lr}
    43ee:	b086      	sub	sp, #24
    43f0:	af00      	add	r7, sp, #0
    43f2:	60f8      	str	r0, [r7, #12]
    43f4:	60b9      	str	r1, [r7, #8]
    43f6:	607a      	str	r2, [r7, #4]
  {
    for (size_t i = 0; i < size; i++)
    43f8:	2300      	movs	r3, #0
    43fa:	617b      	str	r3, [r7, #20]
    43fc:	697a      	ldr	r2, [r7, #20]
    43fe:	687b      	ldr	r3, [r7, #4]
    4400:	429a      	cmp	r2, r3
    4402:	d216      	bcs.n	4432 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x46>
    {
      port_.registers->THR = data[i];
    4404:	68ba      	ldr	r2, [r7, #8]
    4406:	697b      	ldr	r3, [r7, #20]
    4408:	441a      	add	r2, r3
    440a:	68fb      	ldr	r3, [r7, #12]
    440c:	685b      	ldr	r3, [r3, #4]
    440e:	681b      	ldr	r3, [r3, #0]
    4410:	7812      	ldrb	r2, [r2, #0]
    4412:	701a      	strb	r2, [r3, #0]
      while (!TransmissionComplete())
    4414:	68f8      	ldr	r0, [r7, #12]
    4416:	f000 f8b5 	bl	4584 <sjsu::lpc40xx::Uart::TransmissionComplete() const>
    441a:	4603      	mov	r3, r0
    441c:	f083 0301 	eor.w	r3, r3, #1
    4420:	b2db      	uxtb	r3, r3
    4422:	2b00      	cmp	r3, #0
    4424:	d001      	beq.n	442a <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x3e>
      {
        continue;
    4426:	bf00      	nop
      while (!TransmissionComplete())
    4428:	e7f4      	b.n	4414 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x28>
    for (size_t i = 0; i < size; i++)
    442a:	697b      	ldr	r3, [r7, #20]
    442c:	3301      	adds	r3, #1
    442e:	617b      	str	r3, [r7, #20]
    4430:	e7e4      	b.n	43fc <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x10>
      }
    }
  }
    4432:	bf00      	nop
    4434:	3718      	adds	r7, #24
    4436:	46bd      	mov	sp, r7
    4438:	bd80      	pop	{r7, pc}

0000443a <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const>:
              std::chrono::microseconds timeout =
                  std::chrono::microseconds::max()) const override
  {
    uint32_t position = 0;
    // NOTE: Consider changing this to using a Wait() call.
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    443a:	b590      	push	{r4, r7, lr}
    443c:	b083      	sub	sp, #12
    443e:	af00      	add	r7, sp, #0
    4440:	6078      	str	r0, [r7, #4]
    4442:	687b      	ldr	r3, [r7, #4]
    4444:	681b      	ldr	r3, [r3, #0]
      if (HasData())
    4446:	4618      	mov	r0, r3
    4448:	f000 f88a 	bl	4560 <sjsu::lpc40xx::Uart::HasData() const>
    444c:	4603      	mov	r3, r0
    444e:	2b00      	cmp	r3, #0
    4450:	d010      	beq.n	4474 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const+0x3a>
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    4452:	687b      	ldr	r3, [r7, #4]
    4454:	681b      	ldr	r3, [r3, #0]
      {
        data[position++] = static_cast<uint8_t>(port_.registers->RBR);
    4456:	685b      	ldr	r3, [r3, #4]
    4458:	681b      	ldr	r3, [r3, #0]
    445a:	781b      	ldrb	r3, [r3, #0]
    445c:	b2dc      	uxtb	r4, r3
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    445e:	687b      	ldr	r3, [r7, #4]
    4460:	685b      	ldr	r3, [r3, #4]
        data[position++] = static_cast<uint8_t>(port_.registers->RBR);
    4462:	6819      	ldr	r1, [r3, #0]
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    4464:	687b      	ldr	r3, [r7, #4]
    4466:	68da      	ldr	r2, [r3, #12]
        data[position++] = static_cast<uint8_t>(port_.registers->RBR);
    4468:	6813      	ldr	r3, [r2, #0]
    446a:	1c58      	adds	r0, r3, #1
    446c:	6010      	str	r0, [r2, #0]
    446e:	440b      	add	r3, r1
    4470:	4622      	mov	r2, r4
    4472:	701a      	strb	r2, [r3, #0]
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    4474:	687b      	ldr	r3, [r7, #4]
    4476:	68db      	ldr	r3, [r3, #12]
      }
      if (position >= size)
    4478:	681a      	ldr	r2, [r3, #0]
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    447a:	687b      	ldr	r3, [r7, #4]
    447c:	689b      	ldr	r3, [r3, #8]
      if (position >= size)
    447e:	429a      	cmp	r2, r3
    4480:	d301      	bcc.n	4486 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const+0x4c>
      {
        return true;
    4482:	2301      	movs	r3, #1
    4484:	e000      	b.n	4488 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const+0x4e>
      }
      return false;
    4486:	2300      	movs	r3, #0
    });
    4488:	4618      	mov	r0, r3
    448a:	370c      	adds	r7, #12
    448c:	46bd      	mov	sp, r7
    448e:	bd90      	pop	{r4, r7, pc}

00004490 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const>:
  Status Read(uint8_t * data,
    4490:	b590      	push	{r4, r7, lr}
    4492:	b09d      	sub	sp, #116	; 0x74
    4494:	af00      	add	r7, sp, #0
    4496:	6178      	str	r0, [r7, #20]
    4498:	6139      	str	r1, [r7, #16]
    449a:	60fa      	str	r2, [r7, #12]
    uint32_t position = 0;
    449c:	2300      	movs	r3, #0
    449e:	63fb      	str	r3, [r7, #60]	; 0x3c
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    44a0:	697b      	ldr	r3, [r7, #20]
    44a2:	643b      	str	r3, [r7, #64]	; 0x40
    44a4:	f107 0310 	add.w	r3, r7, #16
    44a8:	647b      	str	r3, [r7, #68]	; 0x44
    44aa:	68fb      	ldr	r3, [r7, #12]
    44ac:	64bb      	str	r3, [r7, #72]	; 0x48
    44ae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
    44b2:	64fb      	str	r3, [r7, #76]	; 0x4c
    44b4:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
    44b8:	e9c7 3408 	strd	r3, r4, [r7, #32]
    44bc:	f107 042c 	add.w	r4, r7, #44	; 0x2c
    44c0:	f107 0340 	add.w	r3, r7, #64	; 0x40
    44c4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    44c6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (timeout == std::chrono::microseconds::max())
    44ca:	f107 0360 	add.w	r3, r7, #96	; 0x60
    44ce:	4618      	mov	r0, r3
    44d0:	f7fd f88f 	bl	15f2 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>
    44d4:	f107 0260 	add.w	r2, r7, #96	; 0x60
    44d8:	f107 0320 	add.w	r3, r7, #32
    44dc:	4611      	mov	r1, r2
    44de:	4618      	mov	r0, r3
    44e0:	f7fd f89b 	bl	161a <bool std::chrono::operator==<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    44e4:	4603      	mov	r3, r0
    44e6:	2b00      	cmp	r3, #0
    44e8:	d004      	beq.n	44f4 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0x64>
    timeout_time = timeout;
    44ea:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
    44ee:	e9c7 3406 	strd	r3, r4, [r7, #24]
    44f2:	e011      	b.n	4518 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0x88>
    timeout_time = Uptime() + timeout;
    44f4:	4b19      	ldr	r3, [pc, #100]	; (455c <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0xcc>)
    44f6:	681b      	ldr	r3, [r3, #0]
    44f8:	f107 0258 	add.w	r2, r7, #88	; 0x58
    44fc:	4610      	mov	r0, r2
    44fe:	4798      	blx	r3
    4500:	463b      	mov	r3, r7
    4502:	f107 0220 	add.w	r2, r7, #32
    4506:	f107 0158 	add.w	r1, r7, #88	; 0x58
    450a:	4618      	mov	r0, r3
    450c:	f7fd f915 	bl	173a <std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    4510:	e9d7 3400 	ldrd	r3, r4, [r7]
    4514:	e9c7 3406 	strd	r3, r4, [r7, #24]
  Status status = Status::kTimedOut;
    4518:	2301      	movs	r3, #1
    451a:	66fb      	str	r3, [r7, #108]	; 0x6c
  while (Uptime() < timeout_time)
    451c:	4b0f      	ldr	r3, [pc, #60]	; (455c <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0xcc>)
    451e:	681b      	ldr	r3, [r3, #0]
    4520:	f107 0250 	add.w	r2, r7, #80	; 0x50
    4524:	4610      	mov	r0, r2
    4526:	4798      	blx	r3
    4528:	f107 0218 	add.w	r2, r7, #24
    452c:	f107 0350 	add.w	r3, r7, #80	; 0x50
    4530:	4611      	mov	r1, r2
    4532:	4618      	mov	r0, r3
    4534:	f7fd f92e 	bl	1794 <bool std::chrono::operator< <long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    4538:	4603      	mov	r3, r0
    453a:	2b00      	cmp	r3, #0
    453c:	d009      	beq.n	4552 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0xc2>
    if (is_done())
    453e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    4542:	4618      	mov	r0, r3
    4544:	f7ff ff79 	bl	443a <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const>
    4548:	4603      	mov	r3, r0
    454a:	2b00      	cmp	r3, #0
    454c:	d0e6      	beq.n	451c <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0x8c>
      status = Status::kSuccess;
    454e:	2300      	movs	r3, #0
    4550:	66fb      	str	r3, [r7, #108]	; 0x6c
  return status;
    4552:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  }
    4554:	4618      	mov	r0, r3
    4556:	3774      	adds	r7, #116	; 0x74
    4558:	46bd      	mov	sp, r7
    455a:	bd90      	pop	{r4, r7, pc}
    455c:	10000000 	.word	0x10000000

00004560 <sjsu::lpc40xx::Uart::HasData() const>:
  bool HasData() const override
    4560:	b580      	push	{r7, lr}
    4562:	b082      	sub	sp, #8
    4564:	af00      	add	r7, sp, #0
    4566:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(port_.registers->LSR, 0);
    4568:	687b      	ldr	r3, [r7, #4]
    456a:	685b      	ldr	r3, [r3, #4]
    456c:	681b      	ldr	r3, [r3, #0]
    456e:	7d1b      	ldrb	r3, [r3, #20]
    4570:	b2db      	uxtb	r3, r3
    4572:	2100      	movs	r1, #0
    4574:	4618      	mov	r0, r3
    4576:	f000 f93d 	bl	47f4 <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>
    457a:	4603      	mov	r3, r0
  }
    457c:	4618      	mov	r0, r3
    457e:	3708      	adds	r7, #8
    4580:	46bd      	mov	sp, r7
    4582:	bd80      	pop	{r7, pc}

00004584 <sjsu::lpc40xx::Uart::TransmissionComplete() const>:

 private:
  bool TransmissionComplete() const
    4584:	b580      	push	{r7, lr}
    4586:	b082      	sub	sp, #8
    4588:	af00      	add	r7, sp, #0
    458a:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(port_.registers->LSR, 5);
    458c:	687b      	ldr	r3, [r7, #4]
    458e:	685b      	ldr	r3, [r3, #4]
    4590:	681b      	ldr	r3, [r3, #0]
    4592:	7d1b      	ldrb	r3, [r3, #20]
    4594:	b2db      	uxtb	r3, r3
    4596:	2105      	movs	r1, #5
    4598:	4618      	mov	r0, r3
    459a:	f000 f92b 	bl	47f4 <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>
    459e:	4603      	mov	r3, r0
  }
    45a0:	4618      	mov	r0, r3
    45a2:	3708      	adds	r7, #8
    45a4:	46bd      	mov	sp, r7
    45a6:	bd80      	pop	{r7, pc}

000045a8 <(anonymous namespace)::Lpc40xxStdOut(char const*, unsigned int)>:
sjsu::cortex::SystemTimer system_timer(system_controller);
// Cortex NVIC interrupt controller used to setup FreeRTOS ISRs
sjsu::cortex::InterruptController interrupt_controller;

int Lpc40xxStdOut(const char * data, size_t length)
{
    45a8:	b580      	push	{r7, lr}
    45aa:	b082      	sub	sp, #8
    45ac:	af00      	add	r7, sp, #0
    45ae:	6078      	str	r0, [r7, #4]
    45b0:	6039      	str	r1, [r7, #0]
  uart0.Write(reinterpret_cast<const uint8_t *>(data), length);
    45b2:	683a      	ldr	r2, [r7, #0]
    45b4:	6879      	ldr	r1, [r7, #4]
    45b6:	4804      	ldr	r0, [pc, #16]	; (45c8 <(anonymous namespace)::Lpc40xxStdOut(char const*, unsigned int)+0x20>)
    45b8:	f7ff ff18 	bl	43ec <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const>
  return length;
    45bc:	683b      	ldr	r3, [r7, #0]
}
    45be:	4618      	mov	r0, r3
    45c0:	3708      	adds	r7, #8
    45c2:	46bd      	mov	sp, r7
    45c4:	bd80      	pop	{r7, pc}
    45c6:	bf00      	nop
    45c8:	100003e0 	.word	0x100003e0

000045cc <(anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)>:

int Lpc40xxStdIn(char * data, size_t length)
{
    45cc:	b590      	push	{r4, r7, lr}
    45ce:	b087      	sub	sp, #28
    45d0:	af02      	add	r7, sp, #8
    45d2:	6078      	str	r0, [r7, #4]
    45d4:	6039      	str	r1, [r7, #0]
  uart0.Read(reinterpret_cast<uint8_t *>(data), length);
    45d6:	f107 0308 	add.w	r3, r7, #8
    45da:	4618      	mov	r0, r3
    45dc:	f7fd f809 	bl	15f2 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>
    45e0:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    45e4:	e9cd 3400 	strd	r3, r4, [sp]
    45e8:	683a      	ldr	r2, [r7, #0]
    45ea:	6879      	ldr	r1, [r7, #4]
    45ec:	4803      	ldr	r0, [pc, #12]	; (45fc <(anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)+0x30>)
    45ee:	f7ff ff4f 	bl	4490 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const>
  return length;
    45f2:	683b      	ldr	r3, [r7, #0]
}
    45f4:	4618      	mov	r0, r3
    45f6:	3714      	adds	r7, #20
    45f8:	46bd      	mov	sp, r7
    45fa:	bd90      	pop	{r4, r7, pc}
    45fc:	100003e0 	.word	0x100003e0

00004600 <ThreadRuntimeCounter>:
}  // namespace

extern "C" uint32_t ThreadRuntimeCounter()
{
    4600:	b580      	push	{r7, lr}
    4602:	af00      	add	r7, sp, #0
  return arm_dwt_counter.GetCount();
    4604:	4802      	ldr	r0, [pc, #8]	; (4610 <ThreadRuntimeCounter+0x10>)
    4606:	f7fe fd6d 	bl	30e4 <sjsu::cortex::DwtCounter::GetCount()>
    460a:	4603      	mov	r3, r0
}
    460c:	4618      	mov	r0, r3
    460e:	bd80      	pop	{r7, pc}
    4610:	100003dc 	.word	0x100003dc

00004614 <sjsu::InitializePlatform()>:

namespace sjsu
{
SJ2_WEAK(void InitializePlatform());
void InitializePlatform()
{
    4614:	b580      	push	{r7, lr}
    4616:	b082      	sub	sp, #8
    4618:	af00      	add	r7, sp, #0
  // Enable FPU (F.loating P.oint U.nit)
  // System will crash if floating point instruction is executed before
  // Initializing the FPU first.
  sjsu::cortex::InitializeFloatingPointUnit();
    461a:	f7fe fd73 	bl	3104 <sjsu::cortex::InitializeFloatingPointUnit()>
  // Set Clock Speed
  // SetSystemClockFrequency will timeout return the offset between desire
  // clockspeed and actual clockspeed if the PLL doesn't get a frequency fix
  // within a defined timeout (see L1/system_clock.hpp:kDefaultTimeout)
  system_controller.SetSystemClockFrequency(config::kSystemClockRateMhz);
    461e:	4b1e      	ldr	r3, [pc, #120]	; (4698 <sjsu::InitializePlatform()+0x84>)
    4620:	6819      	ldr	r1, [r3, #0]
    4622:	481e      	ldr	r0, [pc, #120]	; (469c <sjsu::InitializePlatform()+0x88>)
    4624:	f7ff f868 	bl	36f8 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
  // Enable Peripheral Clock and set its divider to 1 meaning the clock speed
  // fed to all peripherals will be 48Mhz.
  system_controller.SetPeripheralClockDivider({}, 1);
    4628:	23ff      	movs	r3, #255	; 0xff
    462a:	703b      	strb	r3, [r7, #0]
    462c:	463b      	mov	r3, r7
    462e:	2201      	movs	r2, #1
    4630:	4619      	mov	r1, r3
    4632:	481a      	ldr	r0, [pc, #104]	; (469c <sjsu::InitializePlatform()+0x88>)
    4634:	f7ff f8ae 	bl	3794 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>
  // Set UART0 baudrate, which is required for printf and scanf to work properly
  uart0.Initialize(config::kBaudRate);
    4638:	f44f 4116 	mov.w	r1, #38400	; 0x9600
    463c:	4818      	ldr	r0, [pc, #96]	; (46a0 <sjsu::InitializePlatform()+0x8c>)
    463e:	f7ff fe2f 	bl	42a0 <sjsu::lpc40xx::Uart::Initialize(unsigned long) const>
  sjsu::newlib::SetStdout(Lpc40xxStdOut);
    4642:	4818      	ldr	r0, [pc, #96]	; (46a4 <sjsu::InitializePlatform()+0x90>)
    4644:	f000 fa40 	bl	4ac8 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))>
  sjsu::newlib::SetStdin(Lpc40xxStdIn);
    4648:	4817      	ldr	r0, [pc, #92]	; (46a8 <sjsu::InitializePlatform()+0x94>)
    464a:	f000 fa4d 	bl	4ae8 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))>

  system_timer.SetTickFrequency(config::kRtosFrequency);
    464e:	4b17      	ldr	r3, [pc, #92]	; (46ac <sjsu::InitializePlatform()+0x98>)
    4650:	6819      	ldr	r1, [r3, #0]
    4652:	4817      	ldr	r0, [pc, #92]	; (46b0 <sjsu::InitializePlatform()+0x9c>)
    4654:	f7fe ffc8 	bl	35e8 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
  sjsu::Status timer_start_status = system_timer.StartTimer();
    4658:	4815      	ldr	r0, [pc, #84]	; (46b0 <sjsu::InitializePlatform()+0x9c>)
    465a:	f7fe fee7 	bl	342c <sjsu::cortex::SystemTimer::StartTimer() const>
    465e:	6078      	str	r0, [r7, #4]

  SJ2_ASSERT_FATAL(timer_start_status == sjsu::Status::kSuccess,
    4660:	687b      	ldr	r3, [r7, #4]
    4662:	2b00      	cmp	r3, #0
    4664:	d00d      	beq.n	4682 <sjsu::InitializePlatform()+0x6e>
    4666:	23d6      	movs	r3, #214	; 0xd6
    4668:	4a12      	ldr	r2, [pc, #72]	; (46b4 <sjsu::InitializePlatform()+0xa0>)
    466a:	4913      	ldr	r1, [pc, #76]	; (46b8 <sjsu::InitializePlatform()+0xa4>)
    466c:	4813      	ldr	r0, [pc, #76]	; (46bc <sjsu::InitializePlatform()+0xa8>)
    466e:	f7fe fcfb 	bl	3068 <printf>
    4672:	4813      	ldr	r0, [pc, #76]	; (46c0 <sjsu::InitializePlatform()+0xac>)
    4674:	f7fd fbdc 	bl	1e30 <puts>
    4678:	2100      	movs	r1, #0
    467a:	2001      	movs	r0, #1
    467c:	f7fd f9d4 	bl	1a28 <sjsu::debug::PrintBacktrace(bool, void*)>
    4680:	e7fe      	b.n	4680 <sjsu::InitializePlatform()+0x6c>
                   "System Timer (used by FreeRTOS) has FAILED to start!");

  arm_dwt_counter.Initialize();
    4682:	4810      	ldr	r0, [pc, #64]	; (46c4 <sjsu::InitializePlatform()+0xb0>)
    4684:	f7fe fd0c 	bl	30a0 <sjsu::cortex::DwtCounter::Initialize()>
  sjsu::SetUptimeFunction(sjsu::cortex::SystemTimer::GetCount);
    4688:	480f      	ldr	r0, [pc, #60]	; (46c8 <sjsu::InitializePlatform()+0xb4>)
    468a:	f7fe fe0b 	bl	32a4 <sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())>
}
    468e:	bf00      	nop
    4690:	3708      	adds	r7, #8
    4692:	46bd      	mov	sp, r7
    4694:	bd80      	pop	{r7, pc}
    4696:	bf00      	nop
    4698:	00007484 	.word	0x00007484
    469c:	10000064 	.word	0x10000064
    46a0:	100003e0 	.word	0x100003e0
    46a4:	000045a9 	.word	0x000045a9
    46a8:	000045cd 	.word	0x000045cd
    46ac:	00007488 	.word	0x00007488
    46b0:	100003ec 	.word	0x100003ec
    46b4:	0000773c 	.word	0x0000773c
    46b8:	00007564 	.word	0x00007564
    46bc:	000073b4 	.word	0x000073b4
    46c0:	00007148 	.word	0x00007148
    46c4:	100003dc 	.word	0x100003dc
    46c8:	000033e9 	.word	0x000033e9

000046cc <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)>:
		inline constexpr UnitTypeLhs operator/(const UnitTypeLhs& lhs, T rhs) noexcept
    46cc:	b580      	push	{r7, lr}
    46ce:	b084      	sub	sp, #16
    46d0:	af00      	add	r7, sp, #0
    46d2:	6078      	str	r0, [r7, #4]
    46d4:	6039      	str	r1, [r7, #0]
		return UnitTypeLhs(lhs() / rhs);
    46d6:	687b      	ldr	r3, [r7, #4]
    46d8:	4618      	mov	r0, r3
    46da:	f7fe fef1 	bl	34c0 <units::linear_scale<float>::operator()() const>
    46de:	eef0 6a40 	vmov.f32	s13, s0
    46e2:	683b      	ldr	r3, [r7, #0]
    46e4:	ee07 3a90 	vmov	s15, r3
    46e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
    46ec:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    46f0:	f107 030c 	add.w	r3, r7, #12
    46f4:	eeb0 0a47 	vmov.f32	s0, s14
    46f8:	4618      	mov	r0, r3
    46fa:	f7fe fd84 	bl	3206 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    46fe:	68fb      	ldr	r3, [r7, #12]
	}
    4700:	4618      	mov	r0, r3
    4702:	3710      	adds	r7, #16
    4704:	46bd      	mov	sp, r7
    4706:	bd80      	pop	{r7, pc}

00004708 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
	operator+=(const duration& __d)
    4708:	b5f0      	push	{r4, r5, r6, r7, lr}
    470a:	b083      	sub	sp, #12
    470c:	af00      	add	r7, sp, #0
    470e:	6078      	str	r0, [r7, #4]
    4710:	6039      	str	r1, [r7, #0]
	  __r += __d.count();
    4712:	6838      	ldr	r0, [r7, #0]
    4714:	f7fc fc55 	bl	fc2 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    4718:	460a      	mov	r2, r1
    471a:	4601      	mov	r1, r0
    471c:	687b      	ldr	r3, [r7, #4]
    471e:	e9d3 5600 	ldrd	r5, r6, [r3]
    4722:	186b      	adds	r3, r5, r1
    4724:	eb46 0402 	adc.w	r4, r6, r2
    4728:	687a      	ldr	r2, [r7, #4]
    472a:	e9c2 3400 	strd	r3, r4, [r2]
	  return *this;
    472e:	687b      	ldr	r3, [r7, #4]
	}
    4730:	4618      	mov	r0, r3
    4732:	370c      	adds	r7, #12
    4734:	46bd      	mov	sp, r7
    4736:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004738 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr operator Ty() const noexcept
    4738:	b580      	push	{r7, lr}
    473a:	b084      	sub	sp, #16
    473c:	af00      	add	r7, sp, #0
    473e:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(units::convert<Units, unit<std::ratio<1>, units::category::scalar_unit>>((*this)()));
    4740:	687b      	ldr	r3, [r7, #4]
    4742:	4618      	mov	r0, r3
    4744:	f7fe febc 	bl	34c0 <units::linear_scale<float>::operator()() const>
    4748:	eef0 7a40 	vmov.f32	s15, s0
    474c:	edc7 7a03 	vstr	s15, [r7, #12]
    4750:	f107 030c 	add.w	r3, r7, #12
    4754:	4618      	mov	r0, r3
    4756:	f000 f864 	bl	4822 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    475a:	eef0 7a40 	vmov.f32	s15, s0
    475e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    4762:	ee17 3a90 	vmov	r3, s15
		}
    4766:	4618      	mov	r0, r3
    4768:	3710      	adds	r7, #16
    476a:	46bd      	mov	sp, r7
    476c:	bd80      	pop	{r7, pc}

0000476e <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator>(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    476e:	b580      	push	{r7, lr}
    4770:	ed2d 8b02 	vpush	{d8}
    4774:	b082      	sub	sp, #8
    4776:	af00      	add	r7, sp, #0
    4778:	6078      	str	r0, [r7, #4]
    477a:	6039      	str	r1, [r7, #0]
			return (nls::m_value > units::convert<UnitsRhs, Units>(rhs.m_value));
    477c:	687b      	ldr	r3, [r7, #4]
    477e:	ed93 8a00 	vldr	s16, [r3]
    4782:	683b      	ldr	r3, [r7, #0]
    4784:	4618      	mov	r0, r3
    4786:	f7fe fd1e 	bl	31c6 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    478a:	eef0 7a40 	vmov.f32	s15, s0
    478e:	eeb4 8ae7 	vcmpe.f32	s16, s15
    4792:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    4796:	bfcc      	ite	gt
    4798:	2301      	movgt	r3, #1
    479a:	2300      	movle	r3, #0
    479c:	b2db      	uxtb	r3, r3
		}
    479e:	4618      	mov	r0, r3
    47a0:	3708      	adds	r7, #8
    47a2:	46bd      	mov	sp, r7
    47a4:	ecbd 8b02 	vpop	{d8}
    47a8:	bd80      	pop	{r7, pc}

000047aa <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline unit_t& operator=(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) noexcept
    47aa:	b580      	push	{r7, lr}
    47ac:	b082      	sub	sp, #8
    47ae:	af00      	add	r7, sp, #0
    47b0:	6078      	str	r0, [r7, #4]
    47b2:	6039      	str	r1, [r7, #0]
			nls::m_value = units::convert<UnitsRhs, Units, T>(rhs.m_value);
    47b4:	683b      	ldr	r3, [r7, #0]
    47b6:	4618      	mov	r0, r3
    47b8:	f7fe ff78 	bl	36ac <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    47bc:	eef0 7a40 	vmov.f32	s15, s0
    47c0:	687b      	ldr	r3, [r7, #4]
    47c2:	edc3 7a00 	vstr	s15, [r3]
			return *this;
    47c6:	687b      	ldr	r3, [r7, #4]
		}
    47c8:	4618      	mov	r0, r3
    47ca:	3708      	adds	r7, #8
    47cc:	46bd      	mov	sp, r7
    47ce:	bd80      	pop	{r7, pc}

000047d0 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    47d0:	b580      	push	{r7, lr}
    47d2:	b084      	sub	sp, #16
    47d4:	af00      	add	r7, sp, #0
    47d6:	60f8      	str	r0, [r7, #12]
    47d8:	60b9      	str	r1, [r7, #8]
    47da:	80ba      	strh	r2, [r7, #4]
  return Insert(target, value, bitmask.position, bitmask.width);
    47dc:	793b      	ldrb	r3, [r7, #4]
    47de:	461a      	mov	r2, r3
    47e0:	797b      	ldrb	r3, [r7, #5]
    47e2:	68b9      	ldr	r1, [r7, #8]
    47e4:	68f8      	ldr	r0, [r7, #12]
    47e6:	f000 f82a 	bl	483e <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)>
    47ea:	4603      	mov	r3, r0
}
    47ec:	4618      	mov	r0, r3
    47ee:	3710      	adds	r7, #16
    47f0:	46bd      	mov	sp, r7
    47f2:	bd80      	pop	{r7, pc}

000047f4 <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>:
[[nodiscard]] constexpr bool Read(T target, uint32_t position)
    47f4:	b480      	push	{r7}
    47f6:	b083      	sub	sp, #12
    47f8:	af00      	add	r7, sp, #0
    47fa:	4603      	mov	r3, r0
    47fc:	6039      	str	r1, [r7, #0]
    47fe:	71fb      	strb	r3, [r7, #7]
  return static_cast<bool>(target & (1 << position));
    4800:	79fa      	ldrb	r2, [r7, #7]
    4802:	683b      	ldr	r3, [r7, #0]
    4804:	fa42 f303 	asr.w	r3, r2, r3
    4808:	f003 0301 	and.w	r3, r3, #1
    480c:	2b00      	cmp	r3, #0
    480e:	bf14      	ite	ne
    4810:	2301      	movne	r3, #1
    4812:	2300      	moveq	r3, #0
    4814:	b2db      	uxtb	r3, r3
}
    4816:	4618      	mov	r0, r3
    4818:	370c      	adds	r7, #12
    481a:	46bd      	mov	sp, r7
    481c:	f85d 7b04 	ldr.w	r7, [sp], #4
    4820:	4770      	bx	lr

00004822 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    4822:	b580      	push	{r7, lr}
    4824:	b086      	sub	sp, #24
    4826:	af00      	add	r7, sp, #0
    4828:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    482a:	6878      	ldr	r0, [r7, #4]
    482c:	f000 f833 	bl	4896 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    4830:	eef0 7a40 	vmov.f32	s15, s0
	}
    4834:	eeb0 0a67 	vmov.f32	s0, s15
    4838:	3718      	adds	r7, #24
    483a:	46bd      	mov	sp, r7
    483c:	bd80      	pop	{r7, pc}

0000483e <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    483e:	b480      	push	{r7}
    4840:	b089      	sub	sp, #36	; 0x24
    4842:	af00      	add	r7, sp, #0
    4844:	60f8      	str	r0, [r7, #12]
    4846:	60b9      	str	r1, [r7, #8]
    4848:	607a      	str	r2, [r7, #4]
    484a:	603b      	str	r3, [r7, #0]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    484c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4850:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    4852:	2320      	movs	r3, #32
    4854:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    4856:	683b      	ldr	r3, [r7, #0]
    4858:	f1c3 0320 	rsb	r3, r3, #32
    485c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4860:	fa22 f303 	lsr.w	r3, r2, r3
    4864:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    4866:	697a      	ldr	r2, [r7, #20]
    4868:	687b      	ldr	r3, [r7, #4]
    486a:	fa02 f303 	lsl.w	r3, r2, r3
    486e:	43db      	mvns	r3, r3
    4870:	68fa      	ldr	r2, [r7, #12]
    4872:	4013      	ands	r3, r2
    4874:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    4876:	68ba      	ldr	r2, [r7, #8]
    4878:	697b      	ldr	r3, [r7, #20]
    487a:	401a      	ands	r2, r3
    487c:	687b      	ldr	r3, [r7, #4]
    487e:	fa02 f303 	lsl.w	r3, r2, r3
    4882:	68fa      	ldr	r2, [r7, #12]
    4884:	4313      	orrs	r3, r2
    4886:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    4888:	68fb      	ldr	r3, [r7, #12]
}
    488a:	4618      	mov	r0, r3
    488c:	3724      	adds	r7, #36	; 0x24
    488e:	46bd      	mov	sp, r7
    4890:	f85d 7b04 	ldr.w	r7, [sp], #4
    4894:	4770      	bx	lr

00004896 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
    4896:	b480      	push	{r7}
    4898:	b085      	sub	sp, #20
    489a:	af00      	add	r7, sp, #0
    489c:	60f8      	str	r0, [r7, #12]
    489e:	7239      	strb	r1, [r7, #8]
    48a0:	713a      	strb	r2, [r7, #4]
    48a2:	703b      	strb	r3, [r7, #0]
			return value;
    48a4:	68fb      	ldr	r3, [r7, #12]
    48a6:	681b      	ldr	r3, [r3, #0]
    48a8:	ee07 3a90 	vmov	s15, r3
		}
    48ac:	eeb0 0a67 	vmov.f32	s0, s15
    48b0:	3714      	adds	r7, #20
    48b2:	46bd      	mov	sp, r7
    48b4:	f85d 7b04 	ldr.w	r7, [sp], #4
    48b8:	4770      	bx	lr
    48ba:	Address 0x00000000000048ba is out of bounds.


000048bc <__static_initialization_and_destruction_0(int, int)>:
}  // namespace sjsu
    48bc:	b580      	push	{r7, lr}
    48be:	b082      	sub	sp, #8
    48c0:	af00      	add	r7, sp, #0
    48c2:	6078      	str	r0, [r7, #4]
    48c4:	6039      	str	r1, [r7, #0]
    48c6:	687b      	ldr	r3, [r7, #4]
    48c8:	2b01      	cmp	r3, #1
    48ca:	d15a      	bne.n	4982 <__static_initialization_and_destruction_0(int, int)+0xc6>
    48cc:	683b      	ldr	r3, [r7, #0]
    48ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
    48d2:	4293      	cmp	r3, r2
    48d4:	d155      	bne.n	4982 <__static_initialization_and_destruction_0(int, int)+0xc6>
  inline static VectorTable_t table = VectorTable_t::GenerateDefaultTable();
    48d6:	4b2d      	ldr	r3, [pc, #180]	; (498c <__static_initialization_and_destruction_0(int, int)+0xd0>)
    48d8:	681b      	ldr	r3, [r3, #0]
    48da:	f003 0301 	and.w	r3, r3, #1
    48de:	2b00      	cmp	r3, #0
    48e0:	d106      	bne.n	48f0 <__static_initialization_and_destruction_0(int, int)+0x34>
    48e2:	4b2a      	ldr	r3, [pc, #168]	; (498c <__static_initialization_and_destruction_0(int, int)+0xd0>)
    48e4:	2201      	movs	r2, #1
    48e6:	601a      	str	r2, [r3, #0]
    48e8:	4b29      	ldr	r3, [pc, #164]	; (4990 <__static_initialization_and_destruction_0(int, int)+0xd4>)
    48ea:	4618      	mov	r0, r3
    48ec:	f7fb ff78 	bl	7e0 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>
  inline static LPC_SC_TypeDef * system_controller = LPC_SC;
    48f0:	4b28      	ldr	r3, [pc, #160]	; (4994 <__static_initialization_and_destruction_0(int, int)+0xd8>)
    48f2:	681b      	ldr	r3, [r3, #0]
    48f4:	f003 0301 	and.w	r3, r3, #1
    48f8:	2b00      	cmp	r3, #0
    48fa:	d105      	bne.n	4908 <__static_initialization_and_destruction_0(int, int)+0x4c>
    48fc:	4b25      	ldr	r3, [pc, #148]	; (4994 <__static_initialization_and_destruction_0(int, int)+0xd8>)
    48fe:	2201      	movs	r2, #1
    4900:	601a      	str	r2, [r3, #0]
    4902:	4a25      	ldr	r2, [pc, #148]	; (4998 <__static_initialization_and_destruction_0(int, int)+0xdc>)
    4904:	4b25      	ldr	r3, [pc, #148]	; (499c <__static_initialization_and_destruction_0(int, int)+0xe0>)
    4906:	601a      	str	r2, [r3, #0]
    4908:	4b25      	ldr	r3, [pc, #148]	; (49a0 <__static_initialization_and_destruction_0(int, int)+0xe4>)
    490a:	681b      	ldr	r3, [r3, #0]
    490c:	f003 0301 	and.w	r3, r3, #1
    4910:	2b00      	cmp	r3, #0
    4912:	d105      	bne.n	4920 <__static_initialization_and_destruction_0(int, int)+0x64>
    4914:	4b22      	ldr	r3, [pc, #136]	; (49a0 <__static_initialization_and_destruction_0(int, int)+0xe4>)
    4916:	2201      	movs	r2, #1
    4918:	601a      	str	r2, [r3, #0]
    491a:	4a22      	ldr	r2, [pc, #136]	; (49a4 <__static_initialization_and_destruction_0(int, int)+0xe8>)
    491c:	4b22      	ldr	r3, [pc, #136]	; (49a8 <__static_initialization_and_destruction_0(int, int)+0xec>)
    491e:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart2 = {
    4920:	4b22      	ldr	r3, [pc, #136]	; (49ac <__static_initialization_and_destruction_0(int, int)+0xf0>)
    4922:	681b      	ldr	r3, [r3, #0]
    4924:	f003 0301 	and.w	r3, r3, #1
    4928:	2b00      	cmp	r3, #0
    492a:	d105      	bne.n	4938 <__static_initialization_and_destruction_0(int, int)+0x7c>
    492c:	4b1f      	ldr	r3, [pc, #124]	; (49ac <__static_initialization_and_destruction_0(int, int)+0xf0>)
    492e:	2201      	movs	r2, #1
    4930:	601a      	str	r2, [r3, #0]
    };
    4932:	4a1f      	ldr	r2, [pc, #124]	; (49b0 <__static_initialization_and_destruction_0(int, int)+0xf4>)
    4934:	4b1f      	ldr	r3, [pc, #124]	; (49b4 <__static_initialization_and_destruction_0(int, int)+0xf8>)
    4936:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart3 = {
    4938:	4b1f      	ldr	r3, [pc, #124]	; (49b8 <__static_initialization_and_destruction_0(int, int)+0xfc>)
    493a:	681b      	ldr	r3, [r3, #0]
    493c:	f003 0301 	and.w	r3, r3, #1
    4940:	2b00      	cmp	r3, #0
    4942:	d105      	bne.n	4950 <__static_initialization_and_destruction_0(int, int)+0x94>
    4944:	4b1c      	ldr	r3, [pc, #112]	; (49b8 <__static_initialization_and_destruction_0(int, int)+0xfc>)
    4946:	2201      	movs	r2, #1
    4948:	601a      	str	r2, [r3, #0]
    };
    494a:	4a1c      	ldr	r2, [pc, #112]	; (49bc <__static_initialization_and_destruction_0(int, int)+0x100>)
    494c:	4b1c      	ldr	r3, [pc, #112]	; (49c0 <__static_initialization_and_destruction_0(int, int)+0x104>)
    494e:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart4 = {
    4950:	4b1c      	ldr	r3, [pc, #112]	; (49c4 <__static_initialization_and_destruction_0(int, int)+0x108>)
    4952:	681b      	ldr	r3, [r3, #0]
    4954:	f003 0301 	and.w	r3, r3, #1
    4958:	2b00      	cmp	r3, #0
    495a:	d105      	bne.n	4968 <__static_initialization_and_destruction_0(int, int)+0xac>
    495c:	4b19      	ldr	r3, [pc, #100]	; (49c4 <__static_initialization_and_destruction_0(int, int)+0x108>)
    495e:	2201      	movs	r2, #1
    4960:	601a      	str	r2, [r3, #0]
    };
    4962:	4a19      	ldr	r2, [pc, #100]	; (49c8 <__static_initialization_and_destruction_0(int, int)+0x10c>)
    4964:	4b19      	ldr	r3, [pc, #100]	; (49cc <__static_initialization_and_destruction_0(int, int)+0x110>)
    4966:	601a      	str	r2, [r3, #0]
                              DefaultSystemController())
    4968:	f7ff fa6c 	bl	3e44 <sjsu::lpc40xx::DefaultSystemController()>
    496c:	4603      	mov	r3, r0
sjsu::lpc40xx::Uart uart0(sjsu::lpc40xx::Uart::Port::kUart0);
    496e:	461a      	mov	r2, r3
    4970:	4917      	ldr	r1, [pc, #92]	; (49d0 <__static_initialization_and_destruction_0(int, int)+0x114>)
    4972:	4818      	ldr	r0, [pc, #96]	; (49d4 <__static_initialization_and_destruction_0(int, int)+0x118>)
    4974:	f7ff fc7a 	bl	426c <sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)>
sjsu::cortex::SystemTimer system_timer(system_controller);
    4978:	4a17      	ldr	r2, [pc, #92]	; (49d8 <__static_initialization_and_destruction_0(int, int)+0x11c>)
    497a:	4918      	ldr	r1, [pc, #96]	; (49dc <__static_initialization_and_destruction_0(int, int)+0x120>)
    497c:	4818      	ldr	r0, [pc, #96]	; (49e0 <__static_initialization_and_destruction_0(int, int)+0x124>)
    497e:	f7fe fcf5 	bl	336c <sjsu::cortex::SystemTimer::SystemTimer(sjsu::SystemController const&, sjsu::InterruptController const&)>
}  // namespace sjsu
    4982:	bf00      	nop
    4984:	3708      	adds	r7, #8
    4986:	46bd      	mov	sp, r7
    4988:	bd80      	pop	{r7, pc}
    498a:	bf00      	nop
    498c:	10000340 	.word	0x10000340
    4990:	100000f8 	.word	0x100000f8
    4994:	100003f8 	.word	0x100003f8
    4998:	400fc000 	.word	0x400fc000
    499c:	100003d8 	.word	0x100003d8
    49a0:	1000033c 	.word	0x1000033c
    49a4:	4002c000 	.word	0x4002c000
    49a8:	100000ec 	.word	0x100000ec
    49ac:	100003fc 	.word	0x100003fc
    49b0:	40098000 	.word	0x40098000
    49b4:	10000028 	.word	0x10000028
    49b8:	10000400 	.word	0x10000400
    49bc:	4009c000 	.word	0x4009c000
    49c0:	1000003c 	.word	0x1000003c
    49c4:	10000404 	.word	0x10000404
    49c8:	400a4000 	.word	0x400a4000
    49cc:	10000050 	.word	0x10000050
    49d0:	00007550 	.word	0x00007550
    49d4:	100003e0 	.word	0x100003e0
    49d8:	0000748c 	.word	0x0000748c
    49dc:	10000064 	.word	0x10000064
    49e0:	100003ec 	.word	0x100003ec

000049e4 <_GLOBAL__sub_I_ThreadRuntimeCounter>:
    49e4:	b580      	push	{r7, lr}
    49e6:	af00      	add	r7, sp, #0
    49e8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    49ec:	2001      	movs	r0, #1
    49ee:	f7ff ff65 	bl	48bc <__static_initialization_and_destruction_0(int, int)>
    49f2:	bd80      	pop	{r7, pc}
    49f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    49f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    49fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

00004a00 <vPortSVCHandler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    4a00:	4b07      	ldr	r3, [pc, #28]	; (4a20 <pxCurrentTCBConst2>)
    4a02:	6819      	ldr	r1, [r3, #0]
    4a04:	6808      	ldr	r0, [r1, #0]
    4a06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4a0a:	f380 8809 	msr	PSP, r0
    4a0e:	f3bf 8f6f 	isb	sy
    4a12:	f04f 0000 	mov.w	r0, #0
    4a16:	f380 8811 	msr	BASEPRI, r0
    4a1a:	4770      	bx	lr
    4a1c:	f3af 8000 	nop.w

00004a20 <pxCurrentTCBConst2>:
    4a20:	10000350 	.word	0x10000350
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
    4a24:	bf00      	nop
    4a26:	bf00      	nop
    4a28:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    4a2c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

00004a30 <xPortPendSVHandler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    4a30:	f3ef 8009 	mrs	r0, PSP
    4a34:	f3bf 8f6f 	isb	sy
    4a38:	4b15      	ldr	r3, [pc, #84]	; (4a90 <pxCurrentTCBConst>)
    4a3a:	681a      	ldr	r2, [r3, #0]
    4a3c:	f01e 0f10 	tst.w	lr, #16
    4a40:	bf08      	it	eq
    4a42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    4a46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4a4a:	6010      	str	r0, [r2, #0]
    4a4c:	e92d 0009 	stmdb	sp!, {r0, r3}
    4a50:	f04f 0028 	mov.w	r0, #40	; 0x28
    4a54:	f380 8811 	msr	BASEPRI, r0
    4a58:	f3bf 8f4f 	dsb	sy
    4a5c:	f3bf 8f6f 	isb	sy
    4a60:	f7fd f968 	bl	1d34 <vTaskSwitchContext>
    4a64:	f04f 0000 	mov.w	r0, #0
    4a68:	f380 8811 	msr	BASEPRI, r0
    4a6c:	bc09      	pop	{r0, r3}
    4a6e:	6819      	ldr	r1, [r3, #0]
    4a70:	6808      	ldr	r0, [r1, #0]
    4a72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4a76:	f01e 0f10 	tst.w	lr, #16
    4a7a:	bf08      	it	eq
    4a7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    4a80:	f380 8809 	msr	PSP, r0
    4a84:	f3bf 8f6f 	isb	sy
    4a88:	4770      	bx	lr
    4a8a:	bf00      	nop
    4a8c:	f3af 8000 	nop.w

00004a90 <pxCurrentTCBConst>:
    4a90:	10000350 	.word	0x10000350
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
    4a94:	bf00      	nop
    4a96:	bf00      	nop

00004a98 <sjsu::newlib::DoNothingStdOut(char const*, unsigned int)>:
namespace sjsu
{
namespace newlib
{
int DoNothingStdOut(const char *, size_t)
{
    4a98:	b480      	push	{r7}
    4a9a:	b083      	sub	sp, #12
    4a9c:	af00      	add	r7, sp, #0
    4a9e:	6078      	str	r0, [r7, #4]
    4aa0:	6039      	str	r1, [r7, #0]
  return 1;
    4aa2:	2301      	movs	r3, #1
}
    4aa4:	4618      	mov	r0, r3
    4aa6:	370c      	adds	r7, #12
    4aa8:	46bd      	mov	sp, r7
    4aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
    4aae:	4770      	bx	lr

00004ab0 <sjsu::newlib::DoNothingStdIn(char*, unsigned int)>:
int DoNothingStdIn(char *, size_t)
{
    4ab0:	b480      	push	{r7}
    4ab2:	b083      	sub	sp, #12
    4ab4:	af00      	add	r7, sp, #0
    4ab6:	6078      	str	r0, [r7, #4]
    4ab8:	6039      	str	r1, [r7, #0]
  return 0;
    4aba:	2300      	movs	r3, #0
}
    4abc:	4618      	mov	r0, r3
    4abe:	370c      	adds	r7, #12
    4ac0:	46bd      	mov	sp, r7
    4ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ac6:	4770      	bx	lr

00004ac8 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))>:
void SetStdout(Stdout stdout_handler)
{
    4ac8:	b480      	push	{r7}
    4aca:	b083      	sub	sp, #12
    4acc:	af00      	add	r7, sp, #0
    4ace:	6078      	str	r0, [r7, #4]
  out = stdout_handler;
    4ad0:	4a04      	ldr	r2, [pc, #16]	; (4ae4 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))+0x1c>)
    4ad2:	687b      	ldr	r3, [r7, #4]
    4ad4:	6013      	str	r3, [r2, #0]
}
    4ad6:	bf00      	nop
    4ad8:	370c      	adds	r7, #12
    4ada:	46bd      	mov	sp, r7
    4adc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4ae0:	4770      	bx	lr
    4ae2:	bf00      	nop
    4ae4:	10000008 	.word	0x10000008

00004ae8 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))>:
void SetStdin(Stdin stdin_handler)
{
    4ae8:	b480      	push	{r7}
    4aea:	b083      	sub	sp, #12
    4aec:	af00      	add	r7, sp, #0
    4aee:	6078      	str	r0, [r7, #4]
  in = stdin_handler;
    4af0:	4a04      	ldr	r2, [pc, #16]	; (4b04 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))+0x1c>)
    4af2:	687b      	ldr	r3, [r7, #4]
    4af4:	6013      	str	r3, [r2, #0]
}
    4af6:	bf00      	nop
    4af8:	370c      	adds	r7, #12
    4afa:	46bd      	mov	sp, r7
    4afc:	f85d 7b04 	ldr.w	r7, [sp], #4
    4b00:	4770      	bx	lr
    4b02:	bf00      	nop
    4b04:	1000000c 	.word	0x1000000c

00004b08 <_putchar>:
}  // namespace newlib
}  // namespace sjsu

// Needed by third party "printf" library
extern "C" void _putchar(char character)  // NOLINT
{
    4b08:	b580      	push	{r7, lr}
    4b0a:	b082      	sub	sp, #8
    4b0c:	af00      	add	r7, sp, #0
    4b0e:	4603      	mov	r3, r0
    4b10:	71fb      	strb	r3, [r7, #7]
  sjsu::newlib::out(&character, 1);
    4b12:	4b05      	ldr	r3, [pc, #20]	; (4b28 <_putchar+0x20>)
    4b14:	681b      	ldr	r3, [r3, #0]
    4b16:	1dfa      	adds	r2, r7, #7
    4b18:	2101      	movs	r1, #1
    4b1a:	4610      	mov	r0, r2
    4b1c:	4798      	blx	r3
}
    4b1e:	bf00      	nop
    4b20:	3708      	adds	r7, #8
    4b22:	46bd      	mov	sp, r7
    4b24:	bd80      	pop	{r7, pc}
    4b26:	bf00      	nop
    4b28:	10000008 	.word	0x10000008

00004b2c <__cxa_pure_virtual>:
    4b2c:	b508      	push	{r3, lr}
    4b2e:	f000 f80d 	bl	4b4c <std::terminate()>

00004b32 <__cxxabiv1::__terminate(void (*)())>:
    4b32:	b508      	push	{r3, lr}
    4b34:	4780      	blx	r0
    4b36:	f001 fa73 	bl	6020 <abort>
    4b3a:	Address 0x0000000000004b3a is out of bounds.


00004b3c <std::get_terminate()>:
    4b3c:	4b02      	ldr	r3, [pc, #8]	; (4b48 <std::get_terminate()+0xc>)
    4b3e:	6818      	ldr	r0, [r3, #0]
    4b40:	f3bf 8f5b 	dmb	ish
    4b44:	4770      	bx	lr
    4b46:	bf00      	nop
    4b48:	10000068 	.word	0x10000068

00004b4c <std::terminate()>:
    4b4c:	b508      	push	{r3, lr}
    4b4e:	f7ff fff5 	bl	4b3c <std::get_terminate()>
    4b52:	f7ff ffee 	bl	4b32 <__cxxabiv1::__terminate(void (*)())>
    4b56:	Address 0x0000000000004b56 is out of bounds.


00004b58 <__aeabi_d2f>:
    4b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
    4b5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    4b60:	bf24      	itt	cs
    4b62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    4b66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    4b6a:	d90d      	bls.n	4b88 <__aeabi_d2f+0x30>
    4b6c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    4b70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    4b74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    4b78:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    4b7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    4b80:	bf08      	it	eq
    4b82:	f020 0001 	biceq.w	r0, r0, #1
    4b86:	4770      	bx	lr
    4b88:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    4b8c:	d121      	bne.n	4bd2 <__aeabi_d2f+0x7a>
    4b8e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    4b92:	bfbc      	itt	lt
    4b94:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    4b98:	4770      	bxlt	lr
    4b9a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    4b9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
    4ba2:	f1c2 0218 	rsb	r2, r2, #24
    4ba6:	f1c2 0c20 	rsb	ip, r2, #32
    4baa:	fa10 f30c 	lsls.w	r3, r0, ip
    4bae:	fa20 f002 	lsr.w	r0, r0, r2
    4bb2:	bf18      	it	ne
    4bb4:	f040 0001 	orrne.w	r0, r0, #1
    4bb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    4bbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    4bc0:	fa03 fc0c 	lsl.w	ip, r3, ip
    4bc4:	ea40 000c 	orr.w	r0, r0, ip
    4bc8:	fa23 f302 	lsr.w	r3, r3, r2
    4bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
    4bd0:	e7cc      	b.n	4b6c <__aeabi_d2f+0x14>
    4bd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
    4bd6:	d107      	bne.n	4be8 <__aeabi_d2f+0x90>
    4bd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    4bdc:	bf1e      	ittt	ne
    4bde:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    4be2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    4be6:	4770      	bxne	lr
    4be8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    4bec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    4bf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    4bf4:	4770      	bx	lr
    4bf6:	bf00      	nop

00004bf8 <__aeabi_frsub>:
    4bf8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    4bfc:	e002      	b.n	4c04 <__addsf3>
    4bfe:	bf00      	nop

00004c00 <__aeabi_fsub>:
    4c00:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00004c04 <__addsf3>:
    4c04:	0042      	lsls	r2, r0, #1
    4c06:	bf1f      	itttt	ne
    4c08:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    4c0c:	ea92 0f03 	teqne	r2, r3
    4c10:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    4c14:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    4c18:	d06a      	beq.n	4cf0 <__addsf3+0xec>
    4c1a:	ea4f 6212 	mov.w	r2, r2, lsr #24
    4c1e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    4c22:	bfc1      	itttt	gt
    4c24:	18d2      	addgt	r2, r2, r3
    4c26:	4041      	eorgt	r1, r0
    4c28:	4048      	eorgt	r0, r1
    4c2a:	4041      	eorgt	r1, r0
    4c2c:	bfb8      	it	lt
    4c2e:	425b      	neglt	r3, r3
    4c30:	2b19      	cmp	r3, #25
    4c32:	bf88      	it	hi
    4c34:	4770      	bxhi	lr
    4c36:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    4c3a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    4c3e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    4c42:	bf18      	it	ne
    4c44:	4240      	negne	r0, r0
    4c46:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    4c4a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    4c4e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    4c52:	bf18      	it	ne
    4c54:	4249      	negne	r1, r1
    4c56:	ea92 0f03 	teq	r2, r3
    4c5a:	d03f      	beq.n	4cdc <__addsf3+0xd8>
    4c5c:	f1a2 0201 	sub.w	r2, r2, #1
    4c60:	fa41 fc03 	asr.w	ip, r1, r3
    4c64:	eb10 000c 	adds.w	r0, r0, ip
    4c68:	f1c3 0320 	rsb	r3, r3, #32
    4c6c:	fa01 f103 	lsl.w	r1, r1, r3
    4c70:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    4c74:	d502      	bpl.n	4c7c <__addsf3+0x78>
    4c76:	4249      	negs	r1, r1
    4c78:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    4c7c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4c80:	d313      	bcc.n	4caa <__addsf3+0xa6>
    4c82:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    4c86:	d306      	bcc.n	4c96 <__addsf3+0x92>
    4c88:	0840      	lsrs	r0, r0, #1
    4c8a:	ea4f 0131 	mov.w	r1, r1, rrx
    4c8e:	f102 0201 	add.w	r2, r2, #1
    4c92:	2afe      	cmp	r2, #254	; 0xfe
    4c94:	d251      	bcs.n	4d3a <__addsf3+0x136>
    4c96:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    4c9a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    4c9e:	bf08      	it	eq
    4ca0:	f020 0001 	biceq.w	r0, r0, #1
    4ca4:	ea40 0003 	orr.w	r0, r0, r3
    4ca8:	4770      	bx	lr
    4caa:	0049      	lsls	r1, r1, #1
    4cac:	eb40 0000 	adc.w	r0, r0, r0
    4cb0:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    4cb4:	f1a2 0201 	sub.w	r2, r2, #1
    4cb8:	d1ed      	bne.n	4c96 <__addsf3+0x92>
    4cba:	fab0 fc80 	clz	ip, r0
    4cbe:	f1ac 0c08 	sub.w	ip, ip, #8
    4cc2:	ebb2 020c 	subs.w	r2, r2, ip
    4cc6:	fa00 f00c 	lsl.w	r0, r0, ip
    4cca:	bfaa      	itet	ge
    4ccc:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    4cd0:	4252      	neglt	r2, r2
    4cd2:	4318      	orrge	r0, r3
    4cd4:	bfbc      	itt	lt
    4cd6:	40d0      	lsrlt	r0, r2
    4cd8:	4318      	orrlt	r0, r3
    4cda:	4770      	bx	lr
    4cdc:	f092 0f00 	teq	r2, #0
    4ce0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    4ce4:	bf06      	itte	eq
    4ce6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    4cea:	3201      	addeq	r2, #1
    4cec:	3b01      	subne	r3, #1
    4cee:	e7b5      	b.n	4c5c <__addsf3+0x58>
    4cf0:	ea4f 0341 	mov.w	r3, r1, lsl #1
    4cf4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    4cf8:	bf18      	it	ne
    4cfa:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    4cfe:	d021      	beq.n	4d44 <__addsf3+0x140>
    4d00:	ea92 0f03 	teq	r2, r3
    4d04:	d004      	beq.n	4d10 <__addsf3+0x10c>
    4d06:	f092 0f00 	teq	r2, #0
    4d0a:	bf08      	it	eq
    4d0c:	4608      	moveq	r0, r1
    4d0e:	4770      	bx	lr
    4d10:	ea90 0f01 	teq	r0, r1
    4d14:	bf1c      	itt	ne
    4d16:	2000      	movne	r0, #0
    4d18:	4770      	bxne	lr
    4d1a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    4d1e:	d104      	bne.n	4d2a <__addsf3+0x126>
    4d20:	0040      	lsls	r0, r0, #1
    4d22:	bf28      	it	cs
    4d24:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    4d28:	4770      	bx	lr
    4d2a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    4d2e:	bf3c      	itt	cc
    4d30:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    4d34:	4770      	bxcc	lr
    4d36:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    4d3a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    4d3e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    4d42:	4770      	bx	lr
    4d44:	ea7f 6222 	mvns.w	r2, r2, asr #24
    4d48:	bf16      	itet	ne
    4d4a:	4608      	movne	r0, r1
    4d4c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    4d50:	4601      	movne	r1, r0
    4d52:	0242      	lsls	r2, r0, #9
    4d54:	bf06      	itte	eq
    4d56:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    4d5a:	ea90 0f01 	teqeq	r0, r1
    4d5e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    4d62:	4770      	bx	lr

00004d64 <__aeabi_ui2f>:
    4d64:	f04f 0300 	mov.w	r3, #0
    4d68:	e004      	b.n	4d74 <__aeabi_i2f+0x8>
    4d6a:	bf00      	nop

00004d6c <__aeabi_i2f>:
    4d6c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    4d70:	bf48      	it	mi
    4d72:	4240      	negmi	r0, r0
    4d74:	ea5f 0c00 	movs.w	ip, r0
    4d78:	bf08      	it	eq
    4d7a:	4770      	bxeq	lr
    4d7c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    4d80:	4601      	mov	r1, r0
    4d82:	f04f 0000 	mov.w	r0, #0
    4d86:	e01c      	b.n	4dc2 <__aeabi_l2f+0x2a>

00004d88 <__aeabi_ul2f>:
    4d88:	ea50 0201 	orrs.w	r2, r0, r1
    4d8c:	bf08      	it	eq
    4d8e:	4770      	bxeq	lr
    4d90:	f04f 0300 	mov.w	r3, #0
    4d94:	e00a      	b.n	4dac <__aeabi_l2f+0x14>
    4d96:	bf00      	nop

00004d98 <__aeabi_l2f>:
    4d98:	ea50 0201 	orrs.w	r2, r0, r1
    4d9c:	bf08      	it	eq
    4d9e:	4770      	bxeq	lr
    4da0:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    4da4:	d502      	bpl.n	4dac <__aeabi_l2f+0x14>
    4da6:	4240      	negs	r0, r0
    4da8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    4dac:	ea5f 0c01 	movs.w	ip, r1
    4db0:	bf02      	ittt	eq
    4db2:	4684      	moveq	ip, r0
    4db4:	4601      	moveq	r1, r0
    4db6:	2000      	moveq	r0, #0
    4db8:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    4dbc:	bf08      	it	eq
    4dbe:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    4dc2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    4dc6:	fabc f28c 	clz	r2, ip
    4dca:	3a08      	subs	r2, #8
    4dcc:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    4dd0:	db10      	blt.n	4df4 <__aeabi_l2f+0x5c>
    4dd2:	fa01 fc02 	lsl.w	ip, r1, r2
    4dd6:	4463      	add	r3, ip
    4dd8:	fa00 fc02 	lsl.w	ip, r0, r2
    4ddc:	f1c2 0220 	rsb	r2, r2, #32
    4de0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    4de4:	fa20 f202 	lsr.w	r2, r0, r2
    4de8:	eb43 0002 	adc.w	r0, r3, r2
    4dec:	bf08      	it	eq
    4dee:	f020 0001 	biceq.w	r0, r0, #1
    4df2:	4770      	bx	lr
    4df4:	f102 0220 	add.w	r2, r2, #32
    4df8:	fa01 fc02 	lsl.w	ip, r1, r2
    4dfc:	f1c2 0220 	rsb	r2, r2, #32
    4e00:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    4e04:	fa21 f202 	lsr.w	r2, r1, r2
    4e08:	eb43 0002 	adc.w	r0, r3, r2
    4e0c:	bf08      	it	eq
    4e0e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    4e12:	4770      	bx	lr

00004e14 <__aeabi_uldivmod>:
    4e14:	b953      	cbnz	r3, 4e2c <__aeabi_uldivmod+0x18>
    4e16:	b94a      	cbnz	r2, 4e2c <__aeabi_uldivmod+0x18>
    4e18:	2900      	cmp	r1, #0
    4e1a:	bf08      	it	eq
    4e1c:	2800      	cmpeq	r0, #0
    4e1e:	bf1c      	itt	ne
    4e20:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    4e24:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    4e28:	f001 b8f8 	b.w	601c <__aeabi_idiv0>
    4e2c:	f1ad 0c08 	sub.w	ip, sp, #8
    4e30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    4e34:	f000 f806 	bl	4e44 <__udivmoddi4>
    4e38:	f8dd e004 	ldr.w	lr, [sp, #4]
    4e3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    4e40:	b004      	add	sp, #16
    4e42:	4770      	bx	lr

00004e44 <__udivmoddi4>:
    4e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4e48:	9e08      	ldr	r6, [sp, #32]
    4e4a:	4604      	mov	r4, r0
    4e4c:	4688      	mov	r8, r1
    4e4e:	2b00      	cmp	r3, #0
    4e50:	d14b      	bne.n	4eea <__udivmoddi4+0xa6>
    4e52:	428a      	cmp	r2, r1
    4e54:	4615      	mov	r5, r2
    4e56:	d967      	bls.n	4f28 <__udivmoddi4+0xe4>
    4e58:	fab2 f282 	clz	r2, r2
    4e5c:	b14a      	cbz	r2, 4e72 <__udivmoddi4+0x2e>
    4e5e:	f1c2 0720 	rsb	r7, r2, #32
    4e62:	fa01 f302 	lsl.w	r3, r1, r2
    4e66:	fa20 f707 	lsr.w	r7, r0, r7
    4e6a:	4095      	lsls	r5, r2
    4e6c:	ea47 0803 	orr.w	r8, r7, r3
    4e70:	4094      	lsls	r4, r2
    4e72:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    4e76:	0c23      	lsrs	r3, r4, #16
    4e78:	fbb8 f7fe 	udiv	r7, r8, lr
    4e7c:	fa1f fc85 	uxth.w	ip, r5
    4e80:	fb0e 8817 	mls	r8, lr, r7, r8
    4e84:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    4e88:	fb07 f10c 	mul.w	r1, r7, ip
    4e8c:	4299      	cmp	r1, r3
    4e8e:	d909      	bls.n	4ea4 <__udivmoddi4+0x60>
    4e90:	18eb      	adds	r3, r5, r3
    4e92:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
    4e96:	f080 811b 	bcs.w	50d0 <__udivmoddi4+0x28c>
    4e9a:	4299      	cmp	r1, r3
    4e9c:	f240 8118 	bls.w	50d0 <__udivmoddi4+0x28c>
    4ea0:	3f02      	subs	r7, #2
    4ea2:	442b      	add	r3, r5
    4ea4:	1a5b      	subs	r3, r3, r1
    4ea6:	b2a4      	uxth	r4, r4
    4ea8:	fbb3 f0fe 	udiv	r0, r3, lr
    4eac:	fb0e 3310 	mls	r3, lr, r0, r3
    4eb0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    4eb4:	fb00 fc0c 	mul.w	ip, r0, ip
    4eb8:	45a4      	cmp	ip, r4
    4eba:	d909      	bls.n	4ed0 <__udivmoddi4+0x8c>
    4ebc:	192c      	adds	r4, r5, r4
    4ebe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    4ec2:	f080 8107 	bcs.w	50d4 <__udivmoddi4+0x290>
    4ec6:	45a4      	cmp	ip, r4
    4ec8:	f240 8104 	bls.w	50d4 <__udivmoddi4+0x290>
    4ecc:	3802      	subs	r0, #2
    4ece:	442c      	add	r4, r5
    4ed0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
    4ed4:	eba4 040c 	sub.w	r4, r4, ip
    4ed8:	2700      	movs	r7, #0
    4eda:	b11e      	cbz	r6, 4ee4 <__udivmoddi4+0xa0>
    4edc:	40d4      	lsrs	r4, r2
    4ede:	2300      	movs	r3, #0
    4ee0:	e9c6 4300 	strd	r4, r3, [r6]
    4ee4:	4639      	mov	r1, r7
    4ee6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4eea:	428b      	cmp	r3, r1
    4eec:	d909      	bls.n	4f02 <__udivmoddi4+0xbe>
    4eee:	2e00      	cmp	r6, #0
    4ef0:	f000 80eb 	beq.w	50ca <__udivmoddi4+0x286>
    4ef4:	2700      	movs	r7, #0
    4ef6:	e9c6 0100 	strd	r0, r1, [r6]
    4efa:	4638      	mov	r0, r7
    4efc:	4639      	mov	r1, r7
    4efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4f02:	fab3 f783 	clz	r7, r3
    4f06:	2f00      	cmp	r7, #0
    4f08:	d147      	bne.n	4f9a <__udivmoddi4+0x156>
    4f0a:	428b      	cmp	r3, r1
    4f0c:	d302      	bcc.n	4f14 <__udivmoddi4+0xd0>
    4f0e:	4282      	cmp	r2, r0
    4f10:	f200 80fa 	bhi.w	5108 <__udivmoddi4+0x2c4>
    4f14:	1a84      	subs	r4, r0, r2
    4f16:	eb61 0303 	sbc.w	r3, r1, r3
    4f1a:	2001      	movs	r0, #1
    4f1c:	4698      	mov	r8, r3
    4f1e:	2e00      	cmp	r6, #0
    4f20:	d0e0      	beq.n	4ee4 <__udivmoddi4+0xa0>
    4f22:	e9c6 4800 	strd	r4, r8, [r6]
    4f26:	e7dd      	b.n	4ee4 <__udivmoddi4+0xa0>
    4f28:	b902      	cbnz	r2, 4f2c <__udivmoddi4+0xe8>
    4f2a:	deff      	udf	#255	; 0xff
    4f2c:	fab2 f282 	clz	r2, r2
    4f30:	2a00      	cmp	r2, #0
    4f32:	f040 808f 	bne.w	5054 <__udivmoddi4+0x210>
    4f36:	1b49      	subs	r1, r1, r5
    4f38:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    4f3c:	fa1f f885 	uxth.w	r8, r5
    4f40:	2701      	movs	r7, #1
    4f42:	fbb1 fcfe 	udiv	ip, r1, lr
    4f46:	0c23      	lsrs	r3, r4, #16
    4f48:	fb0e 111c 	mls	r1, lr, ip, r1
    4f4c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    4f50:	fb08 f10c 	mul.w	r1, r8, ip
    4f54:	4299      	cmp	r1, r3
    4f56:	d907      	bls.n	4f68 <__udivmoddi4+0x124>
    4f58:	18eb      	adds	r3, r5, r3
    4f5a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    4f5e:	d202      	bcs.n	4f66 <__udivmoddi4+0x122>
    4f60:	4299      	cmp	r1, r3
    4f62:	f200 80cd 	bhi.w	5100 <__udivmoddi4+0x2bc>
    4f66:	4684      	mov	ip, r0
    4f68:	1a59      	subs	r1, r3, r1
    4f6a:	b2a3      	uxth	r3, r4
    4f6c:	fbb1 f0fe 	udiv	r0, r1, lr
    4f70:	fb0e 1410 	mls	r4, lr, r0, r1
    4f74:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
    4f78:	fb08 f800 	mul.w	r8, r8, r0
    4f7c:	45a0      	cmp	r8, r4
    4f7e:	d907      	bls.n	4f90 <__udivmoddi4+0x14c>
    4f80:	192c      	adds	r4, r5, r4
    4f82:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    4f86:	d202      	bcs.n	4f8e <__udivmoddi4+0x14a>
    4f88:	45a0      	cmp	r8, r4
    4f8a:	f200 80b6 	bhi.w	50fa <__udivmoddi4+0x2b6>
    4f8e:	4618      	mov	r0, r3
    4f90:	eba4 0408 	sub.w	r4, r4, r8
    4f94:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    4f98:	e79f      	b.n	4eda <__udivmoddi4+0x96>
    4f9a:	f1c7 0c20 	rsb	ip, r7, #32
    4f9e:	40bb      	lsls	r3, r7
    4fa0:	fa22 fe0c 	lsr.w	lr, r2, ip
    4fa4:	ea4e 0e03 	orr.w	lr, lr, r3
    4fa8:	fa01 f407 	lsl.w	r4, r1, r7
    4fac:	fa20 f50c 	lsr.w	r5, r0, ip
    4fb0:	fa21 f30c 	lsr.w	r3, r1, ip
    4fb4:	ea4f 481e 	mov.w	r8, lr, lsr #16
    4fb8:	4325      	orrs	r5, r4
    4fba:	fbb3 f9f8 	udiv	r9, r3, r8
    4fbe:	0c2c      	lsrs	r4, r5, #16
    4fc0:	fb08 3319 	mls	r3, r8, r9, r3
    4fc4:	fa1f fa8e 	uxth.w	sl, lr
    4fc8:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
    4fcc:	fb09 f40a 	mul.w	r4, r9, sl
    4fd0:	429c      	cmp	r4, r3
    4fd2:	fa02 f207 	lsl.w	r2, r2, r7
    4fd6:	fa00 f107 	lsl.w	r1, r0, r7
    4fda:	d90b      	bls.n	4ff4 <__udivmoddi4+0x1b0>
    4fdc:	eb1e 0303 	adds.w	r3, lr, r3
    4fe0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    4fe4:	f080 8087 	bcs.w	50f6 <__udivmoddi4+0x2b2>
    4fe8:	429c      	cmp	r4, r3
    4fea:	f240 8084 	bls.w	50f6 <__udivmoddi4+0x2b2>
    4fee:	f1a9 0902 	sub.w	r9, r9, #2
    4ff2:	4473      	add	r3, lr
    4ff4:	1b1b      	subs	r3, r3, r4
    4ff6:	b2ad      	uxth	r5, r5
    4ff8:	fbb3 f0f8 	udiv	r0, r3, r8
    4ffc:	fb08 3310 	mls	r3, r8, r0, r3
    5000:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
    5004:	fb00 fa0a 	mul.w	sl, r0, sl
    5008:	45a2      	cmp	sl, r4
    500a:	d908      	bls.n	501e <__udivmoddi4+0x1da>
    500c:	eb1e 0404 	adds.w	r4, lr, r4
    5010:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    5014:	d26b      	bcs.n	50ee <__udivmoddi4+0x2aa>
    5016:	45a2      	cmp	sl, r4
    5018:	d969      	bls.n	50ee <__udivmoddi4+0x2aa>
    501a:	3802      	subs	r0, #2
    501c:	4474      	add	r4, lr
    501e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    5022:	fba0 8902 	umull	r8, r9, r0, r2
    5026:	eba4 040a 	sub.w	r4, r4, sl
    502a:	454c      	cmp	r4, r9
    502c:	46c2      	mov	sl, r8
    502e:	464b      	mov	r3, r9
    5030:	d354      	bcc.n	50dc <__udivmoddi4+0x298>
    5032:	d051      	beq.n	50d8 <__udivmoddi4+0x294>
    5034:	2e00      	cmp	r6, #0
    5036:	d069      	beq.n	510c <__udivmoddi4+0x2c8>
    5038:	ebb1 050a 	subs.w	r5, r1, sl
    503c:	eb64 0403 	sbc.w	r4, r4, r3
    5040:	fa04 fc0c 	lsl.w	ip, r4, ip
    5044:	40fd      	lsrs	r5, r7
    5046:	40fc      	lsrs	r4, r7
    5048:	ea4c 0505 	orr.w	r5, ip, r5
    504c:	e9c6 5400 	strd	r5, r4, [r6]
    5050:	2700      	movs	r7, #0
    5052:	e747      	b.n	4ee4 <__udivmoddi4+0xa0>
    5054:	f1c2 0320 	rsb	r3, r2, #32
    5058:	fa20 f703 	lsr.w	r7, r0, r3
    505c:	4095      	lsls	r5, r2
    505e:	fa01 f002 	lsl.w	r0, r1, r2
    5062:	fa21 f303 	lsr.w	r3, r1, r3
    5066:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    506a:	4338      	orrs	r0, r7
    506c:	0c01      	lsrs	r1, r0, #16
    506e:	fbb3 f7fe 	udiv	r7, r3, lr
    5072:	fa1f f885 	uxth.w	r8, r5
    5076:	fb0e 3317 	mls	r3, lr, r7, r3
    507a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    507e:	fb07 f308 	mul.w	r3, r7, r8
    5082:	428b      	cmp	r3, r1
    5084:	fa04 f402 	lsl.w	r4, r4, r2
    5088:	d907      	bls.n	509a <__udivmoddi4+0x256>
    508a:	1869      	adds	r1, r5, r1
    508c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
    5090:	d22f      	bcs.n	50f2 <__udivmoddi4+0x2ae>
    5092:	428b      	cmp	r3, r1
    5094:	d92d      	bls.n	50f2 <__udivmoddi4+0x2ae>
    5096:	3f02      	subs	r7, #2
    5098:	4429      	add	r1, r5
    509a:	1acb      	subs	r3, r1, r3
    509c:	b281      	uxth	r1, r0
    509e:	fbb3 f0fe 	udiv	r0, r3, lr
    50a2:	fb0e 3310 	mls	r3, lr, r0, r3
    50a6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    50aa:	fb00 f308 	mul.w	r3, r0, r8
    50ae:	428b      	cmp	r3, r1
    50b0:	d907      	bls.n	50c2 <__udivmoddi4+0x27e>
    50b2:	1869      	adds	r1, r5, r1
    50b4:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
    50b8:	d217      	bcs.n	50ea <__udivmoddi4+0x2a6>
    50ba:	428b      	cmp	r3, r1
    50bc:	d915      	bls.n	50ea <__udivmoddi4+0x2a6>
    50be:	3802      	subs	r0, #2
    50c0:	4429      	add	r1, r5
    50c2:	1ac9      	subs	r1, r1, r3
    50c4:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
    50c8:	e73b      	b.n	4f42 <__udivmoddi4+0xfe>
    50ca:	4637      	mov	r7, r6
    50cc:	4630      	mov	r0, r6
    50ce:	e709      	b.n	4ee4 <__udivmoddi4+0xa0>
    50d0:	4607      	mov	r7, r0
    50d2:	e6e7      	b.n	4ea4 <__udivmoddi4+0x60>
    50d4:	4618      	mov	r0, r3
    50d6:	e6fb      	b.n	4ed0 <__udivmoddi4+0x8c>
    50d8:	4541      	cmp	r1, r8
    50da:	d2ab      	bcs.n	5034 <__udivmoddi4+0x1f0>
    50dc:	ebb8 0a02 	subs.w	sl, r8, r2
    50e0:	eb69 020e 	sbc.w	r2, r9, lr
    50e4:	3801      	subs	r0, #1
    50e6:	4613      	mov	r3, r2
    50e8:	e7a4      	b.n	5034 <__udivmoddi4+0x1f0>
    50ea:	4660      	mov	r0, ip
    50ec:	e7e9      	b.n	50c2 <__udivmoddi4+0x27e>
    50ee:	4618      	mov	r0, r3
    50f0:	e795      	b.n	501e <__udivmoddi4+0x1da>
    50f2:	4667      	mov	r7, ip
    50f4:	e7d1      	b.n	509a <__udivmoddi4+0x256>
    50f6:	4681      	mov	r9, r0
    50f8:	e77c      	b.n	4ff4 <__udivmoddi4+0x1b0>
    50fa:	3802      	subs	r0, #2
    50fc:	442c      	add	r4, r5
    50fe:	e747      	b.n	4f90 <__udivmoddi4+0x14c>
    5100:	f1ac 0c02 	sub.w	ip, ip, #2
    5104:	442b      	add	r3, r5
    5106:	e72f      	b.n	4f68 <__udivmoddi4+0x124>
    5108:	4638      	mov	r0, r7
    510a:	e708      	b.n	4f1e <__udivmoddi4+0xda>
    510c:	4637      	mov	r7, r6
    510e:	e6e9      	b.n	4ee4 <__udivmoddi4+0xa0>

00005110 <selfrel_offset31>:
    5110:	6803      	ldr	r3, [r0, #0]
    5112:	005a      	lsls	r2, r3, #1
    5114:	bf4c      	ite	mi
    5116:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
    511a:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
    511e:	4418      	add	r0, r3
    5120:	4770      	bx	lr
    5122:	bf00      	nop

00005124 <search_EIT_table>:
    5124:	b361      	cbz	r1, 5180 <search_EIT_table+0x5c>
    5126:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    512a:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
    512e:	4690      	mov	r8, r2
    5130:	4606      	mov	r6, r0
    5132:	46d1      	mov	r9, sl
    5134:	2700      	movs	r7, #0
    5136:	eb07 0409 	add.w	r4, r7, r9
    513a:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
    513e:	1064      	asrs	r4, r4, #1
    5140:	00e5      	lsls	r5, r4, #3
    5142:	1971      	adds	r1, r6, r5
    5144:	4608      	mov	r0, r1
    5146:	f7ff ffe3 	bl	5110 <selfrel_offset31>
    514a:	45a2      	cmp	sl, r4
    514c:	4683      	mov	fp, r0
    514e:	f105 0008 	add.w	r0, r5, #8
    5152:	4430      	add	r0, r6
    5154:	d009      	beq.n	516a <search_EIT_table+0x46>
    5156:	f7ff ffdb 	bl	5110 <selfrel_offset31>
    515a:	45c3      	cmp	fp, r8
    515c:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
    5160:	d805      	bhi.n	516e <search_EIT_table+0x4a>
    5162:	4540      	cmp	r0, r8
    5164:	d209      	bcs.n	517a <search_EIT_table+0x56>
    5166:	1c67      	adds	r7, r4, #1
    5168:	e7e5      	b.n	5136 <search_EIT_table+0x12>
    516a:	45c3      	cmp	fp, r8
    516c:	d905      	bls.n	517a <search_EIT_table+0x56>
    516e:	42a7      	cmp	r7, r4
    5170:	d002      	beq.n	5178 <search_EIT_table+0x54>
    5172:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
    5176:	e7de      	b.n	5136 <search_EIT_table+0x12>
    5178:	2100      	movs	r1, #0
    517a:	4608      	mov	r0, r1
    517c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5180:	4608      	mov	r0, r1
    5182:	4770      	bx	lr

00005184 <__gnu_unwind_get_pr_addr>:
    5184:	2801      	cmp	r0, #1
    5186:	d007      	beq.n	5198 <__gnu_unwind_get_pr_addr+0x14>
    5188:	2802      	cmp	r0, #2
    518a:	d007      	beq.n	519c <__gnu_unwind_get_pr_addr+0x18>
    518c:	4b04      	ldr	r3, [pc, #16]	; (51a0 <__gnu_unwind_get_pr_addr+0x1c>)
    518e:	2800      	cmp	r0, #0
    5190:	bf0c      	ite	eq
    5192:	4618      	moveq	r0, r3
    5194:	2000      	movne	r0, #0
    5196:	4770      	bx	lr
    5198:	4802      	ldr	r0, [pc, #8]	; (51a4 <__gnu_unwind_get_pr_addr+0x20>)
    519a:	4770      	bx	lr
    519c:	4802      	ldr	r0, [pc, #8]	; (51a8 <__gnu_unwind_get_pr_addr+0x24>)
    519e:	4770      	bx	lr
    51a0:	00005871 	.word	0x00005871
    51a4:	00005875 	.word	0x00005875
    51a8:	00005879 	.word	0x00005879

000051ac <get_eit_entry>:
    51ac:	b530      	push	{r4, r5, lr}
    51ae:	4b25      	ldr	r3, [pc, #148]	; (5244 <get_eit_entry+0x98>)
    51b0:	b083      	sub	sp, #12
    51b2:	4604      	mov	r4, r0
    51b4:	1e8d      	subs	r5, r1, #2
    51b6:	b34b      	cbz	r3, 520c <get_eit_entry+0x60>
    51b8:	a901      	add	r1, sp, #4
    51ba:	4628      	mov	r0, r5
    51bc:	f3af 8000 	nop.w
    51c0:	b1f0      	cbz	r0, 5200 <get_eit_entry+0x54>
    51c2:	9901      	ldr	r1, [sp, #4]
    51c4:	462a      	mov	r2, r5
    51c6:	f7ff ffad 	bl	5124 <search_EIT_table>
    51ca:	4601      	mov	r1, r0
    51cc:	b1c0      	cbz	r0, 5200 <get_eit_entry+0x54>
    51ce:	f7ff ff9f 	bl	5110 <selfrel_offset31>
    51d2:	684b      	ldr	r3, [r1, #4]
    51d4:	64a0      	str	r0, [r4, #72]	; 0x48
    51d6:	2b01      	cmp	r3, #1
    51d8:	d02e      	beq.n	5238 <get_eit_entry+0x8c>
    51da:	2b00      	cmp	r3, #0
    51dc:	f101 0004 	add.w	r0, r1, #4
    51e0:	db26      	blt.n	5230 <get_eit_entry+0x84>
    51e2:	f7ff ff95 	bl	5110 <selfrel_offset31>
    51e6:	2300      	movs	r3, #0
    51e8:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
    51ec:	6803      	ldr	r3, [r0, #0]
    51ee:	2b00      	cmp	r3, #0
    51f0:	db12      	blt.n	5218 <get_eit_entry+0x6c>
    51f2:	f7ff ff8d 	bl	5110 <selfrel_offset31>
    51f6:	2300      	movs	r3, #0
    51f8:	6120      	str	r0, [r4, #16]
    51fa:	4618      	mov	r0, r3
    51fc:	b003      	add	sp, #12
    51fe:	bd30      	pop	{r4, r5, pc}
    5200:	2300      	movs	r3, #0
    5202:	6123      	str	r3, [r4, #16]
    5204:	2309      	movs	r3, #9
    5206:	4618      	mov	r0, r3
    5208:	b003      	add	sp, #12
    520a:	bd30      	pop	{r4, r5, pc}
    520c:	490e      	ldr	r1, [pc, #56]	; (5248 <get_eit_entry+0x9c>)
    520e:	480f      	ldr	r0, [pc, #60]	; (524c <get_eit_entry+0xa0>)
    5210:	1a09      	subs	r1, r1, r0
    5212:	10c9      	asrs	r1, r1, #3
    5214:	9101      	str	r1, [sp, #4]
    5216:	e7d5      	b.n	51c4 <get_eit_entry+0x18>
    5218:	f3c3 6003 	ubfx	r0, r3, #24, #4
    521c:	f7ff ffb2 	bl	5184 <__gnu_unwind_get_pr_addr>
    5220:	2800      	cmp	r0, #0
    5222:	bf14      	ite	ne
    5224:	2300      	movne	r3, #0
    5226:	2309      	moveq	r3, #9
    5228:	6120      	str	r0, [r4, #16]
    522a:	4618      	mov	r0, r3
    522c:	b003      	add	sp, #12
    522e:	bd30      	pop	{r4, r5, pc}
    5230:	2301      	movs	r3, #1
    5232:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
    5236:	e7d9      	b.n	51ec <get_eit_entry+0x40>
    5238:	2300      	movs	r3, #0
    523a:	6123      	str	r3, [r4, #16]
    523c:	2305      	movs	r3, #5
    523e:	4618      	mov	r0, r3
    5240:	b003      	add	sp, #12
    5242:	bd30      	pop	{r4, r5, pc}
    5244:	00000000 	.word	0x00000000
    5248:	0000788c 	.word	0x0000788c
    524c:	000077d4 	.word	0x000077d4

00005250 <restore_non_core_regs>:
    5250:	6803      	ldr	r3, [r0, #0]
    5252:	07da      	lsls	r2, r3, #31
    5254:	b510      	push	{r4, lr}
    5256:	4604      	mov	r4, r0
    5258:	d406      	bmi.n	5268 <restore_non_core_regs+0x18>
    525a:	079b      	lsls	r3, r3, #30
    525c:	f100 0048 	add.w	r0, r0, #72	; 0x48
    5260:	d509      	bpl.n	5276 <restore_non_core_regs+0x26>
    5262:	f000 fc5f 	bl	5b24 <__gnu_Unwind_Restore_VFP_D>
    5266:	6823      	ldr	r3, [r4, #0]
    5268:	0759      	lsls	r1, r3, #29
    526a:	d509      	bpl.n	5280 <restore_non_core_regs+0x30>
    526c:	071a      	lsls	r2, r3, #28
    526e:	d50e      	bpl.n	528e <restore_non_core_regs+0x3e>
    5270:	06db      	lsls	r3, r3, #27
    5272:	d513      	bpl.n	529c <restore_non_core_regs+0x4c>
    5274:	bd10      	pop	{r4, pc}
    5276:	f000 fc4d 	bl	5b14 <__gnu_Unwind_Restore_VFP>
    527a:	6823      	ldr	r3, [r4, #0]
    527c:	0759      	lsls	r1, r3, #29
    527e:	d4f5      	bmi.n	526c <restore_non_core_regs+0x1c>
    5280:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
    5284:	f000 fc56 	bl	5b34 <__gnu_Unwind_Restore_VFP_D_16_to_31>
    5288:	6823      	ldr	r3, [r4, #0]
    528a:	071a      	lsls	r2, r3, #28
    528c:	d4f0      	bmi.n	5270 <restore_non_core_regs+0x20>
    528e:	f504 70a8 	add.w	r0, r4, #336	; 0x150
    5292:	f000 fc57 	bl	5b44 <__gnu_Unwind_Restore_WMMXD>
    5296:	6823      	ldr	r3, [r4, #0]
    5298:	06db      	lsls	r3, r3, #27
    529a:	d4eb      	bmi.n	5274 <restore_non_core_regs+0x24>
    529c:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
    52a0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    52a4:	f000 bc92 	b.w	5bcc <__gnu_Unwind_Restore_WMMXC>

000052a8 <_Unwind_decode_typeinfo_ptr.isra.0>:
    52a8:	6803      	ldr	r3, [r0, #0]
    52aa:	b103      	cbz	r3, 52ae <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
    52ac:	4403      	add	r3, r0
    52ae:	4618      	mov	r0, r3
    52b0:	4770      	bx	lr
    52b2:	bf00      	nop

000052b4 <__gnu_unwind_24bit.isra.1>:
    52b4:	2009      	movs	r0, #9
    52b6:	4770      	bx	lr

000052b8 <_Unwind_DebugHook>:
    52b8:	4770      	bx	lr
    52ba:	bf00      	nop

000052bc <unwind_phase2>:
    52bc:	b570      	push	{r4, r5, r6, lr}
    52be:	4604      	mov	r4, r0
    52c0:	460d      	mov	r5, r1
    52c2:	e008      	b.n	52d6 <unwind_phase2+0x1a>
    52c4:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    52c6:	6163      	str	r3, [r4, #20]
    52c8:	462a      	mov	r2, r5
    52ca:	6923      	ldr	r3, [r4, #16]
    52cc:	4621      	mov	r1, r4
    52ce:	2001      	movs	r0, #1
    52d0:	4798      	blx	r3
    52d2:	2808      	cmp	r0, #8
    52d4:	d108      	bne.n	52e8 <unwind_phase2+0x2c>
    52d6:	6c29      	ldr	r1, [r5, #64]	; 0x40
    52d8:	4620      	mov	r0, r4
    52da:	f7ff ff67 	bl	51ac <get_eit_entry>
    52de:	4606      	mov	r6, r0
    52e0:	2800      	cmp	r0, #0
    52e2:	d0ef      	beq.n	52c4 <unwind_phase2+0x8>
    52e4:	f000 fe9c 	bl	6020 <abort>
    52e8:	2807      	cmp	r0, #7
    52ea:	d1fb      	bne.n	52e4 <unwind_phase2+0x28>
    52ec:	4630      	mov	r0, r6
    52ee:	6c29      	ldr	r1, [r5, #64]	; 0x40
    52f0:	f7ff ffe2 	bl	52b8 <_Unwind_DebugHook>
    52f4:	1d28      	adds	r0, r5, #4
    52f6:	f000 fc01 	bl	5afc <__restore_core_regs>
    52fa:	bf00      	nop

000052fc <unwind_phase2_forced>:
    52fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5300:	1d0c      	adds	r4, r1, #4
    5302:	4605      	mov	r5, r0
    5304:	4617      	mov	r7, r2
    5306:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    5308:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
    530c:	ae03      	add	r6, sp, #12
    530e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    5310:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    5312:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    5314:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    5316:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    5318:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    531c:	ac02      	add	r4, sp, #8
    531e:	f8d5 800c 	ldr.w	r8, [r5, #12]
    5322:	f8d5 9018 	ldr.w	r9, [r5, #24]
    5326:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    532a:	2300      	movs	r3, #0
    532c:	6023      	str	r3, [r4, #0]
    532e:	e021      	b.n	5374 <unwind_phase2_forced+0x78>
    5330:	6c23      	ldr	r3, [r4, #64]	; 0x40
    5332:	616b      	str	r3, [r5, #20]
    5334:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    5338:	4621      	mov	r1, r4
    533a:	a87a      	add	r0, sp, #488	; 0x1e8
    533c:	f000 fe9c 	bl	6078 <memcpy>
    5340:	692b      	ldr	r3, [r5, #16]
    5342:	aa7a      	add	r2, sp, #488	; 0x1e8
    5344:	4629      	mov	r1, r5
    5346:	4630      	mov	r0, r6
    5348:	4798      	blx	r3
    534a:	9b88      	ldr	r3, [sp, #544]	; 0x220
    534c:	e9cd 4900 	strd	r4, r9, [sp]
    5350:	4682      	mov	sl, r0
    5352:	6463      	str	r3, [r4, #68]	; 0x44
    5354:	4631      	mov	r1, r6
    5356:	462b      	mov	r3, r5
    5358:	462a      	mov	r2, r5
    535a:	2001      	movs	r0, #1
    535c:	47c0      	blx	r8
    535e:	4607      	mov	r7, r0
    5360:	b9f8      	cbnz	r0, 53a2 <unwind_phase2_forced+0xa6>
    5362:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    5366:	a97a      	add	r1, sp, #488	; 0x1e8
    5368:	4620      	mov	r0, r4
    536a:	f000 fe85 	bl	6078 <memcpy>
    536e:	f1ba 0f08 	cmp.w	sl, #8
    5372:	d11c      	bne.n	53ae <unwind_phase2_forced+0xb2>
    5374:	6c21      	ldr	r1, [r4, #64]	; 0x40
    5376:	4628      	mov	r0, r5
    5378:	f7ff ff18 	bl	51ac <get_eit_entry>
    537c:	2f00      	cmp	r7, #0
    537e:	bf08      	it	eq
    5380:	2609      	moveq	r6, #9
    5382:	4607      	mov	r7, r0
    5384:	bf18      	it	ne
    5386:	260a      	movne	r6, #10
    5388:	2800      	cmp	r0, #0
    538a:	d0d1      	beq.n	5330 <unwind_phase2_forced+0x34>
    538c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    538e:	f046 0110 	orr.w	r1, r6, #16
    5392:	e9cd 4900 	strd	r4, r9, [sp]
    5396:	462a      	mov	r2, r5
    5398:	6463      	str	r3, [r4, #68]	; 0x44
    539a:	2001      	movs	r0, #1
    539c:	462b      	mov	r3, r5
    539e:	47c0      	blx	r8
    53a0:	b100      	cbz	r0, 53a4 <unwind_phase2_forced+0xa8>
    53a2:	2709      	movs	r7, #9
    53a4:	4638      	mov	r0, r7
    53a6:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
    53aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    53ae:	f1ba 0f07 	cmp.w	sl, #7
    53b2:	d1f6      	bne.n	53a2 <unwind_phase2_forced+0xa6>
    53b4:	4638      	mov	r0, r7
    53b6:	6c21      	ldr	r1, [r4, #64]	; 0x40
    53b8:	f7ff ff7e 	bl	52b8 <_Unwind_DebugHook>
    53bc:	a803      	add	r0, sp, #12
    53be:	f000 fb9d 	bl	5afc <__restore_core_regs>
    53c2:	bf00      	nop

000053c4 <_Unwind_GetCFA>:
    53c4:	6c40      	ldr	r0, [r0, #68]	; 0x44
    53c6:	4770      	bx	lr

000053c8 <__gnu_Unwind_RaiseException>:
    53c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    53ca:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    53cc:	640b      	str	r3, [r1, #64]	; 0x40
    53ce:	1d0d      	adds	r5, r1, #4
    53d0:	460f      	mov	r7, r1
    53d2:	4606      	mov	r6, r0
    53d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    53d6:	b0f9      	sub	sp, #484	; 0x1e4
    53d8:	ac01      	add	r4, sp, #4
    53da:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    53dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    53de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    53e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    53e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    53e4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    53e8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    53ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    53f0:	9500      	str	r5, [sp, #0]
    53f2:	e006      	b.n	5402 <__gnu_Unwind_RaiseException+0x3a>
    53f4:	6933      	ldr	r3, [r6, #16]
    53f6:	466a      	mov	r2, sp
    53f8:	4631      	mov	r1, r6
    53fa:	4798      	blx	r3
    53fc:	2808      	cmp	r0, #8
    53fe:	4604      	mov	r4, r0
    5400:	d108      	bne.n	5414 <__gnu_Unwind_RaiseException+0x4c>
    5402:	9910      	ldr	r1, [sp, #64]	; 0x40
    5404:	4630      	mov	r0, r6
    5406:	f7ff fed1 	bl	51ac <get_eit_entry>
    540a:	2800      	cmp	r0, #0
    540c:	d0f2      	beq.n	53f4 <__gnu_Unwind_RaiseException+0x2c>
    540e:	2009      	movs	r0, #9
    5410:	b079      	add	sp, #484	; 0x1e4
    5412:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5414:	4668      	mov	r0, sp
    5416:	f7ff ff1b 	bl	5250 <restore_non_core_regs>
    541a:	2c06      	cmp	r4, #6
    541c:	d1f7      	bne.n	540e <__gnu_Unwind_RaiseException+0x46>
    541e:	4639      	mov	r1, r7
    5420:	4630      	mov	r0, r6
    5422:	f7ff ff4b 	bl	52bc <unwind_phase2>
    5426:	bf00      	nop

00005428 <__gnu_Unwind_ForcedUnwind>:
    5428:	b430      	push	{r4, r5}
    542a:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    542c:	60c1      	str	r1, [r0, #12]
    542e:	6182      	str	r2, [r0, #24]
    5430:	4619      	mov	r1, r3
    5432:	641d      	str	r5, [r3, #64]	; 0x40
    5434:	2200      	movs	r2, #0
    5436:	bc30      	pop	{r4, r5}
    5438:	e760      	b.n	52fc <unwind_phase2_forced>
    543a:	bf00      	nop

0000543c <__gnu_Unwind_Resume>:
    543c:	b570      	push	{r4, r5, r6, lr}
    543e:	68c6      	ldr	r6, [r0, #12]
    5440:	6943      	ldr	r3, [r0, #20]
    5442:	640b      	str	r3, [r1, #64]	; 0x40
    5444:	b9be      	cbnz	r6, 5476 <__gnu_Unwind_Resume+0x3a>
    5446:	6903      	ldr	r3, [r0, #16]
    5448:	460a      	mov	r2, r1
    544a:	4604      	mov	r4, r0
    544c:	460d      	mov	r5, r1
    544e:	4601      	mov	r1, r0
    5450:	2002      	movs	r0, #2
    5452:	4798      	blx	r3
    5454:	2807      	cmp	r0, #7
    5456:	d007      	beq.n	5468 <__gnu_Unwind_Resume+0x2c>
    5458:	2808      	cmp	r0, #8
    545a:	d103      	bne.n	5464 <__gnu_Unwind_Resume+0x28>
    545c:	4629      	mov	r1, r5
    545e:	4620      	mov	r0, r4
    5460:	f7ff ff2c 	bl	52bc <unwind_phase2>
    5464:	f000 fddc 	bl	6020 <abort>
    5468:	4630      	mov	r0, r6
    546a:	6c29      	ldr	r1, [r5, #64]	; 0x40
    546c:	f7ff ff24 	bl	52b8 <_Unwind_DebugHook>
    5470:	1d28      	adds	r0, r5, #4
    5472:	f000 fb43 	bl	5afc <__restore_core_regs>
    5476:	2201      	movs	r2, #1
    5478:	f7ff ff40 	bl	52fc <unwind_phase2_forced>
    547c:	f000 fdd0 	bl	6020 <abort>

00005480 <__gnu_Unwind_Resume_or_Rethrow>:
    5480:	68c2      	ldr	r2, [r0, #12]
    5482:	b11a      	cbz	r2, 548c <__gnu_Unwind_Resume_or_Rethrow+0xc>
    5484:	6bca      	ldr	r2, [r1, #60]	; 0x3c
    5486:	640a      	str	r2, [r1, #64]	; 0x40
    5488:	2200      	movs	r2, #0
    548a:	e737      	b.n	52fc <unwind_phase2_forced>
    548c:	e79c      	b.n	53c8 <__gnu_Unwind_RaiseException>
    548e:	bf00      	nop

00005490 <_Unwind_Complete>:
    5490:	4770      	bx	lr
    5492:	bf00      	nop

00005494 <_Unwind_DeleteException>:
    5494:	6883      	ldr	r3, [r0, #8]
    5496:	b113      	cbz	r3, 549e <_Unwind_DeleteException+0xa>
    5498:	4601      	mov	r1, r0
    549a:	2001      	movs	r0, #1
    549c:	4718      	bx	r3
    549e:	4770      	bx	lr

000054a0 <_Unwind_VRS_Get>:
    54a0:	2904      	cmp	r1, #4
    54a2:	d807      	bhi.n	54b4 <_Unwind_VRS_Get+0x14>
    54a4:	e8df f001 	tbb	[pc, r1]
    54a8:	08060803 	.word	0x08060803
    54ac:	08          	.byte	0x08
    54ad:	00          	.byte	0x00
    54ae:	b90b      	cbnz	r3, 54b4 <_Unwind_VRS_Get+0x14>
    54b0:	2a0f      	cmp	r2, #15
    54b2:	d903      	bls.n	54bc <_Unwind_VRS_Get+0x1c>
    54b4:	2002      	movs	r0, #2
    54b6:	4770      	bx	lr
    54b8:	2001      	movs	r0, #1
    54ba:	4770      	bx	lr
    54bc:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    54c0:	4618      	mov	r0, r3
    54c2:	6853      	ldr	r3, [r2, #4]
    54c4:	9a00      	ldr	r2, [sp, #0]
    54c6:	6013      	str	r3, [r2, #0]
    54c8:	4770      	bx	lr
    54ca:	bf00      	nop

000054cc <_Unwind_GetGR>:
    54cc:	b510      	push	{r4, lr}
    54ce:	b084      	sub	sp, #16
    54d0:	2300      	movs	r3, #0
    54d2:	ac03      	add	r4, sp, #12
    54d4:	460a      	mov	r2, r1
    54d6:	9400      	str	r4, [sp, #0]
    54d8:	4619      	mov	r1, r3
    54da:	f7ff ffe1 	bl	54a0 <_Unwind_VRS_Get>
    54de:	9803      	ldr	r0, [sp, #12]
    54e0:	b004      	add	sp, #16
    54e2:	bd10      	pop	{r4, pc}

000054e4 <_Unwind_VRS_Set>:
    54e4:	2904      	cmp	r1, #4
    54e6:	d807      	bhi.n	54f8 <_Unwind_VRS_Set+0x14>
    54e8:	e8df f001 	tbb	[pc, r1]
    54ec:	08060803 	.word	0x08060803
    54f0:	08          	.byte	0x08
    54f1:	00          	.byte	0x00
    54f2:	b90b      	cbnz	r3, 54f8 <_Unwind_VRS_Set+0x14>
    54f4:	2a0f      	cmp	r2, #15
    54f6:	d903      	bls.n	5500 <_Unwind_VRS_Set+0x1c>
    54f8:	2002      	movs	r0, #2
    54fa:	4770      	bx	lr
    54fc:	2001      	movs	r0, #1
    54fe:	4770      	bx	lr
    5500:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    5504:	9a00      	ldr	r2, [sp, #0]
    5506:	6812      	ldr	r2, [r2, #0]
    5508:	6042      	str	r2, [r0, #4]
    550a:	4618      	mov	r0, r3
    550c:	4770      	bx	lr
    550e:	bf00      	nop

00005510 <_Unwind_SetGR>:
    5510:	b510      	push	{r4, lr}
    5512:	b084      	sub	sp, #16
    5514:	ac04      	add	r4, sp, #16
    5516:	2300      	movs	r3, #0
    5518:	f844 2d04 	str.w	r2, [r4, #-4]!
    551c:	460a      	mov	r2, r1
    551e:	9400      	str	r4, [sp, #0]
    5520:	4619      	mov	r1, r3
    5522:	f7ff ffdf 	bl	54e4 <_Unwind_VRS_Set>
    5526:	b004      	add	sp, #16
    5528:	bd10      	pop	{r4, pc}
    552a:	bf00      	nop

0000552c <__gnu_Unwind_Backtrace>:
    552c:	b5f0      	push	{r4, r5, r6, r7, lr}
    552e:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    5530:	6413      	str	r3, [r2, #64]	; 0x40
    5532:	1d15      	adds	r5, r2, #4
    5534:	4607      	mov	r7, r0
    5536:	460e      	mov	r6, r1
    5538:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    553a:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
    553e:	ac17      	add	r4, sp, #92	; 0x5c
    5540:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    5542:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    5544:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    5546:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    5548:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    554a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    554e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    5552:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    5556:	9516      	str	r5, [sp, #88]	; 0x58
    5558:	e010      	b.n	557c <__gnu_Unwind_Backtrace+0x50>
    555a:	a816      	add	r0, sp, #88	; 0x58
    555c:	f7ff ffd8 	bl	5510 <_Unwind_SetGR>
    5560:	4631      	mov	r1, r6
    5562:	a816      	add	r0, sp, #88	; 0x58
    5564:	47b8      	blx	r7
    5566:	aa16      	add	r2, sp, #88	; 0x58
    5568:	4669      	mov	r1, sp
    556a:	b978      	cbnz	r0, 558c <__gnu_Unwind_Backtrace+0x60>
    556c:	9b04      	ldr	r3, [sp, #16]
    556e:	2008      	movs	r0, #8
    5570:	4798      	blx	r3
    5572:	2805      	cmp	r0, #5
    5574:	4604      	mov	r4, r0
    5576:	d00a      	beq.n	558e <__gnu_Unwind_Backtrace+0x62>
    5578:	2809      	cmp	r0, #9
    557a:	d007      	beq.n	558c <__gnu_Unwind_Backtrace+0x60>
    557c:	9926      	ldr	r1, [sp, #152]	; 0x98
    557e:	4668      	mov	r0, sp
    5580:	f7ff fe14 	bl	51ac <get_eit_entry>
    5584:	466a      	mov	r2, sp
    5586:	210c      	movs	r1, #12
    5588:	2800      	cmp	r0, #0
    558a:	d0e6      	beq.n	555a <__gnu_Unwind_Backtrace+0x2e>
    558c:	2409      	movs	r4, #9
    558e:	a816      	add	r0, sp, #88	; 0x58
    5590:	f7ff fe5e 	bl	5250 <restore_non_core_regs>
    5594:	4620      	mov	r0, r4
    5596:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
    559a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000559c <__gnu_unwind_pr_common>:
    559c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    55a0:	460d      	mov	r5, r1
    55a2:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
    55a4:	b089      	sub	sp, #36	; 0x24
    55a6:	1d0c      	adds	r4, r1, #4
    55a8:	4616      	mov	r6, r2
    55aa:	f000 0b03 	and.w	fp, r0, #3
    55ae:	680a      	ldr	r2, [r1, #0]
    55b0:	9406      	str	r4, [sp, #24]
    55b2:	461f      	mov	r7, r3
    55b4:	2b00      	cmp	r3, #0
    55b6:	d068      	beq.n	568a <__gnu_unwind_pr_common+0xee>
    55b8:	0c13      	lsrs	r3, r2, #16
    55ba:	b2d9      	uxtb	r1, r3
    55bc:	0412      	lsls	r2, r2, #16
    55be:	f88d 301d 	strb.w	r3, [sp, #29]
    55c2:	2302      	movs	r3, #2
    55c4:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    55c8:	9205      	str	r2, [sp, #20]
    55ca:	f88d 301c 	strb.w	r3, [sp, #28]
    55ce:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    55d0:	f1bb 0f02 	cmp.w	fp, #2
    55d4:	bf08      	it	eq
    55d6:	6bac      	ldreq	r4, [r5, #56]	; 0x38
    55d8:	f013 0301 	ands.w	r3, r3, #1
    55dc:	d146      	bne.n	566c <__gnu_unwind_pr_common+0xd0>
    55de:	9301      	str	r3, [sp, #4]
    55e0:	f000 0308 	and.w	r3, r0, #8
    55e4:	9300      	str	r3, [sp, #0]
    55e6:	f8d4 9000 	ldr.w	r9, [r4]
    55ea:	f1b9 0f00 	cmp.w	r9, #0
    55ee:	f000 80f3 	beq.w	57d8 <__gnu_unwind_pr_common+0x23c>
    55f2:	2f02      	cmp	r7, #2
    55f4:	d045      	beq.n	5682 <__gnu_unwind_pr_common+0xe6>
    55f6:	f8b4 9000 	ldrh.w	r9, [r4]
    55fa:	f8b4 8002 	ldrh.w	r8, [r4, #2]
    55fe:	3404      	adds	r4, #4
    5600:	6cab      	ldr	r3, [r5, #72]	; 0x48
    5602:	f028 0a01 	bic.w	sl, r8, #1
    5606:	210f      	movs	r1, #15
    5608:	4630      	mov	r0, r6
    560a:	449a      	add	sl, r3
    560c:	f7ff ff5e 	bl	54cc <_Unwind_GetGR>
    5610:	4582      	cmp	sl, r0
    5612:	d834      	bhi.n	567e <__gnu_unwind_pr_common+0xe2>
    5614:	f029 0301 	bic.w	r3, r9, #1
    5618:	4453      	add	r3, sl
    561a:	4283      	cmp	r3, r0
    561c:	bf94      	ite	ls
    561e:	2000      	movls	r0, #0
    5620:	2001      	movhi	r0, #1
    5622:	ea4f 0848 	mov.w	r8, r8, lsl #1
    5626:	f008 0802 	and.w	r8, r8, #2
    562a:	f009 0901 	and.w	r9, r9, #1
    562e:	ea48 0809 	orr.w	r8, r8, r9
    5632:	f1b8 0f01 	cmp.w	r8, #1
    5636:	d03a      	beq.n	56ae <__gnu_unwind_pr_common+0x112>
    5638:	d331      	bcc.n	569e <__gnu_unwind_pr_common+0x102>
    563a:	f1b8 0f02 	cmp.w	r8, #2
    563e:	d11a      	bne.n	5676 <__gnu_unwind_pr_common+0xda>
    5640:	6823      	ldr	r3, [r4, #0]
    5642:	f023 4a00 	bic.w	sl, r3, #2147483648	; 0x80000000
    5646:	f1bb 0f00 	cmp.w	fp, #0
    564a:	d166      	bne.n	571a <__gnu_unwind_pr_common+0x17e>
    564c:	b130      	cbz	r0, 565c <__gnu_unwind_pr_common+0xc0>
    564e:	9a00      	ldr	r2, [sp, #0]
    5650:	2a00      	cmp	r2, #0
    5652:	d06c      	beq.n	572e <__gnu_unwind_pr_common+0x192>
    5654:	f1ba 0f00 	cmp.w	sl, #0
    5658:	f000 8090 	beq.w	577c <__gnu_unwind_pr_common+0x1e0>
    565c:	2b00      	cmp	r3, #0
    565e:	da00      	bge.n	5662 <__gnu_unwind_pr_common+0xc6>
    5660:	3404      	adds	r4, #4
    5662:	f10a 0301 	add.w	r3, sl, #1
    5666:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    566a:	e7bc      	b.n	55e6 <__gnu_unwind_pr_common+0x4a>
    566c:	4630      	mov	r0, r6
    566e:	a905      	add	r1, sp, #20
    5670:	f000 fb46 	bl	5d00 <__gnu_unwind_execute>
    5674:	b178      	cbz	r0, 5696 <__gnu_unwind_pr_common+0xfa>
    5676:	2009      	movs	r0, #9
    5678:	b009      	add	sp, #36	; 0x24
    567a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    567e:	2000      	movs	r0, #0
    5680:	e7cf      	b.n	5622 <__gnu_unwind_pr_common+0x86>
    5682:	f8d4 8004 	ldr.w	r8, [r4, #4]
    5686:	3408      	adds	r4, #8
    5688:	e7ba      	b.n	5600 <__gnu_unwind_pr_common+0x64>
    568a:	0212      	lsls	r2, r2, #8
    568c:	2303      	movs	r3, #3
    568e:	9205      	str	r2, [sp, #20]
    5690:	f8ad 301c 	strh.w	r3, [sp, #28]
    5694:	e79b      	b.n	55ce <__gnu_unwind_pr_common+0x32>
    5696:	2008      	movs	r0, #8
    5698:	b009      	add	sp, #36	; 0x24
    569a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    569e:	f1bb 0f00 	cmp.w	fp, #0
    56a2:	d002      	beq.n	56aa <__gnu_unwind_pr_common+0x10e>
    56a4:	2800      	cmp	r0, #0
    56a6:	f040 80b4 	bne.w	5812 <__gnu_unwind_pr_common+0x276>
    56aa:	3404      	adds	r4, #4
    56ac:	e79b      	b.n	55e6 <__gnu_unwind_pr_common+0x4a>
    56ae:	f1bb 0f00 	cmp.w	fp, #0
    56b2:	d118      	bne.n	56e6 <__gnu_unwind_pr_common+0x14a>
    56b4:	b1a8      	cbz	r0, 56e2 <__gnu_unwind_pr_common+0x146>
    56b6:	e9d4 2300 	ldrd	r2, r3, [r4]
    56ba:	1c99      	adds	r1, r3, #2
    56bc:	ea4f 72d2 	mov.w	r2, r2, lsr #31
    56c0:	d0d9      	beq.n	5676 <__gnu_unwind_pr_common+0xda>
    56c2:	f105 0158 	add.w	r1, r5, #88	; 0x58
    56c6:	3301      	adds	r3, #1
    56c8:	9104      	str	r1, [sp, #16]
    56ca:	f000 80b5 	beq.w	5838 <__gnu_unwind_pr_common+0x29c>
    56ce:	1d20      	adds	r0, r4, #4
    56d0:	f7ff fdea 	bl	52a8 <_Unwind_decode_typeinfo_ptr.isra.0>
    56d4:	ab04      	add	r3, sp, #16
    56d6:	4601      	mov	r1, r0
    56d8:	4628      	mov	r0, r5
    56da:	f3af 8000 	nop.w
    56de:	2800      	cmp	r0, #0
    56e0:	d167      	bne.n	57b2 <__gnu_unwind_pr_common+0x216>
    56e2:	3408      	adds	r4, #8
    56e4:	e77f      	b.n	55e6 <__gnu_unwind_pr_common+0x4a>
    56e6:	210d      	movs	r1, #13
    56e8:	4630      	mov	r0, r6
    56ea:	f8d5 8020 	ldr.w	r8, [r5, #32]
    56ee:	f7ff feed 	bl	54cc <_Unwind_GetGR>
    56f2:	4580      	cmp	r8, r0
    56f4:	d1f5      	bne.n	56e2 <__gnu_unwind_pr_common+0x146>
    56f6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    56f8:	429c      	cmp	r4, r3
    56fa:	d1f2      	bne.n	56e2 <__gnu_unwind_pr_common+0x146>
    56fc:	4620      	mov	r0, r4
    56fe:	f7ff fd07 	bl	5110 <selfrel_offset31>
    5702:	210f      	movs	r1, #15
    5704:	4602      	mov	r2, r0
    5706:	4630      	mov	r0, r6
    5708:	f7ff ff02 	bl	5510 <_Unwind_SetGR>
    570c:	4630      	mov	r0, r6
    570e:	462a      	mov	r2, r5
    5710:	2100      	movs	r1, #0
    5712:	f7ff fefd 	bl	5510 <_Unwind_SetGR>
    5716:	2007      	movs	r0, #7
    5718:	e7ae      	b.n	5678 <__gnu_unwind_pr_common+0xdc>
    571a:	210d      	movs	r1, #13
    571c:	4630      	mov	r0, r6
    571e:	f8d5 8020 	ldr.w	r8, [r5, #32]
    5722:	f7ff fed3 	bl	54cc <_Unwind_GetGR>
    5726:	4580      	cmp	r8, r0
    5728:	d032      	beq.n	5790 <__gnu_unwind_pr_common+0x1f4>
    572a:	6823      	ldr	r3, [r4, #0]
    572c:	e796      	b.n	565c <__gnu_unwind_pr_common+0xc0>
    572e:	f1ba 0f00 	cmp.w	sl, #0
    5732:	d023      	beq.n	577c <__gnu_unwind_pr_common+0x1e0>
    5734:	f105 0358 	add.w	r3, r5, #88	; 0x58
    5738:	f104 0804 	add.w	r8, r4, #4
    573c:	f8cd b008 	str.w	fp, [sp, #8]
    5740:	f8dd 9000 	ldr.w	r9, [sp]
    5744:	9703      	str	r7, [sp, #12]
    5746:	46a3      	mov	fp, r4
    5748:	461c      	mov	r4, r3
    574a:	e002      	b.n	5752 <__gnu_unwind_pr_common+0x1b6>
    574c:	4557      	cmp	r7, sl
    574e:	46b9      	mov	r9, r7
    5750:	d040      	beq.n	57d4 <__gnu_unwind_pr_common+0x238>
    5752:	4640      	mov	r0, r8
    5754:	9404      	str	r4, [sp, #16]
    5756:	f7ff fda7 	bl	52a8 <_Unwind_decode_typeinfo_ptr.isra.0>
    575a:	ab04      	add	r3, sp, #16
    575c:	4601      	mov	r1, r0
    575e:	2200      	movs	r2, #0
    5760:	4628      	mov	r0, r5
    5762:	f3af 8000 	nop.w
    5766:	f109 0701 	add.w	r7, r9, #1
    576a:	f108 0804 	add.w	r8, r8, #4
    576e:	2800      	cmp	r0, #0
    5770:	d0ec      	beq.n	574c <__gnu_unwind_pr_common+0x1b0>
    5772:	45d1      	cmp	r9, sl
    5774:	465c      	mov	r4, fp
    5776:	e9dd b702 	ldrd	fp, r7, [sp, #8]
    577a:	d1d6      	bne.n	572a <__gnu_unwind_pr_common+0x18e>
    577c:	4630      	mov	r0, r6
    577e:	210d      	movs	r1, #13
    5780:	f7ff fea4 	bl	54cc <_Unwind_GetGR>
    5784:	9b04      	ldr	r3, [sp, #16]
    5786:	6228      	str	r0, [r5, #32]
    5788:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
    578c:	2006      	movs	r0, #6
    578e:	e773      	b.n	5678 <__gnu_unwind_pr_common+0xdc>
    5790:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5792:	429c      	cmp	r4, r3
    5794:	d1c9      	bne.n	572a <__gnu_unwind_pr_common+0x18e>
    5796:	2204      	movs	r2, #4
    5798:	f04f 0800 	mov.w	r8, #0
    579c:	18a3      	adds	r3, r4, r2
    579e:	e9c5 a80a 	strd	sl, r8, [r5, #40]	; 0x28
    57a2:	e9c5 230c 	strd	r2, r3, [r5, #48]	; 0x30
    57a6:	6823      	ldr	r3, [r4, #0]
    57a8:	4543      	cmp	r3, r8
    57aa:	db4d      	blt.n	5848 <__gnu_unwind_pr_common+0x2ac>
    57ac:	2301      	movs	r3, #1
    57ae:	9301      	str	r3, [sp, #4]
    57b0:	e757      	b.n	5662 <__gnu_unwind_pr_common+0xc6>
    57b2:	4680      	mov	r8, r0
    57b4:	210d      	movs	r1, #13
    57b6:	4630      	mov	r0, r6
    57b8:	f7ff fe88 	bl	54cc <_Unwind_GetGR>
    57bc:	f1b8 0f02 	cmp.w	r8, #2
    57c0:	6228      	str	r0, [r5, #32]
    57c2:	d13e      	bne.n	5842 <__gnu_unwind_pr_common+0x2a6>
    57c4:	462b      	mov	r3, r5
    57c6:	9a04      	ldr	r2, [sp, #16]
    57c8:	f843 2f2c 	str.w	r2, [r3, #44]!
    57cc:	626b      	str	r3, [r5, #36]	; 0x24
    57ce:	62ac      	str	r4, [r5, #40]	; 0x28
    57d0:	2006      	movs	r0, #6
    57d2:	e751      	b.n	5678 <__gnu_unwind_pr_common+0xdc>
    57d4:	465c      	mov	r4, fp
    57d6:	e7d1      	b.n	577c <__gnu_unwind_pr_common+0x1e0>
    57d8:	a905      	add	r1, sp, #20
    57da:	4630      	mov	r0, r6
    57dc:	f000 fa90 	bl	5d00 <__gnu_unwind_execute>
    57e0:	2800      	cmp	r0, #0
    57e2:	f47f af48 	bne.w	5676 <__gnu_unwind_pr_common+0xda>
    57e6:	9b01      	ldr	r3, [sp, #4]
    57e8:	2b00      	cmp	r3, #0
    57ea:	f43f af54 	beq.w	5696 <__gnu_unwind_pr_common+0xfa>
    57ee:	210f      	movs	r1, #15
    57f0:	4630      	mov	r0, r6
    57f2:	f7ff fe6b 	bl	54cc <_Unwind_GetGR>
    57f6:	210e      	movs	r1, #14
    57f8:	4602      	mov	r2, r0
    57fa:	4630      	mov	r0, r6
    57fc:	f7ff fe88 	bl	5510 <_Unwind_SetGR>
    5800:	4630      	mov	r0, r6
    5802:	4a1a      	ldr	r2, [pc, #104]	; (586c <__gnu_unwind_pr_common+0x2d0>)
    5804:	210f      	movs	r1, #15
    5806:	f7ff fe83 	bl	5510 <_Unwind_SetGR>
    580a:	2007      	movs	r0, #7
    580c:	b009      	add	sp, #36	; 0x24
    580e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5812:	4620      	mov	r0, r4
    5814:	f7ff fc7c 	bl	5110 <selfrel_offset31>
    5818:	3404      	adds	r4, #4
    581a:	4607      	mov	r7, r0
    581c:	63ac      	str	r4, [r5, #56]	; 0x38
    581e:	4628      	mov	r0, r5
    5820:	f3af 8000 	nop.w
    5824:	2800      	cmp	r0, #0
    5826:	f43f af26 	beq.w	5676 <__gnu_unwind_pr_common+0xda>
    582a:	4630      	mov	r0, r6
    582c:	463a      	mov	r2, r7
    582e:	210f      	movs	r1, #15
    5830:	f7ff fe6e 	bl	5510 <_Unwind_SetGR>
    5834:	2007      	movs	r0, #7
    5836:	e71f      	b.n	5678 <__gnu_unwind_pr_common+0xdc>
    5838:	4630      	mov	r0, r6
    583a:	210d      	movs	r1, #13
    583c:	f7ff fe46 	bl	54cc <_Unwind_GetGR>
    5840:	6228      	str	r0, [r5, #32]
    5842:	9b04      	ldr	r3, [sp, #16]
    5844:	626b      	str	r3, [r5, #36]	; 0x24
    5846:	e7c2      	b.n	57ce <__gnu_unwind_pr_common+0x232>
    5848:	f10a 0001 	add.w	r0, sl, #1
    584c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    5850:	f7ff fc5e 	bl	5110 <selfrel_offset31>
    5854:	210f      	movs	r1, #15
    5856:	4602      	mov	r2, r0
    5858:	4630      	mov	r0, r6
    585a:	f7ff fe59 	bl	5510 <_Unwind_SetGR>
    585e:	4630      	mov	r0, r6
    5860:	462a      	mov	r2, r5
    5862:	4641      	mov	r1, r8
    5864:	f7ff fe54 	bl	5510 <_Unwind_SetGR>
    5868:	2007      	movs	r0, #7
    586a:	e705      	b.n	5678 <__gnu_unwind_pr_common+0xdc>
    586c:	00000000 	.word	0x00000000

00005870 <__aeabi_unwind_cpp_pr0>:
    5870:	2300      	movs	r3, #0
    5872:	e693      	b.n	559c <__gnu_unwind_pr_common>

00005874 <__aeabi_unwind_cpp_pr1>:
    5874:	2301      	movs	r3, #1
    5876:	e691      	b.n	559c <__gnu_unwind_pr_common>

00005878 <__aeabi_unwind_cpp_pr2>:
    5878:	2302      	movs	r3, #2
    587a:	e68f      	b.n	559c <__gnu_unwind_pr_common>

0000587c <_Unwind_VRS_Pop>:
    587c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5880:	4605      	mov	r5, r0
    5882:	b0c4      	sub	sp, #272	; 0x110
    5884:	2904      	cmp	r1, #4
    5886:	d806      	bhi.n	5896 <_Unwind_VRS_Pop+0x1a>
    5888:	e8df f001 	tbb	[pc, r1]
    588c:	03052b4d 	.word	0x03052b4d
    5890:	09          	.byte	0x09
    5891:	00          	.byte	0x00
    5892:	2b03      	cmp	r3, #3
    5894:	d05f      	beq.n	5956 <_Unwind_VRS_Pop+0xda>
    5896:	2002      	movs	r0, #2
    5898:	b044      	add	sp, #272	; 0x110
    589a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    589e:	2b00      	cmp	r3, #0
    58a0:	d1f9      	bne.n	5896 <_Unwind_VRS_Pop+0x1a>
    58a2:	2a10      	cmp	r2, #16
    58a4:	d8f7      	bhi.n	5896 <_Unwind_VRS_Pop+0x1a>
    58a6:	682b      	ldr	r3, [r5, #0]
    58a8:	06dc      	lsls	r4, r3, #27
    58aa:	f100 80f4 	bmi.w	5a96 <_Unwind_VRS_Pop+0x21a>
    58ae:	ac22      	add	r4, sp, #136	; 0x88
    58b0:	4620      	mov	r0, r4
    58b2:	9201      	str	r2, [sp, #4]
    58b4:	f000 f994 	bl	5be0 <__gnu_Unwind_Save_WMMXC>
    58b8:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    58ba:	9a01      	ldr	r2, [sp, #4]
    58bc:	2300      	movs	r3, #0
    58be:	2601      	movs	r6, #1
    58c0:	fa06 f103 	lsl.w	r1, r6, r3
    58c4:	4211      	tst	r1, r2
    58c6:	d003      	beq.n	58d0 <_Unwind_VRS_Pop+0x54>
    58c8:	6801      	ldr	r1, [r0, #0]
    58ca:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
    58ce:	3004      	adds	r0, #4
    58d0:	3301      	adds	r3, #1
    58d2:	2b04      	cmp	r3, #4
    58d4:	d1f4      	bne.n	58c0 <_Unwind_VRS_Pop+0x44>
    58d6:	63a8      	str	r0, [r5, #56]	; 0x38
    58d8:	4620      	mov	r0, r4
    58da:	f000 f977 	bl	5bcc <__gnu_Unwind_Restore_WMMXC>
    58de:	2000      	movs	r0, #0
    58e0:	e7da      	b.n	5898 <_Unwind_VRS_Pop+0x1c>
    58e2:	2b01      	cmp	r3, #1
    58e4:	ea4f 4612 	mov.w	r6, r2, lsr #16
    58e8:	b297      	uxth	r7, r2
    58ea:	d052      	beq.n	5992 <_Unwind_VRS_Pop+0x116>
    58ec:	2b05      	cmp	r3, #5
    58ee:	d1d2      	bne.n	5896 <_Unwind_VRS_Pop+0x1a>
    58f0:	eb06 0807 	add.w	r8, r6, r7
    58f4:	f1b8 0f20 	cmp.w	r8, #32
    58f8:	d8cd      	bhi.n	5896 <_Unwind_VRS_Pop+0x1a>
    58fa:	2e0f      	cmp	r6, #15
    58fc:	f240 8099 	bls.w	5a32 <_Unwind_VRS_Pop+0x1b6>
    5900:	46b8      	mov	r8, r7
    5902:	2f00      	cmp	r7, #0
    5904:	f040 80db 	bne.w	5abe <_Unwind_VRS_Pop+0x242>
    5908:	6baa      	ldr	r2, [r5, #56]	; 0x38
    590a:	63aa      	str	r2, [r5, #56]	; 0x38
    590c:	2e0f      	cmp	r6, #15
    590e:	f240 80be 	bls.w	5a8e <_Unwind_VRS_Pop+0x212>
    5912:	f1b8 0f00 	cmp.w	r8, #0
    5916:	d002      	beq.n	591e <_Unwind_VRS_Pop+0xa2>
    5918:	a802      	add	r0, sp, #8
    591a:	f000 f90b 	bl	5b34 <__gnu_Unwind_Restore_VFP_D_16_to_31>
    591e:	2000      	movs	r0, #0
    5920:	b044      	add	sp, #272	; 0x110
    5922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5926:	2b00      	cmp	r3, #0
    5928:	d1b5      	bne.n	5896 <_Unwind_VRS_Pop+0x1a>
    592a:	6bac      	ldr	r4, [r5, #56]	; 0x38
    592c:	b297      	uxth	r7, r2
    592e:	1d28      	adds	r0, r5, #4
    5930:	2601      	movs	r6, #1
    5932:	fa06 f103 	lsl.w	r1, r6, r3
    5936:	4239      	tst	r1, r7
    5938:	f103 0301 	add.w	r3, r3, #1
    593c:	d002      	beq.n	5944 <_Unwind_VRS_Pop+0xc8>
    593e:	6821      	ldr	r1, [r4, #0]
    5940:	6001      	str	r1, [r0, #0]
    5942:	3404      	adds	r4, #4
    5944:	2b10      	cmp	r3, #16
    5946:	f100 0004 	add.w	r0, r0, #4
    594a:	d1f2      	bne.n	5932 <_Unwind_VRS_Pop+0xb6>
    594c:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
    5950:	d1e5      	bne.n	591e <_Unwind_VRS_Pop+0xa2>
    5952:	63ac      	str	r4, [r5, #56]	; 0x38
    5954:	e7a0      	b.n	5898 <_Unwind_VRS_Pop+0x1c>
    5956:	0c16      	lsrs	r6, r2, #16
    5958:	b297      	uxth	r7, r2
    595a:	19f3      	adds	r3, r6, r7
    595c:	2b10      	cmp	r3, #16
    595e:	d89a      	bhi.n	5896 <_Unwind_VRS_Pop+0x1a>
    5960:	682b      	ldr	r3, [r5, #0]
    5962:	071a      	lsls	r2, r3, #28
    5964:	d45d      	bmi.n	5a22 <_Unwind_VRS_Pop+0x1a6>
    5966:	ac22      	add	r4, sp, #136	; 0x88
    5968:	4620      	mov	r0, r4
    596a:	f000 f90d 	bl	5b88 <__gnu_Unwind_Save_WMMXD>
    596e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
    5972:	6bab      	ldr	r3, [r5, #56]	; 0x38
    5974:	b13f      	cbz	r7, 5986 <_Unwind_VRS_Pop+0x10a>
    5976:	eb03 02c7 	add.w	r2, r3, r7, lsl #3
    597a:	6818      	ldr	r0, [r3, #0]
    597c:	f841 0b04 	str.w	r0, [r1], #4
    5980:	3304      	adds	r3, #4
    5982:	4293      	cmp	r3, r2
    5984:	d1f9      	bne.n	597a <_Unwind_VRS_Pop+0xfe>
    5986:	4620      	mov	r0, r4
    5988:	63ab      	str	r3, [r5, #56]	; 0x38
    598a:	f000 f8db 	bl	5b44 <__gnu_Unwind_Restore_WMMXD>
    598e:	2000      	movs	r0, #0
    5990:	e782      	b.n	5898 <_Unwind_VRS_Pop+0x1c>
    5992:	19f2      	adds	r2, r6, r7
    5994:	2a10      	cmp	r2, #16
    5996:	f63f af7e 	bhi.w	5896 <_Unwind_VRS_Pop+0x1a>
    599a:	2e0f      	cmp	r6, #15
    599c:	f63f af7b 	bhi.w	5896 <_Unwind_VRS_Pop+0x1a>
    59a0:	682a      	ldr	r2, [r5, #0]
    59a2:	07d1      	lsls	r1, r2, #31
    59a4:	d508      	bpl.n	59b8 <_Unwind_VRS_Pop+0x13c>
    59a6:	4628      	mov	r0, r5
    59a8:	f022 0203 	bic.w	r2, r2, #3
    59ac:	f840 2b48 	str.w	r2, [r0], #72
    59b0:	9301      	str	r3, [sp, #4]
    59b2:	f000 f8b3 	bl	5b1c <__gnu_Unwind_Save_VFP>
    59b6:	9b01      	ldr	r3, [sp, #4]
    59b8:	9301      	str	r3, [sp, #4]
    59ba:	ac22      	add	r4, sp, #136	; 0x88
    59bc:	4620      	mov	r0, r4
    59be:	f000 f8ad 	bl	5b1c <__gnu_Unwind_Save_VFP>
    59c2:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    59c4:	9b01      	ldr	r3, [sp, #4]
    59c6:	2f00      	cmp	r7, #0
    59c8:	f000 8095 	beq.w	5af6 <_Unwind_VRS_Pop+0x27a>
    59cc:	007f      	lsls	r7, r7, #1
    59ce:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
    59d2:	f04f 0800 	mov.w	r8, #0
    59d6:	3c04      	subs	r4, #4
    59d8:	eb01 0287 	add.w	r2, r1, r7, lsl #2
    59dc:	f851 0b04 	ldr.w	r0, [r1], #4
    59e0:	f844 0f04 	str.w	r0, [r4, #4]!
    59e4:	4291      	cmp	r1, r2
    59e6:	d1f9      	bne.n	59dc <_Unwind_VRS_Pop+0x160>
    59e8:	f1b8 0f00 	cmp.w	r8, #0
    59ec:	d00f      	beq.n	5a0e <_Unwind_VRS_Pop+0x192>
    59ee:	ac02      	add	r4, sp, #8
    59f0:	2e10      	cmp	r6, #16
    59f2:	4631      	mov	r1, r6
    59f4:	bf38      	it	cc
    59f6:	2110      	movcc	r1, #16
    59f8:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    59fc:	3984      	subs	r1, #132	; 0x84
    59fe:	eb02 04c8 	add.w	r4, r2, r8, lsl #3
    5a02:	f852 0b04 	ldr.w	r0, [r2], #4
    5a06:	f841 0f04 	str.w	r0, [r1, #4]!
    5a0a:	4294      	cmp	r4, r2
    5a0c:	d1f9      	bne.n	5a02 <_Unwind_VRS_Pop+0x186>
    5a0e:	2b01      	cmp	r3, #1
    5a10:	f47f af7b 	bne.w	590a <_Unwind_VRS_Pop+0x8e>
    5a14:	ac22      	add	r4, sp, #136	; 0x88
    5a16:	3204      	adds	r2, #4
    5a18:	63aa      	str	r2, [r5, #56]	; 0x38
    5a1a:	4620      	mov	r0, r4
    5a1c:	f000 f87a 	bl	5b14 <__gnu_Unwind_Restore_VFP>
    5a20:	e77d      	b.n	591e <_Unwind_VRS_Pop+0xa2>
    5a22:	f023 0308 	bic.w	r3, r3, #8
    5a26:	602b      	str	r3, [r5, #0]
    5a28:	f505 70a8 	add.w	r0, r5, #336	; 0x150
    5a2c:	f000 f8ac 	bl	5b88 <__gnu_Unwind_Save_WMMXD>
    5a30:	e799      	b.n	5966 <_Unwind_VRS_Pop+0xea>
    5a32:	f1b8 0f10 	cmp.w	r8, #16
    5a36:	682a      	ldr	r2, [r5, #0]
    5a38:	d943      	bls.n	5ac2 <_Unwind_VRS_Pop+0x246>
    5a3a:	07d0      	lsls	r0, r2, #31
    5a3c:	f1a8 0810 	sub.w	r8, r8, #16
    5a40:	d50b      	bpl.n	5a5a <_Unwind_VRS_Pop+0x1de>
    5a42:	4628      	mov	r0, r5
    5a44:	f022 0201 	bic.w	r2, r2, #1
    5a48:	f042 0202 	orr.w	r2, r2, #2
    5a4c:	f840 2b48 	str.w	r2, [r0], #72
    5a50:	9301      	str	r3, [sp, #4]
    5a52:	f000 f86b 	bl	5b2c <__gnu_Unwind_Save_VFP_D>
    5a56:	682a      	ldr	r2, [r5, #0]
    5a58:	9b01      	ldr	r3, [sp, #4]
    5a5a:	0751      	lsls	r1, r2, #29
    5a5c:	d425      	bmi.n	5aaa <_Unwind_VRS_Pop+0x22e>
    5a5e:	2e0f      	cmp	r6, #15
    5a60:	d804      	bhi.n	5a6c <_Unwind_VRS_Pop+0x1f0>
    5a62:	a822      	add	r0, sp, #136	; 0x88
    5a64:	9301      	str	r3, [sp, #4]
    5a66:	f000 f861 	bl	5b2c <__gnu_Unwind_Save_VFP_D>
    5a6a:	9b01      	ldr	r3, [sp, #4]
    5a6c:	9301      	str	r3, [sp, #4]
    5a6e:	ac02      	add	r4, sp, #8
    5a70:	4620      	mov	r0, r4
    5a72:	f000 f863 	bl	5b3c <__gnu_Unwind_Save_VFP_D_16_to_31>
    5a76:	f1c6 0110 	rsb	r1, r6, #16
    5a7a:	2900      	cmp	r1, #0
    5a7c:	6baa      	ldr	r2, [r5, #56]	; 0x38
    5a7e:	9b01      	ldr	r3, [sp, #4]
    5a80:	ddb6      	ble.n	59f0 <_Unwind_VRS_Pop+0x174>
    5a82:	ac22      	add	r4, sp, #136	; 0x88
    5a84:	004f      	lsls	r7, r1, #1
    5a86:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
    5a8a:	4611      	mov	r1, r2
    5a8c:	e7a3      	b.n	59d6 <_Unwind_VRS_Pop+0x15a>
    5a8e:	a822      	add	r0, sp, #136	; 0x88
    5a90:	f000 f848 	bl	5b24 <__gnu_Unwind_Restore_VFP_D>
    5a94:	e73d      	b.n	5912 <_Unwind_VRS_Pop+0x96>
    5a96:	f023 0310 	bic.w	r3, r3, #16
    5a9a:	602b      	str	r3, [r5, #0]
    5a9c:	f505 70e8 	add.w	r0, r5, #464	; 0x1d0
    5aa0:	9201      	str	r2, [sp, #4]
    5aa2:	f000 f89d 	bl	5be0 <__gnu_Unwind_Save_WMMXC>
    5aa6:	9a01      	ldr	r2, [sp, #4]
    5aa8:	e701      	b.n	58ae <_Unwind_VRS_Pop+0x32>
    5aaa:	4628      	mov	r0, r5
    5aac:	f022 0204 	bic.w	r2, r2, #4
    5ab0:	f840 2bd0 	str.w	r2, [r0], #208
    5ab4:	9301      	str	r3, [sp, #4]
    5ab6:	f000 f841 	bl	5b3c <__gnu_Unwind_Save_VFP_D_16_to_31>
    5aba:	9b01      	ldr	r3, [sp, #4]
    5abc:	e7cf      	b.n	5a5e <_Unwind_VRS_Pop+0x1e2>
    5abe:	682a      	ldr	r2, [r5, #0]
    5ac0:	e7cb      	b.n	5a5a <_Unwind_VRS_Pop+0x1de>
    5ac2:	07d0      	lsls	r0, r2, #31
    5ac4:	d50a      	bpl.n	5adc <_Unwind_VRS_Pop+0x260>
    5ac6:	4628      	mov	r0, r5
    5ac8:	f022 0201 	bic.w	r2, r2, #1
    5acc:	f042 0202 	orr.w	r2, r2, #2
    5ad0:	f840 2b48 	str.w	r2, [r0], #72
    5ad4:	9301      	str	r3, [sp, #4]
    5ad6:	f000 f829 	bl	5b2c <__gnu_Unwind_Save_VFP_D>
    5ada:	9b01      	ldr	r3, [sp, #4]
    5adc:	9301      	str	r3, [sp, #4]
    5ade:	ac22      	add	r4, sp, #136	; 0x88
    5ae0:	4620      	mov	r0, r4
    5ae2:	f000 f823 	bl	5b2c <__gnu_Unwind_Save_VFP_D>
    5ae6:	46b8      	mov	r8, r7
    5ae8:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    5aea:	9b01      	ldr	r3, [sp, #4]
    5aec:	2f00      	cmp	r7, #0
    5aee:	f47f af6d 	bne.w	59cc <_Unwind_VRS_Pop+0x150>
    5af2:	460a      	mov	r2, r1
    5af4:	e709      	b.n	590a <_Unwind_VRS_Pop+0x8e>
    5af6:	460a      	mov	r2, r1
    5af8:	e78d      	b.n	5a16 <_Unwind_VRS_Pop+0x19a>
    5afa:	bf00      	nop

00005afc <__restore_core_regs>:
    5afc:	f100 0134 	add.w	r1, r0, #52	; 0x34
    5b00:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
    5b04:	469c      	mov	ip, r3
    5b06:	46a6      	mov	lr, r4
    5b08:	f84c 5d04 	str.w	r5, [ip, #-4]!
    5b0c:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
    5b10:	46e5      	mov	sp, ip
    5b12:	bd00      	pop	{pc}

00005b14 <__gnu_Unwind_Restore_VFP>:
    5b14:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
    5b18:	4770      	bx	lr
    5b1a:	bf00      	nop

00005b1c <__gnu_Unwind_Save_VFP>:
    5b1c:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
    5b20:	4770      	bx	lr
    5b22:	bf00      	nop

00005b24 <__gnu_Unwind_Restore_VFP_D>:
    5b24:	ec90 0b20 	vldmia	r0, {d0-d15}
    5b28:	4770      	bx	lr
    5b2a:	bf00      	nop

00005b2c <__gnu_Unwind_Save_VFP_D>:
    5b2c:	ec80 0b20 	vstmia	r0, {d0-d15}
    5b30:	4770      	bx	lr
    5b32:	bf00      	nop

00005b34 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
    5b34:	ecd0 0b20 	vldmia	r0, {d16-d31}
    5b38:	4770      	bx	lr
    5b3a:	bf00      	nop

00005b3c <__gnu_Unwind_Save_VFP_D_16_to_31>:
    5b3c:	ecc0 0b20 	vstmia	r0, {d16-d31}
    5b40:	4770      	bx	lr
    5b42:	bf00      	nop

00005b44 <__gnu_Unwind_Restore_WMMXD>:
    5b44:	ecf0 0102 	ldfe	f0, [r0], #8
    5b48:	ecf0 1102 	ldfe	f1, [r0], #8
    5b4c:	ecf0 2102 	ldfe	f2, [r0], #8
    5b50:	ecf0 3102 	ldfe	f3, [r0], #8
    5b54:	ecf0 4102 	ldfe	f4, [r0], #8
    5b58:	ecf0 5102 	ldfe	f5, [r0], #8
    5b5c:	ecf0 6102 	ldfe	f6, [r0], #8
    5b60:	ecf0 7102 	ldfe	f7, [r0], #8
    5b64:	ecf0 8102 	ldfp	f0, [r0], #8
    5b68:	ecf0 9102 	ldfp	f1, [r0], #8
    5b6c:	ecf0 a102 	ldfp	f2, [r0], #8
    5b70:	ecf0 b102 	ldfp	f3, [r0], #8
    5b74:	ecf0 c102 	ldfp	f4, [r0], #8
    5b78:	ecf0 d102 	ldfp	f5, [r0], #8
    5b7c:	ecf0 e102 	ldfp	f6, [r0], #8
    5b80:	ecf0 f102 	ldfp	f7, [r0], #8
    5b84:	4770      	bx	lr
    5b86:	bf00      	nop

00005b88 <__gnu_Unwind_Save_WMMXD>:
    5b88:	ece0 0102 	stfe	f0, [r0], #8
    5b8c:	ece0 1102 	stfe	f1, [r0], #8
    5b90:	ece0 2102 	stfe	f2, [r0], #8
    5b94:	ece0 3102 	stfe	f3, [r0], #8
    5b98:	ece0 4102 	stfe	f4, [r0], #8
    5b9c:	ece0 5102 	stfe	f5, [r0], #8
    5ba0:	ece0 6102 	stfe	f6, [r0], #8
    5ba4:	ece0 7102 	stfe	f7, [r0], #8
    5ba8:	ece0 8102 	stfp	f0, [r0], #8
    5bac:	ece0 9102 	stfp	f1, [r0], #8
    5bb0:	ece0 a102 	stfp	f2, [r0], #8
    5bb4:	ece0 b102 	stfp	f3, [r0], #8
    5bb8:	ece0 c102 	stfp	f4, [r0], #8
    5bbc:	ece0 d102 	stfp	f5, [r0], #8
    5bc0:	ece0 e102 	stfp	f6, [r0], #8
    5bc4:	ece0 f102 	stfp	f7, [r0], #8
    5bc8:	4770      	bx	lr
    5bca:	bf00      	nop

00005bcc <__gnu_Unwind_Restore_WMMXC>:
    5bcc:	fcb0 8101 	ldc2	1, cr8, [r0], #4
    5bd0:	fcb0 9101 	ldc2	1, cr9, [r0], #4
    5bd4:	fcb0 a101 	ldc2	1, cr10, [r0], #4
    5bd8:	fcb0 b101 	ldc2	1, cr11, [r0], #4
    5bdc:	4770      	bx	lr
    5bde:	bf00      	nop

00005be0 <__gnu_Unwind_Save_WMMXC>:
    5be0:	fca0 8101 	stc2	1, cr8, [r0], #4
    5be4:	fca0 9101 	stc2	1, cr9, [r0], #4
    5be8:	fca0 a101 	stc2	1, cr10, [r0], #4
    5bec:	fca0 b101 	stc2	1, cr11, [r0], #4
    5bf0:	4770      	bx	lr
    5bf2:	bf00      	nop

00005bf4 <_Unwind_RaiseException>:
    5bf4:	46ec      	mov	ip, sp
    5bf6:	b500      	push	{lr}
    5bf8:	e92d 5000 	stmdb	sp!, {ip, lr}
    5bfc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    5c00:	f04f 0300 	mov.w	r3, #0
    5c04:	e92d 000c 	stmdb	sp!, {r2, r3}
    5c08:	a901      	add	r1, sp, #4
    5c0a:	f7ff fbdd 	bl	53c8 <__gnu_Unwind_RaiseException>
    5c0e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    5c12:	b012      	add	sp, #72	; 0x48
    5c14:	4770      	bx	lr
    5c16:	bf00      	nop

00005c18 <_Unwind_Resume>:
    5c18:	46ec      	mov	ip, sp
    5c1a:	b500      	push	{lr}
    5c1c:	e92d 5000 	stmdb	sp!, {ip, lr}
    5c20:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    5c24:	f04f 0300 	mov.w	r3, #0
    5c28:	e92d 000c 	stmdb	sp!, {r2, r3}
    5c2c:	a901      	add	r1, sp, #4
    5c2e:	f7ff fc05 	bl	543c <__gnu_Unwind_Resume>
    5c32:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    5c36:	b012      	add	sp, #72	; 0x48
    5c38:	4770      	bx	lr
    5c3a:	bf00      	nop

00005c3c <_Unwind_Resume_or_Rethrow>:
    5c3c:	46ec      	mov	ip, sp
    5c3e:	b500      	push	{lr}
    5c40:	e92d 5000 	stmdb	sp!, {ip, lr}
    5c44:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    5c48:	f04f 0300 	mov.w	r3, #0
    5c4c:	e92d 000c 	stmdb	sp!, {r2, r3}
    5c50:	a901      	add	r1, sp, #4
    5c52:	f7ff fc15 	bl	5480 <__gnu_Unwind_Resume_or_Rethrow>
    5c56:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    5c5a:	b012      	add	sp, #72	; 0x48
    5c5c:	4770      	bx	lr
    5c5e:	bf00      	nop

00005c60 <_Unwind_ForcedUnwind>:
    5c60:	46ec      	mov	ip, sp
    5c62:	b500      	push	{lr}
    5c64:	e92d 5000 	stmdb	sp!, {ip, lr}
    5c68:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    5c6c:	f04f 0300 	mov.w	r3, #0
    5c70:	e92d 000c 	stmdb	sp!, {r2, r3}
    5c74:	ab01      	add	r3, sp, #4
    5c76:	f7ff fbd7 	bl	5428 <__gnu_Unwind_ForcedUnwind>
    5c7a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    5c7e:	b012      	add	sp, #72	; 0x48
    5c80:	4770      	bx	lr
    5c82:	bf00      	nop

00005c84 <_Unwind_Backtrace>:
    5c84:	46ec      	mov	ip, sp
    5c86:	b500      	push	{lr}
    5c88:	e92d 5000 	stmdb	sp!, {ip, lr}
    5c8c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    5c90:	f04f 0300 	mov.w	r3, #0
    5c94:	e92d 000c 	stmdb	sp!, {r2, r3}
    5c98:	aa01      	add	r2, sp, #4
    5c9a:	f7ff fc47 	bl	552c <__gnu_Unwind_Backtrace>
    5c9e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    5ca2:	b012      	add	sp, #72	; 0x48
    5ca4:	4770      	bx	lr
    5ca6:	bf00      	nop

00005ca8 <next_unwind_byte>:
    5ca8:	7a02      	ldrb	r2, [r0, #8]
    5caa:	b982      	cbnz	r2, 5cce <next_unwind_byte+0x26>
    5cac:	7a43      	ldrb	r3, [r0, #9]
    5cae:	b1ab      	cbz	r3, 5cdc <next_unwind_byte+0x34>
    5cb0:	6842      	ldr	r2, [r0, #4]
    5cb2:	3b01      	subs	r3, #1
    5cb4:	b410      	push	{r4}
    5cb6:	7243      	strb	r3, [r0, #9]
    5cb8:	6813      	ldr	r3, [r2, #0]
    5cba:	2103      	movs	r1, #3
    5cbc:	1d14      	adds	r4, r2, #4
    5cbe:	7201      	strb	r1, [r0, #8]
    5cc0:	021a      	lsls	r2, r3, #8
    5cc2:	6044      	str	r4, [r0, #4]
    5cc4:	6002      	str	r2, [r0, #0]
    5cc6:	f85d 4b04 	ldr.w	r4, [sp], #4
    5cca:	0e18      	lsrs	r0, r3, #24
    5ccc:	4770      	bx	lr
    5cce:	6803      	ldr	r3, [r0, #0]
    5cd0:	3a01      	subs	r2, #1
    5cd2:	7202      	strb	r2, [r0, #8]
    5cd4:	021a      	lsls	r2, r3, #8
    5cd6:	6002      	str	r2, [r0, #0]
    5cd8:	0e18      	lsrs	r0, r3, #24
    5cda:	4770      	bx	lr
    5cdc:	20b0      	movs	r0, #176	; 0xb0
    5cde:	4770      	bx	lr

00005ce0 <_Unwind_GetGR.constprop.0>:
    5ce0:	b500      	push	{lr}
    5ce2:	b085      	sub	sp, #20
    5ce4:	aa03      	add	r2, sp, #12
    5ce6:	2300      	movs	r3, #0
    5ce8:	9200      	str	r2, [sp, #0]
    5cea:	4619      	mov	r1, r3
    5cec:	220c      	movs	r2, #12
    5cee:	f7ff fbd7 	bl	54a0 <_Unwind_VRS_Get>
    5cf2:	9803      	ldr	r0, [sp, #12]
    5cf4:	b005      	add	sp, #20
    5cf6:	f85d fb04 	ldr.w	pc, [sp], #4
    5cfa:	bf00      	nop

00005cfc <unwind_UCB_from_context>:
    5cfc:	e7f0      	b.n	5ce0 <_Unwind_GetGR.constprop.0>
    5cfe:	bf00      	nop

00005d00 <__gnu_unwind_execute>:
    5d00:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5d04:	4605      	mov	r5, r0
    5d06:	b085      	sub	sp, #20
    5d08:	460e      	mov	r6, r1
    5d0a:	f04f 0800 	mov.w	r8, #0
    5d0e:	4630      	mov	r0, r6
    5d10:	f7ff ffca 	bl	5ca8 <next_unwind_byte>
    5d14:	28b0      	cmp	r0, #176	; 0xb0
    5d16:	4604      	mov	r4, r0
    5d18:	f000 80b1 	beq.w	5e7e <__gnu_unwind_execute+0x17e>
    5d1c:	0607      	lsls	r7, r0, #24
    5d1e:	d520      	bpl.n	5d62 <__gnu_unwind_execute+0x62>
    5d20:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
    5d24:	2b80      	cmp	r3, #128	; 0x80
    5d26:	d065      	beq.n	5df4 <__gnu_unwind_execute+0xf4>
    5d28:	2b90      	cmp	r3, #144	; 0x90
    5d2a:	d036      	beq.n	5d9a <__gnu_unwind_execute+0x9a>
    5d2c:	2ba0      	cmp	r3, #160	; 0xa0
    5d2e:	d078      	beq.n	5e22 <__gnu_unwind_execute+0x122>
    5d30:	2bb0      	cmp	r3, #176	; 0xb0
    5d32:	d047      	beq.n	5dc4 <__gnu_unwind_execute+0xc4>
    5d34:	2bc0      	cmp	r3, #192	; 0xc0
    5d36:	f000 808a 	beq.w	5e4e <__gnu_unwind_execute+0x14e>
    5d3a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    5d3e:	2bd0      	cmp	r3, #208	; 0xd0
    5d40:	d10b      	bne.n	5d5a <__gnu_unwind_execute+0x5a>
    5d42:	f000 0207 	and.w	r2, r0, #7
    5d46:	3201      	adds	r2, #1
    5d48:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    5d4c:	2305      	movs	r3, #5
    5d4e:	2101      	movs	r1, #1
    5d50:	4628      	mov	r0, r5
    5d52:	f7ff fd93 	bl	587c <_Unwind_VRS_Pop>
    5d56:	2800      	cmp	r0, #0
    5d58:	d0d9      	beq.n	5d0e <__gnu_unwind_execute+0xe>
    5d5a:	2009      	movs	r0, #9
    5d5c:	b005      	add	sp, #20
    5d5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5d62:	f10d 090c 	add.w	r9, sp, #12
    5d66:	2300      	movs	r3, #0
    5d68:	4619      	mov	r1, r3
    5d6a:	0087      	lsls	r7, r0, #2
    5d6c:	f8cd 9000 	str.w	r9, [sp]
    5d70:	220d      	movs	r2, #13
    5d72:	4628      	mov	r0, r5
    5d74:	f7ff fb94 	bl	54a0 <_Unwind_VRS_Get>
    5d78:	b2ff      	uxtb	r7, r7
    5d7a:	9b03      	ldr	r3, [sp, #12]
    5d7c:	f8cd 9000 	str.w	r9, [sp]
    5d80:	3704      	adds	r7, #4
    5d82:	0660      	lsls	r0, r4, #25
    5d84:	bf4c      	ite	mi
    5d86:	1bdf      	submi	r7, r3, r7
    5d88:	18ff      	addpl	r7, r7, r3
    5d8a:	2300      	movs	r3, #0
    5d8c:	4619      	mov	r1, r3
    5d8e:	220d      	movs	r2, #13
    5d90:	4628      	mov	r0, r5
    5d92:	9703      	str	r7, [sp, #12]
    5d94:	f7ff fba6 	bl	54e4 <_Unwind_VRS_Set>
    5d98:	e7b9      	b.n	5d0e <__gnu_unwind_execute+0xe>
    5d9a:	f000 030d 	and.w	r3, r0, #13
    5d9e:	2b0d      	cmp	r3, #13
    5da0:	d0db      	beq.n	5d5a <__gnu_unwind_execute+0x5a>
    5da2:	af03      	add	r7, sp, #12
    5da4:	2300      	movs	r3, #0
    5da6:	f000 020f 	and.w	r2, r0, #15
    5daa:	4619      	mov	r1, r3
    5dac:	9700      	str	r7, [sp, #0]
    5dae:	4628      	mov	r0, r5
    5db0:	f7ff fb76 	bl	54a0 <_Unwind_VRS_Get>
    5db4:	2300      	movs	r3, #0
    5db6:	9700      	str	r7, [sp, #0]
    5db8:	4619      	mov	r1, r3
    5dba:	220d      	movs	r2, #13
    5dbc:	4628      	mov	r0, r5
    5dbe:	f7ff fb91 	bl	54e4 <_Unwind_VRS_Set>
    5dc2:	e7a4      	b.n	5d0e <__gnu_unwind_execute+0xe>
    5dc4:	28b1      	cmp	r0, #177	; 0xb1
    5dc6:	d05f      	beq.n	5e88 <__gnu_unwind_execute+0x188>
    5dc8:	28b2      	cmp	r0, #178	; 0xb2
    5dca:	f000 80cc 	beq.w	5f66 <__gnu_unwind_execute+0x266>
    5dce:	28b3      	cmp	r0, #179	; 0xb3
    5dd0:	d07e      	beq.n	5ed0 <__gnu_unwind_execute+0x1d0>
    5dd2:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
    5dd6:	2bb4      	cmp	r3, #180	; 0xb4
    5dd8:	d0bf      	beq.n	5d5a <__gnu_unwind_execute+0x5a>
    5dda:	f000 0207 	and.w	r2, r0, #7
    5dde:	3201      	adds	r2, #1
    5de0:	2301      	movs	r3, #1
    5de2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    5de6:	4619      	mov	r1, r3
    5de8:	4628      	mov	r0, r5
    5dea:	f7ff fd47 	bl	587c <_Unwind_VRS_Pop>
    5dee:	2800      	cmp	r0, #0
    5df0:	d08d      	beq.n	5d0e <__gnu_unwind_execute+0xe>
    5df2:	e7b2      	b.n	5d5a <__gnu_unwind_execute+0x5a>
    5df4:	4630      	mov	r0, r6
    5df6:	f7ff ff57 	bl	5ca8 <next_unwind_byte>
    5dfa:	0224      	lsls	r4, r4, #8
    5dfc:	4304      	orrs	r4, r0
    5dfe:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    5e02:	d0aa      	beq.n	5d5a <__gnu_unwind_execute+0x5a>
    5e04:	0124      	lsls	r4, r4, #4
    5e06:	2300      	movs	r3, #0
    5e08:	b2a2      	uxth	r2, r4
    5e0a:	4619      	mov	r1, r3
    5e0c:	4628      	mov	r0, r5
    5e0e:	f7ff fd35 	bl	587c <_Unwind_VRS_Pop>
    5e12:	2800      	cmp	r0, #0
    5e14:	d1a1      	bne.n	5d5a <__gnu_unwind_execute+0x5a>
    5e16:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    5e1a:	bf18      	it	ne
    5e1c:	f04f 0801 	movne.w	r8, #1
    5e20:	e775      	b.n	5d0e <__gnu_unwind_execute+0xe>
    5e22:	43c2      	mvns	r2, r0
    5e24:	f002 0307 	and.w	r3, r2, #7
    5e28:	f44f 627f 	mov.w	r2, #4080	; 0xff0
    5e2c:	411a      	asrs	r2, r3
    5e2e:	0701      	lsls	r1, r0, #28
    5e30:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
    5e34:	f04f 0300 	mov.w	r3, #0
    5e38:	bf48      	it	mi
    5e3a:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
    5e3e:	4619      	mov	r1, r3
    5e40:	4628      	mov	r0, r5
    5e42:	f7ff fd1b 	bl	587c <_Unwind_VRS_Pop>
    5e46:	2800      	cmp	r0, #0
    5e48:	f43f af61 	beq.w	5d0e <__gnu_unwind_execute+0xe>
    5e4c:	e785      	b.n	5d5a <__gnu_unwind_execute+0x5a>
    5e4e:	28c6      	cmp	r0, #198	; 0xc6
    5e50:	d051      	beq.n	5ef6 <__gnu_unwind_execute+0x1f6>
    5e52:	28c7      	cmp	r0, #199	; 0xc7
    5e54:	d05a      	beq.n	5f0c <__gnu_unwind_execute+0x20c>
    5e56:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    5e5a:	2bc0      	cmp	r3, #192	; 0xc0
    5e5c:	d069      	beq.n	5f32 <__gnu_unwind_execute+0x232>
    5e5e:	28c8      	cmp	r0, #200	; 0xc8
    5e60:	d075      	beq.n	5f4e <__gnu_unwind_execute+0x24e>
    5e62:	28c9      	cmp	r0, #201	; 0xc9
    5e64:	f47f af79 	bne.w	5d5a <__gnu_unwind_execute+0x5a>
    5e68:	4630      	mov	r0, r6
    5e6a:	f7ff ff1d 	bl	5ca8 <next_unwind_byte>
    5e6e:	0302      	lsls	r2, r0, #12
    5e70:	f000 000f 	and.w	r0, r0, #15
    5e74:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
    5e78:	3001      	adds	r0, #1
    5e7a:	4302      	orrs	r2, r0
    5e7c:	e766      	b.n	5d4c <__gnu_unwind_execute+0x4c>
    5e7e:	f1b8 0f00 	cmp.w	r8, #0
    5e82:	d014      	beq.n	5eae <__gnu_unwind_execute+0x1ae>
    5e84:	2000      	movs	r0, #0
    5e86:	e769      	b.n	5d5c <__gnu_unwind_execute+0x5c>
    5e88:	4630      	mov	r0, r6
    5e8a:	f7ff ff0d 	bl	5ca8 <next_unwind_byte>
    5e8e:	2800      	cmp	r0, #0
    5e90:	f43f af63 	beq.w	5d5a <__gnu_unwind_execute+0x5a>
    5e94:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    5e98:	f47f af5f 	bne.w	5d5a <__gnu_unwind_execute+0x5a>
    5e9c:	4602      	mov	r2, r0
    5e9e:	4619      	mov	r1, r3
    5ea0:	4628      	mov	r0, r5
    5ea2:	f7ff fceb 	bl	587c <_Unwind_VRS_Pop>
    5ea6:	2800      	cmp	r0, #0
    5ea8:	f43f af31 	beq.w	5d0e <__gnu_unwind_execute+0xe>
    5eac:	e755      	b.n	5d5a <__gnu_unwind_execute+0x5a>
    5eae:	ac03      	add	r4, sp, #12
    5eb0:	4643      	mov	r3, r8
    5eb2:	220e      	movs	r2, #14
    5eb4:	4641      	mov	r1, r8
    5eb6:	9400      	str	r4, [sp, #0]
    5eb8:	4628      	mov	r0, r5
    5eba:	f7ff faf1 	bl	54a0 <_Unwind_VRS_Get>
    5ebe:	9400      	str	r4, [sp, #0]
    5ec0:	4628      	mov	r0, r5
    5ec2:	4643      	mov	r3, r8
    5ec4:	220f      	movs	r2, #15
    5ec6:	4641      	mov	r1, r8
    5ec8:	f7ff fb0c 	bl	54e4 <_Unwind_VRS_Set>
    5ecc:	4640      	mov	r0, r8
    5ece:	e745      	b.n	5d5c <__gnu_unwind_execute+0x5c>
    5ed0:	4630      	mov	r0, r6
    5ed2:	f7ff fee9 	bl	5ca8 <next_unwind_byte>
    5ed6:	0301      	lsls	r1, r0, #12
    5ed8:	f000 000f 	and.w	r0, r0, #15
    5edc:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
    5ee0:	1c42      	adds	r2, r0, #1
    5ee2:	2301      	movs	r3, #1
    5ee4:	430a      	orrs	r2, r1
    5ee6:	4628      	mov	r0, r5
    5ee8:	4619      	mov	r1, r3
    5eea:	f7ff fcc7 	bl	587c <_Unwind_VRS_Pop>
    5eee:	2800      	cmp	r0, #0
    5ef0:	f43f af0d 	beq.w	5d0e <__gnu_unwind_execute+0xe>
    5ef4:	e731      	b.n	5d5a <__gnu_unwind_execute+0x5a>
    5ef6:	4630      	mov	r0, r6
    5ef8:	f7ff fed6 	bl	5ca8 <next_unwind_byte>
    5efc:	0301      	lsls	r1, r0, #12
    5efe:	f000 000f 	and.w	r0, r0, #15
    5f02:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
    5f06:	1c42      	adds	r2, r0, #1
    5f08:	2303      	movs	r3, #3
    5f0a:	e7eb      	b.n	5ee4 <__gnu_unwind_execute+0x1e4>
    5f0c:	4630      	mov	r0, r6
    5f0e:	f7ff fecb 	bl	5ca8 <next_unwind_byte>
    5f12:	4602      	mov	r2, r0
    5f14:	2800      	cmp	r0, #0
    5f16:	f43f af20 	beq.w	5d5a <__gnu_unwind_execute+0x5a>
    5f1a:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    5f1e:	f47f af1c 	bne.w	5d5a <__gnu_unwind_execute+0x5a>
    5f22:	2104      	movs	r1, #4
    5f24:	4628      	mov	r0, r5
    5f26:	f7ff fca9 	bl	587c <_Unwind_VRS_Pop>
    5f2a:	2800      	cmp	r0, #0
    5f2c:	f43f aeef 	beq.w	5d0e <__gnu_unwind_execute+0xe>
    5f30:	e713      	b.n	5d5a <__gnu_unwind_execute+0x5a>
    5f32:	f000 020f 	and.w	r2, r0, #15
    5f36:	3201      	adds	r2, #1
    5f38:	2303      	movs	r3, #3
    5f3a:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
    5f3e:	4619      	mov	r1, r3
    5f40:	4628      	mov	r0, r5
    5f42:	f7ff fc9b 	bl	587c <_Unwind_VRS_Pop>
    5f46:	2800      	cmp	r0, #0
    5f48:	f43f aee1 	beq.w	5d0e <__gnu_unwind_execute+0xe>
    5f4c:	e705      	b.n	5d5a <__gnu_unwind_execute+0x5a>
    5f4e:	4630      	mov	r0, r6
    5f50:	f7ff feaa 	bl	5ca8 <next_unwind_byte>
    5f54:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
    5f58:	f000 030f 	and.w	r3, r0, #15
    5f5c:	3210      	adds	r2, #16
    5f5e:	3301      	adds	r3, #1
    5f60:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
    5f64:	e6f2      	b.n	5d4c <__gnu_unwind_execute+0x4c>
    5f66:	2300      	movs	r3, #0
    5f68:	f10d 090c 	add.w	r9, sp, #12
    5f6c:	220d      	movs	r2, #13
    5f6e:	4619      	mov	r1, r3
    5f70:	f8cd 9000 	str.w	r9, [sp]
    5f74:	4628      	mov	r0, r5
    5f76:	f7ff fa93 	bl	54a0 <_Unwind_VRS_Get>
    5f7a:	4630      	mov	r0, r6
    5f7c:	f7ff fe94 	bl	5ca8 <next_unwind_byte>
    5f80:	0602      	lsls	r2, r0, #24
    5f82:	f04f 0702 	mov.w	r7, #2
    5f86:	d50c      	bpl.n	5fa2 <__gnu_unwind_execute+0x2a2>
    5f88:	9b03      	ldr	r3, [sp, #12]
    5f8a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    5f8e:	40b8      	lsls	r0, r7
    5f90:	4403      	add	r3, r0
    5f92:	4630      	mov	r0, r6
    5f94:	9303      	str	r3, [sp, #12]
    5f96:	f7ff fe87 	bl	5ca8 <next_unwind_byte>
    5f9a:	0603      	lsls	r3, r0, #24
    5f9c:	f107 0707 	add.w	r7, r7, #7
    5fa0:	d4f2      	bmi.n	5f88 <__gnu_unwind_execute+0x288>
    5fa2:	9b03      	ldr	r3, [sp, #12]
    5fa4:	f8cd 9000 	str.w	r9, [sp]
    5fa8:	f000 047f 	and.w	r4, r0, #127	; 0x7f
    5fac:	f503 7201 	add.w	r2, r3, #516	; 0x204
    5fb0:	40bc      	lsls	r4, r7
    5fb2:	2300      	movs	r3, #0
    5fb4:	4414      	add	r4, r2
    5fb6:	4619      	mov	r1, r3
    5fb8:	220d      	movs	r2, #13
    5fba:	4628      	mov	r0, r5
    5fbc:	9403      	str	r4, [sp, #12]
    5fbe:	f7ff fa91 	bl	54e4 <_Unwind_VRS_Set>
    5fc2:	e6a4      	b.n	5d0e <__gnu_unwind_execute+0xe>

00005fc4 <__gnu_unwind_frame>:
    5fc4:	b510      	push	{r4, lr}
    5fc6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    5fc8:	b084      	sub	sp, #16
    5fca:	685a      	ldr	r2, [r3, #4]
    5fcc:	2003      	movs	r0, #3
    5fce:	f88d 000c 	strb.w	r0, [sp, #12]
    5fd2:	79dc      	ldrb	r4, [r3, #7]
    5fd4:	f88d 400d 	strb.w	r4, [sp, #13]
    5fd8:	0212      	lsls	r2, r2, #8
    5fda:	3308      	adds	r3, #8
    5fdc:	4608      	mov	r0, r1
    5fde:	a901      	add	r1, sp, #4
    5fe0:	9201      	str	r2, [sp, #4]
    5fe2:	9302      	str	r3, [sp, #8]
    5fe4:	f7ff fe8c 	bl	5d00 <__gnu_unwind_execute>
    5fe8:	b004      	add	sp, #16
    5fea:	bd10      	pop	{r4, pc}

00005fec <_Unwind_GetRegionStart>:
    5fec:	b508      	push	{r3, lr}
    5fee:	f7ff fe85 	bl	5cfc <unwind_UCB_from_context>
    5ff2:	6c80      	ldr	r0, [r0, #72]	; 0x48
    5ff4:	bd08      	pop	{r3, pc}
    5ff6:	bf00      	nop

00005ff8 <_Unwind_GetLanguageSpecificData>:
    5ff8:	b508      	push	{r3, lr}
    5ffa:	f7ff fe7f 	bl	5cfc <unwind_UCB_from_context>
    5ffe:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    6000:	79c3      	ldrb	r3, [r0, #7]
    6002:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    6006:	3008      	adds	r0, #8
    6008:	bd08      	pop	{r3, pc}
    600a:	bf00      	nop

0000600c <_Unwind_GetDataRelBase>:
    600c:	b508      	push	{r3, lr}
    600e:	f000 f807 	bl	6020 <abort>
    6012:	bf00      	nop

00006014 <_Unwind_GetTextRelBase>:
    6014:	b508      	push	{r3, lr}
    6016:	f7ff fff9 	bl	600c <_Unwind_GetDataRelBase>
    601a:	bf00      	nop

0000601c <__aeabi_idiv0>:
    601c:	4770      	bx	lr
    601e:	bf00      	nop

00006020 <abort>:
    6020:	b508      	push	{r3, lr}
    6022:	2006      	movs	r0, #6
    6024:	f000 f864 	bl	60f0 <raise>
    6028:	2001      	movs	r0, #1
    602a:	f7fb fee5 	bl	1df8 <_exit>
    602e:	Address 0x000000000000602e is out of bounds.


00006030 <__libc_init_array>:
    6030:	b570      	push	{r4, r5, r6, lr}
    6032:	4e0d      	ldr	r6, [pc, #52]	; (6068 <__libc_init_array+0x38>)
    6034:	4c0d      	ldr	r4, [pc, #52]	; (606c <__libc_init_array+0x3c>)
    6036:	1ba4      	subs	r4, r4, r6
    6038:	10a4      	asrs	r4, r4, #2
    603a:	2500      	movs	r5, #0
    603c:	42a5      	cmp	r5, r4
    603e:	d109      	bne.n	6054 <__libc_init_array+0x24>
    6040:	4e0b      	ldr	r6, [pc, #44]	; (6070 <__libc_init_array+0x40>)
    6042:	4c0c      	ldr	r4, [pc, #48]	; (6074 <__libc_init_array+0x44>)
    6044:	f7fa f95c 	bl	300 <_init>
    6048:	1ba4      	subs	r4, r4, r6
    604a:	10a4      	asrs	r4, r4, #2
    604c:	2500      	movs	r5, #0
    604e:	42a5      	cmp	r5, r4
    6050:	d105      	bne.n	605e <__libc_init_array+0x2e>
    6052:	bd70      	pop	{r4, r5, r6, pc}
    6054:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    6058:	4798      	blx	r3
    605a:	3501      	adds	r5, #1
    605c:	e7ee      	b.n	603c <__libc_init_array+0xc>
    605e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    6062:	4798      	blx	r3
    6064:	3501      	adds	r5, #1
    6066:	e7f2      	b.n	604e <__libc_init_array+0x1e>
    6068:	0000030c 	.word	0x0000030c
    606c:	0000030c 	.word	0x0000030c
    6070:	0000030c 	.word	0x0000030c
    6074:	0000031c 	.word	0x0000031c

00006078 <memcpy>:
    6078:	b510      	push	{r4, lr}
    607a:	1e43      	subs	r3, r0, #1
    607c:	440a      	add	r2, r1
    607e:	4291      	cmp	r1, r2
    6080:	d100      	bne.n	6084 <memcpy+0xc>
    6082:	bd10      	pop	{r4, pc}
    6084:	f811 4b01 	ldrb.w	r4, [r1], #1
    6088:	f803 4f01 	strb.w	r4, [r3, #1]!
    608c:	e7f7      	b.n	607e <memcpy+0x6>

0000608e <memset>:
    608e:	4402      	add	r2, r0
    6090:	4603      	mov	r3, r0
    6092:	4293      	cmp	r3, r2
    6094:	d100      	bne.n	6098 <memset+0xa>
    6096:	4770      	bx	lr
    6098:	f803 1b01 	strb.w	r1, [r3], #1
    609c:	e7f9      	b.n	6092 <memset+0x4>

0000609e <_raise_r>:
    609e:	291f      	cmp	r1, #31
    60a0:	b538      	push	{r3, r4, r5, lr}
    60a2:	4604      	mov	r4, r0
    60a4:	460d      	mov	r5, r1
    60a6:	d904      	bls.n	60b2 <_raise_r+0x14>
    60a8:	2316      	movs	r3, #22
    60aa:	6003      	str	r3, [r0, #0]
    60ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    60b0:	bd38      	pop	{r3, r4, r5, pc}
    60b2:	6c42      	ldr	r2, [r0, #68]	; 0x44
    60b4:	b112      	cbz	r2, 60bc <_raise_r+0x1e>
    60b6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    60ba:	b94b      	cbnz	r3, 60d0 <_raise_r+0x32>
    60bc:	4620      	mov	r0, r4
    60be:	f000 f831 	bl	6124 <_getpid_r>
    60c2:	462a      	mov	r2, r5
    60c4:	4601      	mov	r1, r0
    60c6:	4620      	mov	r0, r4
    60c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    60cc:	f000 b818 	b.w	6100 <_kill_r>
    60d0:	2b01      	cmp	r3, #1
    60d2:	d00a      	beq.n	60ea <_raise_r+0x4c>
    60d4:	1c59      	adds	r1, r3, #1
    60d6:	d103      	bne.n	60e0 <_raise_r+0x42>
    60d8:	2316      	movs	r3, #22
    60da:	6003      	str	r3, [r0, #0]
    60dc:	2001      	movs	r0, #1
    60de:	e7e7      	b.n	60b0 <_raise_r+0x12>
    60e0:	2400      	movs	r4, #0
    60e2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
    60e6:	4628      	mov	r0, r5
    60e8:	4798      	blx	r3
    60ea:	2000      	movs	r0, #0
    60ec:	e7e0      	b.n	60b0 <_raise_r+0x12>
    60ee:	Address 0x00000000000060ee is out of bounds.


000060f0 <raise>:
    60f0:	4b02      	ldr	r3, [pc, #8]	; (60fc <raise+0xc>)
    60f2:	4601      	mov	r1, r0
    60f4:	6818      	ldr	r0, [r3, #0]
    60f6:	f7ff bfd2 	b.w	609e <_raise_r>
    60fa:	bf00      	nop
    60fc:	1000006c 	.word	0x1000006c

00006100 <_kill_r>:
    6100:	b538      	push	{r3, r4, r5, lr}
    6102:	4c07      	ldr	r4, [pc, #28]	; (6120 <_kill_r+0x20>)
    6104:	2300      	movs	r3, #0
    6106:	4605      	mov	r5, r0
    6108:	4608      	mov	r0, r1
    610a:	4611      	mov	r1, r2
    610c:	6023      	str	r3, [r4, #0]
    610e:	f7fb fe81 	bl	1e14 <_kill>
    6112:	1c43      	adds	r3, r0, #1
    6114:	d102      	bne.n	611c <_kill_r+0x1c>
    6116:	6823      	ldr	r3, [r4, #0]
    6118:	b103      	cbz	r3, 611c <_kill_r+0x1c>
    611a:	602b      	str	r3, [r5, #0]
    611c:	bd38      	pop	{r3, r4, r5, pc}
    611e:	bf00      	nop
    6120:	10000408 	.word	0x10000408

00006124 <_getpid_r>:
    6124:	f7fb be6e 	b.w	1e04 <_getpid>

00006128 <strlen>:
    6128:	4603      	mov	r3, r0
    612a:	f813 2b01 	ldrb.w	r2, [r3], #1
    612e:	2a00      	cmp	r2, #0
    6130:	d1fb      	bne.n	612a <strlen+0x2>
    6132:	1a18      	subs	r0, r3, r0
    6134:	3801      	subs	r0, #1
    6136:	4770      	bx	lr

00006138 <sjsu::lpc40xx::Pin::kFunction>:
    6138:	0300 ffff                                   ....

0000613c <sjsu::lpc40xx::Pin::kResistor>:
    613c:	0203 ffff                                   ....

00006140 <sjsu::lpc40xx::Pin::kAnalogDigitalMode>:
    6140:	0107 ffff                                   ....

00006144 <sjsu::lpc40xx::Pin::kOpenDrain>:
    6144:	010a ffff                                   ....

00006148 <std::integral_constant<long long, 1ll>::value>:
    6148:	0001 0000 0000 0000                         ........

00006150 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::file>:
    6150:	6e69 6574 7272 7075 2e74 7068 0070 ffff     interrupt.hpp...
    6160:	5b1b 3334 206d 4157 4e52 4e49 1b47 305b     .[43m WARNING.[0
    6170:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    6180:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    6190:	333b 6d37 6f4e 6920 746e 7265 7572 7470     ;37mNo interrupt
    61a0:	7320 7265 6976 6563 7220 756f 6974 656e      service routine
    61b0:	6620 756f 646e 6620 726f 7420 6568 7620      found for the v
    61c0:	6365 6f74 2072 6425 2021 6944 6173 6c62     ector %d! Disabl
    61d0:	6e69 2067 5349 1b52 305b 0a6d 0000 0000     ing ISR.[0m.....
    61e0:	5b1b 3334 206d 4157 4e52 4e49 1b47 305b     .[43m WARNING.[0
    61f0:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    6200:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    6210:	333b 6d37 6f50 7472 2520 2064 6163 6e6e     ;37mPort %d cann
    6220:	746f 6220 2065 7375 6465 6620 726f 4520     ot be used for E
    6230:	7478 7265 616e 206c 6e49 6574 7272 7075     xternal Interrup
    6240:	7374 202e 654e 6465 7420 206f 7375 2065     ts. Need to use 
    6250:	5047 4f49 6f20 206e 6f50 7472 3020 6f20     GPIO on Port 0 o
    6260:	2072 2e32 5b1b 6d30 5b1b 6d30 000a 0000     r 2..[0m.[0m....
    6270:	5b1b 3334 206d 4157 4e52 4e49 1b47 305b     .[43m WARNING.[0
    6280:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    6290:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    62a0:	333b 6d37 6445 6567 2520 2064 6163 6e6e     ;37mEdge %d cann
    62b0:	746f 6220 2065 7375 6465 6620 726f 4520     ot be used for E
    62c0:	7478 7265 616e 206c 6e49 6574 7272 7075     xternal Interrup
    62d0:	7374 4e2e 6565 2064 6f74 7520 6573 6120     ts.Need to use a
    62e0:	7220 7369 6e69 2c67 6620 6c61 696c 676e      rising, falling
    62f0:	202c 726f 6220 746f 2068 6f63 666e 6769     , or both config
    6300:	7275 7461 6f69 2e6e 5b1b 6d30 000a 0000     uration..[0m....
    6310:	5b1b 3234 206d 2020 4920 464e 1b4f 305b     .[42m    INFO.[0
    6320:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    6330:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    6340:	333b 6d37 6441 7264 7365 2073 6552 6963     ;37mAddress Reci
    6350:	7665 6465 203a 7830 5825 5b1b 6d30 000a     eved: 0x%X.[0m..
    6360:	5b1b 3234 206d 2020 4920 464e 1b4f 305b     .[42m    INFO.[0
    6370:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    6380:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    6390:	333b 6d37 6144 6174 5220 6365 6569 6576     ;37mData Recieve
    63a0:	3a64 3020 2578 1b58 305b 0a6d 0000 0000     d: 0x%X.[0m.....
    63b0:	5b1b 3234 206d 2020 4920 464e 1b4f 305b     .[42m    INFO.[0
    63c0:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    63d0:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    63e0:	333b 6d37 2f41 2044 6970 736e 7320 7465     ;37mA/D pins set
    63f0:	7420 206f 756f 7074 7475 6120 646e 6120      to output and a
    6400:	6464 6572 7373 7020 7475 6f20 2e6e 5b1b     ddress put on..[
    6410:	6d30 000a 5b1b 3234 206d 2020 4920 464e     0m...[42m    INF
    6420:	1b4f 305b 393b 6d34 253a 3a73 5b1b 3b30     O.[0;94m:%s:.[0;
    6430:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
    6440:	1b20 305b 333b 6d37 6e45 6261 696c 676e      .[0;37mEnabling
    6450:	4320 6e6f 7274 6c6f 5020 6e69 1b73 305b      Control Pins.[0
    6460:	0a6d 0000 5b1b 3234 206d 2020 4920 464e     m....[42m    INF
    6470:	1b4f 305b 393b 6d34 253a 3a73 5b1b 3b30     O.[0;94m:%s:.[0;
    6480:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
    6490:	1b20 305b 333b 6d37 6944 6173 6c62 6e69      .[0;37mDisablin
    64a0:	2067 4c41 2045 6f63 746e 6f72 206c 6970     g ALE control pi
    64b0:	1b6e 305b 0a6d 0000 5b1b 3234 206d 2020     n.[0m....[42m   
    64c0:	4920 464e 1b4f 305b 393b 6d34 253a 3a73      INFO.[0;94m:%s:
    64d0:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    64e0:	256d 3e64 1b20 305b 333b 6d37 2f41 2044     m%d> .[0;37mA/D 
    64f0:	6970 736e 7320 7465 7420 206f 6164 6174     pins set to data
    6500:	5b1b 6d30 000a 0000 5b1b 3234 206d 2020     .[0m.....[42m   
    6510:	4920 464e 1b4f 305b 393b 6d34 253a 3a73      INFO.[0;94m:%s:
    6520:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    6530:	256d 3e64 1b20 305b 333b 6d37 7453 7261     m%d> .[0;37mStar
    6540:	6e69 2067 2f57 2052 7041 6c70 6369 7461     ing W/R Applicat
    6550:	6f69 1b6e 305b 0a6d 0000 0000 5b1b 3234     ion.[0m......[42
    6560:	206d 2020 4920 464e 1b4f 305b 393b 6d34     m    INFO.[0;94m
    6570:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
    6580:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
    6590:	7243 6165 6574 2064 7542 2073 624f 656a     Created Bus Obje
    65a0:	7463 5b1b 6d30 000a                         ct.[0m..

000065a8 <sjsu::lpc40xx::Gpio::kInterruptController>:
    65a8:	6638 0000                                   8f..

000065ac <sjsu::lpc40xx::Gpio::ValidPortCheck() const::file>:
    65ac:	7067 6f69 682e 7070 ff00 ffff               gpio.hpp....

000065b8 <sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const::file>:
    65b8:	7067 6f69 682e 7070 ff00 ffff               gpio.hpp....

000065c4 <Bus::Write(unsigned char, unsigned char)::file>:
    65c4:	7542 2e73 7068 0070                         Bus.hpp.

000065cc <Bus::Write(unsigned char, unsigned char)::file>:
    65cc:	7542 2e73 7068 0070                         Bus.hpp.

000065d4 <Bus::Write(unsigned char, unsigned char)::file>:
    65d4:	7542 2e73 7068 0070                         Bus.hpp.

000065dc <Bus::Write(unsigned char, unsigned char)::file>:
    65dc:	7542 2e73 7068 0070                         Bus.hpp.

000065e4 <Bus::Write(unsigned char, unsigned char)::file>:
    65e4:	7542 2e73 7068 0070                         Bus.hpp.

000065ec <Bus::Write(unsigned char, unsigned char)::file>:
    65ec:	7542 2e73 7068 0070                         Bus.hpp.

000065f4 <main::file>:
    65f4:	616d 6e69 632e 7070 ff00 ffff               main.cpp....

00006600 <main::file>:
    6600:	616d 6e69 632e 7070 ff00 ffff               main.cpp....

0000660c <vtable for sjsu::lpc40xx::Gpio>:
	...
    6614:	090d 0000 098d 0000 0a01 0000 0a45 0000     ............E...
    6624:	0a85 0000 0be5 0000 0c13 0000               ............

00006630 <vtable for sjsu::cortex::InterruptController>:
	...
    6638:	0891 0000 08e5 0000                         ........

00006640 <vtable for sjsu::lpc40xx::Pin>:
	...
    6648:	0465 0000 0499 0000 0509 0000 04cd 0000     e...............

00006658 <main::__PRETTY_FUNCTION__>:
    6658:	6e69 2074 616d 6e69 2928 ff00               int main()..

00006664 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::__PRETTY_FUNCTION__>:
    6664:	7473 7461 6369 7620 696f 2064 6a73 7573     static void sjsu
    6674:	3a3a 6f63 7472 7865 3a3a 6e49 6574 7272     ::cortex::Interr
    6684:	7075 4374 6e6f 7274 6c6f 656c 3a72 553a     uptController::U
    6694:	726e 6765 7369 6574 6572 4964 746e 7265     nregisteredInter
    66a4:	7572 7470 6148 646e 656c 2872 0029 ffff     ruptHandler()...

000066b4 <sjsu::lpc40xx::Gpio::ValidPortCheck() const::__PRETTY_FUNCTION__>:
    66b4:	6f62 6c6f 7320 736a 3a75 6c3a 6370 3034     bool sjsu::lpc40
    66c4:	7878 3a3a 7047 6f69 3a3a 6156 696c 5064     xx::Gpio::ValidP
    66d4:	726f 4374 6568 6b63 2928 6320 6e6f 7473     ortCheck() const
    66e4:	ff00 ffff                                   ....

000066e8 <sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const::__PRETTY_FUNCTION__>:
    66e8:	6f76 6469 7320 736a 3a75 6c3a 6370 3034     void sjsu::lpc40
    66f8:	7878 3a3a 7047 6f69 3a3a 6553 4974 746e     xx::Gpio::SetInt
    6708:	7265 7572 7470 6445 6567 7328 736a 3a75     erruptEdge(sjsu:
    6718:	473a 6970 3a6f 453a 6764 2965 6320 6e6f     :Gpio::Edge) con
    6728:	7473 ff00                                   st..

0000672c <Bus::Write(unsigned char, unsigned char)::__PRETTY_FUNCTION__>:
    672c:	6f76 6469 4220 7375 3a3a 7257 7469 2865     void Bus::Write(
    673c:	6975 746e 5f38 2c74 7520 6e69 3874 745f     uint8_t, uint8_t
    674c:	0029 ffff 6e69 6176 696c 0064 7061 6c70     )...invalid.appl
    675c:	6369 7461 6f69 006e 6f68 7473 7420 7365     ication.host tes
    676c:	0074 0000 2020 6425 2029 7830 3025 5838     t...  %d) 0x%08X
    677c:	000a 0000 3020 2578 3830 0058 2020 6425     .... 0x%08X.  %d
    678c:	2029 7830 7025 000a 520a 6e75 203a 6874     ) 0x%p...Run: th
    679c:	2065 6f66 6c6c 776f 6e69 2067 6f63 6d6d     e following comm
    67ac:	6e61 2064 6e69 7920 756f 2072 7270 6a6f     and in your proj
    67bc:	6365 2074 6964 6572 7463 726f 0079 0000     ect directory...
    67cc:	0a0a 2020 5b1b 3b31 3733 006d 616d 656b     ..  .[1;37m.make
    67dc:	7320 6174 6b63 7274 6361 2d65 7325 5420      stacktrace-%s T
    67ec:	4152 4543 3d53 0022 3020 2578 0070 0000     RACES=". 0x%p...
    67fc:	0a22 1b0a 305b 006d 6854 7369 7720 6c69     "...[0m.This wil
    680c:	206c 6572 6f70 7472 7420 6568 6620 6c69     l report the fil
    681c:	2065 6e61 2064 696c 656e 6e20 6d75 6562     e and line numbe
    682c:	2072 6874 7461 6c20 6465 7420 206f 6874     r that led to th
    683c:	7369 6620 6e75 7463 6f69 206e 6562 6e69     is function bein
    684c:	2067 6163 6c6c 6465 002e 0000 5b1b 3134     g called.....[41
    685c:	436d 4952 4954 4143 1b4c 305b 393b 6d34     mCRITICAL.[0;94m
    686c:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
    687c:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
    688c:	7341 6573 7472 6f69 206e 6146 6c69 7275     Assertion Failur
    689c:	2c65 4320 6e6f 6964 6974 6e6f 5420 7365     e, Condition Tes
    68ac:	6574 3a64 2820 546b 7361 496b 646e 7865     ted: (kTaskIndex
    68bc:	3c20 6b20 6154 6b73 6f43 6e75 2974 200a      < kTaskCount). 
    68cc:	2020 2020 2020 2020 5420 6568 7420 7361              The tas
    68dc:	206b 6e69 6564 2078 6873 756f 646c 6e20     k index should n
    68ec:	746f 6520 6378 6565 2064 6874 2065 6174     ot exceed the ta
    68fc:	6b73 6320 756f 746e 1b2e 305b 1b6d 305b     sk count..[0m.[0
    690c:	0a6d 0000 500a 6972 746e 6e69 2067 7453     m....Printing St
    691c:	6361 206b 7254 6361 3a65 000a 5b1b 3134     ack Trace:...[41
    692c:	436d 4952 4954 4143 1b4c 305b 393b 6d34     mCRITICAL.[0;94m
    693c:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
    694c:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
    695c:	7341 6573 7472 6f69 206e 6146 6c69 7275     Assertion Failur
    696c:	2c65 4320 6e6f 6964 6974 6e6f 5420 7365     e, Condition Tes
    697c:	6574 3a64 2820 6174 6b73 502e 6572 7552     ted: (task.PreRu
    698c:	286e 2929 200a 2020 2020 2020 2020 5020     n()).          P
    699c:	6572 7552 286e 2029 6166 6c69 6465 6620     reRun() failed f
    69ac:	726f 7420 7361 3a6b 2520 2c73 7420 7265     or task: %s, ter
    69bc:	696d 616e 6974 676e 7320 6863 6465 6c75     minating schedul
    69cc:	7265 1b21 305b 1b6d 305b 0a6d 0000 0000     er!.[0m.[0m.....
    69dc:	5b1b 3334 206d 4157 4e52 4e49 1b47 305b     .[43m WARNING.[0
    69ec:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    69fc:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    6a0c:	333b 6d37 6e41 6520 7272 726f 6f20 6363     ;37mAn error occ
    6a1c:	7275 6465 202c 6874 2065 6f66 6c6c 776f     ured, the follow
    6a2c:	6e69 2067 6174 6b73 7720 6c69 206c 6562     ing task will be
    6a3c:	7320 7375 6570 646e 6465 203a 7325 5b1b      suspended: %s.[
    6a4c:	6d30 5b1b 6d30 000a 5b1b 3134 436d 4952     0m.[0m...[41mCRI
    6a5c:	4954 4143 1b4c 305b 393b 6d34 253a 3a73     TICAL.[0;94m:%s:
    6a6c:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    6a7c:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
    6a8c:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
    6a9c:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
    6aac:	2820 6174 6b73 3e2d 6547 4874 6e61 6c64      (task->GetHandl
    6abc:	2865 2029 3d21 6e20 6c75 706c 7274 0a29     e() != nullptr).
    6acc:	2020 2020 2020 2020 2020 6e55 6261 656c               Unable
    6adc:	7420 206f 7263 6165 6574 7420 7361 3a6b      to create task:
    6aec:	2520 1b73 305b 1b6d 305b 0a6d 0000 0000      %s.[0m.[0m.....
    6afc:	5b1b 3134 436d 4952 4954 4143 1b4c 305b     .[41mCRITICAL.[0
    6b0c:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    6b1c:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    6b2c:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
    6b3c:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
    6b4c:	5420 7365 6574 3a64 2820 6174 6b73 3e2d      Tested: (task->
    6b5c:	6553 7574 2870 2929 200a 2020 2020 2020     Setup()).       
    6b6c:	2020 4620 6961 656c 2064 6f74 6320 6d6f        Failed to com
    6b7c:	6c70 7465 2065 6553 7574 2870 2029 6f66     plete Setup() fo
    6b8c:	2072 6174 6b73 203a 7325 5b1b 6d30 5b1b     r task: %s.[0m.[
    6b9c:	6d30 000a 5b1b 3134 436d 4952 4954 4143     0m...[41mCRITICA
    6bac:	1b4c 305b 393b 6d34 253a 3a73 5b1b 3b30     L.[0;94m:%s:.[0;
    6bbc:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
    6bcc:	1b20 305b 333b 6d37 7341 6573 7472 6f69      .[0;37mAssertio
    6bdc:	206e 6146 6c69 7275 2c65 4320 6e6f 6964     n Failure, Condi
    6bec:	6974 6e6f 5420 7365 6574 3a64 2820 7270     tion Tested: (pr
    6bfc:	5f65 7572 5f6e 7665 6e65 5f74 7267 756f     e_run_event_grou
    6c0c:	5f70 6168 646e 656c 205f 3d21 6e20 6c75     p_handle_ != nul
    6c1c:	706c 7274 0a29 2020 2020 2020 2020 2020     lptr).          
    6c2c:	6146 6c69 6465 7420 206f 7263 6165 6574     Failed to create
    6c3c:	5020 6572 7552 206e 7645 6e65 2074 7247      PreRun Event Gr
    6c4c:	756f 2170 5b1b 6d30 5b1b 6d30 000a ffff     oup!.[0m.[0m....
    6c5c:	6e69 6176 696c 0064 7061 6c70 6369 7461     invalid.applicat
    6c6c:	6f69 006e 6f68 7473 7420 7365 0074 0000     ion.host test...
    6c7c:	2020 6425 2029 7830 3025 5838 000a 0000       %d) 0x%08X....
    6c8c:	3020 2578 3830 0058 2020 6425 2029 7830      0x%08X.  %d) 0x
    6c9c:	7025 000a 520a 6e75 203a 6874 2065 6f66     %p...Run: the fo
    6cac:	6c6c 776f 6e69 2067 6f63 6d6d 6e61 2064     llowing command 
    6cbc:	6e69 7920 756f 2072 7270 6a6f 6365 2074     in your project 
    6ccc:	6964 6572 7463 726f 0079 0000 0a0a 2020     directory.....  
    6cdc:	5b1b 3b31 3733 006d 616d 656b 7320 6174     .[1;37m.make sta
    6cec:	6b63 7274 6361 2d65 7325 5420 4152 4543     cktrace-%s TRACE
    6cfc:	3d53 0022 3020 2578 0070 0000 0a22 1b0a     S=". 0x%p..."...
    6d0c:	305b 006d 6854 7369 7720 6c69 206c 6572     [0m.This will re
    6d1c:	6f70 7472 7420 6568 6620 6c69 2065 6e61     port the file an
    6d2c:	2064 696c 656e 6e20 6d75 6562 2072 6874     d line number th
    6d3c:	7461 6c20 6465 7420 206f 6874 7369 6620     at led to this f
    6d4c:	6e75 7463 6f69 206e 6562 6e69 2067 6163     unction being ca
    6d5c:	6c6c 6465 002e 0000 5b1b 3334 206d 4157     lled.....[43m WA
    6d6c:	4e52 4e49 1b47 305b 393b 6d34 253a 3a73     RNING.[0;94m:%s:
    6d7c:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    6d8c:	256d 3e64 1b20 305b 333b 6d37 6f4e 6920     m%d> .[0;37mNo i
    6d9c:	746e 7265 7572 7470 7320 7265 6976 6563     nterrupt service
    6dac:	7220 756f 6974 656e 6620 756f 646e 6620      routine found f
    6dbc:	726f 7420 6568 7620 6365 6f74 2072 6425     or the vector %d
    6dcc:	2021 6944 6173 6c62 6e69 2067 5349 1b52     ! Disabling ISR.
    6ddc:	305b 0a6d 0000 0000 5b1b 3134 486d 7261     [0m......[41mHar
    6dec:	2064 6146 6c75 2074 7845 6563 7470 6f69     d Fault Exceptio
    6dfc:	206e 634f 7563 7272 6465 0a21 5b1b 6d30     n Occurred!..[0m
    6e0c:	0000 0000 3072 203a 7830 3025 6c38 2c58     ....r0: 0x%08lX,
    6e1c:	7220 3a31 3020 2578 3830 586c 202c 3272      r1: 0x%08lX, r2
    6e2c:	203a 7830 3025 6c38 2c58 7220 3a33 3020     : 0x%08lX, r3: 0
    6e3c:	2578 3830 586c 000a 3172 3a32 3020 2578     x%08lX..r12: 0x%
    6e4c:	3830 586c 202c 726c 203a 7830 3025 6c38     08lX, lr: 0x%08l
    6e5c:	2c58 7020 3a63 3020 2578 3830 586c 202c     X, pc: 0x%08lX, 
    6e6c:	7370 3a72 3020 2578 3830 586c 000a 0000     psr: 0x%08lX....
    6e7c:	1b0a 315b 333b 6d37 5b1b 3234 506d 6f72     ..[1;37m.[42mPro
    6e8c:	7267 6d61 5220 7465 7275 656e 2064 7845     gram Returned Ex
    6e9c:	7469 4320 646f 3a65 2520 646c 1b0a 305b     it Code: %ld..[0
    6eac:	006d 0000 1b0a 315b 333b 6d37 5b1b 3134     m.....[1;37m.[41
    6ebc:	506d 6f72 7267 6d61 5220 7465 7275 656e     mProgram Returne
    6ecc:	2064 7845 7469 4320 646f 3a65 2520 646c     d Exit Code: %ld
    6edc:	1b0a 305b 006d ffff 000a ffff               ..[0m.......

00006ee8 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10>:
    6ee8:	0000 3f80 0000 4120 0000 42c8 0000 447a     ...?.. A...B..zD
    6ef8:	4000 461c 5000 47c3 2400 4974 9680 4b18     .@.F.P.G.$tI...K
    6f08:	bc20 4cbe 6b28 4e6e 6e69 6176 696c 0064      ..L(knNinvalid.
    6f18:	7061 6c70 6369 7461 6f69 006e 6f68 7473     application.host
    6f28:	7420 7365 0074 0000 2020 6425 2029 7830      test...  %d) 0x
    6f38:	3025 5838 000a 0000 3020 2578 3830 0058     %08X.... 0x%08X.
    6f48:	2020 6425 2029 7830 7025 000a 520a 6e75       %d) 0x%p...Run
    6f58:	203a 6874 2065 6f66 6c6c 776f 6e69 2067     : the following 
    6f68:	6f63 6d6d 6e61 2064 6e69 7920 756f 2072     command in your 
    6f78:	7270 6a6f 6365 2074 6964 6572 7463 726f     project director
    6f88:	0079 0000 0a0a 2020 5b1b 3b31 3733 006d     y.....  .[1;37m.
    6f98:	616d 656b 7320 6174 6b63 7274 6361 2d65     make stacktrace-
    6fa8:	7325 5420 4152 4543 3d53 0022 3020 2578     %s TRACES=". 0x%
    6fb8:	0070 0000 0a22 1b0a 305b 006d 6854 7369     p..."...[0m.This
    6fc8:	7720 6c69 206c 6572 6f70 7472 7420 6568      will report the
    6fd8:	6620 6c69 2065 6e61 2064 696c 656e 6e20      file and line n
    6fe8:	6d75 6562 2072 6874 7461 6c20 6465 7420     umber that led t
    6ff8:	206f 6874 7369 6620 6e75 7463 6f69 206e     o this function 
    7008:	6562 6e69 2067 6163 6c6c 6465 002e 0000     being called....
    7018:	5b1b 3334 206d 4157 4e52 4e49 1b47 305b     .[43m WARNING.[0
    7028:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    7038:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    7048:	333b 6d37 6f4e 6920 746e 7265 7572 7470     ;37mNo interrupt
    7058:	7320 7265 6976 6563 7220 756f 6974 656e      service routine
    7068:	6620 756f 646e 6620 726f 7420 6568 7620      found for the v
    7078:	6365 6f74 2072 6425 2021 6944 6173 6c62     ector %d! Disabl
    7088:	6e69 2067 5349 1b52 305b 0a6d 0000 0000     ing ISR.[0m.....
    7098:	ffff ffff 33a1 0000 0001 0000 ffff ffff     .....3..........
    70a8:	5b1b 3134 436d 4952 4954 4143 1b4c 305b     .[41mCRITICAL.[0
    70b8:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    70c8:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    70d8:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
    70e8:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
    70f8:	5420 7365 6574 3a64 2820 6570 6972 6870      Tested: (periph
    7108:	7265 6c61 645f 7669 6469 7265 3c20 203d     eral_divider <= 
    7118:	2934 200a 2020 2020 2020 2020 4420 7669     4).          Div
    7128:	6469 7265 6d20 7375 6e74 7427 6520 6378     ider mustn't exc
    7138:	6565 2064 3233 5b1b 6d30 5b1b 6d30 000a     eed 32.[0m.[0m..
    7148:	500a 6972 746e 6e69 2067 7453 6361 206b     .Printing Stack 
    7158:	7254 6361 3a65 000a 5b1b 3134 436d 4952     Trace:...[41mCRI
    7168:	4954 4143 1b4c 305b 393b 6d34 253a 3a73     TICAL.[0;94m:%s:
    7178:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    7188:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
    7198:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
    71a8:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
    71b8:	2820 6564 6973 6572 5f64 7266 7165 6575      (desired_freque
    71c8:	636e 2079 203c 3833 5f34 484d 207a 2626     ncy < 384_MHz &&
    71d8:	6420 7365 7269 6465 665f 6572 7571 6e65      desired_frequen
    71e8:	7963 3e20 3120 5f32 484d 297a 200a 2020     cy > 12_MHz).   
    71f8:	2020 2020 2020 4620 6572 7571 6e65 7963            Frequency
    7208:	6d20 7375 2074 6562 6c20 776f 7265 7420      must be lower t
    7218:	6168 206e 3833 2034 484d 617a 646e 6720     han 384 MHzand g
    7228:	6572 7461 7265 7420 6168 206e 726f 6520     reater than or e
    7238:	7571 6c61 7420 206f 3231 4d20 7a48 5b1b     qual to 12 MHz.[
    7248:	6d30 5b1b 6d30 000a 5b1b 3134 436d 4952     0m.[0m...[41mCRI
    7258:	4954 4143 1b4c 305b 393b 6d34 253a 3a73     TICAL.[0;94m:%s:
    7268:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    7278:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
    7288:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
    7298:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
    72a8:	2820 6964 6976 6564 5f72 6176 756c 2065      (divider_value 
    72b8:	203c 2938 200a 2020 2020 2020 2020 5020     < 8).          P
    72c8:	4c4c 6420 7669 6469 7265 7620 6c61 6575     LL divider value
    72d8:	7720 6e65 2074 756f 2074 666f 6220 756f      went out of bou
    72e8:	646e 1b73 305b 1b6d 305b 0a6d 0000 0000     nds.[0m.[0m.....
    72f8:	5b1b 3134 436d 4952 4954 4143 1b4c 305b     .[41mCRITICAL.[0
    7308:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    7318:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    7328:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
    7338:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
    7348:	5420 7365 6574 3a64 2820 7063 5f75 6964      Tested: (cpu_di
    7358:	6976 6564 2072 203c 3233 0a29 2020 2020     vider < 32).    
    7368:	2020 2020 2020 6944 6976 6564 2072 756d           Divider mu
    7378:	7473 276e 2074 7865 6563 6465 3320 1b32     stn't exceed 32.
    7388:	305b 1b6d 305b 0a6d 0000 0000 fffb ffff     [0m.[0m.........
    7398:	4a01 0000 0001 0000 ffff ffff fffe ffff     .J..............
    73a8:	4a31 0000 0001 0000 ffff ffff 5b1b 3134     1J...........[41
    73b8:	436d 4952 4954 4143 1b4c 305b 393b 6d34     mCRITICAL.[0;94m
    73c8:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
    73d8:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
    73e8:	7341 6573 7472 6f69 206e 6146 6c69 7275     Assertion Failur
    73f8:	2c65 4320 6e6f 6964 6974 6e6f 5420 7365     e, Condition Tes
    7408:	6574 3a64 2820 6974 656d 5f72 7473 7261     ted: (timer_star
    7418:	5f74 7473 7461 7375 3d20 203d 6a73 7573     t_status == sjsu
    7428:	3a3a 7453 7461 7375 3a3a 536b 6375 6563     ::Status::kSucce
    7438:	7373 0a29 2020 2020 2020 2020 2020 7953     ss).          Sy
    7448:	7473 6d65 5420 6d69 7265 2820 7375 6465     stem Timer (used
    7458:	6220 2079 7246 6565 5452 534f 2029 6168      by FreeRTOS) ha
    7468:	2073 4146 4c49 4445 7420 206f 7473 7261     s FAILED to star
    7478:	2174 5b1b 6d30 5b1b 6d30 000a               t!.[0m.[0m..

00007484 <config::kSystemClockRateMhz>:
    7484:	0000 4240                                   ..@B

00007488 <config::kRtosFrequency>:
    7488:	0000 447a                                   ..zD

0000748c <sjsu::cortex::SystemTimer::kCortexInterruptController>:
    748c:	6638 0000                                   8f..

00007490 <sjsu::lpc40xx::SystemController::PllInput::kIrc>:
    7490:	0000 4140                                   ..@A

00007494 <sjsu::lpc40xx::SystemController::kDefaultIRCFrequency>:
    7494:	0000 4140                                   ..@A

00007498 <sjsu::lpc40xx::SystemController::Oscillator::kSelect>:
    7498:	0100 ffff                                   ....

0000749c <sjsu::lpc40xx::SystemController::EmcClock::kDivider>:
    749c:	0100 ffff                                   ....

000074a0 <sjsu::lpc40xx::SystemController::CpuClock::kDivider>:
    74a0:	0500 ffff                                   ....

000074a4 <sjsu::lpc40xx::SystemController::CpuClock::kSelect>:
    74a4:	0108 ffff                                   ....

000074a8 <sjsu::lpc40xx::SystemController::UsbClock::kSelect>:
    74a8:	0208 ffff                                   ....

000074ac <sjsu::lpc40xx::SystemController::SpiFiClock::kSelect>:
    74ac:	0208 ffff                                   ....

000074b0 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::file>:
    74b0:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    74c0:	2e72 7068 0070 ffff                         r.hpp...

000074c8 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    74c8:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    74d8:	2e72 7068 0070 ffff                         r.hpp...

000074e0 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    74e0:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    74f0:	2e72 7068 0070 ffff                         r.hpp...

000074f8 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::file>:
    74f8:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    7508:	2e72 7068 0070 ffff                         r.hpp...

00007510 <sjsu::lpc40xx::Uart::Port::kUart0Tx>:
    7510:	6648 0000 0200 0000                         Hf......

00007518 <sjsu::lpc40xx::Uart::Port::kUart0Rx>:
    7518:	6648 0000 0300 0000                         Hf......

00007520 <sjsu::lpc40xx::Uart::Port::kUart2Tx>:
    7520:	6648 0000 0802 0000                         Hf......

00007528 <sjsu::lpc40xx::Uart::Port::kUart2Rx>:
    7528:	6648 0000 0902 0000                         Hf......

00007530 <sjsu::lpc40xx::Uart::Port::kUart3Tx>:
    7530:	6648 0000 1c04 0000                         Hf......

00007538 <sjsu::lpc40xx::Uart::Port::kUart3Rx>:
    7538:	6648 0000 1d04 0000                         Hf......

00007540 <sjsu::lpc40xx::Uart::Port::kUart4Tx>:
    7540:	6648 0000 1d01 0000                         Hf......

00007548 <sjsu::lpc40xx::Uart::Port::kUart4Rx>:
    7548:	6648 0000 0902 0000                         Hf......

00007550 <sjsu::lpc40xx::Uart::Port::kUart0>:
    7550:	c000 4000 0003 0000 7510 0000 7518 0000     ...@.....u...u..
    7560:	0009 0000                                   ....

00007564 <sjsu::InitializePlatform()::file>:
    7564:	7473 7261 7574 2e70 7063 0070               startup.cpp.

00007570 <vtable for sjsu::lpc40xx::Uart>:
	...
    7578:	42a1 0000 4361 0000 43ed 0000 4491 0000     .B..aC...C...D..
    7588:	4561 0000                                   aE..

0000758c <vtable for sjsu::Uart>:
	...
    7594:	4b2d 0000 4b2d 0000 4b2d 0000 4b2d 0000     -K..-K..-K..-K..
    75a4:	4b2d 0000                                   -K..

000075a8 <vtable for sjsu::lpc40xx::SystemController>:
	...
    75b0:	36f9 0000 3795 0000 37ed 0000 3811 0000     .6...7...7...8..
    75c0:	382d 0000 3869 0000 389d 0000               -8..i8...8..

000075cc <vtable for sjsu::cortex::SystemTimer>:
	...
    75d4:	340d 0000 35e9 0000 342d 0000               .4...5..-4..

000075e0 <vtable for sjsu::SystemTimer>:
	...
    75e8:	4b2d 0000 4b2d 0000 4b2d 0000               -K..-K..-K..

000075f4 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::__PRETTY_FUNCTION__>:
    75f4:	6976 7472 6175 206c 6f76 6469 7320 736a     virtual void sjs
    7604:	3a75 6c3a 6370 3034 7878 3a3a 7953 7473     u::lpc40xx::Syst
    7614:	6d65 6f43 746e 6f72 6c6c 7265 3a3a 6553     emController::Se
    7624:	5074 7265 7069 6568 6172 436c 6f6c 6b63     tPeripheralClock
    7634:	6944 6976 6564 2872 6f63 736e 2074 6a73     Divider(const sj
    7644:	7573 3a3a 7953 7473 6d65 6f43 746e 6f72     su::SystemContro
    7654:	6c6c 7265 3a3a 6550 6972 6870 7265 6c61     ller::Peripheral
    7664:	4449 2c26 7520 6e69 3874 745f 2029 6f63     ID&, uint8_t) co
    7674:	736e 0074                                   nst.

00007678 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__>:
    7678:	6975 746e 3233 745f 7320 736a 3a75 6c3a     uint32_t sjsu::l
    7688:	6370 3034 7878 3a3a 7953 7473 6d65 6f43     pc40xx::SystemCo
    7698:	746e 6f72 6c6c 7265 3a3a 6143 636c 6c75     ntroller::Calcul
    76a8:	7461 5065 6c6c 7528 696e 7374 3a3a 7266     atePll(units::fr
    76b8:	7165 6575 636e 3a79 6d3a 6765 6861 7265     equency::megaher
    76c8:	7a74 745f 202c 6e75 7469 3a73 663a 6572     tz_t, units::fre
    76d8:	7571 6e65 7963 3a3a 656d 6167 6568 7472     quency::megahert
    76e8:	5f7a 2974 6320 6e6f 7473 ff00               z_t) const..

000076f4 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::__PRETTY_FUNCTION__>:
    76f4:	6f76 6469 7320 736a 3a75 6c3a 6370 3034     void sjsu::lpc40
    7704:	7878 3a3a 7953 7473 6d65 6f43 746e 6f72     xx::SystemContro
    7714:	6c6c 7265 3a3a 6553 4374 7570 6c43 636f     ller::SetCpuCloc
    7724:	446b 7669 6469 7265 7528 6e69 3874 745f     kDivider(uint8_t
    7734:	2029 6f63 736e 0074                         ) const.

0000773c <sjsu::InitializePlatform()::__PRETTY_FUNCTION__>:
    773c:	6f76 6469 7320 736a 3a75 493a 696e 6974     void sjsu::Initi
    774c:	6c61 7a69 5065 616c 6674 726f 286d 0029     alizePlatform().

0000775c <__sf_fake_stderr>:
	...

0000777c <__sf_fake_stdin>:
	...

0000779c <__sf_fake_stdout>:
	...
