
build/application/lpc40xx/firmware.elf:     file format elf32-littlearm
build/application/lpc40xx/firmware.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00001751

Program Header:
0x70000001 off    0x00017450 vaddr 0x00007450 paddr 0x00007450 align 2**2
         filesz 0x000000b8 memsz 0x000000b8 flags r--
    LOAD off    0x00010000 vaddr 0x00000000 paddr 0x00000000 align 2**16
         filesz 0x00007508 memsz 0x00007508 flags r-x
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x00007508 align 2**16
         filesz 0x000000d0 memsz 0x000000d0 flags rw-
    LOAD off    0x000200d0 vaddr 0x100000d0 paddr 0x100000d0 align 2**16
         filesz 0x00000000 memsz 0x00000344 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name             Size      VMA       LMA       File off  Algn  Flags
  0 .text            00007438  00000000  00000000  00010000  2**4  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data            000000d0  10000000  00007508  00020000  2**2  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2       00000000  20000000  20000000  000200d0  2**2  CONTENTS
  3 .bss             00000344  100000d0  100000d0  000200d0  2**3  ALLOC
  4 .ARM.extab       00000018  00007438  00007438  00017438  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM.exidx       000000b8  00007450  00007450  00017450  2**2  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .uninit_RESERVED 00000000  10000000  10000000  000200d0  2**2  CONTENTS
  7 .noinit_RAM2     00000000  20000000  20000000  000200d0  2**2  CONTENTS
  8 .noinit          00000000  10000414  10000414  000200d0  2**2  CONTENTS
  9 .ARM.attributes  00000030  00000000  00000000  000200d0  2**0  CONTENTS, READONLY
 10 .comment         0000007e  00000000  00000000  00020100  2**0  CONTENTS, READONLY
 11 .debug_info      00072bdb  00000000  00000000  0002017e  2**0  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev    0000444d  00000000  00000000  00092d59  2**0  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges   00000b18  00000000  00000000  000971a6  2**0  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges    00000a88  00000000  00000000  00097cbe  2**0  CONTENTS, READONLY, DEBUGGING
 15 .debug_line      00005dee  00000000  00000000  00098746  2**0  CONTENTS, READONLY, DEBUGGING
 16 .debug_str       00029893  00000000  00000000  0009e534  2**0  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame     000039f0  00000000  00000000  000c7dc8  2**2  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
20000000 l    d  .data_RAM2	00000000 .data_RAM2
100000d0 l    d  .bss	00000000 .bss
00007438 l    d  .ARM.extab	00000000 .ARM.extab
00007450 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
20000000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
10000414 l    d  .noinit	00000000 .noinit
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 startup.cpp
00007100 l     O .text	00000004 config::kSystemClockRateMhz
00002ca2 l     F .text	0000001c float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00002cbe l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00007104 l     O .text	00000004 config::kRtosFrequency
00002d04 l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00002d20 l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00003320 l     F .text	0000001c float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
0000333c l     F .text	00000030 float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00007270 l     O .text	00000084 sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::__PRETTY_FUNCTION__
000072f4 l     O .text	0000007b sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__
00007370 l     O .text	00000048 sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::__PRETTY_FUNCTION__
00003cd4 l     F .text	000001ec sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)
10000064 l     O .data	00000004 (anonymous namespace)::system_controller
100003e4 l     O .bss	00000001 (anonymous namespace)::arm_dwt_counter
100003e8 l     O .bss	0000000c (anonymous namespace)::uart0
100003f4 l     O .bss	0000000c (anonymous namespace)::system_timer
0000421c l     F .text	00000024 (anonymous namespace)::Lpc40xxStdOut(char const*, unsigned int)
0000427c l     F .text	00000034 (anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)
000002fc l     O .text	00000004 kCrpWord
00000000 l     O .text	000000e4 kInterruptVectorTable
000071e0 l     O .text	0000000c sjsu::InitializePlatform()::file
000073b8 l     O .text	00000020 sjsu::InitializePlatform()::__PRETTY_FUNCTION__
00004600 l     F .text	0000001c float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)
00004674 l     F .text	00000024 float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)
00004698 l     F .text	00000128 __static_initialization_and_destruction_0(int, int)
000047c0 l     F .text	00000010 _GLOBAL__sub_I_ThreadRuntimeCounter
00000000 l    df *ABS*	00000000 /home/peeradech/SJSU-Dev2/tools/gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v7e-m/fpv4-sp/hard/crti.o
00000000 l    df *ABS*	00000000 /home/peeradech/SJSU-Dev2/tools/gcc-arm-none-eabi-7-2017-q4-major/bin/../lib/gcc/arm-none-eabi/7.2.1/thumb/v7e-m/fpv4-sp/hard/crtn.o
00000000 l    df *ABS*	00000000 crtstuff.c
00000328 l     F .text	00000000 __do_global_dtors_aux
100000d0 l       .bss	00000001 completed.9929
0000034c l     F .text	00000000 frame_dummy
100000d4 l       .bss	00000018 object.9934
0000030c l     O .text	00000000 __frame_dummy_init_array_entry
00000000 l    df *ABS*	00000000 main.cpp
00000398 l     F .text	00000030 NVIC_EnableIRQ
000003c8 l     F .text	00000030 NVIC_DisableIRQ
000003f8 l     F .text	00000054 NVIC_SetPriority
000062f8 l     O .text	0000004e sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::__PRETTY_FUNCTION__
00006348 l     O .text	00000031 sjsu::lpc40xx::Gpio::ValidPortCheck() const::__PRETTY_FUNCTION__
0000637c l     O .text	00000043 sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const::__PRETTY_FUNCTION__
00006270 l     O .text	00000009 main::file
0000627c l     O .text	00000009 main::file
00006288 l     O .text	00000009 main::file
00006294 l     O .text	00000009 main::file
000062ec l     O .text	0000000b main::__PRETTY_FUNCTION__
000012a8 l     F .text	00000140 __static_initialization_and_destruction_0(int, int)
000013e8 l     F .text	00000010 _GLOBAL__sub_I_main
00000000 l    df *ABS*	00000000 exceptions.cpp
00001740 l       .text	00000000 handler2_address_const
000017a4 l     F .text	00000044 __static_initialization_and_destruction_0(int, int)
000017e8 l     F .text	00000010 _GLOBAL__sub_I_GetRegistersFromStack
00000000 l    df *ABS*	00000000 task_scheduler.cpp
000013f8 l     F .text	00000026 _Unwind_GetGR
00000000 l    df *ABS*	00000000 tasks.c
1000034c l     O .bss	00000064 pxReadyTasksLists
100003b0 l     O .bss	00000004 uxTopReadyPriority
100003b4 l     O .bss	00000004 xYieldPending
100003b8 l     O .bss	00000004 uxSchedulerSuspended
100003bc l     O .bss	00000004 ulTaskSwitchedInTime
100003c0 l     O .bss	00000004 ulTotalRunTime
00000000 l    df *ABS*	00000000 newlib.cpp
00000000 l    df *ABS*	00000000 printf.cpp
00001940 l     F .text	0000001c _out_null(char, void*, unsigned int, unsigned int)
0000195c l     F .text	00000026 _out_char(char, void*, unsigned int, unsigned int)
00001982 l     F .text	0000002e _strlen(char const*)
000019b0 l     F .text	00000028 _is_digit(char)
000019d8 l     F .text	00000048 _atoi(char const**)
00001a20 l     F .text	00000242 _ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)
00001c62 l     F .text	000000d0 _ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)
00001d32 l     F .text	000000e0 _ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)
00006b58 l     O .text	00000028 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10
00001e14 l     F .text	00000442 _ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)
00002258 l     F .text	000008d4 _vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)
00000000 l    df *ABS*	00000000 port.c
000047f0 l       .text	00000000 pxCurrentTCBConst2
00004860 l       .text	00000000 pxCurrentTCBConst
00000000 l    df *ABS*	00000000 stdio.cpp
00000000 l    df *ABS*	00000000 pure.cc
00000000 l    df *ABS*	00000000 eh_terminate.cc
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _arm_addsubsf3.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 unwind-arm.c
00004ee0 l     F .text	00000012 selfrel_offset31
00004ef4 l     F .text	00000060 search_EIT_table
00004f54 l     F .text	00000028 __gnu_unwind_get_pr_addr
00004f7c l     F .text	000000a4 get_eit_entry
00005020 l     F .text	00000058 restore_non_core_regs
00005078 l     F .text	0000000a _Unwind_decode_typeinfo_ptr.isra.0
00005084 l     F .text	00000004 __gnu_unwind_24bit.isra.1
00005088 l     F .text	00000002 _Unwind_DebugHook
0000508c l     F .text	0000003e unwind_phase2
000050cc l     F .text	000000c6 unwind_phase2_forced
0000529c l     F .text	00000018 _Unwind_GetGR
000052e0 l     F .text	0000001a _Unwind_SetGR
0000536c l     F .text	000002d4 __gnu_unwind_pr_common
00000000 l    df *ABS*	00000000 libunwind.o
00000000 l    df *ABS*	00000000 pr-support.c
00005a78 l     F .text	00000038 next_unwind_byte
00005ab0 l     F .text	0000001a _Unwind_GetGR.constprop.0
00005acc l     F .text	00000002 unwind_UCB_from_context
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 lib_a-strlen.o
00000000 l    df *ABS*	00000000 findfp.c
00000000 l    df *ABS*	00000000 eh_term_handler.cc
00000000 l    df *ABS*	00000000 impure.c
10000070 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 reent.c
00001460  w    F .text	00000048 sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)
00005a30 g     F .text	00000022 .hidden ___Unwind_ForcedUnwind
00005198 g     F .text	0000005e .hidden __gnu_Unwind_RaiseException
00003014  w    F .text	00000048 sjsu::cortex::SystemTimer::SystemTimerHandler()
0000162c  w    F .text	0000006c sjsu::InitializeBssSection()
000018c8 g     F .text	00000010 _getpid
000048d8 g     F .text	00000024 _putchar
00007118  w    O .text	00000002 sjsu::lpc40xx::SystemController::EmcClock::kDivider
00002fc4  w    F .text	00000034 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
0000305c  w    F .text	00000024 sjsu::cortex::SystemTimer::GetCount()
00007174  w    O .text	00000016 sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::file
00002c08  w    F .text	0000002c units::literals::operator"" _Hz(unsigned long long)
00002f32  w    F .text	0000001a std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const
10000008  w    O .data	00000004 sjsu::newlib::in
10000408  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart3
00000c44  w    F .text	000000f6 Bus::Initialize()
00000898  w    F .text	00000044 sjsu::lpc40xx::Gpio::Toggle() const
00002e1c  w    F .text	00000050 sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const
00005ed0 g     F .text	00000024 _kill_r
0000010c g       .text	00000000 bss_section_table_end
00000d3a  w    F .text	0000010e Bus::Write(Bus::ControlType, unsigned char, unsigned char)
00002b2c g     F .text	00000038 printf
00000000 g       *ABS*	00000000 __vectors_start__
000005dc  w    F .text	0000001c sjsu::Gpio::SetAsInput() const
000044de  w    F .text	00000026 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
000005a0  w    F .text	0000001e sjsu::Gpio::SetHigh() const
00004400  w    F .text	0000003c units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)
0000077c  w    F .text	00000028 sjsu::cortex::InterruptController::Deregister(int) const
000014ec  w    F .text	000000a4 sjsu::debug::PrintBacktrace(bool, void*)
20000000 g       *ABS*	00000000 __base_RAM2
000058ec g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP
00005a0c g     F .text	00000022 .hidden _Unwind_Resume_or_Rethrow
00007508 g       .ARM.exidx	00000000 __exidx_end
00005f08  w    O .text	00000002 sjsu::lpc40xx::Pin::kFunction
000042b0 g     F .text	00000014 ThreadRuntimeCounter
00005640 g     F .text	00000004 .hidden __aeabi_unwind_cpp_pr0
10000018  w    O .data	00000004 sjsu::cortex::InterruptController::scb
000034dc  w    F .text	00000034 sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const
10000348 g     O .bss	00000004 pxCurrentTCB
00005dbc g     F .text	0000000a .hidden _Unwind_GetRegionStart
00005a0c g     F .text	00000022 .hidden ___Unwind_Resume_or_Rethrow
00007110  w    O .text	00000004 sjsu::lpc40xx::SystemController::kDefaultIRCFrequency
00000ad4  w    F .text	0000005c sjsu::lpc40xx::Gpio::SetEdgeRising() const
10000410 g     O .bss	00000004 errno
00007508 g       .ARM.exidx	00000000 _etext
0000446c  w    F .text	00000036 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
000004f0  w    F .text	00000034 sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const
000035d4  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const
00005a54 g     F .text	00000022 .hidden _Unwind_Backtrace
00007108  w    O .text	00000004 sjsu::cortex::SystemTimer::kCortexInterruptController
100000ec  w    O .bss	00000004 sjsu::lpc40xx::Pin::pin_map
000049d4 g     F .text	00000160 .hidden __aeabi_fadd
100003d8  w    O .bss	00000008 sjsu::cortex::SystemTimer::counter
000049d0 g     F .text	00000164 .hidden __subsf3
000036a0  w    F .text	00000018 unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const
000071ac  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart3Tx
00080000 g       *ABS*	00000000 __top_MFlash512
000058cc g     F .text	00000018 .hidden __restore_core_regs
0000590c g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP_D_16_to_31
0000710c  w    O .text	00000004 sjsu::lpc40xx::SystemController::PllInput::kIrc
000071ec  w    O .text	0000001c vtable for sjsu::lpc40xx::Uart
00002dc4  w    F .text	00000020 sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())
00005f0c  w    O .text	00000002 sjsu::lpc40xx::Pin::kResistor
00003a70  w    F .text	00000048 sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const
00005194 g     F .text	00000004 .hidden _Unwind_GetCFA
00005e48 g     F .text	00000016 memcpy
00003798  w    F .text	00000194 sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
00004880 g     F .text	00000018 sjsu::newlib::DoNothingStdIn(char*, unsigned int)
000052b4 g     F .text	0000002a .hidden _Unwind_VRS_Set
00004be4 g     F .text	00000000 .hidden __aeabi_uldivmod
10000414 g       .noinit	00000000 _noinit
000036b8  w    F .text	00000024 units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
000018f4 g     F .text	0000004c puts
00003152  w    F .text	00000058 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
00003acc  w    F .text	000000e0 sjsu::lpc40xx::uart::FindClosestFractional(float)
00004504  w    F .text	00000024 unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)
00003408  w    F .text	00000058 sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const
1000001c  w    O .data	00000004 sjsu::cortex::SystemTimer::sys_tick
00003ec0  w    F .text	00000020 sjsu::Uart::Uart()
00005e6e g     F .text	00000050 _raise_r
00004b3c g     F .text	0000001c .hidden __aeabi_i2f
10010000 g       *ABS*	00000000 __top_RAM
00004800 g     F .text	00000066 xPortPendSVHandler
10000000 g       *ABS*	00000000 __base_RamLoc64
000005be  w    F .text	0000001e sjsu::Gpio::SetLow() const
00002c60  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
000004b4  w    F .text	0000003c sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const
00005ef4 g     F .text	00000004 _getpid_r
00000000 g       *ABS*	00000000 __base_MFlash512
000052fc g     F .text	00000070 .hidden __gnu_Unwind_Backtrace
000011b0  w    F .text	00000026 unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)
00002e8c  w    F .text	00000034 sjsu::cortex::SystemTimer::SystemTimer(sjsu::SystemController const&, sjsu::InterruptController const&)
10010000 g       *ABS*	00000000 StackTop
00003734  w    F .text	0000003c units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator+<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)
00004c14 g     F .text	000002cc .hidden __udivmoddi4
000000fc g       .text	00000000 bss_section_table
00005f10  w    O .text	00000002 sjsu::lpc40xx::Pin::kAnalogDigitalMode
00003208  w    F .text	00000018 unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
000058fc g     F .text	00000000 .hidden __gnu_Unwind_Save_VFP_D
00000300 g       .text	00000000 __CRP_WORD_END__
20008000 g       *ABS*	00000000 __top_RAM2
00003ee0  w    F .text	00000034 sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)
0000564c g     F .text	0000027e .hidden _Unwind_VRS_Pop
00005648  w    F .text	00000004 .hidden __aeabi_unwind_cpp_pr2
000030a0  w    F .text	00000094 sjsu::cortex::SystemTimer::StartTimer() const
10000400  w    O .bss	00000004 guard variable for sjsu::lpc40xx::SystemController::system_controller
00005a54 g     F .text	00000022 .hidden ___Unwind_Backtrace
00002d80  w    F .text	00000022 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)
00004104  w    F .text	000000d0 sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const
000014a8  w    F .text	00000044 sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)
000071c4  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart4Rx
20000000 g       *ABS*	00000000 __user_heap_base
100003d0  w    O .bss	00000004 sjsu::cortex::SystemTimer::system_timer_isr
00007450 g       .ARM.extab	00000000 __exidx_start
000005f8  w    F .text	0000001c sjsu::Gpio::SetAsOutput() const
00005e00 g     F .text	00000048 __libc_init_array
00003c44  w    F .text	0000002c sjsu::lpc40xx::uart::RoundFloat(float)
000059c4 g     F .text	00000022 .hidden ___Unwind_RaiseException
00003238  w    F .text	00000024 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const
00002e6c  w    F .text	00000020 sjsu::SystemTimer::SystemTimer()
00005df0 g     F .text	0000000e abort
000059e8 g     F .text	00000022 .hidden ___Unwind_Resume
00003220  w    F .text	00000018 unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
10000050  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart4
00006264  w    O .text	00000009 sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const::file
10000334  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Pin::pin_map
00002f4c  w    F .text	00000078 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
00000300 g     F .text	00000000 _init
0000010c g       .text	00000000 section_table_end
00003c70  w    F .text	00000064 sjsu::lpc40xx::uart::IsDecmial(float)
00004868 g     F .text	00000018 sjsu::newlib::DoNothingStdOut(char const*, unsigned int)
00000b30  w    F .text	0000005c sjsu::lpc40xx::Gpio::SetEdgeFalling() const
00005f14  w    O .text	00000002 sjsu::lpc40xx::Pin::kOpenDrain
000040ae  w    F .text	00000056 sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const
0000491c g     F .text	0000000a std::terminate()
00004928 g     F .text	0000009e .hidden __aeabi_d2f
00005914 g     F .text	00000000 .hidden __gnu_Unwind_Restore_WMMXD
00002ff8  w    F .text	0000001a std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const
000049d0 g     F .text	00000164 .hidden __aeabi_fsub
00003fd4  w    F .text	0000008c sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const
000011fc  w    F .text	00000024 unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)
1000040c  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart4
00001728 g     F .text	00000026 ArmHardFaultHandler
000000e4 g       .text	00000000 section_table_start
00000aaa  w    F .text	00000028 sjsu::lpc40xx::Gpio::DetachInterrupt() const
100001f0  w    O .bss	00000018 sjsu::lpc40xx::Gpio::gpio_port
000031aa  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
10000414 g       .bss	00000000 _ebss
00000e48  w    F .text	00000112 Bus::Read(Bus::ControlType, unsigned char)
00004060  w    F .text	0000004e sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const
00007224  w    O .text	00000024 vtable for sjsu::lpc40xx::SystemController
00003484  w    F .text	0000001c sjsu::lpc40xx::SystemController::GetSystemFrequency() const
00002ce2  w    F .text	00000022 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)
00004b68 g     F .text	0000007c .hidden __floatdisf
00007194  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart0Rx
000016ac g     F .text	0000007c GetRegistersFromStack
00003ee0  w    F .text	00000034 sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)
000058e4 g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP
000042c4  w    F .text	000000b8 sjsu::InitializePlatform()
0000437c  w    F .text	00000036 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator++(int)
000073d8 g     O .text	00000020 __sf_fake_stderr
000006ec  w    F .text	00000018 sjsu::cortex::InterruptController::IrqToIndex(int)
0000490c g     F .text	00000010 std::get_terminate()
00003ec0  w    F .text	00000020 sjsu::Uart::Uart()
000059e8 g     F .text	00000022 .hidden _Unwind_Resume
00000614  w    F .text	0000000e sjsu::cortex::InterruptController::UnregisteredArmExceptions()
00005264 g     F .text	0000000c .hidden _Unwind_DeleteException
000062c4  w    O .text	00000010 vtable for sjsu::cortex::InterruptController
10000208  w    O .bss	00000100 sjsu::lpc40xx::Gpio::interrupthandlers
00005260 g     F .text	00000002 .hidden _Unwind_Complete
0000358c  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const
10000330  w    O .bss	00000004 sjsu::lpc40xx::Gpio::port_status
00000000 g       *ABS*	00000000 __base_Flash
00007248  w    O .text	00000014 vtable for sjsu::cortex::SystemTimer
0000725c  w    O .text	00000014 vtable for sjsu::SystemTimer
00007128  w    O .text	00000002 sjsu::lpc40xx::SystemController::SpiFiClock::kSelect
10010000 g       *ABS*	00000000 __top_RamLoc64
10000404  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Uart::Port::kUart2
000045b0  w    F .text	00000050 bool std::chrono::operator< <long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
100000d0 g       .bss	00000000 _bss
0000715c  w    O .text	00000016 sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
000048fc g     F .text	00000006 __cxa_pure_virtual
00003770  w    F .text	00000026 units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const
00000988  w    F .text	0000003c sjsu::lpc40xx::Gpio::SetInterruptRoutine(void (*)()) const
00004b3c g     F .text	0000001c .hidden __floatsisf
0000719c  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart2Tx
100003e0  w    O .bss	00000004 sjsu::lpc40xx::SystemController::system_controller
00005ad0 g     F .text	000002c4 .hidden __gnu_unwind_execute
10000024  w    O .data	00000004 sjsu::lpc40xx::DefaultSystemController()::default_system_controller
10000338  w    O .bss	00000004 guard variable for sjsu::cortex::InterruptController::table
0000336c  w    F .text	0000009c sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
000058f4 g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP_D
00000380  w    F .text	00000018 sjsu::Pin::GetPin() const
00080000 g       *ABS*	00000000 __top_Flash
0000124e  w    F .text	0000005a unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)
00002ef4  w    F .text	00000022 std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)
10000414 g       .noinit	00000000 _end_noinit
100000f0  w    O .bss	00000100 sjsu::cortex::InterruptController::table
00003460  w    F .text	00000024 sjsu::lpc40xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const
000017f8 g     F .text	000000c4 vTaskSwitchContext
00003ab8  w    F .text	00000014 sjsu::lpc40xx::DefaultSystemController()
00007114  w    O .text	00000002 sjsu::lpc40xx::SystemController::Oscillator::kSelect
00002ec0  w    F .text	00000018 std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()
00005f18  w    O .text	0000000e sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::file
0000520c g     F .text	00000044 .hidden __gnu_Unwind_Resume
10000308  w    O .bss	00000028 sjsu::lpc40xx::Gpio::interrupt
00002ed8  w    F .text	0000001c std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()
00002b7c  w    F .text	00000044 sjsu::cortex::DwtCounter::Initialize()
10000340  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Gpio::interrupt
000071a4  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart2Rx
20000000 g       *ABS*	00000000 __base_RamPeriph32
00005904 g     F .text	00000000 .hidden __gnu_Unwind_Restore_VFP_D_16_to_31
0000325c  w    F .text	000000c4 sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
1000033c  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Gpio::gpio_port
00004b58 g     F .text	0000008c .hidden __floatundisf
000059c4 g     F .text	00000022 .hidden _Unwind_RaiseException
00005dec  w    F .text	00000002 .hidden __aeabi_ldiv0
10000028  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart2
00001698  w    F .text	00000014 sjsu::SystemInitialize()
00004b34 g     F .text	00000024 .hidden __aeabi_ui2f
000000e4 g       .text	00000000 data_section_table
100003c8  w    O .bss	00000008 sjsu::DefaultUptime()::default_uptime
00000b8c  w    F .text	0000005c sjsu::lpc40xx::Gpio::ClearEdgeRising() const
10000344  w    O .bss	00000004 guard variable for sjsu::lpc40xx::Gpio::port_status
00004898 g     F .text	00000020 sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))
00002c34  w    F .text	0000002c units::literals::operator"" _MHz(unsigned long long)
000073f8 g     O .text	00000020 __sf_fake_stdin
000002fc g       .text	00000000 __CRP_WORD_START__
000039f4  w    F .text	0000007c sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const
00002e8c  w    F .text	00000034 sjsu::cortex::SystemTimer::SystemTimer(sjsu::SystemController const&, sjsu::InterruptController const&)
00005e5e g     F .text	00000010 memset
000009f8  w    F .text	00000018 unsigned char sjsu::util::Value<sjsu::Gpio::Edge, unsigned char>(sjsu::Gpio::Edge)
00000f5c g     F .text	00000254 main
00002bc0  w    F .text	00000020 sjsu::cortex::DwtCounter::GetCount()
00000624  w    F .text	0000003c sjsu::cortex::InterruptController::UnregisteredInterruptHandler()
00004b68 g     F .text	0000007c .hidden __aeabi_l2f
00004240  w    F .text	00000012 std::chrono::duration_values<long long>::max()
20000000 g       *ABS*	00000000 heap
00000728  w    F .text	00000054 sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const
00002be0  w    F .text	00000022 sjsu::cortex::InitializeFloatingPointUnit()
000071cc  w    O .text	00000014 sjsu::lpc40xx::Uart::Port::kUart0
000062d4  w    O .text	00000018 vtable for sjsu::lpc40xx::Pin
00004928 g     F .text	0000009e .hidden __truncdfsf2
0000031c g       .text	00000000 __init_array_end
000047d0 g     F .text	00000026 vPortSVCHandler
00007120  w    O .text	00000002 sjsu::lpc40xx::SystemController::CpuClock::kSelect
1000000c  w    O .data	00000004 sjsu::cortex::DwtCounter::dwt
00004b58 g     F .text	0000008c .hidden __aeabi_ul2f
00002e6c  w    F .text	00000020 sjsu::SystemTimer::SystemTimer()
00002d44  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
00000934  w    F .text	00000054 sjsu::lpc40xx::Gpio::ValidPortCheck() const
000051f8 g     F .text	00000012 .hidden __gnu_Unwind_ForcedUnwind
00002f16  w    F .text	0000001c std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)
000044a2  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
00005250 g     F .text	0000000e .hidden __gnu_Unwind_Resume_or_Rethrow
10000004  w    O .data	00000004 sjsu::newlib::out
20008000 g       *ABS*	00000000 heap_end
000070f8  w    O .text	00000008 std::integral_constant<long long, 1ll>::value
00004528  w    F .text	0000002e bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)
0000031c g     F .text	00000000 _fini
000058cc g     F .text	00000018 .hidden restore_core_regs
000034a0  w    F .text	0000003c sjsu::lpc40xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const
000059b0 g     F .text	00000000 .hidden __gnu_Unwind_Save_WMMXC
000071bc  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart4Tx
000000fc g       .text	00000000 data_section_table_end
000008dc  w    F .text	00000040 sjsu::lpc40xx::Gpio::Read() const
00003080  w    F .text	00000020 sjsu::cortex::SystemTimer::SetInterrupt(void (*)()) const
00004252  w    F .text	00000028 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()
1000003c  w    O .data	00000014 sjsu::lpc40xx::Uart::Port::kUart3
000041f8  w    F .text	00000024 sjsu::lpc40xx::Uart::TransmissionComplete() const
000049c8 g     F .text	0000016c .hidden __aeabi_frsub
00005de4 g     F .text	00000006 .hidden _Unwind_GetTextRelBase
1000006c g     O .data	00000004 _impure_ptr
00007124  w    O .text	00000002 sjsu::lpc40xx::SystemController::UsbClock::kSelect
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
00003134  w    F .text	0000001e units::linear_scale<float>::operator()() const
00003664  w    F .text	0000003c bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const
00002de4  w    F .text	00000038 sjsu::cortex::InterruptController::LookupHandler()
0000030c g       .text	00000000 __preinit_array_end
00000524  w    F .text	0000007c sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const
10000000 g       .data	00000000 _data
00001220  w    F .text	0000002e bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)
000031cc  w    F .text	0000003c units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)
00005dc8 g     F .text	00000012 .hidden _Unwind_GetLanguageSpecificData
00007144  w    O .text	00000016 sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file
00000a7c  w    F .text	0000002e sjsu::lpc40xx::Gpio::AttachInterrupt(void (*)(), sjsu::Gpio::Edge) const
00000824  w    F .text	00000074 sjsu::lpc40xx::Gpio::Set(sjsu::Gpio::State) const
00001750 g     F .text	00000054 ArmResetHandler
00005270 g     F .text	0000002a .hidden _Unwind_VRS_Get
00000704  w    F .text	00000024 sjsu::cortex::InterruptController::GetVector(int)
10000068 g     O .data	00000004 __cxxabiv1::__terminate_handler
0000599c g     F .text	00000000 .hidden __gnu_Unwind_Restore_WMMXC
00003510  w    F .text	00000034 sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const
00003544  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const
00005d94 g     F .text	00000028 .hidden __gnu_unwind_frame
00005a30 g     F .text	00000022 .hidden _Unwind_ForcedUnwind
100000d0 g       .data	00000000 _edata
000041d4  w    F .text	00000024 sjsu::lpc40xx::Uart::HasData() const
000007a4  w    F .text	00000080 sjsu::lpc40xx::Gpio::SetDirection(sjsu::Gpio::Direction) const
000062a0  w    O .text	00000024 vtable for sjsu::lpc40xx::Gpio
00000be8  w    F .text	0000005c sjsu::lpc40xx::Gpio::ClearEdgeFalling() const
0000443c  w    F .text	00000030 std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
00000660  w    F .text	00000016 unsigned int std::size<void (*)(), 64u>(void (* const (&) [64u])())
20008000 g       *ABS*	00000000 __top_RamPeriph32
0000712c  w    O .text	00000016 sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::file
000036dc  w    F .text	00000058 units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)
00000a10  w    F .text	0000006c sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const
10000000 g       *ABS*	00000000 __base_RAM
00004b34 g     F .text	00000024 .hidden __floatunsisf
00004902 g     F .text	00000008 __cxxabiv1::__terminate(void (*)())
00005958 g     F .text	00000000 .hidden __gnu_Unwind_Save_WMMXD
000018d8 g     F .text	0000001a _kill
00001590  w    F .text	0000009c sjsu::InitializeDataSection()
00002da4  w    F .text	00000020 sjsu::DefaultUptime()
00007418 g     O .text	00000020 __sf_fake_stdout
00002b64  w    F .text	00000016 std::numeric_limits<long long>::max()
0000030c g       .text	00000000 __init_array_start
00005dec  w    F .text	00000002 .hidden __aeabi_idiv0
000011d6  w    F .text	00000026 unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)
000018bc g     F .text	0000000c _exit
000071b4  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart3Rx
10000020  w    O .data	00000004 sjsu::lpc40xx::SystemController::speed_in_hertz
00002c82  w    F .text	00000020 units::linear_scale<float>::linear_scale<>(float const&)
00003bac  w    F .text	0000004c sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)
0000091c  w    F .text	00000018 sjsu::lpc40xx::Gpio::GetPin() const
00000368  w    F .text	00000018 sjsu::Pin::GetPort() const
00005ef8 g     F .text	00000010 strlen
10000014  w    O .data	00000004 sjsu::Uptime
0000044c  w    F .text	00000034 sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const
00005644  w    F .text	00000004 .hidden __aeabi_unwind_cpp_pr1
00004556  w    F .text	0000005a std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
0000392c  w    F .text	000000c8 sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const
000048b8 g     F .text	00000020 sjsu::newlib::SetStdin(int (*)(char*, unsigned int))
00001420  w    F .text	00000040 sjsu::build::Stringify(sjsu::build::Target)
00006254  w    O .text	00000004 sjsu::lpc40xx::Gpio::kInterruptController
00005ddc g     F .text	00000006 .hidden _Unwind_GetDataRelBase
00003bf8  w    F .text	0000004c sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)
10000000  w    O .data	00000004 sjsu::cortex::InterruptController::current_vector
0000461c  w    F .text	00000058 unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)
00000480  w    F .text	00000034 sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const
0000030c g       .text	00000000 __preinit_array_start
0000361c  w    F .text	00000048 sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const
000043b2  w    F .text	0000004e bool std::chrono::operator==<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)
00006258  w    O .text	00000009 sjsu::lpc40xx::Gpio::ValidPortCheck() const::file
00000678  w    F .text	00000074 sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()
0000711c  w    O .text	00000002 sjsu::lpc40xx::SystemController::CpuClock::kDivider
000009c4  w    F .text	00000034 sjsu::lpc40xx::Gpio::ClearInterruptRoutine() const
00007208  w    O .text	0000001c vtable for sjsu::Uart
000049d4 g     F .text	00000160 .hidden __addsf3
0000718c  w    O .text	00000008 sjsu::lpc40xx::Uart::Port::kUart0Tx
00003f14  w    F .text	000000c0 sjsu::lpc40xx::Uart::Initialize(unsigned long) const
10000010  w    O .data	00000004 sjsu::cortex::DwtCounter::core
00005ec0 g     F .text	00000010 raise



Disassembly of section .text:

00000000 <kInterruptVectorTable>:
       0:	00 00 01 10 51 17 00 00 e5 2d 00 00 29 17 00 00     ....Q....-..)...
      10:	e5 2d 00 00 e5 2d 00 00 e5 2d 00 00 00 00 00 00     .-...-...-......
	...
      2c:	d1 47 00 00 e5 2d 00 00 00 00 00 00 01 48 00 00     .G...-.......H..
      3c:	e5 2d 00 00 e5 2d 00 00 e5 2d 00 00 e5 2d 00 00     .-...-...-...-..
      4c:	e5 2d 00 00 e5 2d 00 00 e5 2d 00 00 e5 2d 00 00     .-...-...-...-..
      5c:	e5 2d 00 00 e5 2d 00 00 e5 2d 00 00 e5 2d 00 00     .-...-...-...-..
      6c:	e5 2d 00 00 e5 2d 00 00 e5 2d 00 00 e5 2d 00 00     .-...-...-...-..
      7c:	e5 2d 00 00 e5 2d 00 00 e5 2d 00 00 e5 2d 00 00     .-...-...-...-..
      8c:	e5 2d 00 00 e5 2d 00 00 e5 2d 00 00 e5 2d 00 00     .-...-...-...-..
      9c:	e5 2d 00 00 e5 2d 00 00 e5 2d 00 00 e5 2d 00 00     .-...-...-...-..
      ac:	e5 2d 00 00 e5 2d 00 00 e5 2d 00 00 e5 2d 00 00     .-...-...-...-..
      bc:	e5 2d 00 00 e5 2d 00 00 e5 2d 00 00 e5 2d 00 00     .-...-...-...-..
      cc:	e5 2d 00 00 e5 2d 00 00 e5 2d 00 00 e5 2d 00 00     .-...-...-...-..
      dc:	e5 2d 00 00 e5 2d 00 00                             .-...-..

000000e4 <data_section_table>:
      e4:	00007508 	.word	0x00007508
      e8:	10000000 	.word	0x10000000
      ec:	000000d0 	.word	0x000000d0
      f0:	00007508 	.word	0x00007508
      f4:	20000000 	.word	0x20000000
      f8:	00000000 	.word	0x00000000

000000fc <bss_section_table>:
      fc:	100000d0 	.word	0x100000d0
     100:	00000344 	.word	0x00000344
     104:	20000000 	.word	0x20000000
     108:	00000000 	.word	0x00000000

0000010c <bss_section_table_end>:
     10c:	ffffffff 	.word	0xffffffff
     110:	ffffffff 	.word	0xffffffff
     114:	ffffffff 	.word	0xffffffff
     118:	ffffffff 	.word	0xffffffff
     11c:	ffffffff 	.word	0xffffffff
     120:	ffffffff 	.word	0xffffffff
     124:	ffffffff 	.word	0xffffffff
     128:	ffffffff 	.word	0xffffffff
     12c:	ffffffff 	.word	0xffffffff
     130:	ffffffff 	.word	0xffffffff
     134:	ffffffff 	.word	0xffffffff
     138:	ffffffff 	.word	0xffffffff
     13c:	ffffffff 	.word	0xffffffff
     140:	ffffffff 	.word	0xffffffff
     144:	ffffffff 	.word	0xffffffff
     148:	ffffffff 	.word	0xffffffff
     14c:	ffffffff 	.word	0xffffffff
     150:	ffffffff 	.word	0xffffffff
     154:	ffffffff 	.word	0xffffffff
     158:	ffffffff 	.word	0xffffffff
     15c:	ffffffff 	.word	0xffffffff
     160:	ffffffff 	.word	0xffffffff
     164:	ffffffff 	.word	0xffffffff
     168:	ffffffff 	.word	0xffffffff
     16c:	ffffffff 	.word	0xffffffff
     170:	ffffffff 	.word	0xffffffff
     174:	ffffffff 	.word	0xffffffff
     178:	ffffffff 	.word	0xffffffff
     17c:	ffffffff 	.word	0xffffffff
     180:	ffffffff 	.word	0xffffffff
     184:	ffffffff 	.word	0xffffffff
     188:	ffffffff 	.word	0xffffffff
     18c:	ffffffff 	.word	0xffffffff
     190:	ffffffff 	.word	0xffffffff
     194:	ffffffff 	.word	0xffffffff
     198:	ffffffff 	.word	0xffffffff
     19c:	ffffffff 	.word	0xffffffff
     1a0:	ffffffff 	.word	0xffffffff
     1a4:	ffffffff 	.word	0xffffffff
     1a8:	ffffffff 	.word	0xffffffff
     1ac:	ffffffff 	.word	0xffffffff
     1b0:	ffffffff 	.word	0xffffffff
     1b4:	ffffffff 	.word	0xffffffff
     1b8:	ffffffff 	.word	0xffffffff
     1bc:	ffffffff 	.word	0xffffffff
     1c0:	ffffffff 	.word	0xffffffff
     1c4:	ffffffff 	.word	0xffffffff
     1c8:	ffffffff 	.word	0xffffffff
     1cc:	ffffffff 	.word	0xffffffff
     1d0:	ffffffff 	.word	0xffffffff
     1d4:	ffffffff 	.word	0xffffffff
     1d8:	ffffffff 	.word	0xffffffff
     1dc:	ffffffff 	.word	0xffffffff
     1e0:	ffffffff 	.word	0xffffffff
     1e4:	ffffffff 	.word	0xffffffff
     1e8:	ffffffff 	.word	0xffffffff
     1ec:	ffffffff 	.word	0xffffffff
     1f0:	ffffffff 	.word	0xffffffff
     1f4:	ffffffff 	.word	0xffffffff
     1f8:	ffffffff 	.word	0xffffffff
     1fc:	ffffffff 	.word	0xffffffff
     200:	ffffffff 	.word	0xffffffff
     204:	ffffffff 	.word	0xffffffff
     208:	ffffffff 	.word	0xffffffff
     20c:	ffffffff 	.word	0xffffffff
     210:	ffffffff 	.word	0xffffffff
     214:	ffffffff 	.word	0xffffffff
     218:	ffffffff 	.word	0xffffffff
     21c:	ffffffff 	.word	0xffffffff
     220:	ffffffff 	.word	0xffffffff
     224:	ffffffff 	.word	0xffffffff
     228:	ffffffff 	.word	0xffffffff
     22c:	ffffffff 	.word	0xffffffff
     230:	ffffffff 	.word	0xffffffff
     234:	ffffffff 	.word	0xffffffff
     238:	ffffffff 	.word	0xffffffff
     23c:	ffffffff 	.word	0xffffffff
     240:	ffffffff 	.word	0xffffffff
     244:	ffffffff 	.word	0xffffffff
     248:	ffffffff 	.word	0xffffffff
     24c:	ffffffff 	.word	0xffffffff
     250:	ffffffff 	.word	0xffffffff
     254:	ffffffff 	.word	0xffffffff
     258:	ffffffff 	.word	0xffffffff
     25c:	ffffffff 	.word	0xffffffff
     260:	ffffffff 	.word	0xffffffff
     264:	ffffffff 	.word	0xffffffff
     268:	ffffffff 	.word	0xffffffff
     26c:	ffffffff 	.word	0xffffffff
     270:	ffffffff 	.word	0xffffffff
     274:	ffffffff 	.word	0xffffffff
     278:	ffffffff 	.word	0xffffffff
     27c:	ffffffff 	.word	0xffffffff
     280:	ffffffff 	.word	0xffffffff
     284:	ffffffff 	.word	0xffffffff
     288:	ffffffff 	.word	0xffffffff
     28c:	ffffffff 	.word	0xffffffff
     290:	ffffffff 	.word	0xffffffff
     294:	ffffffff 	.word	0xffffffff
     298:	ffffffff 	.word	0xffffffff
     29c:	ffffffff 	.word	0xffffffff
     2a0:	ffffffff 	.word	0xffffffff
     2a4:	ffffffff 	.word	0xffffffff
     2a8:	ffffffff 	.word	0xffffffff
     2ac:	ffffffff 	.word	0xffffffff
     2b0:	ffffffff 	.word	0xffffffff
     2b4:	ffffffff 	.word	0xffffffff
     2b8:	ffffffff 	.word	0xffffffff
     2bc:	ffffffff 	.word	0xffffffff
     2c0:	ffffffff 	.word	0xffffffff
     2c4:	ffffffff 	.word	0xffffffff
     2c8:	ffffffff 	.word	0xffffffff
     2cc:	ffffffff 	.word	0xffffffff
     2d0:	ffffffff 	.word	0xffffffff
     2d4:	ffffffff 	.word	0xffffffff
     2d8:	ffffffff 	.word	0xffffffff
     2dc:	ffffffff 	.word	0xffffffff
     2e0:	ffffffff 	.word	0xffffffff
     2e4:	ffffffff 	.word	0xffffffff
     2e8:	ffffffff 	.word	0xffffffff
     2ec:	ffffffff 	.word	0xffffffff
     2f0:	ffffffff 	.word	0xffffffff
     2f4:	ffffffff 	.word	0xffffffff
     2f8:	ffffffff 	.word	0xffffffff

000002fc <__CRP_WORD_START__>:
     2fc:	ffffffff 	.word	0xffffffff

00000300 <_init>:
     300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     302:	bf00      	nop
     304:	bcf8      	pop	{r3, r4, r5, r6, r7}
     306:	bc08      	pop	{r3}
     308:	469e      	mov	lr, r3
     30a:	4770      	bx	lr

0000030c <__init_array_start>:
     30c:	0000034d 	.word	0x0000034d
     310:	000013e9 	.word	0x000013e9
     314:	000017e9 	.word	0x000017e9
     318:	000047c1 	.word	0x000047c1

0000031c <_fini>:
     31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     31e:	bf00      	nop
     320:	bcf8      	pop	{r3, r4, r5, r6, r7}
     322:	bc08      	pop	{r3}
     324:	469e      	mov	lr, r3
     326:	4770      	bx	lr

00000328 <__do_global_dtors_aux>:
     328:	b510      	push	{r4, lr}
     32a:	4c05      	ldr	r4, [pc, #20]	; (340 <__do_global_dtors_aux+0x18>)
     32c:	7823      	ldrb	r3, [r4, #0]
     32e:	b933      	cbnz	r3, 33e <__do_global_dtors_aux+0x16>
     330:	4b04      	ldr	r3, [pc, #16]	; (344 <__do_global_dtors_aux+0x1c>)
     332:	b113      	cbz	r3, 33a <__do_global_dtors_aux+0x12>
     334:	4804      	ldr	r0, [pc, #16]	; (348 <__do_global_dtors_aux+0x20>)
     336:	f3af 8000 	nop.w
     33a:	2301      	movs	r3, #1
     33c:	7023      	strb	r3, [r4, #0]
     33e:	bd10      	pop	{r4, pc}
     340:	100000d0 	.word	0x100000d0
     344:	00000000 	.word	0x00000000
     348:	00007450 	.word	0x00007450

0000034c <frame_dummy>:
     34c:	b508      	push	{r3, lr}
     34e:	4b03      	ldr	r3, [pc, #12]	; (35c <frame_dummy+0x10>)
     350:	b11b      	cbz	r3, 35a <frame_dummy+0xe>
     352:	4903      	ldr	r1, [pc, #12]	; (360 <frame_dummy+0x14>)
     354:	4803      	ldr	r0, [pc, #12]	; (364 <frame_dummy+0x18>)
     356:	f3af 8000 	nop.w
     35a:	bd08      	pop	{r3, pc}
     35c:	00000000 	.word	0x00000000
     360:	100000d4 	.word	0x100000d4
     364:	00007450 	.word	0x00007450

00000368 <sjsu::Pin::GetPort() const>:

  // ==============================
  // Utility Methods
  // ==============================

  uint8_t GetPort() const
     368:	b480      	push	{r7}
     36a:	b083      	sub	sp, #12
     36c:	af00      	add	r7, sp, #0
     36e:	6078      	str	r0, [r7, #4]
  {
    return port_;
     370:	687b      	ldr	r3, [r7, #4]
     372:	791b      	ldrb	r3, [r3, #4]
  }
     374:	4618      	mov	r0, r3
     376:	370c      	adds	r7, #12
     378:	46bd      	mov	sp, r7
     37a:	f85d 7b04 	ldr.w	r7, [sp], #4
     37e:	4770      	bx	lr

00000380 <sjsu::Pin::GetPin() const>:
  uint8_t GetPin() const
     380:	b480      	push	{r7}
     382:	b083      	sub	sp, #12
     384:	af00      	add	r7, sp, #0
     386:	6078      	str	r0, [r7, #4]
  {
    return pin_;
     388:	687b      	ldr	r3, [r7, #4]
     38a:	795b      	ldrb	r3, [r3, #5]
  }
     38c:	4618      	mov	r0, r3
     38e:	370c      	adds	r7, #12
     390:	46bd      	mov	sp, r7
     392:	f85d 7b04 	ldr.w	r7, [sp], #4
     396:	4770      	bx	lr

00000398 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
     398:	b480      	push	{r7}
     39a:	b083      	sub	sp, #12
     39c:	af00      	add	r7, sp, #0
     39e:	6078      	str	r0, [r7, #4]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     3a0:	687b      	ldr	r3, [r7, #4]
     3a2:	f003 021f 	and.w	r2, r3, #31
     3a6:	4907      	ldr	r1, [pc, #28]	; (3c4 <NVIC_EnableIRQ+0x2c>)
     3a8:	687b      	ldr	r3, [r7, #4]
     3aa:	095b      	lsrs	r3, r3, #5
     3ac:	2001      	movs	r0, #1
     3ae:	fa00 f202 	lsl.w	r2, r0, r2
     3b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
     3b6:	bf00      	nop
     3b8:	370c      	adds	r7, #12
     3ba:	46bd      	mov	sp, r7
     3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
     3c0:	4770      	bx	lr
     3c2:	bf00      	nop
     3c4:	e000e100 	.word	0xe000e100

000003c8 <NVIC_DisableIRQ>:
  \brief   Disable External Interrupt
  \details Disables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
     3c8:	b480      	push	{r7}
     3ca:	b083      	sub	sp, #12
     3cc:	af00      	add	r7, sp, #0
     3ce:	6078      	str	r0, [r7, #4]
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
     3d0:	687b      	ldr	r3, [r7, #4]
     3d2:	f003 021f 	and.w	r2, r3, #31
     3d6:	4907      	ldr	r1, [pc, #28]	; (3f4 <NVIC_DisableIRQ+0x2c>)
     3d8:	687b      	ldr	r3, [r7, #4]
     3da:	095b      	lsrs	r3, r3, #5
     3dc:	2001      	movs	r0, #1
     3de:	fa00 f202 	lsl.w	r2, r0, r2
     3e2:	3320      	adds	r3, #32
     3e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
     3e8:	bf00      	nop
     3ea:	370c      	adds	r7, #12
     3ec:	46bd      	mov	sp, r7
     3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
     3f2:	4770      	bx	lr
     3f4:	e000e100 	.word	0xe000e100

000003f8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
     3f8:	b480      	push	{r7}
     3fa:	b083      	sub	sp, #12
     3fc:	af00      	add	r7, sp, #0
     3fe:	6078      	str	r0, [r7, #4]
     400:	6039      	str	r1, [r7, #0]
  if ((int32_t)(IRQn) < 0)
     402:	687b      	ldr	r3, [r7, #4]
     404:	2b00      	cmp	r3, #0
     406:	da0b      	bge.n	420 <NVIC_SetPriority+0x28>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     408:	683b      	ldr	r3, [r7, #0]
     40a:	b2da      	uxtb	r2, r3
     40c:	490d      	ldr	r1, [pc, #52]	; (444 <NVIC_SetPriority+0x4c>)
     40e:	687b      	ldr	r3, [r7, #4]
     410:	f003 030f 	and.w	r3, r3, #15
     414:	3b04      	subs	r3, #4
     416:	0152      	lsls	r2, r2, #5
     418:	b2d2      	uxtb	r2, r2
     41a:	440b      	add	r3, r1
     41c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
     41e:	e00a      	b.n	436 <NVIC_SetPriority+0x3e>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
     420:	683b      	ldr	r3, [r7, #0]
     422:	b2db      	uxtb	r3, r3
     424:	4a08      	ldr	r2, [pc, #32]	; (448 <NVIC_SetPriority+0x50>)
     426:	6879      	ldr	r1, [r7, #4]
     428:	4608      	mov	r0, r1
     42a:	015b      	lsls	r3, r3, #5
     42c:	b2d9      	uxtb	r1, r3
     42e:	1813      	adds	r3, r2, r0
     430:	460a      	mov	r2, r1
     432:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
     436:	bf00      	nop
     438:	370c      	adds	r7, #12
     43a:	46bd      	mov	sp, r7
     43c:	f85d 7b04 	ldr.w	r7, [sp], #4
     440:	4770      	bx	lr
     442:	bf00      	nop
     444:	e000ed00 	.word	0xe000ed00
     448:	e000e100 	.word	0xe000e100

0000044c <sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const>:
  {
    return Pin(5, 4);
  }
  constexpr Pin(uint8_t port, uint8_t pin) : sjsu::Pin(port, pin) {}

  void SetPinFunction(uint8_t function) const override
     44c:	b580      	push	{r7, lr}
     44e:	b082      	sub	sp, #8
     450:	af00      	add	r7, sp, #0
     452:	6078      	str	r0, [r7, #4]
     454:	460b      	mov	r3, r1
     456:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(function, kFunction);
     458:	4b08      	ldr	r3, [pc, #32]	; (47c <sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const+0x30>)
     45a:	78f9      	ldrb	r1, [r7, #3]
     45c:	781a      	ldrb	r2, [r3, #0]
     45e:	785b      	ldrb	r3, [r3, #1]
     460:	021b      	lsls	r3, r3, #8
     462:	431a      	orrs	r2, r3
     464:	2300      	movs	r3, #0
     466:	f362 030f 	bfi	r3, r2, #0, #16
     46a:	461a      	mov	r2, r3
     46c:	6878      	ldr	r0, [r7, #4]
     46e:	f000 f859 	bl	524 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     472:	bf00      	nop
     474:	3708      	adds	r7, #8
     476:	46bd      	mov	sp, r7
     478:	bd80      	pop	{r7, pc}
     47a:	bf00      	nop
     47c:	00005f08 	.word	0x00005f08

00000480 <sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const>:
  void SetPull(Resistor resistor) const override
     480:	b580      	push	{r7, lr}
     482:	b082      	sub	sp, #8
     484:	af00      	add	r7, sp, #0
     486:	6078      	str	r0, [r7, #4]
     488:	460b      	mov	r3, r1
     48a:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(static_cast<uint8_t>(resistor), kResistor);
     48c:	4b08      	ldr	r3, [pc, #32]	; (4b0 <sjsu::lpc40xx::Pin::SetPull(sjsu::Pin::Resistor) const+0x30>)
     48e:	78f9      	ldrb	r1, [r7, #3]
     490:	781a      	ldrb	r2, [r3, #0]
     492:	785b      	ldrb	r3, [r3, #1]
     494:	021b      	lsls	r3, r3, #8
     496:	431a      	orrs	r2, r3
     498:	2300      	movs	r3, #0
     49a:	f362 030f 	bfi	r3, r2, #0, #16
     49e:	461a      	mov	r2, r3
     4a0:	6878      	ldr	r0, [r7, #4]
     4a2:	f000 f83f 	bl	524 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     4a6:	bf00      	nop
     4a8:	3708      	adds	r7, #8
     4aa:	46bd      	mov	sp, r7
     4ac:	bd80      	pop	{r7, pc}
     4ae:	bf00      	nop
     4b0:	00005f0c 	.word	0x00005f0c

000004b4 <sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const>:
  // Set bit to 0 to enable analog mode
  void SetAsAnalogMode(bool set_as_analog = true) const override
     4b4:	b580      	push	{r7, lr}
     4b6:	b082      	sub	sp, #8
     4b8:	af00      	add	r7, sp, #0
     4ba:	6078      	str	r0, [r7, #4]
     4bc:	460b      	mov	r3, r1
     4be:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(!set_as_analog, kAnalogDigitalMode);
     4c0:	78fb      	ldrb	r3, [r7, #3]
     4c2:	f083 0301 	eor.w	r3, r3, #1
     4c6:	b2db      	uxtb	r3, r3
     4c8:	4619      	mov	r1, r3
     4ca:	4b08      	ldr	r3, [pc, #32]	; (4ec <sjsu::lpc40xx::Pin::SetAsAnalogMode(bool) const+0x38>)
     4cc:	781a      	ldrb	r2, [r3, #0]
     4ce:	785b      	ldrb	r3, [r3, #1]
     4d0:	021b      	lsls	r3, r3, #8
     4d2:	431a      	orrs	r2, r3
     4d4:	2300      	movs	r3, #0
     4d6:	f362 030f 	bfi	r3, r2, #0, #16
     4da:	461a      	mov	r2, r3
     4dc:	6878      	ldr	r0, [r7, #4]
     4de:	f000 f821 	bl	524 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     4e2:	bf00      	nop
     4e4:	3708      	adds	r7, #8
     4e6:	46bd      	mov	sp, r7
     4e8:	bd80      	pop	{r7, pc}
     4ea:	bf00      	nop
     4ec:	00005f10 	.word	0x00005f10

000004f0 <sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const>:

  void SetAsOpenDrain(bool set_as_open_drain = true) const override
     4f0:	b580      	push	{r7, lr}
     4f2:	b082      	sub	sp, #8
     4f4:	af00      	add	r7, sp, #0
     4f6:	6078      	str	r0, [r7, #4]
     4f8:	460b      	mov	r3, r1
     4fa:	70fb      	strb	r3, [r7, #3]
  {
    SetPinRegister(set_as_open_drain, kOpenDrain);
     4fc:	78f9      	ldrb	r1, [r7, #3]
     4fe:	4b08      	ldr	r3, [pc, #32]	; (520 <sjsu::lpc40xx::Pin::SetAsOpenDrain(bool) const+0x30>)
     500:	781a      	ldrb	r2, [r3, #0]
     502:	785b      	ldrb	r3, [r3, #1]
     504:	021b      	lsls	r3, r3, #8
     506:	431a      	orrs	r2, r3
     508:	2300      	movs	r3, #0
     50a:	f362 030f 	bfi	r3, r2, #0, #16
     50e:	461a      	mov	r2, r3
     510:	6878      	ldr	r0, [r7, #4]
     512:	f000 f807 	bl	524 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>
  }
     516:	bf00      	nop
     518:	3708      	adds	r7, #8
     51a:	46bd      	mov	sp, r7
     51c:	bd80      	pop	{r7, pc}
     51e:	bf00      	nop
     520:	00005f14 	.word	0x00005f14

00000524 <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const>:
  {
    SetPinRegister(enable_dac, kDacEnable);
  }

 protected:
  void SetPinRegister(uint8_t data, bit::Mask mask) const
     524:	b5f0      	push	{r4, r5, r6, r7, lr}
     526:	b087      	sub	sp, #28
     528:	af00      	add	r7, sp, #0
     52a:	60f8      	str	r0, [r7, #12]
     52c:	460b      	mov	r3, r1
     52e:	80ba      	strh	r2, [r7, #4]
     530:	72fb      	strb	r3, [r7, #11]
     532:	68fb      	ldr	r3, [r7, #12]
     534:	613b      	str	r3, [r7, #16]
  {
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
  }
  [[gnu::always_inline]] volatile uint32_t * PinRegister() const
  {
    return &pin_map->_register[GetPort()][GetPin()];
     536:	4b19      	ldr	r3, [pc, #100]	; (59c <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const+0x78>)
     538:	681c      	ldr	r4, [r3, #0]
     53a:	693b      	ldr	r3, [r7, #16]
     53c:	4618      	mov	r0, r3
     53e:	f7ff ff13 	bl	368 <sjsu::Pin::GetPort() const>
     542:	4603      	mov	r3, r0
     544:	461d      	mov	r5, r3
     546:	693b      	ldr	r3, [r7, #16]
     548:	4618      	mov	r0, r3
     54a:	f7ff ff19 	bl	380 <sjsu::Pin::GetPin() const>
     54e:	4603      	mov	r3, r0
     550:	461a      	mov	r2, r3
     552:	016b      	lsls	r3, r5, #5
     554:	4413      	add	r3, r2
     556:	009b      	lsls	r3, r3, #2
     558:	4423      	add	r3, r4
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
     55a:	681b      	ldr	r3, [r3, #0]
     55c:	7af9      	ldrb	r1, [r7, #11]
     55e:	687a      	ldr	r2, [r7, #4]
     560:	4618      	mov	r0, r3
     562:	f000 fe25 	bl	11b0 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
     566:	4605      	mov	r5, r0
     568:	68fb      	ldr	r3, [r7, #12]
     56a:	617b      	str	r3, [r7, #20]
    return &pin_map->_register[GetPort()][GetPin()];
     56c:	4b0b      	ldr	r3, [pc, #44]	; (59c <sjsu::lpc40xx::Pin::SetPinRegister(unsigned char, sjsu::bit::Mask) const+0x78>)
     56e:	681c      	ldr	r4, [r3, #0]
     570:	697b      	ldr	r3, [r7, #20]
     572:	4618      	mov	r0, r3
     574:	f7ff fef8 	bl	368 <sjsu::Pin::GetPort() const>
     578:	4603      	mov	r3, r0
     57a:	461e      	mov	r6, r3
     57c:	697b      	ldr	r3, [r7, #20]
     57e:	4618      	mov	r0, r3
     580:	f7ff fefe 	bl	380 <sjsu::Pin::GetPin() const>
     584:	4603      	mov	r3, r0
     586:	461a      	mov	r2, r3
     588:	0173      	lsls	r3, r6, #5
     58a:	4413      	add	r3, r2
     58c:	009b      	lsls	r3, r3, #2
     58e:	4423      	add	r3, r4
    *PinRegister() = bit::Insert(*PinRegister(), data, mask);
     590:	601d      	str	r5, [r3, #0]
  }
     592:	bf00      	nop
     594:	371c      	adds	r7, #28
     596:	46bd      	mov	sp, r7
     598:	bdf0      	pop	{r4, r5, r6, r7, pc}
     59a:	bf00      	nop
     59c:	100000ec 	.word	0x100000ec

000005a0 <sjsu::Gpio::SetHigh() const>:

  // ==============================
  // Utility Methods
  // ==============================

  void SetHigh() const
     5a0:	b580      	push	{r7, lr}
     5a2:	b082      	sub	sp, #8
     5a4:	af00      	add	r7, sp, #0
     5a6:	6078      	str	r0, [r7, #4]
  {
    Set(State::kHigh);
     5a8:	687b      	ldr	r3, [r7, #4]
     5aa:	681b      	ldr	r3, [r3, #0]
     5ac:	3304      	adds	r3, #4
     5ae:	681b      	ldr	r3, [r3, #0]
     5b0:	2101      	movs	r1, #1
     5b2:	6878      	ldr	r0, [r7, #4]
     5b4:	4798      	blx	r3
  }
     5b6:	bf00      	nop
     5b8:	3708      	adds	r7, #8
     5ba:	46bd      	mov	sp, r7
     5bc:	bd80      	pop	{r7, pc}

000005be <sjsu::Gpio::SetLow() const>:
  void SetLow() const
     5be:	b580      	push	{r7, lr}
     5c0:	b082      	sub	sp, #8
     5c2:	af00      	add	r7, sp, #0
     5c4:	6078      	str	r0, [r7, #4]
  {
    Set(State::kLow);
     5c6:	687b      	ldr	r3, [r7, #4]
     5c8:	681b      	ldr	r3, [r3, #0]
     5ca:	3304      	adds	r3, #4
     5cc:	681b      	ldr	r3, [r3, #0]
     5ce:	2100      	movs	r1, #0
     5d0:	6878      	ldr	r0, [r7, #4]
     5d2:	4798      	blx	r3
  }
     5d4:	bf00      	nop
     5d6:	3708      	adds	r7, #8
     5d8:	46bd      	mov	sp, r7
     5da:	bd80      	pop	{r7, pc}

000005dc <sjsu::Gpio::SetAsInput() const>:
  void SetAsInput() const
     5dc:	b580      	push	{r7, lr}
     5de:	b082      	sub	sp, #8
     5e0:	af00      	add	r7, sp, #0
     5e2:	6078      	str	r0, [r7, #4]
  {
    SetDirection(Direction::kInput);
     5e4:	687b      	ldr	r3, [r7, #4]
     5e6:	681b      	ldr	r3, [r3, #0]
     5e8:	681b      	ldr	r3, [r3, #0]
     5ea:	2100      	movs	r1, #0
     5ec:	6878      	ldr	r0, [r7, #4]
     5ee:	4798      	blx	r3
  }
     5f0:	bf00      	nop
     5f2:	3708      	adds	r7, #8
     5f4:	46bd      	mov	sp, r7
     5f6:	bd80      	pop	{r7, pc}

000005f8 <sjsu::Gpio::SetAsOutput() const>:
  void SetAsOutput() const
     5f8:	b580      	push	{r7, lr}
     5fa:	b082      	sub	sp, #8
     5fc:	af00      	add	r7, sp, #0
     5fe:	6078      	str	r0, [r7, #4]
  {
    SetDirection(Direction::kOutput);
     600:	687b      	ldr	r3, [r7, #4]
     602:	681b      	ldr	r3, [r3, #0]
     604:	681b      	ldr	r3, [r3, #0]
     606:	2101      	movs	r1, #1
     608:	6878      	ldr	r0, [r7, #4]
     60a:	4798      	blx	r3
  }
     60c:	bf00      	nop
     60e:	3708      	adds	r7, #8
     610:	46bd      	mov	sp, r7
     612:	bd80      	pop	{r7, pc}

00000614 <sjsu::cortex::InterruptController::UnregisteredArmExceptions()>:
  static constexpr size_t kNumberOfInterrupts = 64;

  inline static SCB_Type * scb     = SCB;
  inline static int current_vector = cortex::Reset_IRQn;

  static void UnregisteredArmExceptions() {}
     614:	b480      	push	{r7}
     616:	af00      	add	r7, sp, #0
     618:	bf00      	nop
     61a:	46bd      	mov	sp, r7
     61c:	f85d 7b04 	ldr.w	r7, [sp], #4
     620:	4770      	bx	lr
     622:	Address 0x0000000000000622 is out of bounds.


00000624 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()>:

  static void UnregisteredInterruptHandler()
     624:	b580      	push	{r7, lr}
     626:	b082      	sub	sp, #8
     628:	af02      	add	r7, sp, #8
  {
    LOG_WARNING(
     62a:	4b09      	ldr	r3, [pc, #36]	; (650 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x2c>)
     62c:	681b      	ldr	r3, [r3, #0]
     62e:	9300      	str	r3, [sp, #0]
     630:	231d      	movs	r3, #29
     632:	4a08      	ldr	r2, [pc, #32]	; (654 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x30>)
     634:	4908      	ldr	r1, [pc, #32]	; (658 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x34>)
     636:	4809      	ldr	r0, [pc, #36]	; (65c <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x38>)
     638:	f002 fa78 	bl	2b2c <printf>
        "No interrupt service routine found for the vector %d! Disabling ISR",
        current_vector);
    NVIC_DisableIRQ(current_vector - kArmIrqOffset);
     63c:	4b04      	ldr	r3, [pc, #16]	; (650 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()+0x2c>)
     63e:	681b      	ldr	r3, [r3, #0]
     640:	3b10      	subs	r3, #16
     642:	4618      	mov	r0, r3
     644:	f7ff fec0 	bl	3c8 <NVIC_DisableIRQ>
  }
     648:	bf00      	nop
     64a:	46bd      	mov	sp, r7
     64c:	bd80      	pop	{r7, pc}
     64e:	bf00      	nop
     650:	10000000 	.word	0x10000000
     654:	000062f8 	.word	0x000062f8
     658:	00005f18 	.word	0x00005f18
     65c:	00005f28 	.word	0x00005f28

00000660 <unsigned int std::size<void (*)(), 64u>(void (* const (&) [64u])())>:
   *  @brief  Return the size of an array.
   *  @param  __array  Array.
   */
  template <typename _Tp, size_t _Nm>
    constexpr size_t
    size(const _Tp (&/*__array*/)[_Nm]) noexcept
     660:	b480      	push	{r7}
     662:	b083      	sub	sp, #12
     664:	af00      	add	r7, sp, #0
     666:	6078      	str	r0, [r7, #4]
    { return _Nm; }
     668:	2340      	movs	r3, #64	; 0x40
     66a:	4618      	mov	r0, r3
     66c:	370c      	adds	r7, #12
     66e:	46bd      	mov	sp, r7
     670:	f85d 7b04 	ldr.w	r7, [sp], #4
     674:	4770      	bx	lr
     676:	Address 0x0000000000000676 is out of bounds.


00000678 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>:
      {
        LOG_INFO("vector[%zu] = %p", i, vector[i]);
      }
    }

    static constexpr VectorTable_t GenerateDefaultTable()
     678:	b580      	push	{r7, lr}
     67a:	b084      	sub	sp, #16
     67c:	af00      	add	r7, sp, #0
     67e:	6078      	str	r0, [r7, #4]
    {
      VectorTable_t temp_table = { 0 };
     680:	687b      	ldr	r3, [r7, #4]
     682:	4618      	mov	r0, r3
     684:	f44f 7380 	mov.w	r3, #256	; 0x100
     688:	461a      	mov	r2, r3
     68a:	2100      	movs	r1, #0
     68c:	f005 fbe7 	bl	5e5e <memset>
      // The Arm exceptions may be enabled by default and should simply be
      // called and do nothing.
      for (size_t i = 0; i < kArmIrqOffset; i++)
     690:	2300      	movs	r3, #0
     692:	60fb      	str	r3, [r7, #12]
     694:	68fb      	ldr	r3, [r7, #12]
     696:	2b0f      	cmp	r3, #15
     698:	d808      	bhi.n	6ac <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x34>
      {
        temp_table.vector[i] = UnregisteredArmExceptions;
     69a:	687b      	ldr	r3, [r7, #4]
     69c:	68fa      	ldr	r2, [r7, #12]
     69e:	4911      	ldr	r1, [pc, #68]	; (6e4 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x6c>)
     6a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (size_t i = 0; i < kArmIrqOffset; i++)
     6a4:	68fb      	ldr	r3, [r7, #12]
     6a6:	3301      	adds	r3, #1
     6a8:	60fb      	str	r3, [r7, #12]
     6aa:	e7f3      	b.n	694 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x1c>
      }
      // For all other exceptions, give a handler that will disable the ISR if
      // it is enabled but has not been registered.
      for (size_t i = kArmIrqOffset; i < std::size(temp_table.vector); i++)
     6ac:	2310      	movs	r3, #16
     6ae:	60bb      	str	r3, [r7, #8]
     6b0:	6878      	ldr	r0, [r7, #4]
     6b2:	f7ff ffd5 	bl	660 <unsigned int std::size<void (*)(), 64u>(void (* const (&) [64u])())>
     6b6:	4602      	mov	r2, r0
     6b8:	68bb      	ldr	r3, [r7, #8]
     6ba:	4293      	cmp	r3, r2
     6bc:	bf34      	ite	cc
     6be:	2301      	movcc	r3, #1
     6c0:	2300      	movcs	r3, #0
     6c2:	b2db      	uxtb	r3, r3
     6c4:	2b00      	cmp	r3, #0
     6c6:	d008      	beq.n	6da <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x62>
      {
        temp_table.vector[i] = UnregisteredInterruptHandler;
     6c8:	687b      	ldr	r3, [r7, #4]
     6ca:	68ba      	ldr	r2, [r7, #8]
     6cc:	4906      	ldr	r1, [pc, #24]	; (6e8 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x70>)
     6ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      for (size_t i = kArmIrqOffset; i < std::size(temp_table.vector); i++)
     6d2:	68bb      	ldr	r3, [r7, #8]
     6d4:	3301      	adds	r3, #1
     6d6:	60bb      	str	r3, [r7, #8]
     6d8:	e7ea      	b.n	6b0 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()+0x38>
      }
      return temp_table;
     6da:	bf00      	nop
    }
     6dc:	6878      	ldr	r0, [r7, #4]
     6de:	3710      	adds	r7, #16
     6e0:	46bd      	mov	sp, r7
     6e2:	bd80      	pop	{r7, pc}
     6e4:	00000615 	.word	0x00000615
     6e8:	00000625 	.word	0x00000625

000006ec <sjsu::cortex::InterruptController::IrqToIndex(int)>:
  };

  inline static VectorTable_t table = VectorTable_t::GenerateDefaultTable();

  static int IrqToIndex(int irq)
     6ec:	b480      	push	{r7}
     6ee:	b083      	sub	sp, #12
     6f0:	af00      	add	r7, sp, #0
     6f2:	6078      	str	r0, [r7, #4]
  {
    return irq + kArmIrqOffset;
     6f4:	687b      	ldr	r3, [r7, #4]
     6f6:	3310      	adds	r3, #16
  }
     6f8:	4618      	mov	r0, r3
     6fa:	370c      	adds	r7, #12
     6fc:	46bd      	mov	sp, r7
     6fe:	f85d 7b04 	ldr.w	r7, [sp], #4
     702:	4770      	bx	lr

00000704 <sjsu::cortex::InterruptController::GetVector(int)>:
  static int IndexToIrq(int index)
  {
    return index - kArmIrqOffset;
  }

  static IsrPointer * GetVector(int irq)
     704:	b580      	push	{r7, lr}
     706:	b082      	sub	sp, #8
     708:	af00      	add	r7, sp, #0
     70a:	6078      	str	r0, [r7, #4]
  {
    return &table.vector[IrqToIndex(irq)];
     70c:	6878      	ldr	r0, [r7, #4]
     70e:	f7ff ffed 	bl	6ec <sjsu::cortex::InterruptController::IrqToIndex(int)>
     712:	4603      	mov	r3, r0
     714:	009b      	lsls	r3, r3, #2
     716:	4a03      	ldr	r2, [pc, #12]	; (724 <sjsu::cortex::InterruptController::GetVector(int)+0x20>)
     718:	4413      	add	r3, r2
  }
     71a:	4618      	mov	r0, r3
     71c:	3708      	adds	r7, #8
     71e:	46bd      	mov	sp, r7
     720:	bd80      	pop	{r7, pc}
     722:	bf00      	nop
     724:	100000f0 	.word	0x100000f0

00000728 <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const>:
    current_vector = active_isr;
    IsrPointer isr = table.vector[active_isr];
    isr();
  }

  void Register(RegistrationInfo_t register_info) const override
     728:	b084      	sub	sp, #16
     72a:	b590      	push	{r4, r7, lr}
     72c:	b085      	sub	sp, #20
     72e:	af00      	add	r7, sp, #0
     730:	6078      	str	r0, [r7, #4]
     732:	f107 0024 	add.w	r0, r7, #36	; 0x24
     736:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  {
    int irq         = register_info.interrupt_request_number;
     73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     73c:	60fb      	str	r3, [r7, #12]
    *GetVector(irq) = register_info.interrupt_service_routine;
     73e:	6abc      	ldr	r4, [r7, #40]	; 0x28
     740:	68f8      	ldr	r0, [r7, #12]
     742:	f7ff ffdf 	bl	704 <sjsu::cortex::InterruptController::GetVector(int)>
     746:	4603      	mov	r3, r0
     748:	601c      	str	r4, [r3, #0]
    if (register_info.enable_interrupt && irq >= 0)
     74a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
     74e:	2b00      	cmp	r3, #0
     750:	d005      	beq.n	75e <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const+0x36>
     752:	68fb      	ldr	r3, [r7, #12]
     754:	2b00      	cmp	r3, #0
     756:	db02      	blt.n	75e <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const+0x36>
    {
      NVIC_EnableIRQ(irq);
     758:	68f8      	ldr	r0, [r7, #12]
     75a:	f7ff fe1d 	bl	398 <NVIC_EnableIRQ>
    }
    if (register_info.priority > -1)
     75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     760:	2b00      	cmp	r3, #0
     762:	db04      	blt.n	76e <sjsu::cortex::InterruptController::Register(sjsu::InterruptController::RegistrationInfo_t) const+0x46>
    {
      NVIC_SetPriority(irq, register_info.priority);
     764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
     766:	4619      	mov	r1, r3
     768:	68f8      	ldr	r0, [r7, #12]
     76a:	f7ff fe45 	bl	3f8 <NVIC_SetPriority>
    }
  }
     76e:	bf00      	nop
     770:	3714      	adds	r7, #20
     772:	46bd      	mov	sp, r7
     774:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
     778:	b004      	add	sp, #16
     77a:	4770      	bx	lr

0000077c <sjsu::cortex::InterruptController::Deregister(int) const>:

  void Deregister(int irq) const override
     77c:	b580      	push	{r7, lr}
     77e:	b082      	sub	sp, #8
     780:	af00      	add	r7, sp, #0
     782:	6078      	str	r0, [r7, #4]
     784:	6039      	str	r1, [r7, #0]
  {
    NVIC_DisableIRQ(irq);
     786:	6838      	ldr	r0, [r7, #0]
     788:	f7ff fe1e 	bl	3c8 <NVIC_DisableIRQ>
    *GetVector(irq) = UnregisteredInterruptHandler;
     78c:	6838      	ldr	r0, [r7, #0]
     78e:	f7ff ffb9 	bl	704 <sjsu::cortex::InterruptController::GetVector(int)>
     792:	4602      	mov	r2, r0
     794:	4b02      	ldr	r3, [pc, #8]	; (7a0 <sjsu::cortex::InterruptController::Deregister(int) const+0x24>)
     796:	6013      	str	r3, [r2, #0]
  }
     798:	bf00      	nop
     79a:	3708      	adds	r7, #8
     79c:	46bd      	mov	sp, r7
     79e:	bd80      	pop	{r7, pc}
     7a0:	00000625 	.word	0x00000625

000007a4 <sjsu::lpc40xx::Gpio::SetDirection(sjsu::Gpio::Direction) const>:
  {
    interupt_port_ = (port_number == 2) ? 1 : 0;
  }
  // Sets the GPIO pin direction as output or input depending on the
  // Direction enum parameter
  void SetDirection(Direction direction) const override
     7a4:	b590      	push	{r4, r7, lr}
     7a6:	b085      	sub	sp, #20
     7a8:	af00      	add	r7, sp, #0
     7aa:	6078      	str	r0, [r7, #4]
     7ac:	460b      	mov	r3, r1
     7ae:	70fb      	strb	r3, [r7, #3]
  {
    pin_.SetPinFunction(kGpioFunction);
     7b0:	687b      	ldr	r3, [r7, #4]
     7b2:	3308      	adds	r3, #8
     7b4:	2100      	movs	r1, #0
     7b6:	4618      	mov	r0, r3
     7b8:	f7ff fe48 	bl	44c <sjsu::lpc40xx::Pin::SetPinFunction(unsigned char) const>
    volatile uint32_t * dir_register = &gpio_port[pin_.GetPort()]->DIR;
     7bc:	687b      	ldr	r3, [r7, #4]
     7be:	3308      	adds	r3, #8
     7c0:	4618      	mov	r0, r3
     7c2:	f7ff fdd1 	bl	368 <sjsu::Pin::GetPort() const>
     7c6:	4603      	mov	r3, r0
     7c8:	461a      	mov	r2, r3
     7ca:	4b15      	ldr	r3, [pc, #84]	; (820 <sjsu::lpc40xx::Gpio::SetDirection(sjsu::Gpio::Direction) const+0x7c>)
     7cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
     7d0:	60fb      	str	r3, [r7, #12]

    if (direction == Direction::kInput)
     7d2:	78fb      	ldrb	r3, [r7, #3]
     7d4:	2b00      	cmp	r3, #0
     7d6:	d10f      	bne.n	7f8 <sjsu::lpc40xx::Gpio::SetDirection(sjsu::Gpio::Direction) const+0x54>
    {
      *dir_register = bit::Clear(*dir_register, pin_.GetPin());
     7d8:	68fb      	ldr	r3, [r7, #12]
     7da:	681c      	ldr	r4, [r3, #0]
     7dc:	687b      	ldr	r3, [r7, #4]
     7de:	3308      	adds	r3, #8
     7e0:	4618      	mov	r0, r3
     7e2:	f7ff fdcd 	bl	380 <sjsu::Pin::GetPin() const>
     7e6:	4603      	mov	r3, r0
     7e8:	4619      	mov	r1, r3
     7ea:	4620      	mov	r0, r4
     7ec:	f000 fcf3 	bl	11d6 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>
     7f0:	4602      	mov	r2, r0
     7f2:	68fb      	ldr	r3, [r7, #12]
     7f4:	601a      	str	r2, [r3, #0]
    }
    else
    {
      *dir_register = bit::Set(*dir_register, pin_.GetPin());
    }
  }
     7f6:	e00e      	b.n	816 <sjsu::lpc40xx::Gpio::SetDirection(sjsu::Gpio::Direction) const+0x72>
      *dir_register = bit::Set(*dir_register, pin_.GetPin());
     7f8:	68fb      	ldr	r3, [r7, #12]
     7fa:	681c      	ldr	r4, [r3, #0]
     7fc:	687b      	ldr	r3, [r7, #4]
     7fe:	3308      	adds	r3, #8
     800:	4618      	mov	r0, r3
     802:	f7ff fdbd 	bl	380 <sjsu::Pin::GetPin() const>
     806:	4603      	mov	r3, r0
     808:	4619      	mov	r1, r3
     80a:	4620      	mov	r0, r4
     80c:	f000 fcf6 	bl	11fc <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
     810:	4602      	mov	r2, r0
     812:	68fb      	ldr	r3, [r7, #12]
     814:	601a      	str	r2, [r3, #0]
  }
     816:	bf00      	nop
     818:	3714      	adds	r7, #20
     81a:	46bd      	mov	sp, r7
     81c:	bd90      	pop	{r4, r7, pc}
     81e:	bf00      	nop
     820:	100001f0 	.word	0x100001f0

00000824 <sjsu::lpc40xx::Gpio::Set(sjsu::Gpio::State) const>:
  // Sets the GPIO output pin to high or low depending on the State enum
  // parameter
  void Set(State output = kHigh) const override
     824:	b590      	push	{r4, r7, lr}
     826:	b083      	sub	sp, #12
     828:	af00      	add	r7, sp, #0
     82a:	6078      	str	r0, [r7, #4]
     82c:	460b      	mov	r3, r1
     82e:	70fb      	strb	r3, [r7, #3]
  {
    if (output == State::kHigh)
     830:	78fb      	ldrb	r3, [r7, #3]
     832:	2b01      	cmp	r3, #1
     834:	d115      	bne.n	862 <sjsu::lpc40xx::Gpio::Set(sjsu::Gpio::State) const+0x3e>
    {
      gpio_port[pin_.GetPort()]->SET = (1 << pin_.GetPin());
     836:	687b      	ldr	r3, [r7, #4]
     838:	3308      	adds	r3, #8
     83a:	4618      	mov	r0, r3
     83c:	f7ff fda0 	bl	380 <sjsu::Pin::GetPin() const>
     840:	4603      	mov	r3, r0
     842:	461a      	mov	r2, r3
     844:	2301      	movs	r3, #1
     846:	4093      	lsls	r3, r2
     848:	461c      	mov	r4, r3
     84a:	687b      	ldr	r3, [r7, #4]
     84c:	3308      	adds	r3, #8
     84e:	4618      	mov	r0, r3
     850:	f7ff fd8a 	bl	368 <sjsu::Pin::GetPort() const>
     854:	4603      	mov	r3, r0
     856:	461a      	mov	r2, r3
     858:	4b0e      	ldr	r3, [pc, #56]	; (894 <sjsu::lpc40xx::Gpio::Set(sjsu::Gpio::State) const+0x70>)
     85a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
     85e:	619c      	str	r4, [r3, #24]
    }
    else
    {
      gpio_port[pin_.GetPort()]->CLR = (1 << pin_.GetPin());
    }
  }
     860:	e014      	b.n	88c <sjsu::lpc40xx::Gpio::Set(sjsu::Gpio::State) const+0x68>
      gpio_port[pin_.GetPort()]->CLR = (1 << pin_.GetPin());
     862:	687b      	ldr	r3, [r7, #4]
     864:	3308      	adds	r3, #8
     866:	4618      	mov	r0, r3
     868:	f7ff fd8a 	bl	380 <sjsu::Pin::GetPin() const>
     86c:	4603      	mov	r3, r0
     86e:	461a      	mov	r2, r3
     870:	2301      	movs	r3, #1
     872:	4093      	lsls	r3, r2
     874:	461c      	mov	r4, r3
     876:	687b      	ldr	r3, [r7, #4]
     878:	3308      	adds	r3, #8
     87a:	4618      	mov	r0, r3
     87c:	f7ff fd74 	bl	368 <sjsu::Pin::GetPort() const>
     880:	4603      	mov	r3, r0
     882:	461a      	mov	r2, r3
     884:	4b03      	ldr	r3, [pc, #12]	; (894 <sjsu::lpc40xx::Gpio::Set(sjsu::Gpio::State) const+0x70>)
     886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
     88a:	61dc      	str	r4, [r3, #28]
  }
     88c:	bf00      	nop
     88e:	370c      	adds	r7, #12
     890:	46bd      	mov	sp, r7
     892:	bd90      	pop	{r4, r7, pc}
     894:	100001f0 	.word	0x100001f0

00000898 <sjsu::lpc40xx::Gpio::Toggle() const>:
  // Toggle the output of a GPIO output pin
  void Toggle() const override
     898:	b590      	push	{r4, r7, lr}
     89a:	b083      	sub	sp, #12
     89c:	af00      	add	r7, sp, #0
     89e:	6078      	str	r0, [r7, #4]
  {
    gpio_port[pin_.GetPort()]->PIN ^= (1 << pin_.GetPin());
     8a0:	687b      	ldr	r3, [r7, #4]
     8a2:	3308      	adds	r3, #8
     8a4:	4618      	mov	r0, r3
     8a6:	f7ff fd6b 	bl	380 <sjsu::Pin::GetPin() const>
     8aa:	4603      	mov	r3, r0
     8ac:	461a      	mov	r2, r3
     8ae:	2301      	movs	r3, #1
     8b0:	fa03 f402 	lsl.w	r4, r3, r2
     8b4:	687b      	ldr	r3, [r7, #4]
     8b6:	3308      	adds	r3, #8
     8b8:	4618      	mov	r0, r3
     8ba:	f7ff fd55 	bl	368 <sjsu::Pin::GetPort() const>
     8be:	4603      	mov	r3, r0
     8c0:	461a      	mov	r2, r3
     8c2:	4b05      	ldr	r3, [pc, #20]	; (8d8 <sjsu::lpc40xx::Gpio::Toggle() const+0x40>)
     8c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
     8c8:	695a      	ldr	r2, [r3, #20]
     8ca:	4621      	mov	r1, r4
     8cc:	404a      	eors	r2, r1
     8ce:	615a      	str	r2, [r3, #20]
  }
     8d0:	bf00      	nop
     8d2:	370c      	adds	r7, #12
     8d4:	46bd      	mov	sp, r7
     8d6:	bd90      	pop	{r4, r7, pc}
     8d8:	100001f0 	.word	0x100001f0

000008dc <sjsu::lpc40xx::Gpio::Read() const>:
  // Returns the current State state of the pin
  bool Read() const override
     8dc:	b590      	push	{r4, r7, lr}
     8de:	b083      	sub	sp, #12
     8e0:	af00      	add	r7, sp, #0
     8e2:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(gpio_port[pin_.GetPort()]->PIN, pin_.GetPin());
     8e4:	687b      	ldr	r3, [r7, #4]
     8e6:	3308      	adds	r3, #8
     8e8:	4618      	mov	r0, r3
     8ea:	f7ff fd3d 	bl	368 <sjsu::Pin::GetPort() const>
     8ee:	4603      	mov	r3, r0
     8f0:	461a      	mov	r2, r3
     8f2:	4b09      	ldr	r3, [pc, #36]	; (918 <sjsu::lpc40xx::Gpio::Read() const+0x3c>)
     8f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
     8f8:	695c      	ldr	r4, [r3, #20]
     8fa:	687b      	ldr	r3, [r7, #4]
     8fc:	3308      	adds	r3, #8
     8fe:	4618      	mov	r0, r3
     900:	f7ff fd3e 	bl	380 <sjsu::Pin::GetPin() const>
     904:	4603      	mov	r3, r0
     906:	4619      	mov	r1, r3
     908:	4620      	mov	r0, r4
     90a:	f000 fc89 	bl	1220 <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>
     90e:	4603      	mov	r3, r0
  }
     910:	4618      	mov	r0, r3
     912:	370c      	adds	r7, #12
     914:	46bd      	mov	sp, r7
     916:	bd90      	pop	{r4, r7, pc}
     918:	100001f0 	.word	0x100001f0

0000091c <sjsu::lpc40xx::Gpio::GetPin() const>:
  const sjsu::Pin & GetPin() const override
     91c:	b480      	push	{r7}
     91e:	b083      	sub	sp, #12
     920:	af00      	add	r7, sp, #0
     922:	6078      	str	r0, [r7, #4]
  {
    return pin_;
     924:	687b      	ldr	r3, [r7, #4]
     926:	3308      	adds	r3, #8
  }
     928:	4618      	mov	r0, r3
     92a:	370c      	adds	r7, #12
     92c:	46bd      	mov	sp, r7
     92e:	f85d 7b04 	ldr.w	r7, [sp], #4
     932:	4770      	bx	lr

00000934 <sjsu::lpc40xx::Gpio::ValidPortCheck() const>:

  // Checks if the selected gpio port is valid for external interrupts.
  bool ValidPortCheck() const
     934:	b580      	push	{r7, lr}
     936:	b086      	sub	sp, #24
     938:	af02      	add	r7, sp, #8
     93a:	6078      	str	r0, [r7, #4]
  {
    bool is_valid = (interupt_port_ <= 1);
     93c:	687b      	ldr	r3, [r7, #4]
     93e:	791b      	ldrb	r3, [r3, #4]
     940:	2b01      	cmp	r3, #1
     942:	bf94      	ite	ls
     944:	2301      	movls	r3, #1
     946:	2300      	movhi	r3, #0
     948:	b2db      	uxtb	r3, r3
     94a:	73fb      	strb	r3, [r7, #15]
    SJ2_ASSERT_WARNING(is_valid,
     94c:	7bfb      	ldrb	r3, [r7, #15]
     94e:	f083 0301 	eor.w	r3, r3, #1
     952:	b2db      	uxtb	r3, r3
     954:	2b00      	cmp	r3, #0
     956:	d00c      	beq.n	972 <sjsu::lpc40xx::Gpio::ValidPortCheck() const+0x3e>
     958:	687b      	ldr	r3, [r7, #4]
     95a:	3308      	adds	r3, #8
     95c:	4618      	mov	r0, r3
     95e:	f7ff fd03 	bl	368 <sjsu::Pin::GetPort() const>
     962:	4603      	mov	r3, r0
     964:	9300      	str	r3, [sp, #0]
     966:	237d      	movs	r3, #125	; 0x7d
     968:	4a04      	ldr	r2, [pc, #16]	; (97c <sjsu::lpc40xx::Gpio::ValidPortCheck() const+0x48>)
     96a:	4905      	ldr	r1, [pc, #20]	; (980 <sjsu::lpc40xx::Gpio::ValidPortCheck() const+0x4c>)
     96c:	4805      	ldr	r0, [pc, #20]	; (984 <sjsu::lpc40xx::Gpio::ValidPortCheck() const+0x50>)
     96e:	f002 f8dd 	bl	2b2c <printf>
                       "Port %d cannot be used for External Interrupts. Need "
                       "to use GPIO on Port 0 or 2.",
                       pin_.GetPort());
    return is_valid;
     972:	7bfb      	ldrb	r3, [r7, #15]
  }
     974:	4618      	mov	r0, r3
     976:	3710      	adds	r7, #16
     978:	46bd      	mov	sp, r7
     97a:	bd80      	pop	{r7, pc}
     97c:	00006348 	.word	0x00006348
     980:	00006258 	.word	0x00006258
     984:	00005fa8 	.word	0x00005fa8

00000988 <sjsu::lpc40xx::Gpio::SetInterruptRoutine(void (*)()) const>:

  // Assigns the developer's ISR function to the port/pin gpio instance.
  void SetInterruptRoutine(IsrPointer function) const
     988:	b5b0      	push	{r4, r5, r7, lr}
     98a:	b082      	sub	sp, #8
     98c:	af00      	add	r7, sp, #0
     98e:	6078      	str	r0, [r7, #4]
     990:	6039      	str	r1, [r7, #0]
  {
    ValidPortCheck();
     992:	6878      	ldr	r0, [r7, #4]
     994:	f7ff ffce 	bl	934 <sjsu::lpc40xx::Gpio::ValidPortCheck() const>
    interrupthandlers[interupt_port_][pin_.GetPin()] = function;
     998:	683c      	ldr	r4, [r7, #0]
     99a:	687b      	ldr	r3, [r7, #4]
     99c:	791b      	ldrb	r3, [r3, #4]
     99e:	461d      	mov	r5, r3
     9a0:	687b      	ldr	r3, [r7, #4]
     9a2:	3308      	adds	r3, #8
     9a4:	4618      	mov	r0, r3
     9a6:	f7ff fceb 	bl	380 <sjsu::Pin::GetPin() const>
     9aa:	4603      	mov	r3, r0
     9ac:	4619      	mov	r1, r3
     9ae:	4a04      	ldr	r2, [pc, #16]	; (9c0 <sjsu::lpc40xx::Gpio::SetInterruptRoutine(void (*)()) const+0x38>)
     9b0:	016b      	lsls	r3, r5, #5
     9b2:	440b      	add	r3, r1
     9b4:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
  }
     9b8:	bf00      	nop
     9ba:	3708      	adds	r7, #8
     9bc:	46bd      	mov	sp, r7
     9be:	bdb0      	pop	{r4, r5, r7, pc}
     9c0:	10000208 	.word	0x10000208

000009c4 <sjsu::lpc40xx::Gpio::ClearInterruptRoutine() const>:

  // Clears the developers ISR function from the port/pin gio instance.
  void ClearInterruptRoutine() const
     9c4:	b590      	push	{r4, r7, lr}
     9c6:	b083      	sub	sp, #12
     9c8:	af00      	add	r7, sp, #0
     9ca:	6078      	str	r0, [r7, #4]
  {
    interrupthandlers[interupt_port_][pin_.GetPin()] = nullptr;
     9cc:	687b      	ldr	r3, [r7, #4]
     9ce:	791b      	ldrb	r3, [r3, #4]
     9d0:	461c      	mov	r4, r3
     9d2:	687b      	ldr	r3, [r7, #4]
     9d4:	3308      	adds	r3, #8
     9d6:	4618      	mov	r0, r3
     9d8:	f7ff fcd2 	bl	380 <sjsu::Pin::GetPin() const>
     9dc:	4603      	mov	r3, r0
     9de:	4619      	mov	r1, r3
     9e0:	4a04      	ldr	r2, [pc, #16]	; (9f4 <sjsu::lpc40xx::Gpio::ClearInterruptRoutine() const+0x30>)
     9e2:	0163      	lsls	r3, r4, #5
     9e4:	440b      	add	r3, r1
     9e6:	2100      	movs	r1, #0
     9e8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  }
     9ec:	bf00      	nop
     9ee:	370c      	adds	r7, #12
     9f0:	46bd      	mov	sp, r7
     9f2:	bd90      	pop	{r4, r7, pc}
     9f4:	10000208 	.word	0x10000208

000009f8 <unsigned char sjsu::util::Value<sjsu::Gpio::Edge, unsigned char>(sjsu::Gpio::Edge)>:
//
// @param enum_type_value variable you would like to get the value of.
// @return the value of the enum class type variable of with the underlying
//         type of the enum class.
template <typename Enum, typename Type = typename std::underlying_type_t<Enum>>
constexpr Type Value(Enum enum_type_value)
     9f8:	b480      	push	{r7}
     9fa:	b083      	sub	sp, #12
     9fc:	af00      	add	r7, sp, #0
     9fe:	4603      	mov	r3, r0
     a00:	71fb      	strb	r3, [r7, #7]
{
  return static_cast<Type>(enum_type_value);
     a02:	79fb      	ldrb	r3, [r7, #7]
}
     a04:	4618      	mov	r0, r3
     a06:	370c      	adds	r7, #12
     a08:	46bd      	mov	sp, r7
     a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
     a0e:	4770      	bx	lr

00000a10 <sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const>:

  // Sets the selected edge that the gpio interrupt will be triggered on.
  void SetInterruptEdge(Edge edge) const
     a10:	b580      	push	{r7, lr}
     a12:	b084      	sub	sp, #16
     a14:	af02      	add	r7, sp, #8
     a16:	6078      	str	r0, [r7, #4]
     a18:	460b      	mov	r3, r1
     a1a:	70fb      	strb	r3, [r7, #3]
  {
    ValidPortCheck();
     a1c:	6878      	ldr	r0, [r7, #4]
     a1e:	f7ff ff89 	bl	934 <sjsu::lpc40xx::Gpio::ValidPortCheck() const>
    switch (edge)
     a22:	78fb      	ldrb	r3, [r7, #3]
     a24:	2b01      	cmp	r3, #1
     a26:	d008      	beq.n	a3a <sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const+0x2a>
     a28:	2b01      	cmp	r3, #1
     a2a:	d302      	bcc.n	a32 <sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const+0x22>
     a2c:	2b02      	cmp	r3, #2
     a2e:	d008      	beq.n	a42 <sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const+0x32>
     a30:	e00e      	b.n	a50 <sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const+0x40>
    {
      case Edge::kEdgeRising:
      {
        SetEdgeRising();
     a32:	6878      	ldr	r0, [r7, #4]
     a34:	f000 f84e 	bl	ad4 <sjsu::lpc40xx::Gpio::SetEdgeRising() const>
        break;
     a38:	e016      	b.n	a68 <sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const+0x58>
      }
      case Edge::kEdgeFalling:
      {
        SetEdgeFalling();
     a3a:	6878      	ldr	r0, [r7, #4]
     a3c:	f000 f878 	bl	b30 <sjsu::lpc40xx::Gpio::SetEdgeFalling() const>
        break;
     a40:	e012      	b.n	a68 <sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const+0x58>
      }
      case Edge::kEdgeBoth:
      {
        SetEdgeRising();
     a42:	6878      	ldr	r0, [r7, #4]
     a44:	f000 f846 	bl	ad4 <sjsu::lpc40xx::Gpio::SetEdgeRising() const>
        SetEdgeFalling();
     a48:	6878      	ldr	r0, [r7, #4]
     a4a:	f000 f871 	bl	b30 <sjsu::lpc40xx::Gpio::SetEdgeFalling() const>
        break;
     a4e:	e00b      	b.n	a68 <sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const+0x58>
      }
      default:
      {
        LOG_WARNING(
     a50:	78fb      	ldrb	r3, [r7, #3]
     a52:	4618      	mov	r0, r3
     a54:	f7ff ffd0 	bl	9f8 <unsigned char sjsu::util::Value<sjsu::Gpio::Edge, unsigned char>(sjsu::Gpio::Edge)>
     a58:	4603      	mov	r3, r0
     a5a:	9300      	str	r3, [sp, #0]
     a5c:	23a9      	movs	r3, #169	; 0xa9
     a5e:	4a04      	ldr	r2, [pc, #16]	; (a70 <sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const+0x60>)
     a60:	4904      	ldr	r1, [pc, #16]	; (a74 <sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const+0x64>)
     a62:	4805      	ldr	r0, [pc, #20]	; (a78 <sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const+0x68>)
     a64:	f002 f862 	bl	2b2c <printf>
            "Edge %d cannot be used for External Interrupts."
            "Need to use a rising, falling, or both configuration.",
            util::Value(edge));
      }
    }
  }
     a68:	bf00      	nop
     a6a:	3708      	adds	r7, #8
     a6c:	46bd      	mov	sp, r7
     a6e:	bd80      	pop	{r7, pc}
     a70:	0000637c 	.word	0x0000637c
     a74:	00006264 	.word	0x00006264
     a78:	00006038 	.word	0x00006038

00000a7c <sjsu::lpc40xx::Gpio::AttachInterrupt(void (*)(), sjsu::Gpio::Edge) const>:
    }
  }

  // Assign the developer's ISR and sets the selected edge that the gpio
  // interrupt will be triggered on.
  void AttachInterrupt(IsrPointer function, Edge edge) const override
     a7c:	b580      	push	{r7, lr}
     a7e:	b084      	sub	sp, #16
     a80:	af00      	add	r7, sp, #0
     a82:	60f8      	str	r0, [r7, #12]
     a84:	60b9      	str	r1, [r7, #8]
     a86:	4613      	mov	r3, r2
     a88:	71fb      	strb	r3, [r7, #7]
  {
    ValidPortCheck();
     a8a:	68f8      	ldr	r0, [r7, #12]
     a8c:	f7ff ff52 	bl	934 <sjsu::lpc40xx::Gpio::ValidPortCheck() const>
    SetInterruptRoutine(function);
     a90:	68b9      	ldr	r1, [r7, #8]
     a92:	68f8      	ldr	r0, [r7, #12]
     a94:	f7ff ff78 	bl	988 <sjsu::lpc40xx::Gpio::SetInterruptRoutine(void (*)()) const>
    SetInterruptEdge(edge);
     a98:	79fb      	ldrb	r3, [r7, #7]
     a9a:	4619      	mov	r1, r3
     a9c:	68f8      	ldr	r0, [r7, #12]
     a9e:	f7ff ffb7 	bl	a10 <sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const>
  }
     aa2:	bf00      	nop
     aa4:	3710      	adds	r7, #16
     aa6:	46bd      	mov	sp, r7
     aa8:	bd80      	pop	{r7, pc}

00000aaa <sjsu::lpc40xx::Gpio::DetachInterrupt() const>:

  // Removes the developer's ISR and clears the selected edge of the gpio
  // interrupt from being triggered.
  void DetachInterrupt() const override
     aaa:	b580      	push	{r7, lr}
     aac:	b082      	sub	sp, #8
     aae:	af00      	add	r7, sp, #0
     ab0:	6078      	str	r0, [r7, #4]
  {
    ValidPortCheck();
     ab2:	6878      	ldr	r0, [r7, #4]
     ab4:	f7ff ff3e 	bl	934 <sjsu::lpc40xx::Gpio::ValidPortCheck() const>
    ClearInterruptRoutine();
     ab8:	6878      	ldr	r0, [r7, #4]
     aba:	f7ff ff83 	bl	9c4 <sjsu::lpc40xx::Gpio::ClearInterruptRoutine() const>
    ClearEdgeRising();
     abe:	6878      	ldr	r0, [r7, #4]
     ac0:	f000 f864 	bl	b8c <sjsu::lpc40xx::Gpio::ClearEdgeRising() const>
    ClearEdgeFalling();
     ac4:	6878      	ldr	r0, [r7, #4]
     ac6:	f000 f88f 	bl	be8 <sjsu::lpc40xx::Gpio::ClearEdgeFalling() const>
  }
     aca:	bf00      	nop
     acc:	3708      	adds	r7, #8
     ace:	46bd      	mov	sp, r7
     ad0:	bd80      	pop	{r7, pc}
     ad2:	Address 0x0000000000000ad2 is out of bounds.


00000ad4 <sjsu::lpc40xx::Gpio::SetEdgeRising() const>:
    *interrupt[triggered_port].clear |= (1 << triggered_pin);
  }

 private:
  // Sets the gpio interrupt to trigger on a rising edge.
  void SetEdgeRising() const
     ad4:	b590      	push	{r4, r7, lr}
     ad6:	b083      	sub	sp, #12
     ad8:	af00      	add	r7, sp, #0
     ada:	6078      	str	r0, [r7, #4]
  {
    *interrupt[interupt_port_].enable_rising_edge |= (1 << pin_.GetPin());
     adc:	687b      	ldr	r3, [r7, #4]
     ade:	3308      	adds	r3, #8
     ae0:	4618      	mov	r0, r3
     ae2:	f7ff fc4d 	bl	380 <sjsu::Pin::GetPin() const>
     ae6:	4603      	mov	r3, r0
     ae8:	461a      	mov	r2, r3
     aea:	2301      	movs	r3, #1
     aec:	fa03 f002 	lsl.w	r0, r3, r2
     af0:	687b      	ldr	r3, [r7, #4]
     af2:	791b      	ldrb	r3, [r3, #4]
     af4:	4619      	mov	r1, r3
     af6:	4a0d      	ldr	r2, [pc, #52]	; (b2c <sjsu::lpc40xx::Gpio::SetEdgeRising() const+0x58>)
     af8:	460b      	mov	r3, r1
     afa:	009b      	lsls	r3, r3, #2
     afc:	440b      	add	r3, r1
     afe:	009b      	lsls	r3, r3, #2
     b00:	4413      	add	r3, r2
     b02:	330c      	adds	r3, #12
     b04:	681b      	ldr	r3, [r3, #0]
     b06:	681a      	ldr	r2, [r3, #0]
     b08:	4604      	mov	r4, r0
     b0a:	687b      	ldr	r3, [r7, #4]
     b0c:	791b      	ldrb	r3, [r3, #4]
     b0e:	4618      	mov	r0, r3
     b10:	4906      	ldr	r1, [pc, #24]	; (b2c <sjsu::lpc40xx::Gpio::SetEdgeRising() const+0x58>)
     b12:	4603      	mov	r3, r0
     b14:	009b      	lsls	r3, r3, #2
     b16:	4403      	add	r3, r0
     b18:	009b      	lsls	r3, r3, #2
     b1a:	440b      	add	r3, r1
     b1c:	330c      	adds	r3, #12
     b1e:	681b      	ldr	r3, [r3, #0]
     b20:	4322      	orrs	r2, r4
     b22:	601a      	str	r2, [r3, #0]
  }
     b24:	bf00      	nop
     b26:	370c      	adds	r7, #12
     b28:	46bd      	mov	sp, r7
     b2a:	bd90      	pop	{r4, r7, pc}
     b2c:	10000308 	.word	0x10000308

00000b30 <sjsu::lpc40xx::Gpio::SetEdgeFalling() const>:

  // Sets the gpio interrupt to trigger on a falling edge.
  void SetEdgeFalling() const
     b30:	b590      	push	{r4, r7, lr}
     b32:	b083      	sub	sp, #12
     b34:	af00      	add	r7, sp, #0
     b36:	6078      	str	r0, [r7, #4]
  {
    *interrupt[interupt_port_].enable_falling_edge |= (1 << pin_.GetPin());
     b38:	687b      	ldr	r3, [r7, #4]
     b3a:	3308      	adds	r3, #8
     b3c:	4618      	mov	r0, r3
     b3e:	f7ff fc1f 	bl	380 <sjsu::Pin::GetPin() const>
     b42:	4603      	mov	r3, r0
     b44:	461a      	mov	r2, r3
     b46:	2301      	movs	r3, #1
     b48:	fa03 f002 	lsl.w	r0, r3, r2
     b4c:	687b      	ldr	r3, [r7, #4]
     b4e:	791b      	ldrb	r3, [r3, #4]
     b50:	4619      	mov	r1, r3
     b52:	4a0d      	ldr	r2, [pc, #52]	; (b88 <sjsu::lpc40xx::Gpio::SetEdgeFalling() const+0x58>)
     b54:	460b      	mov	r3, r1
     b56:	009b      	lsls	r3, r3, #2
     b58:	440b      	add	r3, r1
     b5a:	009b      	lsls	r3, r3, #2
     b5c:	4413      	add	r3, r2
     b5e:	3310      	adds	r3, #16
     b60:	681b      	ldr	r3, [r3, #0]
     b62:	681a      	ldr	r2, [r3, #0]
     b64:	4604      	mov	r4, r0
     b66:	687b      	ldr	r3, [r7, #4]
     b68:	791b      	ldrb	r3, [r3, #4]
     b6a:	4618      	mov	r0, r3
     b6c:	4906      	ldr	r1, [pc, #24]	; (b88 <sjsu::lpc40xx::Gpio::SetEdgeFalling() const+0x58>)
     b6e:	4603      	mov	r3, r0
     b70:	009b      	lsls	r3, r3, #2
     b72:	4403      	add	r3, r0
     b74:	009b      	lsls	r3, r3, #2
     b76:	440b      	add	r3, r1
     b78:	3310      	adds	r3, #16
     b7a:	681b      	ldr	r3, [r3, #0]
     b7c:	4322      	orrs	r2, r4
     b7e:	601a      	str	r2, [r3, #0]
  }
     b80:	bf00      	nop
     b82:	370c      	adds	r7, #12
     b84:	46bd      	mov	sp, r7
     b86:	bd90      	pop	{r4, r7, pc}
     b88:	10000308 	.word	0x10000308

00000b8c <sjsu::lpc40xx::Gpio::ClearEdgeRising() const>:

  // Clears the gpio interrupt to no longer trigger on a rising edge.
  void ClearEdgeRising() const
     b8c:	b590      	push	{r4, r7, lr}
     b8e:	b083      	sub	sp, #12
     b90:	af00      	add	r7, sp, #0
     b92:	6078      	str	r0, [r7, #4]
  {
    *interrupt[interupt_port_].enable_rising_edge &= ~(1 << pin_.GetPin());
     b94:	687b      	ldr	r3, [r7, #4]
     b96:	3308      	adds	r3, #8
     b98:	4618      	mov	r0, r3
     b9a:	f7ff fbf1 	bl	380 <sjsu::Pin::GetPin() const>
     b9e:	4603      	mov	r3, r0
     ba0:	461a      	mov	r2, r3
     ba2:	2301      	movs	r3, #1
     ba4:	4093      	lsls	r3, r2
     ba6:	43d8      	mvns	r0, r3
     ba8:	687b      	ldr	r3, [r7, #4]
     baa:	791b      	ldrb	r3, [r3, #4]
     bac:	4619      	mov	r1, r3
     bae:	4a0d      	ldr	r2, [pc, #52]	; (be4 <sjsu::lpc40xx::Gpio::ClearEdgeRising() const+0x58>)
     bb0:	460b      	mov	r3, r1
     bb2:	009b      	lsls	r3, r3, #2
     bb4:	440b      	add	r3, r1
     bb6:	009b      	lsls	r3, r3, #2
     bb8:	4413      	add	r3, r2
     bba:	330c      	adds	r3, #12
     bbc:	681b      	ldr	r3, [r3, #0]
     bbe:	681a      	ldr	r2, [r3, #0]
     bc0:	4604      	mov	r4, r0
     bc2:	687b      	ldr	r3, [r7, #4]
     bc4:	791b      	ldrb	r3, [r3, #4]
     bc6:	4618      	mov	r0, r3
     bc8:	4906      	ldr	r1, [pc, #24]	; (be4 <sjsu::lpc40xx::Gpio::ClearEdgeRising() const+0x58>)
     bca:	4603      	mov	r3, r0
     bcc:	009b      	lsls	r3, r3, #2
     bce:	4403      	add	r3, r0
     bd0:	009b      	lsls	r3, r3, #2
     bd2:	440b      	add	r3, r1
     bd4:	330c      	adds	r3, #12
     bd6:	681b      	ldr	r3, [r3, #0]
     bd8:	4022      	ands	r2, r4
     bda:	601a      	str	r2, [r3, #0]
  }
     bdc:	bf00      	nop
     bde:	370c      	adds	r7, #12
     be0:	46bd      	mov	sp, r7
     be2:	bd90      	pop	{r4, r7, pc}
     be4:	10000308 	.word	0x10000308

00000be8 <sjsu::lpc40xx::Gpio::ClearEdgeFalling() const>:

  // Clears the gpio interrupt to no longer trigger on a falling edge.
  void ClearEdgeFalling() const
     be8:	b590      	push	{r4, r7, lr}
     bea:	b083      	sub	sp, #12
     bec:	af00      	add	r7, sp, #0
     bee:	6078      	str	r0, [r7, #4]
  {
    *interrupt[interupt_port_].enable_falling_edge &= ~(1 << pin_.GetPin());
     bf0:	687b      	ldr	r3, [r7, #4]
     bf2:	3308      	adds	r3, #8
     bf4:	4618      	mov	r0, r3
     bf6:	f7ff fbc3 	bl	380 <sjsu::Pin::GetPin() const>
     bfa:	4603      	mov	r3, r0
     bfc:	461a      	mov	r2, r3
     bfe:	2301      	movs	r3, #1
     c00:	4093      	lsls	r3, r2
     c02:	43d8      	mvns	r0, r3
     c04:	687b      	ldr	r3, [r7, #4]
     c06:	791b      	ldrb	r3, [r3, #4]
     c08:	4619      	mov	r1, r3
     c0a:	4a0d      	ldr	r2, [pc, #52]	; (c40 <sjsu::lpc40xx::Gpio::ClearEdgeFalling() const+0x58>)
     c0c:	460b      	mov	r3, r1
     c0e:	009b      	lsls	r3, r3, #2
     c10:	440b      	add	r3, r1
     c12:	009b      	lsls	r3, r3, #2
     c14:	4413      	add	r3, r2
     c16:	3310      	adds	r3, #16
     c18:	681b      	ldr	r3, [r3, #0]
     c1a:	681a      	ldr	r2, [r3, #0]
     c1c:	4604      	mov	r4, r0
     c1e:	687b      	ldr	r3, [r7, #4]
     c20:	791b      	ldrb	r3, [r3, #4]
     c22:	4618      	mov	r0, r3
     c24:	4906      	ldr	r1, [pc, #24]	; (c40 <sjsu::lpc40xx::Gpio::ClearEdgeFalling() const+0x58>)
     c26:	4603      	mov	r3, r0
     c28:	009b      	lsls	r3, r3, #2
     c2a:	4403      	add	r3, r0
     c2c:	009b      	lsls	r3, r3, #2
     c2e:	440b      	add	r3, r1
     c30:	3310      	adds	r3, #16
     c32:	681b      	ldr	r3, [r3, #0]
     c34:	4022      	ands	r2, r4
     c36:	601a      	str	r2, [r3, #0]
  }
     c38:	bf00      	nop
     c3a:	370c      	adds	r7, #12
     c3c:	46bd      	mov	sp, r7
     c3e:	bd90      	pop	{r4, r7, pc}
     c40:	10000308 	.word	0x10000308

00000c44 <Bus::Initialize()>:
        enum class ControlType {
            kMemory = 0,
            kIO
        };
        
        void Initialize() {
     c44:	b580      	push	{r7, lr}
     c46:	b082      	sub	sp, #8
     c48:	af00      	add	r7, sp, #0
     c4a:	6078      	str	r0, [r7, #4]
            //Setting each pin as Open Drain
            ad[0].GetPin().SetAsOpenDrain();
     c4c:	687b      	ldr	r3, [r7, #4]
     c4e:	4618      	mov	r0, r3
     c50:	f7ff fe64 	bl	91c <sjsu::lpc40xx::Gpio::GetPin() const>
     c54:	4602      	mov	r2, r0
     c56:	6813      	ldr	r3, [r2, #0]
     c58:	3308      	adds	r3, #8
     c5a:	681b      	ldr	r3, [r3, #0]
     c5c:	2101      	movs	r1, #1
     c5e:	4610      	mov	r0, r2
     c60:	4798      	blx	r3
            ad[1].GetPin().SetAsOpenDrain();
     c62:	687b      	ldr	r3, [r7, #4]
     c64:	3314      	adds	r3, #20
     c66:	4618      	mov	r0, r3
     c68:	f7ff fe58 	bl	91c <sjsu::lpc40xx::Gpio::GetPin() const>
     c6c:	4602      	mov	r2, r0
     c6e:	6813      	ldr	r3, [r2, #0]
     c70:	3308      	adds	r3, #8
     c72:	681b      	ldr	r3, [r3, #0]
     c74:	2101      	movs	r1, #1
     c76:	4610      	mov	r0, r2
     c78:	4798      	blx	r3
            ad[2].GetPin().SetAsOpenDrain();
     c7a:	687b      	ldr	r3, [r7, #4]
     c7c:	3328      	adds	r3, #40	; 0x28
     c7e:	4618      	mov	r0, r3
     c80:	f7ff fe4c 	bl	91c <sjsu::lpc40xx::Gpio::GetPin() const>
     c84:	4602      	mov	r2, r0
     c86:	6813      	ldr	r3, [r2, #0]
     c88:	3308      	adds	r3, #8
     c8a:	681b      	ldr	r3, [r3, #0]
     c8c:	2101      	movs	r1, #1
     c8e:	4610      	mov	r0, r2
     c90:	4798      	blx	r3
            ad[3].GetPin().SetAsOpenDrain();
     c92:	687b      	ldr	r3, [r7, #4]
     c94:	333c      	adds	r3, #60	; 0x3c
     c96:	4618      	mov	r0, r3
     c98:	f7ff fe40 	bl	91c <sjsu::lpc40xx::Gpio::GetPin() const>
     c9c:	4602      	mov	r2, r0
     c9e:	6813      	ldr	r3, [r2, #0]
     ca0:	3308      	adds	r3, #8
     ca2:	681b      	ldr	r3, [r3, #0]
     ca4:	2101      	movs	r1, #1
     ca6:	4610      	mov	r0, r2
     ca8:	4798      	blx	r3
            ad[4].GetPin().SetAsOpenDrain();
     caa:	687b      	ldr	r3, [r7, #4]
     cac:	3350      	adds	r3, #80	; 0x50
     cae:	4618      	mov	r0, r3
     cb0:	f7ff fe34 	bl	91c <sjsu::lpc40xx::Gpio::GetPin() const>
     cb4:	4602      	mov	r2, r0
     cb6:	6813      	ldr	r3, [r2, #0]
     cb8:	3308      	adds	r3, #8
     cba:	681b      	ldr	r3, [r3, #0]
     cbc:	2101      	movs	r1, #1
     cbe:	4610      	mov	r0, r2
     cc0:	4798      	blx	r3
            ad[5].GetPin().SetAsOpenDrain();
     cc2:	687b      	ldr	r3, [r7, #4]
     cc4:	3364      	adds	r3, #100	; 0x64
     cc6:	4618      	mov	r0, r3
     cc8:	f7ff fe28 	bl	91c <sjsu::lpc40xx::Gpio::GetPin() const>
     ccc:	4602      	mov	r2, r0
     cce:	6813      	ldr	r3, [r2, #0]
     cd0:	3308      	adds	r3, #8
     cd2:	681b      	ldr	r3, [r3, #0]
     cd4:	2101      	movs	r1, #1
     cd6:	4610      	mov	r0, r2
     cd8:	4798      	blx	r3
            ad[6].GetPin().SetAsOpenDrain();
     cda:	687b      	ldr	r3, [r7, #4]
     cdc:	3378      	adds	r3, #120	; 0x78
     cde:	4618      	mov	r0, r3
     ce0:	f7ff fe1c 	bl	91c <sjsu::lpc40xx::Gpio::GetPin() const>
     ce4:	4602      	mov	r2, r0
     ce6:	6813      	ldr	r3, [r2, #0]
     ce8:	3308      	adds	r3, #8
     cea:	681b      	ldr	r3, [r3, #0]
     cec:	2101      	movs	r1, #1
     cee:	4610      	mov	r0, r2
     cf0:	4798      	blx	r3
            ad[7].GetPin().SetAsOpenDrain();
     cf2:	687b      	ldr	r3, [r7, #4]
     cf4:	338c      	adds	r3, #140	; 0x8c
     cf6:	4618      	mov	r0, r3
     cf8:	f7ff fe10 	bl	91c <sjsu::lpc40xx::Gpio::GetPin() const>
     cfc:	4602      	mov	r2, r0
     cfe:	6813      	ldr	r3, [r2, #0]
     d00:	3308      	adds	r3, #8
     d02:	681b      	ldr	r3, [r3, #0]
     d04:	2101      	movs	r1, #1
     d06:	4610      	mov	r0, r2
     d08:	4798      	blx	r3
            //  ad[6].GetPin().SetAsOpenDrain(false);
            //  ad[7].GetPin().SetAsOpenDrain(false);

            //Do the rest of the set up here...
            //
            write_enable.SetAsOutput();
     d0a:	687b      	ldr	r3, [r7, #4]
     d0c:	33a0      	adds	r3, #160	; 0xa0
     d0e:	4618      	mov	r0, r3
     d10:	f7ff fc72 	bl	5f8 <sjsu::Gpio::SetAsOutput() const>
            ale.SetAsOutput();
     d14:	687b      	ldr	r3, [r7, #4]
     d16:	33b4      	adds	r3, #180	; 0xb4
     d18:	4618      	mov	r0, r3
     d1a:	f7ff fc6d 	bl	5f8 <sjsu::Gpio::SetAsOutput() const>
            m_io.SetAsOutput();
     d1e:	687b      	ldr	r3, [r7, #4]
     d20:	33c8      	adds	r3, #200	; 0xc8
     d22:	4618      	mov	r0, r3
     d24:	f7ff fc68 	bl	5f8 <sjsu::Gpio::SetAsOutput() const>
            interrupt.SetAsInput();
     d28:	687b      	ldr	r3, [r7, #4]
     d2a:	33dc      	adds	r3, #220	; 0xdc
     d2c:	4618      	mov	r0, r3
     d2e:	f7ff fc55 	bl	5dc <sjsu::Gpio::SetAsInput() const>
        }
     d32:	bf00      	nop
     d34:	3708      	adds	r7, #8
     d36:	46bd      	mov	sp, r7
     d38:	bd80      	pop	{r7, pc}

00000d3a <Bus::Write(Bus::ControlType, unsigned char, unsigned char)>:
        
        void Write(ControlType control, uint8_t address, uint8_t data) {
     d3a:	b580      	push	{r7, lr}
     d3c:	b088      	sub	sp, #32
     d3e:	af00      	add	r7, sp, #0
     d40:	60f8      	str	r0, [r7, #12]
     d42:	60b9      	str	r1, [r7, #8]
     d44:	4611      	mov	r1, r2
     d46:	461a      	mov	r2, r3
     d48:	460b      	mov	r3, r1
     d4a:	71fb      	strb	r3, [r7, #7]
     d4c:	4613      	mov	r3, r2
     d4e:	71bb      	strb	r3, [r7, #6]
			ale.SetHigh();
     d50:	68fb      	ldr	r3, [r7, #12]
     d52:	33b4      	adds	r3, #180	; 0xb4
     d54:	4618      	mov	r0, r3
     d56:	f7ff fc23 	bl	5a0 <sjsu::Gpio::SetHigh() const>
			m_io.SetLow();
     d5a:	68fb      	ldr	r3, [r7, #12]
     d5c:	33c8      	adds	r3, #200	; 0xc8
     d5e:	4618      	mov	r0, r3
     d60:	f7ff fc2d 	bl	5be <sjsu::Gpio::SetLow() const>
			write_enable.SetHigh();
     d64:	68fb      	ldr	r3, [r7, #12]
     d66:	33a0      	adds	r3, #160	; 0xa0
     d68:	4618      	mov	r0, r3
     d6a:	f7ff fc19 	bl	5a0 <sjsu::Gpio::SetHigh() const>
			
			//Write address onto pins
			for (int i = 0; i < 8; i++) {
     d6e:	2300      	movs	r3, #0
     d70:	61fb      	str	r3, [r7, #28]
     d72:	69fb      	ldr	r3, [r7, #28]
     d74:	2b07      	cmp	r3, #7
     d76:	dc2c      	bgt.n	dd2 <Bus::Write(Bus::ControlType, unsigned char, unsigned char)+0x98>
				ad[i].SetAsOutput();
     d78:	69fa      	ldr	r2, [r7, #28]
     d7a:	4613      	mov	r3, r2
     d7c:	009b      	lsls	r3, r3, #2
     d7e:	4413      	add	r3, r2
     d80:	009b      	lsls	r3, r3, #2
     d82:	68fa      	ldr	r2, [r7, #12]
     d84:	4413      	add	r3, r2
     d86:	4618      	mov	r0, r3
     d88:	f7ff fc36 	bl	5f8 <sjsu::Gpio::SetAsOutput() const>
				
				uint8_t bit = address & 1;
     d8c:	79fb      	ldrb	r3, [r7, #7]
     d8e:	f003 0301 	and.w	r3, r3, #1
     d92:	75fb      	strb	r3, [r7, #23]
				
				if (bit) {
     d94:	7dfb      	ldrb	r3, [r7, #23]
     d96:	2b00      	cmp	r3, #0
     d98:	d00a      	beq.n	db0 <Bus::Write(Bus::ControlType, unsigned char, unsigned char)+0x76>
					ad[i].SetHigh();
     d9a:	69fa      	ldr	r2, [r7, #28]
     d9c:	4613      	mov	r3, r2
     d9e:	009b      	lsls	r3, r3, #2
     da0:	4413      	add	r3, r2
     da2:	009b      	lsls	r3, r3, #2
     da4:	68fa      	ldr	r2, [r7, #12]
     da6:	4413      	add	r3, r2
     da8:	4618      	mov	r0, r3
     daa:	f7ff fbf9 	bl	5a0 <sjsu::Gpio::SetHigh() const>
     dae:	e009      	b.n	dc4 <Bus::Write(Bus::ControlType, unsigned char, unsigned char)+0x8a>
				} else {
					ad[i].SetLow();
     db0:	69fa      	ldr	r2, [r7, #28]
     db2:	4613      	mov	r3, r2
     db4:	009b      	lsls	r3, r3, #2
     db6:	4413      	add	r3, r2
     db8:	009b      	lsls	r3, r3, #2
     dba:	68fa      	ldr	r2, [r7, #12]
     dbc:	4413      	add	r3, r2
     dbe:	4618      	mov	r0, r3
     dc0:	f7ff fbfd 	bl	5be <sjsu::Gpio::SetLow() const>
				}
				address >>= 1;
     dc4:	79fb      	ldrb	r3, [r7, #7]
     dc6:	105b      	asrs	r3, r3, #1
     dc8:	71fb      	strb	r3, [r7, #7]
			for (int i = 0; i < 8; i++) {
     dca:	69fb      	ldr	r3, [r7, #28]
     dcc:	3301      	adds	r3, #1
     dce:	61fb      	str	r3, [r7, #28]
     dd0:	e7cf      	b.n	d72 <Bus::Write(Bus::ControlType, unsigned char, unsigned char)+0x38>
			}
			
			ale.SetLow();
     dd2:	68fb      	ldr	r3, [r7, #12]
     dd4:	33b4      	adds	r3, #180	; 0xb4
     dd6:	4618      	mov	r0, r3
     dd8:	f7ff fbf1 	bl	5be <sjsu::Gpio::SetLow() const>
			m_io.SetHigh();
     ddc:	68fb      	ldr	r3, [r7, #12]
     dde:	33c8      	adds	r3, #200	; 0xc8
     de0:	4618      	mov	r0, r3
     de2:	f7ff fbdd 	bl	5a0 <sjsu::Gpio::SetHigh() const>
			
			
			//Write data onto pints
			for (int i = 0; i < 8; i++) {
     de6:	2300      	movs	r3, #0
     de8:	61bb      	str	r3, [r7, #24]
     dea:	69bb      	ldr	r3, [r7, #24]
     dec:	2b07      	cmp	r3, #7
     dee:	dc22      	bgt.n	e36 <Bus::Write(Bus::ControlType, unsigned char, unsigned char)+0xfc>
				uint8_t bit = data & 1;
     df0:	79bb      	ldrb	r3, [r7, #6]
     df2:	f003 0301 	and.w	r3, r3, #1
     df6:	75bb      	strb	r3, [r7, #22]
				
				if (bit) {
     df8:	7dbb      	ldrb	r3, [r7, #22]
     dfa:	2b00      	cmp	r3, #0
     dfc:	d00a      	beq.n	e14 <Bus::Write(Bus::ControlType, unsigned char, unsigned char)+0xda>
					ad[i].SetHigh();
     dfe:	69ba      	ldr	r2, [r7, #24]
     e00:	4613      	mov	r3, r2
     e02:	009b      	lsls	r3, r3, #2
     e04:	4413      	add	r3, r2
     e06:	009b      	lsls	r3, r3, #2
     e08:	68fa      	ldr	r2, [r7, #12]
     e0a:	4413      	add	r3, r2
     e0c:	4618      	mov	r0, r3
     e0e:	f7ff fbc7 	bl	5a0 <sjsu::Gpio::SetHigh() const>
     e12:	e009      	b.n	e28 <Bus::Write(Bus::ControlType, unsigned char, unsigned char)+0xee>
				} else {
					ad[i].SetLow();
     e14:	69ba      	ldr	r2, [r7, #24]
     e16:	4613      	mov	r3, r2
     e18:	009b      	lsls	r3, r3, #2
     e1a:	4413      	add	r3, r2
     e1c:	009b      	lsls	r3, r3, #2
     e1e:	68fa      	ldr	r2, [r7, #12]
     e20:	4413      	add	r3, r2
     e22:	4618      	mov	r0, r3
     e24:	f7ff fbcb 	bl	5be <sjsu::Gpio::SetLow() const>
				}
				data >>= 1;
     e28:	79bb      	ldrb	r3, [r7, #6]
     e2a:	105b      	asrs	r3, r3, #1
     e2c:	71bb      	strb	r3, [r7, #6]
			for (int i = 0; i < 8; i++) {
     e2e:	69bb      	ldr	r3, [r7, #24]
     e30:	3301      	adds	r3, #1
     e32:	61bb      	str	r3, [r7, #24]
     e34:	e7d9      	b.n	dea <Bus::Write(Bus::ControlType, unsigned char, unsigned char)+0xb0>
			}
			
			m_io.SetLow();
     e36:	68fb      	ldr	r3, [r7, #12]
     e38:	33c8      	adds	r3, #200	; 0xc8
     e3a:	4618      	mov	r0, r3
     e3c:	f7ff fbbf 	bl	5be <sjsu::Gpio::SetLow() const>
        }
     e40:	bf00      	nop
     e42:	3720      	adds	r7, #32
     e44:	46bd      	mov	sp, r7
     e46:	bd80      	pop	{r7, pc}

00000e48 <Bus::Read(Bus::ControlType, unsigned char)>:
        
        uint8_t Read(ControlType control, uint8_t address) {
     e48:	b580      	push	{r7, lr}
     e4a:	b088      	sub	sp, #32
     e4c:	af00      	add	r7, sp, #0
     e4e:	60f8      	str	r0, [r7, #12]
     e50:	60b9      	str	r1, [r7, #8]
     e52:	4613      	mov	r3, r2
     e54:	71fb      	strb	r3, [r7, #7]
            ale.SetHigh();
     e56:	68fb      	ldr	r3, [r7, #12]
     e58:	33b4      	adds	r3, #180	; 0xb4
     e5a:	4618      	mov	r0, r3
     e5c:	f7ff fba0 	bl	5a0 <sjsu::Gpio::SetHigh() const>
			m_io.SetLow();
     e60:	68fb      	ldr	r3, [r7, #12]
     e62:	33c8      	adds	r3, #200	; 0xc8
     e64:	4618      	mov	r0, r3
     e66:	f7ff fbaa 	bl	5be <sjsu::Gpio::SetLow() const>
			write_enable.SetHigh();
     e6a:	68fb      	ldr	r3, [r7, #12]
     e6c:	33a0      	adds	r3, #160	; 0xa0
     e6e:	4618      	mov	r0, r3
     e70:	f7ff fb96 	bl	5a0 <sjsu::Gpio::SetHigh() const>
			
			//Write address onto pins
			for (int i = 0; i < 8; i++) {
     e74:	2300      	movs	r3, #0
     e76:	61fb      	str	r3, [r7, #28]
     e78:	69fb      	ldr	r3, [r7, #28]
     e7a:	2b07      	cmp	r3, #7
     e7c:	dc2c      	bgt.n	ed8 <Bus::Read(Bus::ControlType, unsigned char)+0x90>
				ad[i].SetAsOutput();
     e7e:	69fa      	ldr	r2, [r7, #28]
     e80:	4613      	mov	r3, r2
     e82:	009b      	lsls	r3, r3, #2
     e84:	4413      	add	r3, r2
     e86:	009b      	lsls	r3, r3, #2
     e88:	68fa      	ldr	r2, [r7, #12]
     e8a:	4413      	add	r3, r2
     e8c:	4618      	mov	r0, r3
     e8e:	f7ff fbb3 	bl	5f8 <sjsu::Gpio::SetAsOutput() const>
				uint8_t bit = address & 1;
     e92:	79fb      	ldrb	r3, [r7, #7]
     e94:	f003 0301 	and.w	r3, r3, #1
     e98:	74fb      	strb	r3, [r7, #19]
				
				if (bit) {
     e9a:	7cfb      	ldrb	r3, [r7, #19]
     e9c:	2b00      	cmp	r3, #0
     e9e:	d00a      	beq.n	eb6 <Bus::Read(Bus::ControlType, unsigned char)+0x6e>
					ad[i].SetHigh();
     ea0:	69fa      	ldr	r2, [r7, #28]
     ea2:	4613      	mov	r3, r2
     ea4:	009b      	lsls	r3, r3, #2
     ea6:	4413      	add	r3, r2
     ea8:	009b      	lsls	r3, r3, #2
     eaa:	68fa      	ldr	r2, [r7, #12]
     eac:	4413      	add	r3, r2
     eae:	4618      	mov	r0, r3
     eb0:	f7ff fb76 	bl	5a0 <sjsu::Gpio::SetHigh() const>
     eb4:	e009      	b.n	eca <Bus::Read(Bus::ControlType, unsigned char)+0x82>
				} else {
					ad[i].SetLow();
     eb6:	69fa      	ldr	r2, [r7, #28]
     eb8:	4613      	mov	r3, r2
     eba:	009b      	lsls	r3, r3, #2
     ebc:	4413      	add	r3, r2
     ebe:	009b      	lsls	r3, r3, #2
     ec0:	68fa      	ldr	r2, [r7, #12]
     ec2:	4413      	add	r3, r2
     ec4:	4618      	mov	r0, r3
     ec6:	f7ff fb7a 	bl	5be <sjsu::Gpio::SetLow() const>
				}
				
				address >>= 1;
     eca:	79fb      	ldrb	r3, [r7, #7]
     ecc:	105b      	asrs	r3, r3, #1
     ece:	71fb      	strb	r3, [r7, #7]
			for (int i = 0; i < 8; i++) {
     ed0:	69fb      	ldr	r3, [r7, #28]
     ed2:	3301      	adds	r3, #1
     ed4:	61fb      	str	r3, [r7, #28]
     ed6:	e7cf      	b.n	e78 <Bus::Read(Bus::ControlType, unsigned char)+0x30>
			}
			
			ale.SetLow();	
     ed8:	68fb      	ldr	r3, [r7, #12]
     eda:	33b4      	adds	r3, #180	; 0xb4
     edc:	4618      	mov	r0, r3
     ede:	f7ff fb6e 	bl	5be <sjsu::Gpio::SetLow() const>
			write_enable.SetLow();			
     ee2:	68fb      	ldr	r3, [r7, #12]
     ee4:	33a0      	adds	r3, #160	; 0xa0
     ee6:	4618      	mov	r0, r3
     ee8:	f7ff fb69 	bl	5be <sjsu::Gpio::SetLow() const>
			m_io.SetHigh();
     eec:	68fb      	ldr	r3, [r7, #12]
     eee:	33c8      	adds	r3, #200	; 0xc8
     ef0:	4618      	mov	r0, r3
     ef2:	f7ff fb55 	bl	5a0 <sjsu::Gpio::SetHigh() const>
			
			//Put data on a/d pins onto unint8_t data variable
			uint8_t data = 0;
     ef6:	2300      	movs	r3, #0
     ef8:	76fb      	strb	r3, [r7, #27]
			
			for (int i = 7; i >= 0 ; i--) {
     efa:	2307      	movs	r3, #7
     efc:	617b      	str	r3, [r7, #20]
     efe:	697b      	ldr	r3, [r7, #20]
     f00:	2b00      	cmp	r3, #0
     f02:	db20      	blt.n	f46 <Bus::Read(Bus::ControlType, unsigned char)+0xfe>
				data <<= 1;
     f04:	7efb      	ldrb	r3, [r7, #27]
     f06:	005b      	lsls	r3, r3, #1
     f08:	76fb      	strb	r3, [r7, #27]
				ad[i].SetAsInput();
     f0a:	697a      	ldr	r2, [r7, #20]
     f0c:	4613      	mov	r3, r2
     f0e:	009b      	lsls	r3, r3, #2
     f10:	4413      	add	r3, r2
     f12:	009b      	lsls	r3, r3, #2
     f14:	68fa      	ldr	r2, [r7, #12]
     f16:	4413      	add	r3, r2
     f18:	4618      	mov	r0, r3
     f1a:	f7ff fb5f 	bl	5dc <sjsu::Gpio::SetAsInput() const>
				if (ad[i].Read()) {
     f1e:	697a      	ldr	r2, [r7, #20]
     f20:	4613      	mov	r3, r2
     f22:	009b      	lsls	r3, r3, #2
     f24:	4413      	add	r3, r2
     f26:	009b      	lsls	r3, r3, #2
     f28:	68fa      	ldr	r2, [r7, #12]
     f2a:	4413      	add	r3, r2
     f2c:	4618      	mov	r0, r3
     f2e:	f7ff fcd5 	bl	8dc <sjsu::lpc40xx::Gpio::Read() const>
     f32:	4603      	mov	r3, r0
     f34:	2b00      	cmp	r3, #0
     f36:	d002      	beq.n	f3e <Bus::Read(Bus::ControlType, unsigned char)+0xf6>
					data += 1;
     f38:	7efb      	ldrb	r3, [r7, #27]
     f3a:	3301      	adds	r3, #1
     f3c:	76fb      	strb	r3, [r7, #27]
			for (int i = 7; i >= 0 ; i--) {
     f3e:	697b      	ldr	r3, [r7, #20]
     f40:	3b01      	subs	r3, #1
     f42:	617b      	str	r3, [r7, #20]
     f44:	e7db      	b.n	efe <Bus::Read(Bus::ControlType, unsigned char)+0xb6>
				}
				
			}
			
			//Set M/IO to High to read data
			m_io.SetLow();
     f46:	68fb      	ldr	r3, [r7, #12]
     f48:	33c8      	adds	r3, #200	; 0xc8
     f4a:	4618      	mov	r0, r3
     f4c:	f7ff fb37 	bl	5be <sjsu::Gpio::SetLow() const>
			
			return data;
     f50:	7efb      	ldrb	r3, [r7, #27]
        }
     f52:	4618      	mov	r0, r3
     f54:	3720      	adds	r7, #32
     f56:	46bd      	mov	sp, r7
     f58:	bd80      	pop	{r7, pc}
     f5a:	Address 0x0000000000000f5a is out of bounds.


00000f5c <main>:
#include <cstdint>
#include "utility/log.hpp"
#include "utility/time.hpp"
#include "L1_Peripheral/lpc40xx/gpio.hpp"

int main() {
     f5c:	b580      	push	{r7, lr}
     f5e:	b0c0      	sub	sp, #256	; 0x100
     f60:	af02      	add	r7, sp, #8
    Bus::ControlType control = Bus::ControlType::kMemory;
     f62:	2300      	movs	r3, #0
     f64:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    uint8_t address, data, result;
    address = 0b10100010;
     f68:	23a2      	movs	r3, #162	; 0xa2
     f6a:	f887 30f3 	strb.w	r3, [r7, #243]	; 0xf3
    data = 0b10000110;
     f6e:	2386      	movs	r3, #134	; 0x86
     f70:	f887 30f2 	strb.w	r3, [r7, #242]	; 0xf2
    Bus bus;
     f74:	4b82      	ldr	r3, [pc, #520]	; (1180 <main+0x224>)
     f76:	603b      	str	r3, [r7, #0]
     f78:	2301      	movs	r3, #1
     f7a:	713b      	strb	r3, [r7, #4]
     f7c:	4b81      	ldr	r3, [pc, #516]	; (1184 <main+0x228>)
     f7e:	60bb      	str	r3, [r7, #8]
     f80:	2302      	movs	r3, #2
     f82:	733b      	strb	r3, [r7, #12]
     f84:	2302      	movs	r3, #2
     f86:	737b      	strb	r3, [r7, #13]
     f88:	4b7f      	ldr	r3, [pc, #508]	; (1188 <main+0x22c>)
     f8a:	613b      	str	r3, [r7, #16]
     f8c:	4b7c      	ldr	r3, [pc, #496]	; (1180 <main+0x224>)
     f8e:	617b      	str	r3, [r7, #20]
     f90:	2301      	movs	r3, #1
     f92:	763b      	strb	r3, [r7, #24]
     f94:	4b7b      	ldr	r3, [pc, #492]	; (1184 <main+0x228>)
     f96:	61fb      	str	r3, [r7, #28]
     f98:	2302      	movs	r3, #2
     f9a:	f887 3020 	strb.w	r3, [r7, #32]
     f9e:	2305      	movs	r3, #5
     fa0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
     fa4:	4b78      	ldr	r3, [pc, #480]	; (1188 <main+0x22c>)
     fa6:	627b      	str	r3, [r7, #36]	; 0x24
     fa8:	4b75      	ldr	r3, [pc, #468]	; (1180 <main+0x224>)
     faa:	62bb      	str	r3, [r7, #40]	; 0x28
     fac:	2301      	movs	r3, #1
     fae:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
     fb2:	4b74      	ldr	r3, [pc, #464]	; (1184 <main+0x228>)
     fb4:	633b      	str	r3, [r7, #48]	; 0x30
     fb6:	2302      	movs	r3, #2
     fb8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
     fbc:	2307      	movs	r3, #7
     fbe:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
     fc2:	4b71      	ldr	r3, [pc, #452]	; (1188 <main+0x22c>)
     fc4:	63bb      	str	r3, [r7, #56]	; 0x38
     fc6:	4b6e      	ldr	r3, [pc, #440]	; (1180 <main+0x224>)
     fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
     fca:	2301      	movs	r3, #1
     fcc:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
     fd0:	4b6c      	ldr	r3, [pc, #432]	; (1184 <main+0x228>)
     fd2:	647b      	str	r3, [r7, #68]	; 0x44
     fd4:	2302      	movs	r3, #2
     fd6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
     fda:	2309      	movs	r3, #9
     fdc:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
     fe0:	4b69      	ldr	r3, [pc, #420]	; (1188 <main+0x22c>)
     fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
     fe4:	4b66      	ldr	r3, [pc, #408]	; (1180 <main+0x224>)
     fe6:	653b      	str	r3, [r7, #80]	; 0x50
     fe8:	2300      	movs	r3, #0
     fea:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
     fee:	4b65      	ldr	r3, [pc, #404]	; (1184 <main+0x228>)
     ff0:	65bb      	str	r3, [r7, #88]	; 0x58
     ff2:	2300      	movs	r3, #0
     ff4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
     ff8:	230f      	movs	r3, #15
     ffa:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
     ffe:	4b62      	ldr	r3, [pc, #392]	; (1188 <main+0x22c>)
    1000:	663b      	str	r3, [r7, #96]	; 0x60
    1002:	4b5f      	ldr	r3, [pc, #380]	; (1180 <main+0x224>)
    1004:	667b      	str	r3, [r7, #100]	; 0x64
    1006:	2300      	movs	r3, #0
    1008:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
    100c:	4b5d      	ldr	r3, [pc, #372]	; (1184 <main+0x228>)
    100e:	66fb      	str	r3, [r7, #108]	; 0x6c
    1010:	2300      	movs	r3, #0
    1012:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70
    1016:	2312      	movs	r3, #18
    1018:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
    101c:	4b5a      	ldr	r3, [pc, #360]	; (1188 <main+0x22c>)
    101e:	677b      	str	r3, [r7, #116]	; 0x74
    1020:	4b57      	ldr	r3, [pc, #348]	; (1180 <main+0x224>)
    1022:	67bb      	str	r3, [r7, #120]	; 0x78
    1024:	2300      	movs	r3, #0
    1026:	f887 307c 	strb.w	r3, [r7, #124]	; 0x7c
    102a:	4b56      	ldr	r3, [pc, #344]	; (1184 <main+0x228>)
    102c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    1030:	2300      	movs	r3, #0
    1032:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
    1036:	2301      	movs	r3, #1
    1038:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
    103c:	4b52      	ldr	r3, [pc, #328]	; (1188 <main+0x22c>)
    103e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    1042:	4b4f      	ldr	r3, [pc, #316]	; (1180 <main+0x224>)
    1044:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    1048:	2300      	movs	r3, #0
    104a:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
    104e:	4b4d      	ldr	r3, [pc, #308]	; (1184 <main+0x228>)
    1050:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    1054:	2300      	movs	r3, #0
    1056:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
    105a:	230a      	movs	r3, #10
    105c:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
    1060:	4b49      	ldr	r3, [pc, #292]	; (1188 <main+0x22c>)
    1062:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    1066:	4b46      	ldr	r3, [pc, #280]	; (1180 <main+0x224>)
    1068:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    106c:	2300      	movs	r3, #0
    106e:	f887 30a4 	strb.w	r3, [r7, #164]	; 0xa4
    1072:	4b44      	ldr	r3, [pc, #272]	; (1184 <main+0x228>)
    1074:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    1078:	2300      	movs	r3, #0
    107a:	f887 30ac 	strb.w	r3, [r7, #172]	; 0xac
    107e:	2311      	movs	r3, #17
    1080:	f887 30ad 	strb.w	r3, [r7, #173]	; 0xad
    1084:	4b40      	ldr	r3, [pc, #256]	; (1188 <main+0x22c>)
    1086:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    108a:	4b3d      	ldr	r3, [pc, #244]	; (1180 <main+0x224>)
    108c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    1090:	2300      	movs	r3, #0
    1092:	f887 30b8 	strb.w	r3, [r7, #184]	; 0xb8
    1096:	4b3b      	ldr	r3, [pc, #236]	; (1184 <main+0x228>)
    1098:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    109c:	2300      	movs	r3, #0
    109e:	f887 30c0 	strb.w	r3, [r7, #192]	; 0xc0
    10a2:	2316      	movs	r3, #22
    10a4:	f887 30c1 	strb.w	r3, [r7, #193]	; 0xc1
    10a8:	4b37      	ldr	r3, [pc, #220]	; (1188 <main+0x22c>)
    10aa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    10ae:	4b34      	ldr	r3, [pc, #208]	; (1180 <main+0x224>)
    10b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    10b4:	2300      	movs	r3, #0
    10b6:	f887 30cc 	strb.w	r3, [r7, #204]	; 0xcc
    10ba:	4b32      	ldr	r3, [pc, #200]	; (1184 <main+0x228>)
    10bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    10c0:	2300      	movs	r3, #0
    10c2:	f887 30d4 	strb.w	r3, [r7, #212]	; 0xd4
    10c6:	2300      	movs	r3, #0
    10c8:	f887 30d5 	strb.w	r3, [r7, #213]	; 0xd5
    10cc:	4b2e      	ldr	r3, [pc, #184]	; (1188 <main+0x22c>)
    10ce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    10d2:	4b2b      	ldr	r3, [pc, #172]	; (1180 <main+0x224>)
    10d4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    10d8:	2300      	movs	r3, #0
    10da:	f887 30e0 	strb.w	r3, [r7, #224]	; 0xe0
    10de:	4b29      	ldr	r3, [pc, #164]	; (1184 <main+0x228>)
    10e0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    10e4:	2300      	movs	r3, #0
    10e6:	f887 30e8 	strb.w	r3, [r7, #232]	; 0xe8
    10ea:	230b      	movs	r3, #11
    10ec:	f887 30e9 	strb.w	r3, [r7, #233]	; 0xe9
    10f0:	4b25      	ldr	r3, [pc, #148]	; (1188 <main+0x22c>)
    10f2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	
    bus.Initialize();
    10f6:	463b      	mov	r3, r7
    10f8:	4618      	mov	r0, r3
    10fa:	f7ff fda3 	bl	c44 <Bus::Initialize()>
   
    LOG_INFO("writing data to SRAM, [data %08b at address %08b]", data, address);
    10fe:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
    1102:	f897 20f3 	ldrb.w	r2, [r7, #243]	; 0xf3
    1106:	9201      	str	r2, [sp, #4]
    1108:	9300      	str	r3, [sp, #0]
    110a:	2310      	movs	r3, #16
    110c:	4a1f      	ldr	r2, [pc, #124]	; (118c <main+0x230>)
    110e:	4920      	ldr	r1, [pc, #128]	; (1190 <main+0x234>)
    1110:	4820      	ldr	r0, [pc, #128]	; (1194 <main+0x238>)
    1112:	f001 fd0b 	bl	2b2c <printf>
    bus.Write(control, address, data);
    1116:	f897 30f2 	ldrb.w	r3, [r7, #242]	; 0xf2
    111a:	f897 20f3 	ldrb.w	r2, [r7, #243]	; 0xf3
    111e:	4638      	mov	r0, r7
    1120:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
    1124:	f7ff fe09 	bl	d3a <Bus::Write(Bus::ControlType, unsigned char, unsigned char)>
    LOG_INFO("Data Wrote to SRAM at address %08b", address);
    1128:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
    112c:	9300      	str	r3, [sp, #0]
    112e:	2312      	movs	r3, #18
    1130:	4a16      	ldr	r2, [pc, #88]	; (118c <main+0x230>)
    1132:	4919      	ldr	r1, [pc, #100]	; (1198 <main+0x23c>)
    1134:	4819      	ldr	r0, [pc, #100]	; (119c <main+0x240>)
    1136:	f001 fcf9 	bl	2b2c <printf>
	
    LOG_INFO("reading data from SRAM, [address %08b]", address);
    113a:	f897 30f3 	ldrb.w	r3, [r7, #243]	; 0xf3
    113e:	9300      	str	r3, [sp, #0]
    1140:	2314      	movs	r3, #20
    1142:	4a12      	ldr	r2, [pc, #72]	; (118c <main+0x230>)
    1144:	4916      	ldr	r1, [pc, #88]	; (11a0 <main+0x244>)
    1146:	4817      	ldr	r0, [pc, #92]	; (11a4 <main+0x248>)
    1148:	f001 fcf0 	bl	2b2c <printf>
    result = bus.Read(control, address);
    114c:	f897 20f3 	ldrb.w	r2, [r7, #243]	; 0xf3
    1150:	463b      	mov	r3, r7
    1152:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
    1156:	4618      	mov	r0, r3
    1158:	f7ff fe76 	bl	e48 <Bus::Read(Bus::ControlType, unsigned char)>
    115c:	4603      	mov	r3, r0
    115e:	f887 30f1 	strb.w	r3, [r7, #241]	; 0xf1
    LOG_INFO("Data Read to SRAM is:%08b", result);
    1162:	f897 30f1 	ldrb.w	r3, [r7, #241]	; 0xf1
    1166:	9300      	str	r3, [sp, #0]
    1168:	2316      	movs	r3, #22
    116a:	4a08      	ldr	r2, [pc, #32]	; (118c <main+0x230>)
    116c:	490e      	ldr	r1, [pc, #56]	; (11a8 <main+0x24c>)
    116e:	480f      	ldr	r0, [pc, #60]	; (11ac <main+0x250>)
    1170:	f001 fcdc 	bl	2b2c <printf>
   
    return 0;
    1174:	2300      	movs	r3, #0
}
    1176:	4618      	mov	r0, r3
    1178:	37f8      	adds	r7, #248	; 0xf8
    117a:	46bd      	mov	sp, r7
    117c:	bd80      	pop	{r7, pc}
    117e:	bf00      	nop
    1180:	000062a8 	.word	0x000062a8
    1184:	000062dc 	.word	0x000062dc
    1188:	00006254 	.word	0x00006254
    118c:	000062ec 	.word	0x000062ec
    1190:	00006270 	.word	0x00006270
    1194:	000060d8 	.word	0x000060d8
    1198:	0000627c 	.word	0x0000627c
    119c:	00006144 	.word	0x00006144
    11a0:	00006288 	.word	0x00006288
    11a4:	000061a0 	.word	0x000061a0
    11a8:	00006294 	.word	0x00006294
    11ac:	00006200 	.word	0x00006200

000011b0 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>:
  // Shift masked value into bit position and OR with target value.
  target |= (value & mask) << position;
  return static_cast<T>(target);
}
template <typename T, typename U>
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    11b0:	b580      	push	{r7, lr}
    11b2:	b084      	sub	sp, #16
    11b4:	af00      	add	r7, sp, #0
    11b6:	60f8      	str	r0, [r7, #12]
    11b8:	460b      	mov	r3, r1
    11ba:	80ba      	strh	r2, [r7, #4]
    11bc:	72fb      	strb	r3, [r7, #11]
{
  return Insert(target, value, bitmask.position, bitmask.width);
    11be:	793b      	ldrb	r3, [r7, #4]
    11c0:	461a      	mov	r2, r3
    11c2:	797b      	ldrb	r3, [r7, #5]
    11c4:	7af9      	ldrb	r1, [r7, #11]
    11c6:	68f8      	ldr	r0, [r7, #12]
    11c8:	f000 f841 	bl	124e <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)>
    11cc:	4603      	mov	r3, r0
}
    11ce:	4618      	mov	r0, r3
    11d0:	3710      	adds	r7, #16
    11d2:	46bd      	mov	sp, r7
    11d4:	bd80      	pop	{r7, pc}

000011d6 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>:
/// return   =        0b0000'0001
///
/// @param target the value you want to change
/// @param position the position of the bit you would like to change to 0
template <typename T>
[[nodiscard]] constexpr T Clear(T target, uint32_t position)
    11d6:	b480      	push	{r7}
    11d8:	b083      	sub	sp, #12
    11da:	af00      	add	r7, sp, #0
    11dc:	6078      	str	r0, [r7, #4]
    11de:	6039      	str	r1, [r7, #0]
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Clear only accepts intergers.");
  return static_cast<T>(target & ~(1 << position));
    11e0:	2201      	movs	r2, #1
    11e2:	683b      	ldr	r3, [r7, #0]
    11e4:	fa02 f303 	lsl.w	r3, r2, r3
    11e8:	43db      	mvns	r3, r3
    11ea:	461a      	mov	r2, r3
    11ec:	687b      	ldr	r3, [r7, #4]
    11ee:	4013      	ands	r3, r2
}
    11f0:	4618      	mov	r0, r3
    11f2:	370c      	adds	r7, #12
    11f4:	46bd      	mov	sp, r7
    11f6:	f85d 7b04 	ldr.w	r7, [sp], #4
    11fa:	4770      	bx	lr

000011fc <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Set(T target, uint32_t position)
    11fc:	b480      	push	{r7}
    11fe:	b083      	sub	sp, #12
    1200:	af00      	add	r7, sp, #0
    1202:	6078      	str	r0, [r7, #4]
    1204:	6039      	str	r1, [r7, #0]
  return static_cast<T>(target | (1 << position));
    1206:	2201      	movs	r2, #1
    1208:	683b      	ldr	r3, [r7, #0]
    120a:	fa02 f303 	lsl.w	r3, r2, r3
    120e:	461a      	mov	r2, r3
    1210:	687b      	ldr	r3, [r7, #4]
    1212:	4313      	orrs	r3, r2
}
    1214:	4618      	mov	r0, r3
    1216:	370c      	adds	r7, #12
    1218:	46bd      	mov	sp, r7
    121a:	f85d 7b04 	ldr.w	r7, [sp], #4
    121e:	4770      	bx	lr

00001220 <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>:
/// return   =               true
///
/// @param target the value you want to change
/// @param position the position of the bit you would like to toggle
template <typename T>
[[nodiscard]] constexpr bool Read(T target, uint32_t position)
    1220:	b480      	push	{r7}
    1222:	b083      	sub	sp, #12
    1224:	af00      	add	r7, sp, #0
    1226:	6078      	str	r0, [r7, #4]
    1228:	6039      	str	r1, [r7, #0]
{
  static_assert(std::numeric_limits<T>::is_integer,
                "Read only accepts intergers.");
  return static_cast<bool>(target & (1 << position));
    122a:	2201      	movs	r2, #1
    122c:	683b      	ldr	r3, [r7, #0]
    122e:	fa02 f303 	lsl.w	r3, r2, r3
    1232:	461a      	mov	r2, r3
    1234:	687b      	ldr	r3, [r7, #4]
    1236:	4013      	ands	r3, r2
    1238:	2b00      	cmp	r3, #0
    123a:	bf14      	ite	ne
    123c:	2301      	movne	r3, #1
    123e:	2300      	moveq	r3, #0
    1240:	b2db      	uxtb	r3, r3
}
    1242:	4618      	mov	r0, r3
    1244:	370c      	adds	r7, #12
    1246:	46bd      	mov	sp, r7
    1248:	f85d 7b04 	ldr.w	r7, [sp], #4
    124c:	4770      	bx	lr

0000124e <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    124e:	b480      	push	{r7}
    1250:	b089      	sub	sp, #36	; 0x24
    1252:	af00      	add	r7, sp, #0
    1254:	60f8      	str	r0, [r7, #12]
    1256:	607a      	str	r2, [r7, #4]
    1258:	603b      	str	r3, [r7, #0]
    125a:	460b      	mov	r3, r1
    125c:	72fb      	strb	r3, [r7, #11]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    125e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    1262:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    1264:	2320      	movs	r3, #32
    1266:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    1268:	683b      	ldr	r3, [r7, #0]
    126a:	f1c3 0320 	rsb	r3, r3, #32
    126e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1272:	fa22 f303 	lsr.w	r3, r2, r3
    1276:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    1278:	697a      	ldr	r2, [r7, #20]
    127a:	687b      	ldr	r3, [r7, #4]
    127c:	fa02 f303 	lsl.w	r3, r2, r3
    1280:	43db      	mvns	r3, r3
    1282:	68fa      	ldr	r2, [r7, #12]
    1284:	4013      	ands	r3, r2
    1286:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    1288:	7afa      	ldrb	r2, [r7, #11]
    128a:	697b      	ldr	r3, [r7, #20]
    128c:	401a      	ands	r2, r3
    128e:	687b      	ldr	r3, [r7, #4]
    1290:	fa02 f303 	lsl.w	r3, r2, r3
    1294:	68fa      	ldr	r2, [r7, #12]
    1296:	4313      	orrs	r3, r2
    1298:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    129a:	68fb      	ldr	r3, [r7, #12]
}
    129c:	4618      	mov	r0, r3
    129e:	3724      	adds	r7, #36	; 0x24
    12a0:	46bd      	mov	sp, r7
    12a2:	f85d 7b04 	ldr.w	r7, [sp], #4
    12a6:	4770      	bx	lr

000012a8 <__static_initialization_and_destruction_0(int, int)>:
    12a8:	b580      	push	{r7, lr}
    12aa:	b082      	sub	sp, #8
    12ac:	af00      	add	r7, sp, #0
    12ae:	6078      	str	r0, [r7, #4]
    12b0:	6039      	str	r1, [r7, #0]
    12b2:	687b      	ldr	r3, [r7, #4]
    12b4:	2b01      	cmp	r3, #1
    12b6:	d16e      	bne.n	1396 <__static_initialization_and_destruction_0(int, int)+0xee>
    12b8:	683b      	ldr	r3, [r7, #0]
    12ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
    12be:	4293      	cmp	r3, r2
    12c0:	d169      	bne.n	1396 <__static_initialization_and_destruction_0(int, int)+0xee>
  inline static PinMap_t * pin_map = reinterpret_cast<PinMap_t *>(LPC_IOCON);
    12c2:	4b37      	ldr	r3, [pc, #220]	; (13a0 <__static_initialization_and_destruction_0(int, int)+0xf8>)
    12c4:	681b      	ldr	r3, [r3, #0]
    12c6:	f003 0301 	and.w	r3, r3, #1
    12ca:	2b00      	cmp	r3, #0
    12cc:	d105      	bne.n	12da <__static_initialization_and_destruction_0(int, int)+0x32>
    12ce:	4b34      	ldr	r3, [pc, #208]	; (13a0 <__static_initialization_and_destruction_0(int, int)+0xf8>)
    12d0:	2201      	movs	r2, #1
    12d2:	601a      	str	r2, [r3, #0]
    12d4:	4a33      	ldr	r2, [pc, #204]	; (13a4 <__static_initialization_and_destruction_0(int, int)+0xfc>)
    12d6:	4b34      	ldr	r3, [pc, #208]	; (13a8 <__static_initialization_and_destruction_0(int, int)+0x100>)
    12d8:	601a      	str	r2, [r3, #0]
  inline static VectorTable_t table = VectorTable_t::GenerateDefaultTable();
    12da:	4b34      	ldr	r3, [pc, #208]	; (13ac <__static_initialization_and_destruction_0(int, int)+0x104>)
    12dc:	681b      	ldr	r3, [r3, #0]
    12de:	f003 0301 	and.w	r3, r3, #1
    12e2:	2b00      	cmp	r3, #0
    12e4:	d106      	bne.n	12f4 <__static_initialization_and_destruction_0(int, int)+0x4c>
    12e6:	4b31      	ldr	r3, [pc, #196]	; (13ac <__static_initialization_and_destruction_0(int, int)+0x104>)
    12e8:	2201      	movs	r2, #1
    12ea:	601a      	str	r2, [r3, #0]
    12ec:	4b30      	ldr	r3, [pc, #192]	; (13b0 <__static_initialization_and_destruction_0(int, int)+0x108>)
    12ee:	4618      	mov	r0, r3
    12f0:	f7ff f9c2 	bl	678 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>
  inline static LPC_GPIO_TypeDef * gpio_port[6] = {
    12f4:	4b2f      	ldr	r3, [pc, #188]	; (13b4 <__static_initialization_and_destruction_0(int, int)+0x10c>)
    12f6:	681b      	ldr	r3, [r3, #0]
    12f8:	f003 0301 	and.w	r3, r3, #1
    12fc:	2b00      	cmp	r3, #0
    12fe:	d114      	bne.n	132a <__static_initialization_and_destruction_0(int, int)+0x82>
    1300:	4b2c      	ldr	r3, [pc, #176]	; (13b4 <__static_initialization_and_destruction_0(int, int)+0x10c>)
    1302:	2201      	movs	r2, #1
    1304:	601a      	str	r2, [r3, #0]
  };
    1306:	4a2c      	ldr	r2, [pc, #176]	; (13b8 <__static_initialization_and_destruction_0(int, int)+0x110>)
    1308:	4b2c      	ldr	r3, [pc, #176]	; (13bc <__static_initialization_and_destruction_0(int, int)+0x114>)
    130a:	601a      	str	r2, [r3, #0]
    130c:	4a2c      	ldr	r2, [pc, #176]	; (13c0 <__static_initialization_and_destruction_0(int, int)+0x118>)
    130e:	4b2b      	ldr	r3, [pc, #172]	; (13bc <__static_initialization_and_destruction_0(int, int)+0x114>)
    1310:	605a      	str	r2, [r3, #4]
    1312:	4a2c      	ldr	r2, [pc, #176]	; (13c4 <__static_initialization_and_destruction_0(int, int)+0x11c>)
    1314:	4b29      	ldr	r3, [pc, #164]	; (13bc <__static_initialization_and_destruction_0(int, int)+0x114>)
    1316:	609a      	str	r2, [r3, #8]
    1318:	4a2b      	ldr	r2, [pc, #172]	; (13c8 <__static_initialization_and_destruction_0(int, int)+0x120>)
    131a:	4b28      	ldr	r3, [pc, #160]	; (13bc <__static_initialization_and_destruction_0(int, int)+0x114>)
    131c:	60da      	str	r2, [r3, #12]
    131e:	4a2b      	ldr	r2, [pc, #172]	; (13cc <__static_initialization_and_destruction_0(int, int)+0x124>)
    1320:	4b26      	ldr	r3, [pc, #152]	; (13bc <__static_initialization_and_destruction_0(int, int)+0x114>)
    1322:	611a      	str	r2, [r3, #16]
    1324:	4a2a      	ldr	r2, [pc, #168]	; (13d0 <__static_initialization_and_destruction_0(int, int)+0x128>)
    1326:	4b25      	ldr	r3, [pc, #148]	; (13bc <__static_initialization_and_destruction_0(int, int)+0x114>)
    1328:	615a      	str	r2, [r3, #20]
  inline static GpioInterruptRegisterMap_t interrupt[kNumberOfPorts] = {
    132a:	4b2a      	ldr	r3, [pc, #168]	; (13d4 <__static_initialization_and_destruction_0(int, int)+0x12c>)
    132c:	681b      	ldr	r3, [r3, #0]
    132e:	f003 0301 	and.w	r3, r3, #1
    1332:	2b00      	cmp	r3, #0
    1334:	d122      	bne.n	137c <__static_initialization_and_destruction_0(int, int)+0xd4>
    1336:	4b27      	ldr	r3, [pc, #156]	; (13d4 <__static_initialization_and_destruction_0(int, int)+0x12c>)
    1338:	2201      	movs	r2, #1
    133a:	601a      	str	r2, [r3, #0]
  };
    133c:	4b26      	ldr	r3, [pc, #152]	; (13d8 <__static_initialization_and_destruction_0(int, int)+0x130>)
    { .rising_edge_status  = &(LPC_GPIOINT->IO0IntStatR),
    133e:	4a27      	ldr	r2, [pc, #156]	; (13dc <__static_initialization_and_destruction_0(int, int)+0x134>)
    1340:	3204      	adds	r2, #4
  };
    1342:	601a      	str	r2, [r3, #0]
      .falling_edge_status = &(LPC_GPIOINT->IO0IntStatF),
    1344:	4a25      	ldr	r2, [pc, #148]	; (13dc <__static_initialization_and_destruction_0(int, int)+0x134>)
    1346:	3208      	adds	r2, #8
  };
    1348:	605a      	str	r2, [r3, #4]
      .clear               = &(LPC_GPIOINT->IO0IntClr),
    134a:	4a24      	ldr	r2, [pc, #144]	; (13dc <__static_initialization_and_destruction_0(int, int)+0x134>)
    134c:	320c      	adds	r2, #12
  };
    134e:	609a      	str	r2, [r3, #8]
      .enable_rising_edge  = &(LPC_GPIOINT->IO0IntEnR),
    1350:	4a22      	ldr	r2, [pc, #136]	; (13dc <__static_initialization_and_destruction_0(int, int)+0x134>)
    1352:	3210      	adds	r2, #16
  };
    1354:	60da      	str	r2, [r3, #12]
      .enable_falling_edge = &(LPC_GPIOINT->IO0IntEnF) },
    1356:	4a21      	ldr	r2, [pc, #132]	; (13dc <__static_initialization_and_destruction_0(int, int)+0x134>)
    1358:	3214      	adds	r2, #20
  };
    135a:	611a      	str	r2, [r3, #16]
    135c:	3314      	adds	r3, #20
    { .rising_edge_status  = &(LPC_GPIOINT->IO2IntStatR),
    135e:	4a1f      	ldr	r2, [pc, #124]	; (13dc <__static_initialization_and_destruction_0(int, int)+0x134>)
    1360:	3224      	adds	r2, #36	; 0x24
  };
    1362:	601a      	str	r2, [r3, #0]
      .falling_edge_status = &(LPC_GPIOINT->IO2IntStatF),
    1364:	4a1d      	ldr	r2, [pc, #116]	; (13dc <__static_initialization_and_destruction_0(int, int)+0x134>)
    1366:	3228      	adds	r2, #40	; 0x28
  };
    1368:	605a      	str	r2, [r3, #4]
      .clear               = &(LPC_GPIOINT->IO2IntClr),
    136a:	4a1c      	ldr	r2, [pc, #112]	; (13dc <__static_initialization_and_destruction_0(int, int)+0x134>)
    136c:	322c      	adds	r2, #44	; 0x2c
  };
    136e:	609a      	str	r2, [r3, #8]
      .enable_rising_edge  = &(LPC_GPIOINT->IO2IntEnR),
    1370:	4a1a      	ldr	r2, [pc, #104]	; (13dc <__static_initialization_and_destruction_0(int, int)+0x134>)
    1372:	3230      	adds	r2, #48	; 0x30
  };
    1374:	60da      	str	r2, [r3, #12]
      .enable_falling_edge = &(LPC_GPIOINT->IO2IntEnF) }
    1376:	4a19      	ldr	r2, [pc, #100]	; (13dc <__static_initialization_and_destruction_0(int, int)+0x134>)
    1378:	3234      	adds	r2, #52	; 0x34
  };
    137a:	611a      	str	r2, [r3, #16]
  inline static volatile uint32_t * port_status = &(LPC_GPIOINT->IntStatus);
    137c:	4b18      	ldr	r3, [pc, #96]	; (13e0 <__static_initialization_and_destruction_0(int, int)+0x138>)
    137e:	681b      	ldr	r3, [r3, #0]
    1380:	f003 0301 	and.w	r3, r3, #1
    1384:	2b00      	cmp	r3, #0
    1386:	d106      	bne.n	1396 <__static_initialization_and_destruction_0(int, int)+0xee>
    1388:	4b15      	ldr	r3, [pc, #84]	; (13e0 <__static_initialization_and_destruction_0(int, int)+0x138>)
    138a:	2201      	movs	r2, #1
    138c:	601a      	str	r2, [r3, #0]
    138e:	4b13      	ldr	r3, [pc, #76]	; (13dc <__static_initialization_and_destruction_0(int, int)+0x134>)
    1390:	461a      	mov	r2, r3
    1392:	4b14      	ldr	r3, [pc, #80]	; (13e4 <__static_initialization_and_destruction_0(int, int)+0x13c>)
    1394:	601a      	str	r2, [r3, #0]
    1396:	bf00      	nop
    1398:	3708      	adds	r7, #8
    139a:	46bd      	mov	sp, r7
    139c:	bd80      	pop	{r7, pc}
    139e:	bf00      	nop
    13a0:	10000334 	.word	0x10000334
    13a4:	4002c000 	.word	0x4002c000
    13a8:	100000ec 	.word	0x100000ec
    13ac:	10000338 	.word	0x10000338
    13b0:	100000f0 	.word	0x100000f0
    13b4:	1000033c 	.word	0x1000033c
    13b8:	20098000 	.word	0x20098000
    13bc:	100001f0 	.word	0x100001f0
    13c0:	20098020 	.word	0x20098020
    13c4:	20098040 	.word	0x20098040
    13c8:	20098060 	.word	0x20098060
    13cc:	20098080 	.word	0x20098080
    13d0:	200980a0 	.word	0x200980a0
    13d4:	10000340 	.word	0x10000340
    13d8:	10000308 	.word	0x10000308
    13dc:	40028080 	.word	0x40028080
    13e0:	10000344 	.word	0x10000344
    13e4:	10000330 	.word	0x10000330

000013e8 <_GLOBAL__sub_I_main>:
    13e8:	b580      	push	{r7, lr}
    13ea:	af00      	add	r7, sp, #0
    13ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
    13f0:	2001      	movs	r0, #1
    13f2:	f7ff ff59 	bl	12a8 <__static_initialization_and_destruction_0(int, int)>
    13f6:	bd80      	pop	{r7, pc}

000013f8 <_Unwind_GetGR>:
  _Unwind_Reason_Code __gnu_unwind_execute (_Unwind_Context *,
					    __gnu_unwind_state *);

  static inline _Unwind_Word
  _Unwind_GetGR (_Unwind_Context *context, int regno)
    {
    13f8:	b580      	push	{r7, lr}
    13fa:	b086      	sub	sp, #24
    13fc:	af02      	add	r7, sp, #8
    13fe:	6078      	str	r0, [r7, #4]
    1400:	6039      	str	r1, [r7, #0]
      _uw val;
      _Unwind_VRS_Get (context, _UVRSC_CORE, regno, _UVRSD_UINT32, &val);
    1402:	683a      	ldr	r2, [r7, #0]
    1404:	f107 030c 	add.w	r3, r7, #12
    1408:	9300      	str	r3, [sp, #0]
    140a:	2300      	movs	r3, #0
    140c:	2100      	movs	r1, #0
    140e:	6878      	ldr	r0, [r7, #4]
    1410:	f003 ff2e 	bl	5270 <_Unwind_VRS_Get>
      return val;
    1414:	68fb      	ldr	r3, [r7, #12]
    }
    1416:	4618      	mov	r0, r3
    1418:	3710      	adds	r7, #16
    141a:	46bd      	mov	sp, r7
    141c:	bd80      	pop	{r7, pc}
    141e:	Address 0x000000000000141e is out of bounds.


00001420 <sjsu::build::Stringify(sjsu::build::Target)>:

constexpr const Target kTarget     = Target::TARGET;
constexpr const Platform kPlatform = Platform::PLATFORM;

constexpr const char * Stringify(Target target)
{
    1420:	b480      	push	{r7}
    1422:	b085      	sub	sp, #20
    1424:	af00      	add	r7, sp, #0
    1426:	6078      	str	r0, [r7, #4]
  const char * result = "invalid";
    1428:	4b0a      	ldr	r3, [pc, #40]	; (1454 <sjsu::build::Stringify(sjsu::build::Target)+0x34>)
    142a:	60fb      	str	r3, [r7, #12]
  switch (target)
    142c:	687b      	ldr	r3, [r7, #4]
    142e:	2b00      	cmp	r3, #0
    1430:	d002      	beq.n	1438 <sjsu::build::Stringify(sjsu::build::Target)+0x18>
    1432:	2b01      	cmp	r3, #1
    1434:	d003      	beq.n	143e <sjsu::build::Stringify(sjsu::build::Target)+0x1e>
  {
    case Target::Application: result = "application"; break;
    case Target::HostTest: result = "host test"; break;
    default: break;
    1436:	e005      	b.n	1444 <sjsu::build::Stringify(sjsu::build::Target)+0x24>
    case Target::Application: result = "application"; break;
    1438:	4b07      	ldr	r3, [pc, #28]	; (1458 <sjsu::build::Stringify(sjsu::build::Target)+0x38>)
    143a:	60fb      	str	r3, [r7, #12]
    143c:	e002      	b.n	1444 <sjsu::build::Stringify(sjsu::build::Target)+0x24>
    case Target::HostTest: result = "host test"; break;
    143e:	4b07      	ldr	r3, [pc, #28]	; (145c <sjsu::build::Stringify(sjsu::build::Target)+0x3c>)
    1440:	60fb      	str	r3, [r7, #12]
    1442:	bf00      	nop
  }
  return result;
    1444:	68fb      	ldr	r3, [r7, #12]
}
    1446:	4618      	mov	r0, r3
    1448:	3714      	adds	r7, #20
    144a:	46bd      	mov	sp, r7
    144c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1450:	4770      	bx	lr
    1452:	bf00      	nop
    1454:	000063c0 	.word	0x000063c0
    1458:	000063c8 	.word	0x000063c8
    145c:	000063d4 	.word	0x000063d4

00001460 <sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)>:
// ==============================================
// Hidden Backtrace Utility Functions
// ==============================================
inline _Unwind_Reason_Code PrintAddressAsList(_Unwind_Context * context,
                                                     void * depth_pointer)
{
    1460:	b580      	push	{r7, lr}
    1462:	b084      	sub	sp, #16
    1464:	af00      	add	r7, sp, #0
    1466:	6078      	str	r0, [r7, #4]
    1468:	6039      	str	r1, [r7, #0]
  int * depth      = static_cast<int *>(depth_pointer);
    146a:	683b      	ldr	r3, [r7, #0]
    146c:	60fb      	str	r3, [r7, #12]
  intptr_t address = static_cast<intptr_t>(_Unwind_GetIP(context));
    146e:	210f      	movs	r1, #15
    1470:	6878      	ldr	r0, [r7, #4]
    1472:	f7ff ffc1 	bl	13f8 <_Unwind_GetGR>
    1476:	4603      	mov	r3, r0
    1478:	f023 0301 	bic.w	r3, r3, #1
    147c:	60bb      	str	r3, [r7, #8]
  printf("  %d) 0x%08" PRIXPTR "\n", *depth,
    147e:	68fb      	ldr	r3, [r7, #12]
    1480:	6819      	ldr	r1, [r3, #0]
    1482:	68bb      	ldr	r3, [r7, #8]
    1484:	3b04      	subs	r3, #4
    1486:	461a      	mov	r2, r3
    1488:	4806      	ldr	r0, [pc, #24]	; (14a4 <sjsu::debug::PrintAddressAsList(_Unwind_Context*, void*)+0x44>)
    148a:	f001 fb4f 	bl	2b2c <printf>
         address - config::kBacktraceAddressOffset);
  (*depth)++;
    148e:	68fb      	ldr	r3, [r7, #12]
    1490:	681b      	ldr	r3, [r3, #0]
    1492:	1c5a      	adds	r2, r3, #1
    1494:	68fb      	ldr	r3, [r7, #12]
    1496:	601a      	str	r2, [r3, #0]
  return _URC_NO_REASON;
    1498:	2300      	movs	r3, #0
}
    149a:	4618      	mov	r0, r3
    149c:	3710      	adds	r7, #16
    149e:	46bd      	mov	sp, r7
    14a0:	bd80      	pop	{r7, pc}
    14a2:	bf00      	nop
    14a4:	000063e0 	.word	0x000063e0

000014a8 <sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)>:
inline _Unwind_Reason_Code PrintAddressInRow(_Unwind_Context * context,
                                                    void * depth_pointer)
{
    14a8:	b580      	push	{r7, lr}
    14aa:	b084      	sub	sp, #16
    14ac:	af00      	add	r7, sp, #0
    14ae:	6078      	str	r0, [r7, #4]
    14b0:	6039      	str	r1, [r7, #0]
  int * depth      = static_cast<int *>(depth_pointer);
    14b2:	683b      	ldr	r3, [r7, #0]
    14b4:	60fb      	str	r3, [r7, #12]
  intptr_t address = static_cast<intptr_t>(_Unwind_GetIP(context));
    14b6:	210f      	movs	r1, #15
    14b8:	6878      	ldr	r0, [r7, #4]
    14ba:	f7ff ff9d 	bl	13f8 <_Unwind_GetGR>
    14be:	4603      	mov	r3, r0
    14c0:	f023 0301 	bic.w	r3, r3, #1
    14c4:	60bb      	str	r3, [r7, #8]
  printf(" 0x%08" PRIXPTR, address - config::kBacktraceAddressOffset);
    14c6:	68bb      	ldr	r3, [r7, #8]
    14c8:	3b04      	subs	r3, #4
    14ca:	4619      	mov	r1, r3
    14cc:	4806      	ldr	r0, [pc, #24]	; (14e8 <sjsu::debug::PrintAddressInRow(_Unwind_Context*, void*)+0x40>)
    14ce:	f001 fb2d 	bl	2b2c <printf>
  (*depth)++;
    14d2:	68fb      	ldr	r3, [r7, #12]
    14d4:	681b      	ldr	r3, [r3, #0]
    14d6:	1c5a      	adds	r2, r3, #1
    14d8:	68fb      	ldr	r3, [r7, #12]
    14da:	601a      	str	r2, [r3, #0]
  return _URC_NO_REASON;
    14dc:	2300      	movs	r3, #0
}
    14de:	4618      	mov	r0, r3
    14e0:	3710      	adds	r7, #16
    14e2:	46bd      	mov	sp, r7
    14e4:	bd80      	pop	{r7, pc}
    14e6:	bf00      	nop
    14e8:	000063f0 	.word	0x000063f0

000014ec <sjsu::debug::PrintBacktrace(bool, void*)>:
///        to print the file and line number that corresponds to the printed
///        addresses.
/// @param length - the number of bytes to read from the starting location
inline void PrintBacktrace(bool show_make_command = false,
                           void * final_address   = nullptr)
{
    14ec:	b580      	push	{r7, lr}
    14ee:	b084      	sub	sp, #16
    14f0:	af00      	add	r7, sp, #0
    14f2:	4603      	mov	r3, r0
    14f4:	6039      	str	r1, [r7, #0]
    14f6:	71fb      	strb	r3, [r7, #7]
  if constexpr (config::kIncludeBacktrace)
  {
    int depth = 0;
    14f8:	2300      	movs	r3, #0
    14fa:	60fb      	str	r3, [r7, #12]
    _Unwind_Backtrace(&PrintAddressAsList, &depth);
    14fc:	f107 030c 	add.w	r3, r7, #12
    1500:	4619      	mov	r1, r3
    1502:	481a      	ldr	r0, [pc, #104]	; (156c <sjsu::debug::PrintBacktrace(bool, void*)+0x80>)
    1504:	f004 faa6 	bl	5a54 <_Unwind_Backtrace>
    if (final_address)
    1508:	683b      	ldr	r3, [r7, #0]
    150a:	2b00      	cmp	r3, #0
    150c:	d005      	beq.n	151a <sjsu::debug::PrintBacktrace(bool, void*)+0x2e>
    {
      printf("  %d) 0x%p\n", depth, final_address);
    150e:	68fb      	ldr	r3, [r7, #12]
    1510:	683a      	ldr	r2, [r7, #0]
    1512:	4619      	mov	r1, r3
    1514:	4816      	ldr	r0, [pc, #88]	; (1570 <sjsu::debug::PrintBacktrace(bool, void*)+0x84>)
    1516:	f001 fb09 	bl	2b2c <printf>
    }

    if (show_make_command)
    151a:	79fb      	ldrb	r3, [r7, #7]
    151c:	2b00      	cmp	r3, #0
    151e:	d020      	beq.n	1562 <sjsu::debug::PrintBacktrace(bool, void*)+0x76>
    {
      printf("\nRun: the following command in your project directory");
    1520:	4814      	ldr	r0, [pc, #80]	; (1574 <sjsu::debug::PrintBacktrace(bool, void*)+0x88>)
    1522:	f001 fb03 	bl	2b2c <printf>
      printf("\n\n  " SJ2_BOLD_WHITE);
    1526:	4814      	ldr	r0, [pc, #80]	; (1578 <sjsu::debug::PrintBacktrace(bool, void*)+0x8c>)
    1528:	f001 fb00 	bl	2b2c <printf>
      printf("make stacktrace-%s TRACES=\"", Stringify(build::kTarget));
    152c:	2000      	movs	r0, #0
    152e:	f7ff ff77 	bl	1420 <sjsu::build::Stringify(sjsu::build::Target)>
    1532:	4603      	mov	r3, r0
    1534:	4619      	mov	r1, r3
    1536:	4811      	ldr	r0, [pc, #68]	; (157c <sjsu::debug::PrintBacktrace(bool, void*)+0x90>)
    1538:	f001 faf8 	bl	2b2c <printf>

      _Unwind_Backtrace(&PrintAddressInRow, &depth);
    153c:	f107 030c 	add.w	r3, r7, #12
    1540:	4619      	mov	r1, r3
    1542:	480f      	ldr	r0, [pc, #60]	; (1580 <sjsu::debug::PrintBacktrace(bool, void*)+0x94>)
    1544:	f004 fa86 	bl	5a54 <_Unwind_Backtrace>
      if (final_address)
    1548:	683b      	ldr	r3, [r7, #0]
    154a:	2b00      	cmp	r3, #0
    154c:	d003      	beq.n	1556 <sjsu::debug::PrintBacktrace(bool, void*)+0x6a>
      {
        printf(" 0x%p", final_address);
    154e:	6839      	ldr	r1, [r7, #0]
    1550:	480c      	ldr	r0, [pc, #48]	; (1584 <sjsu::debug::PrintBacktrace(bool, void*)+0x98>)
    1552:	f001 faeb 	bl	2b2c <printf>
      }

      printf("\"\n\n" SJ2_COLOR_RESET);
    1556:	480c      	ldr	r0, [pc, #48]	; (1588 <sjsu::debug::PrintBacktrace(bool, void*)+0x9c>)
    1558:	f001 fae8 	bl	2b2c <printf>
      printf(
    155c:	480b      	ldr	r0, [pc, #44]	; (158c <sjsu::debug::PrintBacktrace(bool, void*)+0xa0>)
    155e:	f000 f9c9 	bl	18f4 <puts>
          "This will report the file and line number that led to this function "
          "being called.\n");
    }
  }
}
    1562:	bf00      	nop
    1564:	3710      	adds	r7, #16
    1566:	46bd      	mov	sp, r7
    1568:	bd80      	pop	{r7, pc}
    156a:	bf00      	nop
    156c:	00001461 	.word	0x00001461
    1570:	000063f8 	.word	0x000063f8
    1574:	00006404 	.word	0x00006404
    1578:	0000643c 	.word	0x0000643c
    157c:	00006448 	.word	0x00006448
    1580:	000014a9 	.word	0x000014a9
    1584:	00006464 	.word	0x00006464
    1588:	0000646c 	.word	0x0000646c
    158c:	00006474 	.word	0x00006474

00001590 <sjsu::InitializeDataSection()>:

namespace sjsu
{
// Functions to carry out the initialization of RW and BSS data sections.
inline void InitializeDataSection()
{
    1590:	b480      	push	{r7}
    1592:	b087      	sub	sp, #28
    1594:	af00      	add	r7, sp, #0
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
    1596:	2300      	movs	r3, #0
    1598:	617b      	str	r3, [r7, #20]
    159a:	697a      	ldr	r2, [r7, #20]
    159c:	4613      	mov	r3, r2
    159e:	005b      	lsls	r3, r3, #1
    15a0:	4413      	add	r3, r2
    15a2:	009b      	lsls	r3, r3, #2
    15a4:	4a1f      	ldr	r2, [pc, #124]	; (1624 <sjsu::InitializeDataSection()+0x94>)
    15a6:	4413      	add	r3, r2
    15a8:	4a1f      	ldr	r2, [pc, #124]	; (1628 <sjsu::InitializeDataSection()+0x98>)
    15aa:	4293      	cmp	r3, r2
    15ac:	d233      	bcs.n	1616 <sjsu::InitializeDataSection()+0x86>
  {
    uint32_t * rom_location = data_section_table[i].rom_location;
    15ae:	491d      	ldr	r1, [pc, #116]	; (1624 <sjsu::InitializeDataSection()+0x94>)
    15b0:	697a      	ldr	r2, [r7, #20]
    15b2:	4613      	mov	r3, r2
    15b4:	005b      	lsls	r3, r3, #1
    15b6:	4413      	add	r3, r2
    15b8:	009b      	lsls	r3, r3, #2
    15ba:	440b      	add	r3, r1
    15bc:	681b      	ldr	r3, [r3, #0]
    15be:	60fb      	str	r3, [r7, #12]
    uint32_t * ram_location = data_section_table[i].ram_location;
    15c0:	4918      	ldr	r1, [pc, #96]	; (1624 <sjsu::InitializeDataSection()+0x94>)
    15c2:	697a      	ldr	r2, [r7, #20]
    15c4:	4613      	mov	r3, r2
    15c6:	005b      	lsls	r3, r3, #1
    15c8:	4413      	add	r3, r2
    15ca:	009b      	lsls	r3, r3, #2
    15cc:	440b      	add	r3, r1
    15ce:	685b      	ldr	r3, [r3, #4]
    15d0:	60bb      	str	r3, [r7, #8]
    uint32_t length         = data_section_table[i].length;
    15d2:	4914      	ldr	r1, [pc, #80]	; (1624 <sjsu::InitializeDataSection()+0x94>)
    15d4:	697a      	ldr	r2, [r7, #20]
    15d6:	4613      	mov	r3, r2
    15d8:	005b      	lsls	r3, r3, #1
    15da:	4413      	add	r3, r2
    15dc:	009b      	lsls	r3, r3, #2
    15de:	440b      	add	r3, r1
    15e0:	3308      	adds	r3, #8
    15e2:	681b      	ldr	r3, [r3, #0]
    15e4:	607b      	str	r3, [r7, #4]
    for (size_t j = 0; j < length; j++)
    15e6:	2300      	movs	r3, #0
    15e8:	613b      	str	r3, [r7, #16]
    15ea:	693a      	ldr	r2, [r7, #16]
    15ec:	687b      	ldr	r3, [r7, #4]
    15ee:	429a      	cmp	r2, r3
    15f0:	d20d      	bcs.n	160e <sjsu::InitializeDataSection()+0x7e>
    {
      ram_location[j] = rom_location[j];
    15f2:	693b      	ldr	r3, [r7, #16]
    15f4:	009b      	lsls	r3, r3, #2
    15f6:	68fa      	ldr	r2, [r7, #12]
    15f8:	441a      	add	r2, r3
    15fa:	693b      	ldr	r3, [r7, #16]
    15fc:	009b      	lsls	r3, r3, #2
    15fe:	68b9      	ldr	r1, [r7, #8]
    1600:	440b      	add	r3, r1
    1602:	6812      	ldr	r2, [r2, #0]
    1604:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
    1606:	693b      	ldr	r3, [r7, #16]
    1608:	3301      	adds	r3, #1
    160a:	613b      	str	r3, [r7, #16]
    160c:	e7ed      	b.n	15ea <sjsu::InitializeDataSection()+0x5a>
  for (int i = 0; &data_section_table[i] < &data_section_table_end; i++)
    160e:	697b      	ldr	r3, [r7, #20]
    1610:	3301      	adds	r3, #1
    1612:	617b      	str	r3, [r7, #20]
    1614:	e7c1      	b.n	159a <sjsu::InitializeDataSection()+0xa>
    }
  }
}
    1616:	bf00      	nop
    1618:	371c      	adds	r7, #28
    161a:	46bd      	mov	sp, r7
    161c:	f85d 7b04 	ldr.w	r7, [sp], #4
    1620:	4770      	bx	lr
    1622:	bf00      	nop
    1624:	000000e4 	.word	0x000000e4
    1628:	000000fc 	.word	0x000000fc

0000162c <sjsu::InitializeBssSection()>:
// Functions to initialization BSS data sections. This is important because
// the std c libs assume that BSS is set to zero.
inline void InitializeBssSection()
{
    162c:	b480      	push	{r7}
    162e:	b085      	sub	sp, #20
    1630:	af00      	add	r7, sp, #0
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
    1632:	2300      	movs	r3, #0
    1634:	60fb      	str	r3, [r7, #12]
    1636:	68fb      	ldr	r3, [r7, #12]
    1638:	00db      	lsls	r3, r3, #3
    163a:	4a15      	ldr	r2, [pc, #84]	; (1690 <sjsu::InitializeBssSection()+0x64>)
    163c:	4413      	add	r3, r2
    163e:	4a15      	ldr	r2, [pc, #84]	; (1694 <sjsu::InitializeBssSection()+0x68>)
    1640:	4293      	cmp	r3, r2
    1642:	d21e      	bcs.n	1682 <sjsu::InitializeBssSection()+0x56>
  {
    uint32_t * ram_location = bss_section_table[i].ram_location;
    1644:	4a12      	ldr	r2, [pc, #72]	; (1690 <sjsu::InitializeBssSection()+0x64>)
    1646:	68fb      	ldr	r3, [r7, #12]
    1648:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
    164c:	607b      	str	r3, [r7, #4]
    uint32_t length         = bss_section_table[i].length;
    164e:	4a10      	ldr	r2, [pc, #64]	; (1690 <sjsu::InitializeBssSection()+0x64>)
    1650:	68fb      	ldr	r3, [r7, #12]
    1652:	00db      	lsls	r3, r3, #3
    1654:	4413      	add	r3, r2
    1656:	685b      	ldr	r3, [r3, #4]
    1658:	603b      	str	r3, [r7, #0]
    for (size_t j = 0; j < length; j++)
    165a:	2300      	movs	r3, #0
    165c:	60bb      	str	r3, [r7, #8]
    165e:	68ba      	ldr	r2, [r7, #8]
    1660:	683b      	ldr	r3, [r7, #0]
    1662:	429a      	cmp	r2, r3
    1664:	d209      	bcs.n	167a <sjsu::InitializeBssSection()+0x4e>
    {
      ram_location[j] = 0;
    1666:	68bb      	ldr	r3, [r7, #8]
    1668:	009b      	lsls	r3, r3, #2
    166a:	687a      	ldr	r2, [r7, #4]
    166c:	4413      	add	r3, r2
    166e:	2200      	movs	r2, #0
    1670:	601a      	str	r2, [r3, #0]
    for (size_t j = 0; j < length; j++)
    1672:	68bb      	ldr	r3, [r7, #8]
    1674:	3301      	adds	r3, #1
    1676:	60bb      	str	r3, [r7, #8]
    1678:	e7f1      	b.n	165e <sjsu::InitializeBssSection()+0x32>
  for (int i = 0; &bss_section_table[i] < &bss_section_table_end; i++)
    167a:	68fb      	ldr	r3, [r7, #12]
    167c:	3301      	adds	r3, #1
    167e:	60fb      	str	r3, [r7, #12]
    1680:	e7d9      	b.n	1636 <sjsu::InitializeBssSection()+0xa>
    }
  }
}
    1682:	bf00      	nop
    1684:	3714      	adds	r7, #20
    1686:	46bd      	mov	sp, r7
    1688:	f85d 7b04 	ldr.w	r7, [sp], #4
    168c:	4770      	bx	lr
    168e:	bf00      	nop
    1690:	000000fc 	.word	0x000000fc
    1694:	0000010c 	.word	0x0000010c

00001698 <sjsu::SystemInitialize()>:

namespace sjsu
{
// Sets up the .data, .bss sections, run C++ constructors.
inline void SystemInitialize()
{
    1698:	b580      	push	{r7, lr}
    169a:	af00      	add	r7, sp, #0
  // SysInit 1. Transfer data section values from flash to RAM
  //            (ALREADY DONE FOR YOU)
  InitializeDataSection();
    169c:	f7ff ff78 	bl	1590 <sjsu::InitializeDataSection()>
  // SysInit 2. Clear BSS section of RAM
  //            This is required because the nano implementation of the
  //            standard C/C++ libraries assumes that the BSS section is
  //            initialized to 0.
  //            (ALREADY DONE FOR YOU)
  InitializeBssSection();
    16a0:	f7ff ffc4 	bl	162c <sjsu::InitializeBssSection()>
  //  SysInit 3. Initialisation C++ libraries
  //            (ALREADY DONE FOR YOU)
  __libc_init_array();
    16a4:	f004 fbac 	bl	5e00 <__libc_init_array>
}
    16a8:	bf00      	nop
    16aa:	bd80      	pop	{r7, pc}

000016ac <GetRegistersFromStack>:
#include "utility/time.hpp"

extern "C"
{
  void GetRegistersFromStack(uint32_t * fault_stack_address)
  {
    16ac:	b580      	push	{r7, lr}
    16ae:	b08c      	sub	sp, #48	; 0x30
    16b0:	af02      	add	r7, sp, #8
    16b2:	6078      	str	r0, [r7, #4]
    // These are volatile to try and prevent the compiler/linker optimizing them
    // away as the variables never actually get used.  If the debugger won't
    // show the values of the variables, make them global my moving their
    // declaration outside of this function.
    volatile uint32_t r0  = fault_stack_address[0];
    16b4:	687b      	ldr	r3, [r7, #4]
    16b6:	681b      	ldr	r3, [r3, #0]
    16b8:	627b      	str	r3, [r7, #36]	; 0x24
    volatile uint32_t r1  = fault_stack_address[1];
    16ba:	687b      	ldr	r3, [r7, #4]
    16bc:	685b      	ldr	r3, [r3, #4]
    16be:	623b      	str	r3, [r7, #32]
    volatile uint32_t r2  = fault_stack_address[2];
    16c0:	687b      	ldr	r3, [r7, #4]
    16c2:	689b      	ldr	r3, [r3, #8]
    16c4:	61fb      	str	r3, [r7, #28]
    volatile uint32_t r3  = fault_stack_address[3];
    16c6:	687b      	ldr	r3, [r7, #4]
    16c8:	68db      	ldr	r3, [r3, #12]
    16ca:	61bb      	str	r3, [r7, #24]
    volatile uint32_t r12 = fault_stack_address[4];
    16cc:	687b      	ldr	r3, [r7, #4]
    16ce:	691b      	ldr	r3, [r3, #16]
    16d0:	617b      	str	r3, [r7, #20]
    // Link register.
    volatile uint32_t lr = fault_stack_address[5];
    16d2:	687b      	ldr	r3, [r7, #4]
    16d4:	695b      	ldr	r3, [r3, #20]
    16d6:	613b      	str	r3, [r7, #16]
    // Program counter.
    volatile uint32_t pc = fault_stack_address[6];
    16d8:	687b      	ldr	r3, [r7, #4]
    16da:	699b      	ldr	r3, [r3, #24]
    16dc:	60fb      	str	r3, [r7, #12]
    // Program status register.
    volatile uint32_t psr = fault_stack_address[7];
    16de:	687b      	ldr	r3, [r7, #4]
    16e0:	69db      	ldr	r3, [r3, #28]
    16e2:	60bb      	str	r3, [r7, #8]

    printf(SJ2_BACKGROUND_RED
    16e4:	480d      	ldr	r0, [pc, #52]	; (171c <GetRegistersFromStack+0x70>)
    16e6:	f001 fa21 	bl	2b2c <printf>
           "Hard Fault Exception Occurred!\n" SJ2_COLOR_RESET);
    printf("r0: 0x%08" PRIX32 ", r1: 0x%08" PRIX32
    16ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
    16ec:	6a3a      	ldr	r2, [r7, #32]
    16ee:	69f8      	ldr	r0, [r7, #28]
    16f0:	69bb      	ldr	r3, [r7, #24]
    16f2:	9300      	str	r3, [sp, #0]
    16f4:	4603      	mov	r3, r0
    16f6:	480a      	ldr	r0, [pc, #40]	; (1720 <GetRegistersFromStack+0x74>)
    16f8:	f001 fa18 	bl	2b2c <printf>
           "r2: 0x%08" PRIX32 ", r3: 0x%08" PRIX32 "\n",
           r0,
           r1,
           r2,
           r3);
    printf("r12: 0x%08" PRIX32 ", lr: 0x%08" PRIX32
    16fc:	6979      	ldr	r1, [r7, #20]
    16fe:	693a      	ldr	r2, [r7, #16]
    1700:	68f8      	ldr	r0, [r7, #12]
    1702:	68bb      	ldr	r3, [r7, #8]
    1704:	9300      	str	r3, [sp, #0]
    1706:	4603      	mov	r3, r0
    1708:	4806      	ldr	r0, [pc, #24]	; (1724 <GetRegistersFromStack+0x78>)
    170a:	f001 fa0f 	bl	2b2c <printf>
           "pc: 0x%08" PRIX32 ", psr: 0x%08" PRIX32 "\n",
           r12,
           lr,
           pc,
           psr);
    sjsu::debug::PrintBacktrace(true, reinterpret_cast<void *>(pc));
    170e:	68fb      	ldr	r3, [r7, #12]
    1710:	4619      	mov	r1, r3
    1712:	2001      	movs	r0, #1
    1714:	f7ff feea 	bl	14ec <sjsu::debug::PrintBacktrace(bool, void*)>
    1718:	e7fe      	b.n	1718 <GetRegistersFromStack+0x6c>
    171a:	bf00      	nop
    171c:	00006a54 	.word	0x00006a54
    1720:	00006a80 	.word	0x00006a80
    1724:	00006ab4 	.word	0x00006ab4

00001728 <ArmHardFaultHandler>:
    // Use a JTAG debugger to inspect these variables
    sjsu::Halt();
  }

  void ArmHardFaultHandler(void)
  {
    1728:	b480      	push	{r7}
    172a:	af00      	add	r7, sp, #0
          " mrseq r0, msp                                       \n"
          " mrsne r0, psp                                       \n"
          " ldr r1, [r0, #24]                                   \n"
          " ldr r2, handler2_address_const                      \n"
          " bx r2                                               \n"
          " handler2_address_const: .word GetRegistersFromStack \n");
    172c:	f01e 0f04 	tst.w	lr, #4
    1730:	bf0c      	ite	eq
    1732:	f3ef 8008 	mrseq	r0, MSP
    1736:	f3ef 8009 	mrsne	r0, PSP
    173a:	6981      	ldr	r1, [r0, #24]
    173c:	4a00      	ldr	r2, [pc, #0]	; (1740 <handler2_address_const>)
    173e:	4710      	bx	r2

00001740 <handler2_address_const>:
    1740:	000016ad 	.word	0x000016ad
    }
  }
    1744:	bf00      	nop
    1746:	46bd      	mov	sp, r7
    1748:	f85d 7b04 	ldr.w	r7, [sp], #4
    174c:	4770      	bx	lr
    174e:	Address 0x000000000000174e is out of bounds.


00001750 <ArmResetHandler>:

  // Reset entry point for your code.
  // Sets up a simple runtime environment and initializes the C/C++ library.
  void ArmResetHandler()
  {
    1750:	b580      	push	{r7, lr}
    1752:	b084      	sub	sp, #16
    1754:	af00      	add	r7, sp, #0
    // script
    // The Hyperload bootloader takes up stack space to execute. The Hyperload
    // bootloader function launches this ISR manually, but it never returns thus
    // it never cleans up the memory it uses. To get that memory back, we have
    // to manually move the stack pointers back to the top of stack.
    const uint32_t kTopOfStack = reinterpret_cast<intptr_t>(&StackTop);
    1756:	4b10      	ldr	r3, [pc, #64]	; (1798 <ArmResetHandler+0x48>)
    1758:	60fb      	str	r3, [r7, #12]
    175a:	68fb      	ldr	r3, [r7, #12]
    175c:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM (volatile ("MSR psp, %0\n" : : "r" (topOfProcStack) : "sp"));
    175e:	683b      	ldr	r3, [r7, #0]
    1760:	f383 8809 	msr	PSP, r3
    1764:	68fb      	ldr	r3, [r7, #12]
    1766:	607b      	str	r3, [r7, #4]

    \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM (volatile ("MSR msp, %0\n" : : "r" (topOfMainStack) : "sp"));
    1768:	687b      	ldr	r3, [r7, #4]
    176a:	f383 8808 	msr	MSP, r3
    sjsu::cortex::__set_PSP(kTopOfStack);
    sjsu::cortex::__set_MSP(kTopOfStack);

    sjsu::SystemInitialize();
    176e:	f7ff ff93 	bl	1698 <sjsu::SystemInitialize()>
    sjsu::InitializePlatform();
    1772:	f002 fda7 	bl	42c4 <sjsu::InitializePlatform()>
// #pragma ignored "-Wpedantic" to suppress main function call warning
#pragma GCC diagnostic push ignored "-Wpedantic"
    int32_t result = main();
    1776:	f7ff fbf1 	bl	f5c <main>
    177a:	60b8      	str	r0, [r7, #8]
// Enforce the warning after this point
#pragma GCC diagnostic pop
    // main() shouldn't return, but if it does, we'll just enter an infinite
    // loop
    if (result >= 0)
    177c:	68bb      	ldr	r3, [r7, #8]
    177e:	2b00      	cmp	r3, #0
    1780:	db04      	blt.n	178c <ArmResetHandler+0x3c>
    {
      printf("\n" SJ2_BOLD_WHITE SJ2_BACKGROUND_GREEN
    1782:	68b9      	ldr	r1, [r7, #8]
    1784:	4805      	ldr	r0, [pc, #20]	; (179c <ArmResetHandler+0x4c>)
    1786:	f001 f9d1 	bl	2b2c <printf>
    178a:	e003      	b.n	1794 <ArmResetHandler+0x44>
             "Program Returned Exit Code: %" PRId32 "\n" SJ2_COLOR_RESET,
             result);
    }
    else
    {
      printf("\n" SJ2_BOLD_WHITE SJ2_BACKGROUND_RED
    178c:	68b9      	ldr	r1, [r7, #8]
    178e:	4804      	ldr	r0, [pc, #16]	; (17a0 <ArmResetHandler+0x50>)
    1790:	f001 f9cc 	bl	2b2c <printf>
    1794:	e7fe      	b.n	1794 <ArmResetHandler+0x44>
    1796:	bf00      	nop
    1798:	10010000 	.word	0x10010000
    179c:	00006aec 	.word	0x00006aec
    17a0:	00006b20 	.word	0x00006b20

000017a4 <__static_initialization_and_destruction_0(int, int)>:
             result);
    }
    sjsu::Halt();
  }

}  // extern "C"
    17a4:	b580      	push	{r7, lr}
    17a6:	b082      	sub	sp, #8
    17a8:	af00      	add	r7, sp, #0
    17aa:	6078      	str	r0, [r7, #4]
    17ac:	6039      	str	r1, [r7, #0]
    17ae:	687b      	ldr	r3, [r7, #4]
    17b0:	2b01      	cmp	r3, #1
    17b2:	d111      	bne.n	17d8 <__static_initialization_and_destruction_0(int, int)+0x34>
    17b4:	683b      	ldr	r3, [r7, #0]
    17b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    17ba:	4293      	cmp	r3, r2
    17bc:	d10c      	bne.n	17d8 <__static_initialization_and_destruction_0(int, int)+0x34>
    17be:	4b08      	ldr	r3, [pc, #32]	; (17e0 <__static_initialization_and_destruction_0(int, int)+0x3c>)
    17c0:	681b      	ldr	r3, [r3, #0]
    17c2:	f003 0301 	and.w	r3, r3, #1
    17c6:	2b00      	cmp	r3, #0
    17c8:	d106      	bne.n	17d8 <__static_initialization_and_destruction_0(int, int)+0x34>
    17ca:	4b05      	ldr	r3, [pc, #20]	; (17e0 <__static_initialization_and_destruction_0(int, int)+0x3c>)
    17cc:	2201      	movs	r2, #1
    17ce:	601a      	str	r2, [r3, #0]
    17d0:	4b04      	ldr	r3, [pc, #16]	; (17e4 <__static_initialization_and_destruction_0(int, int)+0x40>)
    17d2:	4618      	mov	r0, r3
    17d4:	f7fe ff50 	bl	678 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>
    17d8:	bf00      	nop
    17da:	3708      	adds	r7, #8
    17dc:	46bd      	mov	sp, r7
    17de:	bd80      	pop	{r7, pc}
    17e0:	10000338 	.word	0x10000338
    17e4:	100000f0 	.word	0x100000f0

000017e8 <_GLOBAL__sub_I_GetRegistersFromStack>:
    17e8:	b580      	push	{r7, lr}
    17ea:	af00      	add	r7, sp, #0
    17ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
    17f0:	2001      	movs	r0, #1
    17f2:	f7ff ffd7 	bl	17a4 <__static_initialization_and_destruction_0(int, int)>
    17f6:	bd80      	pop	{r7, pc}

000017f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
    17f8:	b580      	push	{r7, lr}
    17fa:	b084      	sub	sp, #16
    17fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
    17fe:	4b28      	ldr	r3, [pc, #160]	; (18a0 <vTaskSwitchContext+0xa8>)
    1800:	681b      	ldr	r3, [r3, #0]
    1802:	2b00      	cmp	r3, #0
    1804:	d003      	beq.n	180e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
    1806:	4b27      	ldr	r3, [pc, #156]	; (18a4 <vTaskSwitchContext+0xac>)
    1808:	2201      	movs	r2, #1
    180a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
    180c:	e043      	b.n	1896 <vTaskSwitchContext+0x9e>
		xYieldPending = pdFALSE;
    180e:	4b25      	ldr	r3, [pc, #148]	; (18a4 <vTaskSwitchContext+0xac>)
    1810:	2200      	movs	r2, #0
    1812:	601a      	str	r2, [r3, #0]
					ulTotalRunTime = portGET_RUN_TIME_COUNTER_VALUE();
    1814:	f002 fd4c 	bl	42b0 <ThreadRuntimeCounter>
    1818:	4602      	mov	r2, r0
    181a:	4b23      	ldr	r3, [pc, #140]	; (18a8 <vTaskSwitchContext+0xb0>)
    181c:	601a      	str	r2, [r3, #0]
				if( ulTotalRunTime > ulTaskSwitchedInTime )
    181e:	4b22      	ldr	r3, [pc, #136]	; (18a8 <vTaskSwitchContext+0xb0>)
    1820:	681a      	ldr	r2, [r3, #0]
    1822:	4b22      	ldr	r3, [pc, #136]	; (18ac <vTaskSwitchContext+0xb4>)
    1824:	681b      	ldr	r3, [r3, #0]
    1826:	429a      	cmp	r2, r3
    1828:	d909      	bls.n	183e <vTaskSwitchContext+0x46>
					pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime - ulTaskSwitchedInTime );
    182a:	4b21      	ldr	r3, [pc, #132]	; (18b0 <vTaskSwitchContext+0xb8>)
    182c:	681b      	ldr	r3, [r3, #0]
    182e:	6d59      	ldr	r1, [r3, #84]	; 0x54
    1830:	4a1d      	ldr	r2, [pc, #116]	; (18a8 <vTaskSwitchContext+0xb0>)
    1832:	6810      	ldr	r0, [r2, #0]
    1834:	4a1d      	ldr	r2, [pc, #116]	; (18ac <vTaskSwitchContext+0xb4>)
    1836:	6812      	ldr	r2, [r2, #0]
    1838:	1a82      	subs	r2, r0, r2
    183a:	440a      	add	r2, r1
    183c:	655a      	str	r2, [r3, #84]	; 0x54
				ulTaskSwitchedInTime = ulTotalRunTime;
    183e:	4b1a      	ldr	r3, [pc, #104]	; (18a8 <vTaskSwitchContext+0xb0>)
    1840:	681b      	ldr	r3, [r3, #0]
    1842:	4a1a      	ldr	r2, [pc, #104]	; (18ac <vTaskSwitchContext+0xb4>)
    1844:	6013      	str	r3, [r2, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
    1846:	4b1b      	ldr	r3, [pc, #108]	; (18b4 <vTaskSwitchContext+0xbc>)
    1848:	681b      	ldr	r3, [r3, #0]
    184a:	607b      	str	r3, [r7, #4]
	/* Generic helper function. */
	__attribute__( ( always_inline ) ) static inline uint8_t ucPortCountLeadingZeros( uint32_t ulBitmap )
	{
	uint8_t ucReturn;

		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
    184c:	687b      	ldr	r3, [r7, #4]
    184e:	fab3 f383 	clz	r3, r3
    1852:	70fb      	strb	r3, [r7, #3]
		return ucReturn;
    1854:	78fb      	ldrb	r3, [r7, #3]
    1856:	f1c3 031f 	rsb	r3, r3, #31
    185a:	60fb      	str	r3, [r7, #12]
    185c:	68fa      	ldr	r2, [r7, #12]
    185e:	4613      	mov	r3, r2
    1860:	009b      	lsls	r3, r3, #2
    1862:	4413      	add	r3, r2
    1864:	009b      	lsls	r3, r3, #2
    1866:	4a14      	ldr	r2, [pc, #80]	; (18b8 <vTaskSwitchContext+0xc0>)
    1868:	4413      	add	r3, r2
    186a:	60bb      	str	r3, [r7, #8]
    186c:	68bb      	ldr	r3, [r7, #8]
    186e:	685b      	ldr	r3, [r3, #4]
    1870:	685a      	ldr	r2, [r3, #4]
    1872:	68bb      	ldr	r3, [r7, #8]
    1874:	605a      	str	r2, [r3, #4]
    1876:	68bb      	ldr	r3, [r7, #8]
    1878:	685a      	ldr	r2, [r3, #4]
    187a:	68bb      	ldr	r3, [r7, #8]
    187c:	3308      	adds	r3, #8
    187e:	429a      	cmp	r2, r3
    1880:	d104      	bne.n	188c <vTaskSwitchContext+0x94>
    1882:	68bb      	ldr	r3, [r7, #8]
    1884:	685b      	ldr	r3, [r3, #4]
    1886:	685a      	ldr	r2, [r3, #4]
    1888:	68bb      	ldr	r3, [r7, #8]
    188a:	605a      	str	r2, [r3, #4]
    188c:	68bb      	ldr	r3, [r7, #8]
    188e:	685b      	ldr	r3, [r3, #4]
    1890:	68db      	ldr	r3, [r3, #12]
    1892:	4a07      	ldr	r2, [pc, #28]	; (18b0 <vTaskSwitchContext+0xb8>)
    1894:	6013      	str	r3, [r2, #0]
}
    1896:	bf00      	nop
    1898:	3710      	adds	r7, #16
    189a:	46bd      	mov	sp, r7
    189c:	bd80      	pop	{r7, pc}
    189e:	bf00      	nop
    18a0:	100003b8 	.word	0x100003b8
    18a4:	100003b4 	.word	0x100003b4
    18a8:	100003c0 	.word	0x100003c0
    18ac:	100003bc 	.word	0x100003bc
    18b0:	10000348 	.word	0x10000348
    18b4:	100003b0 	.word	0x100003b0
    18b8:	1000034c 	.word	0x1000034c

000018bc <_exit>:
  }
  // Dummy implementation of exit with return code placed into
  // Arm register r3
  // NOLINTNEXTLINE(readability-identifier-naming)
  void _exit([[maybe_unused]] int rc)
  {
    18bc:	b480      	push	{r7}
    18be:	b083      	sub	sp, #12
    18c0:	af00      	add	r7, sp, #0
    18c2:	6078      	str	r0, [r7, #4]
    while (1)
    {
      continue;
    18c4:	bf00      	nop
    while (1)
    18c6:	e7fd      	b.n	18c4 <_exit+0x8>

000018c8 <_getpid>:
    }
  }
  // Dummy implementation of getpid
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _getpid()
  {
    18c8:	b480      	push	{r7}
    18ca:	af00      	add	r7, sp, #0
    return 1;
    18cc:	2301      	movs	r3, #1
  }
    18ce:	4618      	mov	r0, r3
    18d0:	46bd      	mov	sp, r7
    18d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    18d6:	4770      	bx	lr

000018d8 <_kill>:
  // Dummy implementation of kill
  // NOLINTNEXTLINE(readability-identifier-naming)
  int _kill(int, int)
  {
    18d8:	b480      	push	{r7}
    18da:	b083      	sub	sp, #12
    18dc:	af00      	add	r7, sp, #0
    18de:	6078      	str	r0, [r7, #4]
    18e0:	6039      	str	r1, [r7, #0]
    return -1;
    18e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
    18e6:	4618      	mov	r0, r3
    18e8:	370c      	adds	r7, #12
    18ea:	46bd      	mov	sp, r7
    18ec:	f85d 7b04 	ldr.w	r7, [sp], #4
    18f0:	4770      	bx	lr
    18f2:	Address 0x00000000000018f2 is out of bounds.


000018f4 <puts>:
  }

  // Overload default libnano puts() with a more optimal version that does
  // not use dynamic memory
  int puts(const char * str)  // NOLINT
  {
    18f4:	b580      	push	{r7, lr}
    18f6:	b084      	sub	sp, #16
    18f8:	af00      	add	r7, sp, #0
    18fa:	6078      	str	r0, [r7, #4]
    size_t string_length = strlen(str);
    18fc:	6878      	ldr	r0, [r7, #4]
    18fe:	f004 fafb 	bl	5ef8 <strlen>
    1902:	60f8      	str	r0, [r7, #12]
    int result           = 0;
    1904:	2300      	movs	r3, #0
    1906:	60bb      	str	r3, [r7, #8]
    result += sjsu::newlib::out(str, string_length);
    1908:	4b0b      	ldr	r3, [pc, #44]	; (1938 <puts+0x44>)
    190a:	681b      	ldr	r3, [r3, #0]
    190c:	68f9      	ldr	r1, [r7, #12]
    190e:	6878      	ldr	r0, [r7, #4]
    1910:	4798      	blx	r3
    1912:	4602      	mov	r2, r0
    1914:	68bb      	ldr	r3, [r7, #8]
    1916:	4413      	add	r3, r2
    1918:	60bb      	str	r3, [r7, #8]
    result += sjsu::newlib::out("\n", 1);
    191a:	4b07      	ldr	r3, [pc, #28]	; (1938 <puts+0x44>)
    191c:	681b      	ldr	r3, [r3, #0]
    191e:	2101      	movs	r1, #1
    1920:	4806      	ldr	r0, [pc, #24]	; (193c <puts+0x48>)
    1922:	4798      	blx	r3
    1924:	4602      	mov	r2, r0
    1926:	68bb      	ldr	r3, [r7, #8]
    1928:	4413      	add	r3, r2
    192a:	60bb      	str	r3, [r7, #8]
    // + 1 because puts adds an additional newline '\n' character.
    return result;
    192c:	68bb      	ldr	r3, [r7, #8]
  }
    192e:	4618      	mov	r0, r3
    1930:	3710      	adds	r7, #16
    1932:	46bd      	mov	sp, r7
    1934:	bd80      	pop	{r7, pc}
    1936:	bf00      	nop
    1938:	10000004 	.word	0x10000004
    193c:	00006b54 	.word	0x00006b54

00001940 <_out_null(char, void*, unsigned int, unsigned int)>:
}


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
    1940:	b480      	push	{r7}
    1942:	b085      	sub	sp, #20
    1944:	af00      	add	r7, sp, #0
    1946:	60b9      	str	r1, [r7, #8]
    1948:	607a      	str	r2, [r7, #4]
    194a:	603b      	str	r3, [r7, #0]
    194c:	4603      	mov	r3, r0
    194e:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
    1950:	bf00      	nop
    1952:	3714      	adds	r7, #20
    1954:	46bd      	mov	sp, r7
    1956:	f85d 7b04 	ldr.w	r7, [sp], #4
    195a:	4770      	bx	lr

0000195c <_out_char(char, void*, unsigned int, unsigned int)>:


// internal _putchar wrapper
static inline void _out_char(char character, void* buffer, size_t idx, size_t maxlen)
{
    195c:	b580      	push	{r7, lr}
    195e:	b084      	sub	sp, #16
    1960:	af00      	add	r7, sp, #0
    1962:	60b9      	str	r1, [r7, #8]
    1964:	607a      	str	r2, [r7, #4]
    1966:	603b      	str	r3, [r7, #0]
    1968:	4603      	mov	r3, r0
    196a:	73fb      	strb	r3, [r7, #15]
  (void)buffer; (void)idx; (void)maxlen;
  if (character) {
    196c:	7bfb      	ldrb	r3, [r7, #15]
    196e:	2b00      	cmp	r3, #0
    1970:	d003      	beq.n	197a <_out_char(char, void*, unsigned int, unsigned int)+0x1e>
    _putchar(character);
    1972:	7bfb      	ldrb	r3, [r7, #15]
    1974:	4618      	mov	r0, r3
    1976:	f002 ffaf 	bl	48d8 <_putchar>
  }
}
    197a:	bf00      	nop
    197c:	3710      	adds	r7, #16
    197e:	46bd      	mov	sp, r7
    1980:	bd80      	pop	{r7, pc}

00001982 <_strlen(char const*)>:


// internal strlen
// \return The length of the string (excluding the terminating 0)
static inline unsigned int _strlen(const char* str)
{
    1982:	b480      	push	{r7}
    1984:	b085      	sub	sp, #20
    1986:	af00      	add	r7, sp, #0
    1988:	6078      	str	r0, [r7, #4]
  const char* s;
  for (s = str; *s; ++s);
    198a:	687b      	ldr	r3, [r7, #4]
    198c:	60fb      	str	r3, [r7, #12]
    198e:	68fb      	ldr	r3, [r7, #12]
    1990:	781b      	ldrb	r3, [r3, #0]
    1992:	2b00      	cmp	r3, #0
    1994:	d003      	beq.n	199e <_strlen(char const*)+0x1c>
    1996:	68fb      	ldr	r3, [r7, #12]
    1998:	3301      	adds	r3, #1
    199a:	60fb      	str	r3, [r7, #12]
    199c:	e7f7      	b.n	198e <_strlen(char const*)+0xc>
  return (unsigned int)(s - str);
    199e:	68fa      	ldr	r2, [r7, #12]
    19a0:	687b      	ldr	r3, [r7, #4]
    19a2:	1ad3      	subs	r3, r2, r3
}
    19a4:	4618      	mov	r0, r3
    19a6:	3714      	adds	r7, #20
    19a8:	46bd      	mov	sp, r7
    19aa:	f85d 7b04 	ldr.w	r7, [sp], #4
    19ae:	4770      	bx	lr

000019b0 <_is_digit(char)>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
    19b0:	b480      	push	{r7}
    19b2:	b083      	sub	sp, #12
    19b4:	af00      	add	r7, sp, #0
    19b6:	4603      	mov	r3, r0
    19b8:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
    19ba:	79fb      	ldrb	r3, [r7, #7]
    19bc:	2b2f      	cmp	r3, #47	; 0x2f
    19be:	d904      	bls.n	19ca <_is_digit(char)+0x1a>
    19c0:	79fb      	ldrb	r3, [r7, #7]
    19c2:	2b39      	cmp	r3, #57	; 0x39
    19c4:	d801      	bhi.n	19ca <_is_digit(char)+0x1a>
    19c6:	2301      	movs	r3, #1
    19c8:	e000      	b.n	19cc <_is_digit(char)+0x1c>
    19ca:	2300      	movs	r3, #0
}
    19cc:	4618      	mov	r0, r3
    19ce:	370c      	adds	r7, #12
    19d0:	46bd      	mov	sp, r7
    19d2:	f85d 7b04 	ldr.w	r7, [sp], #4
    19d6:	4770      	bx	lr

000019d8 <_atoi(char const**)>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
    19d8:	b580      	push	{r7, lr}
    19da:	b084      	sub	sp, #16
    19dc:	af00      	add	r7, sp, #0
    19de:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
    19e0:	2300      	movs	r3, #0
    19e2:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
    19e4:	687b      	ldr	r3, [r7, #4]
    19e6:	681b      	ldr	r3, [r3, #0]
    19e8:	781b      	ldrb	r3, [r3, #0]
    19ea:	4618      	mov	r0, r3
    19ec:	f7ff ffe0 	bl	19b0 <_is_digit(char)>
    19f0:	4603      	mov	r3, r0
    19f2:	2b00      	cmp	r3, #0
    19f4:	d00f      	beq.n	1a16 <_atoi(char const**)+0x3e>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    19f6:	68fa      	ldr	r2, [r7, #12]
    19f8:	4613      	mov	r3, r2
    19fa:	009b      	lsls	r3, r3, #2
    19fc:	4413      	add	r3, r2
    19fe:	005b      	lsls	r3, r3, #1
    1a00:	4618      	mov	r0, r3
    1a02:	687b      	ldr	r3, [r7, #4]
    1a04:	681b      	ldr	r3, [r3, #0]
    1a06:	1c59      	adds	r1, r3, #1
    1a08:	687a      	ldr	r2, [r7, #4]
    1a0a:	6011      	str	r1, [r2, #0]
    1a0c:	781b      	ldrb	r3, [r3, #0]
    1a0e:	4403      	add	r3, r0
    1a10:	3b30      	subs	r3, #48	; 0x30
    1a12:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
    1a14:	e7e6      	b.n	19e4 <_atoi(char const**)+0xc>
  }
  return i;
    1a16:	68fb      	ldr	r3, [r7, #12]
}
    1a18:	4618      	mov	r0, r3
    1a1a:	3710      	adds	r7, #16
    1a1c:	46bd      	mov	sp, r7
    1a1e:	bd80      	pop	{r7, pc}

00001a20 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
    1a20:	b590      	push	{r4, r7, lr}
    1a22:	b089      	sub	sp, #36	; 0x24
    1a24:	af00      	add	r7, sp, #0
    1a26:	60f8      	str	r0, [r7, #12]
    1a28:	60b9      	str	r1, [r7, #8]
    1a2a:	607a      	str	r2, [r7, #4]
    1a2c:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
    1a2e:	687b      	ldr	r3, [r7, #4]
    1a30:	617b      	str	r3, [r7, #20]

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    1a32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1a34:	f003 0302 	and.w	r3, r3, #2
    1a38:	2b00      	cmp	r3, #0
    1a3a:	d10e      	bne.n	1a5a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    1a3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    1a3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1a40:	429a      	cmp	r2, r3
    1a42:	d20a      	bcs.n	1a5a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    1a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1a46:	2b1f      	cmp	r3, #31
    1a48:	d807      	bhi.n	1a5a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
    buf[len++] = '0';
    1a4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1a4c:	1c5a      	adds	r2, r3, #1
    1a4e:	637a      	str	r2, [r7, #52]	; 0x34
    1a50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1a52:	4413      	add	r3, r2
    1a54:	2230      	movs	r2, #48	; 0x30
    1a56:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    1a58:	e7eb      	b.n	1a32 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x12>
  }
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    1a5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1a5c:	f003 0302 	and.w	r3, r3, #2
    1a60:	2b00      	cmp	r3, #0
    1a62:	d113      	bne.n	1a8c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    1a64:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1a66:	f003 0301 	and.w	r3, r3, #1
    1a6a:	2b00      	cmp	r3, #0
    1a6c:	d00e      	beq.n	1a8c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    1a6e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    1a70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1a72:	429a      	cmp	r2, r3
    1a74:	d20a      	bcs.n	1a8c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    1a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1a78:	2b1f      	cmp	r3, #31
    1a7a:	d807      	bhi.n	1a8c <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x6c>
    buf[len++] = '0';
    1a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1a7e:	1c5a      	adds	r2, r3, #1
    1a80:	637a      	str	r2, [r7, #52]	; 0x34
    1a82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1a84:	4413      	add	r3, r2
    1a86:	2230      	movs	r2, #48	; 0x30
    1a88:	701a      	strb	r2, [r3, #0]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    1a8a:	e7e6      	b.n	1a5a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x3a>
  }

  // handle hash
  if (flags & FLAGS_HASH) {
    1a8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1a8e:	f003 0310 	and.w	r3, r3, #16
    1a92:	2b00      	cmp	r3, #0
    1a94:	d058      	beq.n	1b48 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x128>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    1a96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    1a9c:	2b00      	cmp	r3, #0
    1a9e:	d116      	bne.n	1ace <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    1aa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1aa2:	2b00      	cmp	r3, #0
    1aa4:	d013      	beq.n	1ace <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    1aa6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    1aa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1aaa:	429a      	cmp	r2, r3
    1aac:	d003      	beq.n	1ab6 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x96>
    1aae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    1ab0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1ab2:	429a      	cmp	r2, r3
    1ab4:	d10b      	bne.n	1ace <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
      len--;
    1ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1ab8:	3b01      	subs	r3, #1
    1aba:	637b      	str	r3, [r7, #52]	; 0x34
      if (len && (base == 16U)) {
    1abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1abe:	2b00      	cmp	r3, #0
    1ac0:	d005      	beq.n	1ace <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
    1ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1ac4:	2b10      	cmp	r3, #16
    1ac6:	d102      	bne.n	1ace <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xae>
        len--;
    1ac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1aca:	3b01      	subs	r3, #1
    1acc:	637b      	str	r3, [r7, #52]	; 0x34
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    1ace:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1ad0:	2b10      	cmp	r3, #16
    1ad2:	d10f      	bne.n	1af4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
    1ad4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1ad6:	f003 0320 	and.w	r3, r3, #32
    1ada:	2b00      	cmp	r3, #0
    1adc:	d10a      	bne.n	1af4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
    1ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1ae0:	2b1f      	cmp	r3, #31
    1ae2:	d807      	bhi.n	1af4 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xd4>
      buf[len++] = 'x';
    1ae4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1ae6:	1c5a      	adds	r2, r3, #1
    1ae8:	637a      	str	r2, [r7, #52]	; 0x34
    1aea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1aec:	4413      	add	r3, r2
    1aee:	2278      	movs	r2, #120	; 0x78
    1af0:	701a      	strb	r2, [r3, #0]
    1af2:	e01f      	b.n	1b34 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    1af4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1af6:	2b10      	cmp	r3, #16
    1af8:	d10f      	bne.n	1b1a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
    1afa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1afc:	f003 0320 	and.w	r3, r3, #32
    1b00:	2b00      	cmp	r3, #0
    1b02:	d00a      	beq.n	1b1a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
    1b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1b06:	2b1f      	cmp	r3, #31
    1b08:	d807      	bhi.n	1b1a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0xfa>
      buf[len++] = 'X';
    1b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1b0c:	1c5a      	adds	r2, r3, #1
    1b0e:	637a      	str	r2, [r7, #52]	; 0x34
    1b10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1b12:	4413      	add	r3, r2
    1b14:	2258      	movs	r2, #88	; 0x58
    1b16:	701a      	strb	r2, [r3, #0]
    1b18:	e00c      	b.n	1b34 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    1b1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    1b1c:	2b02      	cmp	r3, #2
    1b1e:	d109      	bne.n	1b34 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
    1b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1b22:	2b1f      	cmp	r3, #31
    1b24:	d806      	bhi.n	1b34 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x114>
      buf[len++] = 'b';
    1b26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1b28:	1c5a      	adds	r2, r3, #1
    1b2a:	637a      	str	r2, [r7, #52]	; 0x34
    1b2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1b2e:	4413      	add	r3, r2
    1b30:	2262      	movs	r2, #98	; 0x62
    1b32:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    1b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1b36:	2b1f      	cmp	r3, #31
    1b38:	d806      	bhi.n	1b48 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x128>
      buf[len++] = '0';
    1b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1b3c:	1c5a      	adds	r2, r3, #1
    1b3e:	637a      	str	r2, [r7, #52]	; 0x34
    1b40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1b42:	4413      	add	r3, r2
    1b44:	2230      	movs	r2, #48	; 0x30
    1b46:	701a      	strb	r2, [r3, #0]
    }
  }

  // handle sign
  if (len && (len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
    1b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1b4a:	2b00      	cmp	r3, #0
    1b4c:	d014      	beq.n	1b78 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    1b4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    1b50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1b52:	429a      	cmp	r2, r3
    1b54:	d110      	bne.n	1b78 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    1b56:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    1b5a:	2b00      	cmp	r3, #0
    1b5c:	d109      	bne.n	1b72 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x152>
    1b5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1b60:	f003 0304 	and.w	r3, r3, #4
    1b64:	2b00      	cmp	r3, #0
    1b66:	d104      	bne.n	1b72 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x152>
    1b68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1b6a:	f003 0308 	and.w	r3, r3, #8
    1b6e:	2b00      	cmp	r3, #0
    1b70:	d002      	beq.n	1b78 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x158>
    len--;
    1b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1b74:	3b01      	subs	r3, #1
    1b76:	637b      	str	r3, [r7, #52]	; 0x34
  }
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
    1b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1b7a:	2b1f      	cmp	r3, #31
    1b7c:	d824      	bhi.n	1bc8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    if (negative) {
    1b7e:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
    1b82:	2b00      	cmp	r3, #0
    1b84:	d007      	beq.n	1b96 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x176>
      buf[len++] = '-';
    1b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1b88:	1c5a      	adds	r2, r3, #1
    1b8a:	637a      	str	r2, [r7, #52]	; 0x34
    1b8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1b8e:	4413      	add	r3, r2
    1b90:	222d      	movs	r2, #45	; 0x2d
    1b92:	701a      	strb	r2, [r3, #0]
    1b94:	e018      	b.n	1bc8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    }
    else if (flags & FLAGS_PLUS) {
    1b96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1b98:	f003 0304 	and.w	r3, r3, #4
    1b9c:	2b00      	cmp	r3, #0
    1b9e:	d007      	beq.n	1bb0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x190>
      buf[len++] = '+';  // ignore the space if the '+' exists
    1ba0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1ba2:	1c5a      	adds	r2, r3, #1
    1ba4:	637a      	str	r2, [r7, #52]	; 0x34
    1ba6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1ba8:	4413      	add	r3, r2
    1baa:	222b      	movs	r2, #43	; 0x2b
    1bac:	701a      	strb	r2, [r3, #0]
    1bae:	e00b      	b.n	1bc8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
    }
    else if (flags & FLAGS_SPACE) {
    1bb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1bb2:	f003 0308 	and.w	r3, r3, #8
    1bb6:	2b00      	cmp	r3, #0
    1bb8:	d006      	beq.n	1bc8 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1a8>
      buf[len++] = ' ';
    1bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1bbc:	1c5a      	adds	r2, r3, #1
    1bbe:	637a      	str	r2, [r7, #52]	; 0x34
    1bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1bc2:	4413      	add	r3, r2
    1bc4:	2220      	movs	r2, #32
    1bc6:	701a      	strb	r2, [r3, #0]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    1bc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1bca:	f003 0302 	and.w	r3, r3, #2
    1bce:	2b00      	cmp	r3, #0
    1bd0:	d116      	bne.n	1c00 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
    1bd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1bd4:	f003 0301 	and.w	r3, r3, #1
    1bd8:	2b00      	cmp	r3, #0
    1bda:	d111      	bne.n	1c00 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
    for (size_t i = len; i < width; i++) {
    1bdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1bde:	61fb      	str	r3, [r7, #28]
    1be0:	69fa      	ldr	r2, [r7, #28]
    1be2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    1be4:	429a      	cmp	r2, r3
    1be6:	d20b      	bcs.n	1c00 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e0>
      out(' ', buffer, idx++, maxlen);
    1be8:	687a      	ldr	r2, [r7, #4]
    1bea:	1c53      	adds	r3, r2, #1
    1bec:	607b      	str	r3, [r7, #4]
    1bee:	68fc      	ldr	r4, [r7, #12]
    1bf0:	683b      	ldr	r3, [r7, #0]
    1bf2:	68b9      	ldr	r1, [r7, #8]
    1bf4:	2020      	movs	r0, #32
    1bf6:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
    1bf8:	69fb      	ldr	r3, [r7, #28]
    1bfa:	3301      	adds	r3, #1
    1bfc:	61fb      	str	r3, [r7, #28]
    1bfe:	e7ef      	b.n	1be0 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1c0>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
    1c00:	2300      	movs	r3, #0
    1c02:	61bb      	str	r3, [r7, #24]
    1c04:	69ba      	ldr	r2, [r7, #24]
    1c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1c08:	429a      	cmp	r2, r3
    1c0a:	d211      	bcs.n	1c30 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x210>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
    1c0c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    1c0e:	69bb      	ldr	r3, [r7, #24]
    1c10:	1ad3      	subs	r3, r2, r3
    1c12:	3b01      	subs	r3, #1
    1c14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    1c16:	4413      	add	r3, r2
    1c18:	7818      	ldrb	r0, [r3, #0]
    1c1a:	687a      	ldr	r2, [r7, #4]
    1c1c:	1c53      	adds	r3, r2, #1
    1c1e:	607b      	str	r3, [r7, #4]
    1c20:	68fc      	ldr	r4, [r7, #12]
    1c22:	683b      	ldr	r3, [r7, #0]
    1c24:	68b9      	ldr	r1, [r7, #8]
    1c26:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
    1c28:	69bb      	ldr	r3, [r7, #24]
    1c2a:	3301      	adds	r3, #1
    1c2c:	61bb      	str	r3, [r7, #24]
    1c2e:	e7e9      	b.n	1c04 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x1e4>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
    1c30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1c32:	f003 0302 	and.w	r3, r3, #2
    1c36:	2b00      	cmp	r3, #0
    1c38:	d00e      	beq.n	1c58 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x238>
    while (idx - start_idx < width) {
    1c3a:	687a      	ldr	r2, [r7, #4]
    1c3c:	697b      	ldr	r3, [r7, #20]
    1c3e:	1ad3      	subs	r3, r2, r3
    1c40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    1c42:	429a      	cmp	r2, r3
    1c44:	d908      	bls.n	1c58 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x238>
      out(' ', buffer, idx++, maxlen);
    1c46:	687a      	ldr	r2, [r7, #4]
    1c48:	1c53      	adds	r3, r2, #1
    1c4a:	607b      	str	r3, [r7, #4]
    1c4c:	68fc      	ldr	r4, [r7, #12]
    1c4e:	683b      	ldr	r3, [r7, #0]
    1c50:	68b9      	ldr	r1, [r7, #8]
    1c52:	2020      	movs	r0, #32
    1c54:	47a0      	blx	r4
    while (idx - start_idx < width) {
    1c56:	e7f0      	b.n	1c3a <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)+0x21a>
    }
  }

  return idx;
    1c58:	687b      	ldr	r3, [r7, #4]
}
    1c5a:	4618      	mov	r0, r3
    1c5c:	3724      	adds	r7, #36	; 0x24
    1c5e:	46bd      	mov	sp, r7
    1c60:	bd90      	pop	{r4, r7, pc}

00001c62 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    1c62:	b580      	push	{r7, lr}
    1c64:	b096      	sub	sp, #88	; 0x58
    1c66:	af08      	add	r7, sp, #32
    1c68:	60f8      	str	r0, [r7, #12]
    1c6a:	60b9      	str	r1, [r7, #8]
    1c6c:	607a      	str	r2, [r7, #4]
    1c6e:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
    1c70:	2300      	movs	r3, #0
    1c72:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
    1c74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1c76:	2b00      	cmp	r3, #0
    1c78:	d103      	bne.n	1c82 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x20>
    flags &= ~FLAGS_HASH;
    1c7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1c7c:	f023 0310 	bic.w	r3, r3, #16
    1c80:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    1c82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    1c88:	2b00      	cmp	r3, #0
    1c8a:	d002      	beq.n	1c92 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x30>
    1c8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1c8e:	2b00      	cmp	r3, #0
    1c90:	d034      	beq.n	1cfc <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    do {
      const char digit = (char)(value % base);
    1c92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1c94:	6cba      	ldr	r2, [r7, #72]	; 0x48
    1c96:	fbb3 f2f2 	udiv	r2, r3, r2
    1c9a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
    1c9c:	fb01 f202 	mul.w	r2, r1, r2
    1ca0:	1a9b      	subs	r3, r3, r2
    1ca2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    1ca6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    1caa:	2b09      	cmp	r3, #9
    1cac:	d804      	bhi.n	1cb8 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x56>
    1cae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    1cb2:	3330      	adds	r3, #48	; 0x30
    1cb4:	b2da      	uxtb	r2, r3
    1cb6:	e00d      	b.n	1cd4 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x72>
    1cb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1cba:	f003 0320 	and.w	r3, r3, #32
    1cbe:	2b00      	cmp	r3, #0
    1cc0:	d001      	beq.n	1cc6 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x64>
    1cc2:	2241      	movs	r2, #65	; 0x41
    1cc4:	e000      	b.n	1cc8 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x66>
    1cc6:	2261      	movs	r2, #97	; 0x61
    1cc8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    1ccc:	4413      	add	r3, r2
    1cce:	b2db      	uxtb	r3, r3
    1cd0:	3b0a      	subs	r3, #10
    1cd2:	b2da      	uxtb	r2, r3
    1cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1cd6:	1c59      	adds	r1, r3, #1
    1cd8:	6379      	str	r1, [r7, #52]	; 0x34
    1cda:	f107 0138 	add.w	r1, r7, #56	; 0x38
    1cde:	440b      	add	r3, r1
    1ce0:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
    1ce4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    1ce6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1ce8:	fbb2 f3f3 	udiv	r3, r2, r3
    1cec:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    1cee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    1cf0:	2b00      	cmp	r3, #0
    1cf2:	d003      	beq.n	1cfc <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    1cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1cf6:	2b1f      	cmp	r3, #31
    1cf8:	d800      	bhi.n	1cfc <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x9a>
    do {
    1cfa:	e7ca      	b.n	1c92 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    1cfc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1cfe:	9306      	str	r3, [sp, #24]
    1d00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    1d02:	9305      	str	r3, [sp, #20]
    1d04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    1d06:	9304      	str	r3, [sp, #16]
    1d08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    1d0a:	9303      	str	r3, [sp, #12]
    1d0c:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
    1d10:	9302      	str	r3, [sp, #8]
    1d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1d14:	9301      	str	r3, [sp, #4]
    1d16:	f107 0310 	add.w	r3, r7, #16
    1d1a:	9300      	str	r3, [sp, #0]
    1d1c:	683b      	ldr	r3, [r7, #0]
    1d1e:	687a      	ldr	r2, [r7, #4]
    1d20:	68b9      	ldr	r1, [r7, #8]
    1d22:	68f8      	ldr	r0, [r7, #12]
    1d24:	f7ff fe7c 	bl	1a20 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
    1d28:	4603      	mov	r3, r0
}
    1d2a:	4618      	mov	r0, r3
    1d2c:	3738      	adds	r7, #56	; 0x38
    1d2e:	46bd      	mov	sp, r7
    1d30:	bd80      	pop	{r7, pc}

00001d32 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    1d32:	b590      	push	{r4, r7, lr}
    1d34:	b097      	sub	sp, #92	; 0x5c
    1d36:	af08      	add	r7, sp, #32
    1d38:	60f8      	str	r0, [r7, #12]
    1d3a:	60b9      	str	r1, [r7, #8]
    1d3c:	607a      	str	r2, [r7, #4]
    1d3e:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
    1d40:	2300      	movs	r3, #0
    1d42:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
    1d44:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    1d48:	4323      	orrs	r3, r4
    1d4a:	d103      	bne.n	1d54 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x22>
    flags &= ~FLAGS_HASH;
    1d4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1d4e:	f023 0310 	bic.w	r3, r3, #16
    1d52:	66bb      	str	r3, [r7, #104]	; 0x68
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    1d54:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1d56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    1d5a:	2b00      	cmp	r3, #0
    1d5c:	d003      	beq.n	1d66 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x34>
    1d5e:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    1d62:	4323      	orrs	r3, r4
    1d64:	d03a      	beq.n	1ddc <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xaa>
    do {
      const char digit = (char)(value % base);
    1d66:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    1d6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
    1d6e:	f002 ff39 	bl	4be4 <__aeabi_uldivmod>
    1d72:	461c      	mov	r4, r3
    1d74:	4613      	mov	r3, r2
    1d76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    1d7a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    1d7e:	2b09      	cmp	r3, #9
    1d80:	d804      	bhi.n	1d8c <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x5a>
    1d82:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    1d86:	3330      	adds	r3, #48	; 0x30
    1d88:	b2da      	uxtb	r2, r3
    1d8a:	e00d      	b.n	1da8 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x76>
    1d8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    1d8e:	f003 0320 	and.w	r3, r3, #32
    1d92:	2b00      	cmp	r3, #0
    1d94:	d001      	beq.n	1d9a <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x68>
    1d96:	2241      	movs	r2, #65	; 0x41
    1d98:	e000      	b.n	1d9c <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x6a>
    1d9a:	2261      	movs	r2, #97	; 0x61
    1d9c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
    1da0:	4413      	add	r3, r2
    1da2:	b2db      	uxtb	r3, r3
    1da4:	3b0a      	subs	r3, #10
    1da6:	b2da      	uxtb	r2, r3
    1da8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1daa:	1c59      	adds	r1, r3, #1
    1dac:	6379      	str	r1, [r7, #52]	; 0x34
    1dae:	f107 0138 	add.w	r1, r7, #56	; 0x38
    1db2:	440b      	add	r3, r1
    1db4:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
    1db8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
    1dbc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
    1dc0:	f002 ff10 	bl	4be4 <__aeabi_uldivmod>
    1dc4:	4603      	mov	r3, r0
    1dc6:	460c      	mov	r4, r1
    1dc8:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    1dcc:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
    1dd0:	4323      	orrs	r3, r4
    1dd2:	d003      	beq.n	1ddc <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xaa>
    1dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1dd6:	2b1f      	cmp	r3, #31
    1dd8:	d800      	bhi.n	1ddc <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0xaa>
    do {
    1dda:	e7c4      	b.n	1d66 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
    1ddc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1dde:	6eba      	ldr	r2, [r7, #104]	; 0x68
    1de0:	9206      	str	r2, [sp, #24]
    1de2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
    1de4:	9205      	str	r2, [sp, #20]
    1de6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    1de8:	9204      	str	r2, [sp, #16]
    1dea:	9303      	str	r3, [sp, #12]
    1dec:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
    1df0:	9302      	str	r3, [sp, #8]
    1df2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1df4:	9301      	str	r3, [sp, #4]
    1df6:	f107 0310 	add.w	r3, r7, #16
    1dfa:	9300      	str	r3, [sp, #0]
    1dfc:	683b      	ldr	r3, [r7, #0]
    1dfe:	687a      	ldr	r2, [r7, #4]
    1e00:	68b9      	ldr	r1, [r7, #8]
    1e02:	68f8      	ldr	r0, [r7, #12]
    1e04:	f7ff fe0c 	bl	1a20 <_ntoa_format(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, char*, unsigned int, bool, unsigned int, unsigned int, unsigned int, unsigned int)>
    1e08:	4603      	mov	r3, r0
}
    1e0a:	4618      	mov	r0, r3
    1e0c:	373c      	adds	r7, #60	; 0x3c
    1e0e:	46bd      	mov	sp, r7
    1e10:	bd90      	pop	{r4, r7, pc}
    1e12:	Address 0x0000000000001e12 is out of bounds.


00001e14 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>:
#endif  // PRINTF_SUPPORT_LONG_LONG


#if defined(PRINTF_SUPPORT_FLOAT)
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value_param, unsigned int prec, unsigned int width, unsigned int flags)
{
    1e14:	b590      	push	{r4, r7, lr}
    1e16:	b09b      	sub	sp, #108	; 0x6c
    1e18:	af00      	add	r7, sp, #0
    1e1a:	6178      	str	r0, [r7, #20]
    1e1c:	6139      	str	r1, [r7, #16]
    1e1e:	60fa      	str	r2, [r7, #12]
    1e20:	60bb      	str	r3, [r7, #8]
    1e22:	ed87 0b00 	vstr	d0, [r7]
  const size_t start_idx = idx;
    1e26:	68fb      	ldr	r3, [r7, #12]
    1e28:	647b      	str	r3, [r7, #68]	; 0x44

  float value = static_cast<float>(value_param);
    1e2a:	e9d7 0100 	ldrd	r0, r1, [r7]
    1e2e:	f002 fd7b 	bl	4928 <__aeabi_d2f>
    1e32:	4603      	mov	r3, r0
    1e34:	667b      	str	r3, [r7, #100]	; 0x64

  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
    1e36:	2300      	movs	r3, #0
    1e38:	663b      	str	r3, [r7, #96]	; 0x60
  float diff = 0.0;
    1e3a:	f04f 0300 	mov.w	r3, #0
    1e3e:	643b      	str	r3, [r7, #64]	; 0x40

  // if input is larger than thres_max, revert to exponential
  const float thres_max = (float)0x7FFFFFFF;
    1e40:	f04f 439e 	mov.w	r3, #1325400064	; 0x4f000000
    1e44:	63fb      	str	r3, [r7, #60]	; 0x3c

  // powers of 10
  static const float pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for negative
  bool negative = false;
    1e46:	2300      	movs	r3, #0
    1e48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
  if (value < 0) {
    1e4c:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    1e50:	eef5 7ac0 	vcmpe.f32	s15, #0.0
    1e54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1e58:	d50a      	bpl.n	1e70 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x5c>
    negative = true;
    1e5a:	2301      	movs	r3, #1
    1e5c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    value = 0 - value;
    1e60:	ed9f 7aab 	vldr	s14, [pc, #684]	; 2110 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2fc>
    1e64:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    1e68:	ee77 7a67 	vsub.f32	s15, s14, s15
    1e6c:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
  }

  // set default precision to 6, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
    1e70:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    1e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    1e78:	2b00      	cmp	r3, #0
    1e7a:	d101      	bne.n	1e80 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x6c>
    prec = 6U;
    1e7c:	2306      	movs	r3, #6
    1e7e:	67bb      	str	r3, [r7, #120]	; 0x78
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    1e80:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    1e82:	2b1f      	cmp	r3, #31
    1e84:	d80f      	bhi.n	1ea6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x92>
    1e86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    1e88:	2b09      	cmp	r3, #9
    1e8a:	d90c      	bls.n	1ea6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x92>
    buf[len++] = '0';
    1e8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    1e8e:	1c5a      	adds	r2, r3, #1
    1e90:	663a      	str	r2, [r7, #96]	; 0x60
    1e92:	f107 0268 	add.w	r2, r7, #104	; 0x68
    1e96:	4413      	add	r3, r2
    1e98:	2230      	movs	r2, #48	; 0x30
    1e9a:	f803 2c50 	strb.w	r2, [r3, #-80]
    prec--;
    1e9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    1ea0:	3b01      	subs	r3, #1
    1ea2:	67bb      	str	r3, [r7, #120]	; 0x78
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
    1ea4:	e7ec      	b.n	1e80 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x6c>
  }

  int whole = (int)value;
    1ea6:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    1eaa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    1eae:	ee17 3a90 	vmov	r3, s15
    1eb2:	65bb      	str	r3, [r7, #88]	; 0x58
  float tmp = (value - whole) * pow10[prec];
    1eb4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1eb6:	ee07 3a90 	vmov	s15, r3
    1eba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1ebe:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
    1ec2:	ee37 7a67 	vsub.f32	s14, s14, s15
    1ec6:	4a93      	ldr	r2, [pc, #588]	; (2114 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x300>)
    1ec8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    1eca:	009b      	lsls	r3, r3, #2
    1ecc:	4413      	add	r3, r2
    1ece:	edd3 7a00 	vldr	s15, [r3]
    1ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
    1ed6:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
    1eda:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    1ede:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    1ee2:	ee17 3a90 	vmov	r3, s15
    1ee6:	657b      	str	r3, [r7, #84]	; 0x54
  diff = tmp - frac;
    1ee8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1eea:	ee07 3a90 	vmov	s15, r3
    1eee:	eef8 7a67 	vcvt.f32.u32	s15, s15
    1ef2:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
    1ef6:	ee77 7a67 	vsub.f32	s15, s14, s15
    1efa:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40

  if (diff > 0.5) {
    1efe:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    1f02:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    1f06:	eef4 7ac7 	vcmpe.f32	s15, s14
    1f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1f0e:	dd18      	ble.n	1f42 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x12e>
    ++frac;
    1f10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1f12:	3301      	adds	r3, #1
    1f14:	657b      	str	r3, [r7, #84]	; 0x54
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
    1f16:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1f18:	ee07 3a90 	vmov	s15, r3
    1f1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    1f20:	4a7c      	ldr	r2, [pc, #496]	; (2114 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x300>)
    1f22:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    1f24:	009b      	lsls	r3, r3, #2
    1f26:	4413      	add	r3, r2
    1f28:	edd3 7a00 	vldr	s15, [r3]
    1f2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
    1f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1f34:	db19      	blt.n	1f6a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
      frac = 0;
    1f36:	2300      	movs	r3, #0
    1f38:	657b      	str	r3, [r7, #84]	; 0x54
      ++whole;
    1f3a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1f3c:	3301      	adds	r3, #1
    1f3e:	65bb      	str	r3, [r7, #88]	; 0x58
    1f40:	e013      	b.n	1f6a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
    }
  }
  else if ((diff == 0.5) && ((frac == 0U) || (frac & 1U))) {
    1f42:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    1f46:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    1f4a:	eef4 7a47 	vcmp.f32	s15, s14
    1f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1f52:	d10a      	bne.n	1f6a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
    1f54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1f56:	2b00      	cmp	r3, #0
    1f58:	d004      	beq.n	1f64 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x150>
    1f5a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1f5c:	f003 0301 	and.w	r3, r3, #1
    1f60:	2b00      	cmp	r3, #0
    1f62:	d002      	beq.n	1f6a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x156>
    // if halfway, round up if odd, OR if last digit is 0
    ++frac;
    1f64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    1f66:	3301      	adds	r3, #1
    1f68:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // TBD: for very large numbers switch back to native sprintf for exponentials. Anyone want to write code to replace this?
  // Normal printf behavior is to print EVERY whole number digit which can be 100s of characters overflowing your buffers == bad
  if (value > thres_max) {
    1f6a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
    1f6e:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 2118 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x304>
    1f72:	eef4 7ac7 	vcmpe.f32	s15, s14
    1f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1f7a:	dd01      	ble.n	1f80 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x16c>
    return 0U;
    1f7c:	2300      	movs	r3, #0
    1f7e:	e166      	b.n	224e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x43a>
  }

  if (prec == 0U) {
    1f80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    1f82:	2b00      	cmp	r3, #0
    1f84:	d129      	bne.n	1fda <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1c6>
    diff = value - (float)whole;
    1f86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1f88:	ee07 3a90 	vmov	s15, r3
    1f8c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    1f90:	ed97 7a19 	vldr	s14, [r7, #100]	; 0x64
    1f94:	ee77 7a67 	vsub.f32	s15, s14, s15
    1f98:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    if (diff > 0.5) {
    1f9c:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    1fa0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    1fa4:	eef4 7ac7 	vcmpe.f32	s15, s14
    1fa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1fac:	dd03      	ble.n	1fb6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1a2>
      // greater than 0.5, round up, e.g. 1.6 -> 2
      ++whole;
    1fae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1fb0:	3301      	adds	r3, #1
    1fb2:	65bb      	str	r3, [r7, #88]	; 0x58
    1fb4:	e062      	b.n	207c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
    else if ((diff == 0.5) && (whole & 1)) {
    1fb6:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
    1fba:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    1fbe:	eef4 7a47 	vcmp.f32	s15, s14
    1fc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1fc6:	d159      	bne.n	207c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    1fc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1fca:	f003 0301 	and.w	r3, r3, #1
    1fce:	2b00      	cmp	r3, #0
    1fd0:	d054      	beq.n	207c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
    1fd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    1fd4:	3301      	adds	r3, #1
    1fd6:	65bb      	str	r3, [r7, #88]	; 0x58
    1fd8:	e050      	b.n	207c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
    }
  }
  else {
    unsigned int count = prec;
    1fda:	6fbb      	ldr	r3, [r7, #120]	; 0x78
    1fdc:	653b      	str	r3, [r7, #80]	; 0x50
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    1fde:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    1fe0:	2b1f      	cmp	r3, #31
    1fe2:	d828      	bhi.n	2036 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x222>
      --count;
    1fe4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    1fe6:	3b01      	subs	r3, #1
    1fe8:	653b      	str	r3, [r7, #80]	; 0x50
      buf[len++] = (char)(48U + (frac % 10U));
    1fea:	6d79      	ldr	r1, [r7, #84]	; 0x54
    1fec:	4b4b      	ldr	r3, [pc, #300]	; (211c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
    1fee:	fba3 2301 	umull	r2, r3, r3, r1
    1ff2:	08da      	lsrs	r2, r3, #3
    1ff4:	4613      	mov	r3, r2
    1ff6:	009b      	lsls	r3, r3, #2
    1ff8:	4413      	add	r3, r2
    1ffa:	005b      	lsls	r3, r3, #1
    1ffc:	1aca      	subs	r2, r1, r3
    1ffe:	b2d3      	uxtb	r3, r2
    2000:	3330      	adds	r3, #48	; 0x30
    2002:	b2d9      	uxtb	r1, r3
    2004:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    2006:	1c5a      	adds	r2, r3, #1
    2008:	663a      	str	r2, [r7, #96]	; 0x60
    200a:	f107 0268 	add.w	r2, r7, #104	; 0x68
    200e:	4413      	add	r3, r2
    2010:	460a      	mov	r2, r1
    2012:	f803 2c50 	strb.w	r2, [r3, #-80]
      if (!(frac /= 10U)) {
    2016:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2018:	4a40      	ldr	r2, [pc, #256]	; (211c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x308>)
    201a:	fba2 2303 	umull	r2, r3, r2, r3
    201e:	08db      	lsrs	r3, r3, #3
    2020:	657b      	str	r3, [r7, #84]	; 0x54
    2022:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2024:	2b00      	cmp	r3, #0
    2026:	bf0c      	ite	eq
    2028:	2301      	moveq	r3, #1
    202a:	2300      	movne	r3, #0
    202c:	b2db      	uxtb	r3, r3
    202e:	2b00      	cmp	r3, #0
    2030:	d100      	bne.n	2034 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x220>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
    2032:	e7d4      	b.n	1fde <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x1ca>
        break;
    2034:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    2036:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    2038:	2b1f      	cmp	r3, #31
    203a:	d806      	bhi.n	204a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x236>
    203c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    203e:	1e5a      	subs	r2, r3, #1
    2040:	653a      	str	r2, [r7, #80]	; 0x50
    2042:	2b00      	cmp	r3, #0
    2044:	d001      	beq.n	204a <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x236>
    2046:	2301      	movs	r3, #1
    2048:	e000      	b.n	204c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x238>
    204a:	2300      	movs	r3, #0
    204c:	2b00      	cmp	r3, #0
    204e:	d009      	beq.n	2064 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x250>
      buf[len++] = '0';
    2050:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    2052:	1c5a      	adds	r2, r3, #1
    2054:	663a      	str	r2, [r7, #96]	; 0x60
    2056:	f107 0268 	add.w	r2, r7, #104	; 0x68
    205a:	4413      	add	r3, r2
    205c:	2230      	movs	r2, #48	; 0x30
    205e:	f803 2c50 	strb.w	r2, [r3, #-80]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
    2062:	e7e8      	b.n	2036 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x222>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
    2064:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    2066:	2b1f      	cmp	r3, #31
    2068:	d808      	bhi.n	207c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      // add decimal
      buf[len++] = '.';
    206a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    206c:	1c5a      	adds	r2, r3, #1
    206e:	663a      	str	r2, [r7, #96]	; 0x60
    2070:	f107 0268 	add.w	r2, r7, #104	; 0x68
    2074:	4413      	add	r3, r2
    2076:	222e      	movs	r2, #46	; 0x2e
    2078:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    207c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    207e:	2b1f      	cmp	r3, #31
    2080:	d829      	bhi.n	20d6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c2>
    buf[len++] = (char)(48 + (whole % 10));
    2082:	6dba      	ldr	r2, [r7, #88]	; 0x58
    2084:	4b26      	ldr	r3, [pc, #152]	; (2120 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>)
    2086:	fb83 1302 	smull	r1, r3, r3, r2
    208a:	1099      	asrs	r1, r3, #2
    208c:	17d3      	asrs	r3, r2, #31
    208e:	1ac9      	subs	r1, r1, r3
    2090:	460b      	mov	r3, r1
    2092:	009b      	lsls	r3, r3, #2
    2094:	440b      	add	r3, r1
    2096:	005b      	lsls	r3, r3, #1
    2098:	1ad1      	subs	r1, r2, r3
    209a:	b2cb      	uxtb	r3, r1
    209c:	3330      	adds	r3, #48	; 0x30
    209e:	b2d9      	uxtb	r1, r3
    20a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    20a2:	1c5a      	adds	r2, r3, #1
    20a4:	663a      	str	r2, [r7, #96]	; 0x60
    20a6:	f107 0268 	add.w	r2, r7, #104	; 0x68
    20aa:	4413      	add	r3, r2
    20ac:	460a      	mov	r2, r1
    20ae:	f803 2c50 	strb.w	r2, [r3, #-80]
    if (!(whole /= 10)) {
    20b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    20b4:	4a1a      	ldr	r2, [pc, #104]	; (2120 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x30c>)
    20b6:	fb82 1203 	smull	r1, r2, r2, r3
    20ba:	1092      	asrs	r2, r2, #2
    20bc:	17db      	asrs	r3, r3, #31
    20be:	1ad3      	subs	r3, r2, r3
    20c0:	65bb      	str	r3, [r7, #88]	; 0x58
    20c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    20c4:	2b00      	cmp	r3, #0
    20c6:	bf0c      	ite	eq
    20c8:	2301      	moveq	r3, #1
    20ca:	2300      	movne	r3, #0
    20cc:	b2db      	uxtb	r3, r3
    20ce:	2b00      	cmp	r3, #0
    20d0:	d100      	bne.n	20d4 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c0>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
    20d2:	e7d3      	b.n	207c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x268>
      break;
    20d4:	bf00      	nop
    }
  }

  // pad leading zeros
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    20d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    20da:	f003 0302 	and.w	r3, r3, #2
    20de:	2b00      	cmp	r3, #0
    20e0:	d120      	bne.n	2124 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    20e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    20e6:	f003 0301 	and.w	r3, r3, #1
    20ea:	2b00      	cmp	r3, #0
    20ec:	d01a      	beq.n	2124 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    20ee:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    20f0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    20f2:	429a      	cmp	r2, r3
    20f4:	d216      	bcs.n	2124 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    20f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    20f8:	2b1f      	cmp	r3, #31
    20fa:	d813      	bhi.n	2124 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x310>
    buf[len++] = '0';
    20fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    20fe:	1c5a      	adds	r2, r3, #1
    2100:	663a      	str	r2, [r7, #96]	; 0x60
    2102:	f107 0268 	add.w	r2, r7, #104	; 0x68
    2106:	4413      	add	r3, r2
    2108:	2230      	movs	r2, #48	; 0x30
    210a:	f803 2c50 	strb.w	r2, [r3, #-80]
  while (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
    210e:	e7e2      	b.n	20d6 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x2c2>
    2110:	00000000 	.word	0x00000000
    2114:	00006b58 	.word	0x00006b58
    2118:	4f000000 	.word	0x4f000000
    211c:	cccccccd 	.word	0xcccccccd
    2120:	66666667 	.word	0x66666667
  }

  // handle sign
  if ((len == width) && (negative || (flags & FLAGS_PLUS) || (flags & FLAGS_SPACE))) {
    2124:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    2126:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    2128:	429a      	cmp	r2, r3
    212a:	d112      	bne.n	2152 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x33e>
    212c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    2130:	2b00      	cmp	r3, #0
    2132:	d10b      	bne.n	214c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x338>
    2134:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    2138:	f003 0304 	and.w	r3, r3, #4
    213c:	2b00      	cmp	r3, #0
    213e:	d105      	bne.n	214c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x338>
    2140:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    2144:	f003 0308 	and.w	r3, r3, #8
    2148:	2b00      	cmp	r3, #0
    214a:	d002      	beq.n	2152 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x33e>
    len--;
    214c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    214e:	3b01      	subs	r3, #1
    2150:	663b      	str	r3, [r7, #96]	; 0x60
  }
  if (len < PRINTF_FTOA_BUFFER_SIZE) {
    2152:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    2154:	2b1f      	cmp	r3, #31
    2156:	d82c      	bhi.n	21b2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
    if (negative) {
    2158:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
    215c:	2b00      	cmp	r3, #0
    215e:	d009      	beq.n	2174 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x360>
      buf[len++] = '-';
    2160:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    2162:	1c5a      	adds	r2, r3, #1
    2164:	663a      	str	r2, [r7, #96]	; 0x60
    2166:	f107 0268 	add.w	r2, r7, #104	; 0x68
    216a:	4413      	add	r3, r2
    216c:	222d      	movs	r2, #45	; 0x2d
    216e:	f803 2c50 	strb.w	r2, [r3, #-80]
    2172:	e01e      	b.n	21b2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
    }
    else if (flags & FLAGS_PLUS) {
    2174:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    2178:	f003 0304 	and.w	r3, r3, #4
    217c:	2b00      	cmp	r3, #0
    217e:	d009      	beq.n	2194 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x380>
      buf[len++] = '+';  // ignore the space if the '+' exists
    2180:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    2182:	1c5a      	adds	r2, r3, #1
    2184:	663a      	str	r2, [r7, #96]	; 0x60
    2186:	f107 0268 	add.w	r2, r7, #104	; 0x68
    218a:	4413      	add	r3, r2
    218c:	222b      	movs	r2, #43	; 0x2b
    218e:	f803 2c50 	strb.w	r2, [r3, #-80]
    2192:	e00e      	b.n	21b2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
    }
    else if (flags & FLAGS_SPACE) {
    2194:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    2198:	f003 0308 	and.w	r3, r3, #8
    219c:	2b00      	cmp	r3, #0
    219e:	d008      	beq.n	21b2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x39e>
      buf[len++] = ' ';
    21a0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    21a2:	1c5a      	adds	r2, r3, #1
    21a4:	663a      	str	r2, [r7, #96]	; 0x60
    21a6:	f107 0268 	add.w	r2, r7, #104	; 0x68
    21aa:	4413      	add	r3, r2
    21ac:	2220      	movs	r2, #32
    21ae:	f803 2c50 	strb.w	r2, [r3, #-80]
    }
  }

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    21b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    21b6:	f003 0302 	and.w	r3, r3, #2
    21ba:	2b00      	cmp	r3, #0
    21bc:	d117      	bne.n	21ee <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3da>
    21be:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    21c2:	f003 0301 	and.w	r3, r3, #1
    21c6:	2b00      	cmp	r3, #0
    21c8:	d111      	bne.n	21ee <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3da>
    for (size_t i = len; i < width; i++) {
    21ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    21cc:	64fb      	str	r3, [r7, #76]	; 0x4c
    21ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    21d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    21d2:	429a      	cmp	r2, r3
    21d4:	d20b      	bcs.n	21ee <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3da>
      out(' ', buffer, idx++, maxlen);
    21d6:	68fa      	ldr	r2, [r7, #12]
    21d8:	1c53      	adds	r3, r2, #1
    21da:	60fb      	str	r3, [r7, #12]
    21dc:	697c      	ldr	r4, [r7, #20]
    21de:	68bb      	ldr	r3, [r7, #8]
    21e0:	6939      	ldr	r1, [r7, #16]
    21e2:	2020      	movs	r0, #32
    21e4:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
    21e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    21e8:	3301      	adds	r3, #1
    21ea:	64fb      	str	r3, [r7, #76]	; 0x4c
    21ec:	e7ef      	b.n	21ce <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3ba>
    }
  }

  // reverse string
  for (size_t i = 0U; i < len; i++) {
    21ee:	2300      	movs	r3, #0
    21f0:	64bb      	str	r3, [r7, #72]	; 0x48
    21f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
    21f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
    21f6:	429a      	cmp	r2, r3
    21f8:	d213      	bcs.n	2222 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x40e>
    out(buf[len - i - 1U], buffer, idx++, maxlen);
    21fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
    21fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    21fe:	1ad3      	subs	r3, r2, r3
    2200:	3b01      	subs	r3, #1
    2202:	f107 0268 	add.w	r2, r7, #104	; 0x68
    2206:	4413      	add	r3, r2
    2208:	f813 0c50 	ldrb.w	r0, [r3, #-80]
    220c:	68fa      	ldr	r2, [r7, #12]
    220e:	1c53      	adds	r3, r2, #1
    2210:	60fb      	str	r3, [r7, #12]
    2212:	697c      	ldr	r4, [r7, #20]
    2214:	68bb      	ldr	r3, [r7, #8]
    2216:	6939      	ldr	r1, [r7, #16]
    2218:	47a0      	blx	r4
  for (size_t i = 0U; i < len; i++) {
    221a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    221c:	3301      	adds	r3, #1
    221e:	64bb      	str	r3, [r7, #72]	; 0x48
    2220:	e7e7      	b.n	21f2 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x3de>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
    2222:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    2226:	f003 0302 	and.w	r3, r3, #2
    222a:	2b00      	cmp	r3, #0
    222c:	d00e      	beq.n	224c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x438>
    while (idx - start_idx < width) {
    222e:	68fa      	ldr	r2, [r7, #12]
    2230:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    2232:	1ad3      	subs	r3, r2, r3
    2234:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    2236:	429a      	cmp	r2, r3
    2238:	d908      	bls.n	224c <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x438>
      out(' ', buffer, idx++, maxlen);
    223a:	68fa      	ldr	r2, [r7, #12]
    223c:	1c53      	adds	r3, r2, #1
    223e:	60fb      	str	r3, [r7, #12]
    2240:	697c      	ldr	r4, [r7, #20]
    2242:	68bb      	ldr	r3, [r7, #8]
    2244:	6939      	ldr	r1, [r7, #16]
    2246:	2020      	movs	r0, #32
    2248:	47a0      	blx	r4
    while (idx - start_idx < width) {
    224a:	e7f0      	b.n	222e <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)+0x41a>
    }
  }

  return idx;
    224c:	68fb      	ldr	r3, [r7, #12]
}
    224e:	4618      	mov	r0, r3
    2250:	376c      	adds	r7, #108	; 0x6c
    2252:	46bd      	mov	sp, r7
    2254:	bd90      	pop	{r4, r7, pc}
    2256:	bf00      	nop

00002258 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
    2258:	b5b0      	push	{r4, r5, r7, lr}
    225a:	b0a0      	sub	sp, #128	; 0x80
    225c:	af0a      	add	r7, sp, #40	; 0x28
    225e:	60f8      	str	r0, [r7, #12]
    2260:	60b9      	str	r1, [r7, #8]
    2262:	607a      	str	r2, [r7, #4]
    2264:	603b      	str	r3, [r7, #0]
    }
    return i;
  }

  unsigned int flags, width, precision, n;
  size_t idx = 0U;
    2266:	2300      	movs	r3, #0
    2268:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
    226a:	68bb      	ldr	r3, [r7, #8]
    226c:	2b00      	cmp	r3, #0
    226e:	d101      	bne.n	2274 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c>
    // use null output function
    out = _out_null;
    2270:	4ba2      	ldr	r3, [pc, #648]	; (24fc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a4>)
    2272:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
    2274:	683b      	ldr	r3, [r7, #0]
    2276:	781b      	ldrb	r3, [r3, #0]
    2278:	2b00      	cmp	r3, #0
    227a:	f000 8445 	beq.w	2b08 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8b0>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
    227e:	683b      	ldr	r3, [r7, #0]
    2280:	781b      	ldrb	r3, [r3, #0]
    2282:	2b25      	cmp	r3, #37	; 0x25
    2284:	d00d      	beq.n	22a2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4a>
      // no
      out(*format, buffer, idx++, maxlen);
    2286:	683b      	ldr	r3, [r7, #0]
    2288:	7818      	ldrb	r0, [r3, #0]
    228a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    228c:	1c53      	adds	r3, r2, #1
    228e:	647b      	str	r3, [r7, #68]	; 0x44
    2290:	68fc      	ldr	r4, [r7, #12]
    2292:	687b      	ldr	r3, [r7, #4]
    2294:	68b9      	ldr	r1, [r7, #8]
    2296:	47a0      	blx	r4
      format++;
    2298:	683b      	ldr	r3, [r7, #0]
    229a:	3301      	adds	r3, #1
    229c:	603b      	str	r3, [r7, #0]
      continue;
    229e:	f000 bc31 	b.w	2b04 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
    }
    else {
      // yes, evaluate it
      format++;
    22a2:	683b      	ldr	r3, [r7, #0]
    22a4:	3301      	adds	r3, #1
    22a6:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
    22a8:	2300      	movs	r3, #0
    22aa:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
    22ac:	683b      	ldr	r3, [r7, #0]
    22ae:	781b      	ldrb	r3, [r3, #0]
    22b0:	3b20      	subs	r3, #32
    22b2:	2b10      	cmp	r3, #16
    22b4:	d856      	bhi.n	2364 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x10c>
    22b6:	a201      	add	r2, pc, #4	; (adr r2, 22bc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x64>)
    22b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    22bc:	0000233d 	.word	0x0000233d
    22c0:	00002365 	.word	0x00002365
    22c4:	00002365 	.word	0x00002365
    22c8:	00002351 	.word	0x00002351
    22cc:	00002365 	.word	0x00002365
    22d0:	00002365 	.word	0x00002365
    22d4:	00002365 	.word	0x00002365
    22d8:	00002365 	.word	0x00002365
    22dc:	00002365 	.word	0x00002365
    22e0:	00002365 	.word	0x00002365
    22e4:	00002365 	.word	0x00002365
    22e8:	00002329 	.word	0x00002329
    22ec:	00002365 	.word	0x00002365
    22f0:	00002315 	.word	0x00002315
    22f4:	00002365 	.word	0x00002365
    22f8:	00002365 	.word	0x00002365
    22fc:	00002301 	.word	0x00002301
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
    2300:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2302:	f043 0301 	orr.w	r3, r3, #1
    2306:	657b      	str	r3, [r7, #84]	; 0x54
    2308:	683b      	ldr	r3, [r7, #0]
    230a:	3301      	adds	r3, #1
    230c:	603b      	str	r3, [r7, #0]
    230e:	2301      	movs	r3, #1
    2310:	64bb      	str	r3, [r7, #72]	; 0x48
    2312:	e02a      	b.n	236a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
    2314:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2316:	f043 0302 	orr.w	r3, r3, #2
    231a:	657b      	str	r3, [r7, #84]	; 0x54
    231c:	683b      	ldr	r3, [r7, #0]
    231e:	3301      	adds	r3, #1
    2320:	603b      	str	r3, [r7, #0]
    2322:	2301      	movs	r3, #1
    2324:	64bb      	str	r3, [r7, #72]	; 0x48
    2326:	e020      	b.n	236a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
    2328:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    232a:	f043 0304 	orr.w	r3, r3, #4
    232e:	657b      	str	r3, [r7, #84]	; 0x54
    2330:	683b      	ldr	r3, [r7, #0]
    2332:	3301      	adds	r3, #1
    2334:	603b      	str	r3, [r7, #0]
    2336:	2301      	movs	r3, #1
    2338:	64bb      	str	r3, [r7, #72]	; 0x48
    233a:	e016      	b.n	236a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
    233c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    233e:	f043 0308 	orr.w	r3, r3, #8
    2342:	657b      	str	r3, [r7, #84]	; 0x54
    2344:	683b      	ldr	r3, [r7, #0]
    2346:	3301      	adds	r3, #1
    2348:	603b      	str	r3, [r7, #0]
    234a:	2301      	movs	r3, #1
    234c:	64bb      	str	r3, [r7, #72]	; 0x48
    234e:	e00c      	b.n	236a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
    2350:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2352:	f043 0310 	orr.w	r3, r3, #16
    2356:	657b      	str	r3, [r7, #84]	; 0x54
    2358:	683b      	ldr	r3, [r7, #0]
    235a:	3301      	adds	r3, #1
    235c:	603b      	str	r3, [r7, #0]
    235e:	2301      	movs	r3, #1
    2360:	64bb      	str	r3, [r7, #72]	; 0x48
    2362:	e002      	b.n	236a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x112>
        default :                                   n = 0U; break;
    2364:	2300      	movs	r3, #0
    2366:	64bb      	str	r3, [r7, #72]	; 0x48
    2368:	bf00      	nop
      }
    } while (n);
    236a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    236c:	2b00      	cmp	r3, #0
    236e:	d000      	beq.n	2372 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x11a>
    do {
    2370:	e79c      	b.n	22ac <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x54>

    // evaluate width field
    width = 0U;
    2372:	2300      	movs	r3, #0
    2374:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
    2376:	683b      	ldr	r3, [r7, #0]
    2378:	781b      	ldrb	r3, [r3, #0]
    237a:	4618      	mov	r0, r3
    237c:	f7ff fb18 	bl	19b0 <_is_digit(char)>
    2380:	4603      	mov	r3, r0
    2382:	2b00      	cmp	r3, #0
    2384:	d005      	beq.n	2392 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x13a>
      width = _atoi(&format);
    2386:	463b      	mov	r3, r7
    2388:	4618      	mov	r0, r3
    238a:	f7ff fb25 	bl	19d8 <_atoi(char const**)>
    238e:	6538      	str	r0, [r7, #80]	; 0x50
    2390:	e018      	b.n	23c4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x16c>
    }
    else if (*format == '*') {
    2392:	683b      	ldr	r3, [r7, #0]
    2394:	781b      	ldrb	r3, [r3, #0]
    2396:	2b2a      	cmp	r3, #42	; 0x2a
    2398:	d114      	bne.n	23c4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x16c>
      const int w = va_arg(va, int);
    239a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    239c:	1d1a      	adds	r2, r3, #4
    239e:	66ba      	str	r2, [r7, #104]	; 0x68
    23a0:	681b      	ldr	r3, [r3, #0]
    23a2:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
    23a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    23a6:	2b00      	cmp	r3, #0
    23a8:	da07      	bge.n	23ba <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x162>
        flags |= FLAGS_LEFT;    // reverse padding
    23aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    23ac:	f043 0302 	orr.w	r3, r3, #2
    23b0:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
    23b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    23b4:	425b      	negs	r3, r3
    23b6:	653b      	str	r3, [r7, #80]	; 0x50
    23b8:	e001      	b.n	23be <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x166>
      }
      else {
        width = (unsigned int)w;
    23ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    23bc:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
    23be:	683b      	ldr	r3, [r7, #0]
    23c0:	3301      	adds	r3, #1
    23c2:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
    23c4:	2300      	movs	r3, #0
    23c6:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
    23c8:	683b      	ldr	r3, [r7, #0]
    23ca:	781b      	ldrb	r3, [r3, #0]
    23cc:	2b2e      	cmp	r3, #46	; 0x2e
    23ce:	d124      	bne.n	241a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
      flags |= FLAGS_PRECISION;
    23d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    23d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    23d6:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
    23d8:	683b      	ldr	r3, [r7, #0]
    23da:	3301      	adds	r3, #1
    23dc:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
    23de:	683b      	ldr	r3, [r7, #0]
    23e0:	781b      	ldrb	r3, [r3, #0]
    23e2:	4618      	mov	r0, r3
    23e4:	f7ff fae4 	bl	19b0 <_is_digit(char)>
    23e8:	4603      	mov	r3, r0
    23ea:	2b00      	cmp	r3, #0
    23ec:	d005      	beq.n	23fa <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1a2>
        precision = _atoi(&format);
    23ee:	463b      	mov	r3, r7
    23f0:	4618      	mov	r0, r3
    23f2:	f7ff faf1 	bl	19d8 <_atoi(char const**)>
    23f6:	64f8      	str	r0, [r7, #76]	; 0x4c
    23f8:	e00f      	b.n	241a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
      }
      else if (*format == '*') {
    23fa:	683b      	ldr	r3, [r7, #0]
    23fc:	781b      	ldrb	r3, [r3, #0]
    23fe:	2b2a      	cmp	r3, #42	; 0x2a
    2400:	d10b      	bne.n	241a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c2>
        const int prec = (int)va_arg(va, int);
    2402:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2404:	1d1a      	adds	r2, r3, #4
    2406:	66ba      	str	r2, [r7, #104]	; 0x68
    2408:	681b      	ldr	r3, [r3, #0]
    240a:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
    240c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    240e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    2412:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
    2414:	683b      	ldr	r3, [r7, #0]
    2416:	3301      	adds	r3, #1
    2418:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
    241a:	683b      	ldr	r3, [r7, #0]
    241c:	781b      	ldrb	r3, [r3, #0]
    241e:	3b68      	subs	r3, #104	; 0x68
    2420:	2b12      	cmp	r3, #18
    2422:	d867      	bhi.n	24f4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x29c>
    2424:	a201      	add	r2, pc, #4	; (adr r2, 242c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1d4>)
    2426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    242a:	bf00      	nop
    242c:	0000249f 	.word	0x0000249f
    2430:	000024f5 	.word	0x000024f5
    2434:	000024d5 	.word	0x000024d5
    2438:	000024f5 	.word	0x000024f5
    243c:	00002479 	.word	0x00002479
    2440:	000024f5 	.word	0x000024f5
    2444:	000024f5 	.word	0x000024f5
    2448:	000024f5 	.word	0x000024f5
    244c:	000024f5 	.word	0x000024f5
    2450:	000024f5 	.word	0x000024f5
    2454:	000024f5 	.word	0x000024f5
    2458:	000024f5 	.word	0x000024f5
    245c:	000024c5 	.word	0x000024c5
    2460:	000024f5 	.word	0x000024f5
    2464:	000024f5 	.word	0x000024f5
    2468:	000024f5 	.word	0x000024f5
    246c:	000024f5 	.word	0x000024f5
    2470:	000024f5 	.word	0x000024f5
    2474:	000024e5 	.word	0x000024e5
      case 'l' :
        flags |= FLAGS_LONG;
    2478:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    247a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    247e:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    2480:	683b      	ldr	r3, [r7, #0]
    2482:	3301      	adds	r3, #1
    2484:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
    2486:	683b      	ldr	r3, [r7, #0]
    2488:	781b      	ldrb	r3, [r3, #0]
    248a:	2b6c      	cmp	r3, #108	; 0x6c
    248c:	d134      	bne.n	24f8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a0>
          flags |= FLAGS_LONG_LONG;
    248e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2490:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    2494:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
    2496:	683b      	ldr	r3, [r7, #0]
    2498:	3301      	adds	r3, #1
    249a:	603b      	str	r3, [r7, #0]
        }
        break;
    249c:	e02c      	b.n	24f8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a0>
      case 'h' :
        flags |= FLAGS_SHORT;
    249e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    24a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    24a4:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    24a6:	683b      	ldr	r3, [r7, #0]
    24a8:	3301      	adds	r3, #1
    24aa:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
    24ac:	683b      	ldr	r3, [r7, #0]
    24ae:	781b      	ldrb	r3, [r3, #0]
    24b0:	2b68      	cmp	r3, #104	; 0x68
    24b2:	d125      	bne.n	2500 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a8>
          flags |= FLAGS_CHAR;
    24b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    24b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    24ba:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
    24bc:	683b      	ldr	r3, [r7, #0]
    24be:	3301      	adds	r3, #1
    24c0:	603b      	str	r3, [r7, #0]
        }
        break;
    24c2:	e01d      	b.n	2500 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2a8>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    24c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    24c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    24ca:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    24cc:	683b      	ldr	r3, [r7, #0]
    24ce:	3301      	adds	r3, #1
    24d0:	603b      	str	r3, [r7, #0]
        break;
    24d2:	e016      	b.n	2502 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    24d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    24d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    24da:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    24dc:	683b      	ldr	r3, [r7, #0]
    24de:	3301      	adds	r3, #1
    24e0:	603b      	str	r3, [r7, #0]
        break;
    24e2:	e00e      	b.n	2502 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    24e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    24e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    24ea:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
    24ec:	683b      	ldr	r3, [r7, #0]
    24ee:	3301      	adds	r3, #1
    24f0:	603b      	str	r3, [r7, #0]
        break;
    24f2:	e006      	b.n	2502 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
      default :
        break;
    24f4:	bf00      	nop
    24f6:	e004      	b.n	2502 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
        break;
    24f8:	bf00      	nop
    24fa:	e002      	b.n	2502 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2aa>
    24fc:	00001941 	.word	0x00001941
        break;
    2500:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
    2502:	683b      	ldr	r3, [r7, #0]
    2504:	781b      	ldrb	r3, [r3, #0]
    2506:	3b25      	subs	r3, #37	; 0x25
    2508:	2b53      	cmp	r3, #83	; 0x53
    250a:	f200 82ee 	bhi.w	2aea <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x892>
    250e:	a201      	add	r2, pc, #4	; (adr r2, 2514 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x2bc>)
    2510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    2514:	00002ad3 	.word	0x00002ad3
    2518:	00002aeb 	.word	0x00002aeb
    251c:	00002aeb 	.word	0x00002aeb
    2520:	00002aeb 	.word	0x00002aeb
    2524:	00002aeb 	.word	0x00002aeb
    2528:	00002aeb 	.word	0x00002aeb
    252c:	00002aeb 	.word	0x00002aeb
    2530:	00002aeb 	.word	0x00002aeb
    2534:	00002aeb 	.word	0x00002aeb
    2538:	00002aeb 	.word	0x00002aeb
    253c:	00002aeb 	.word	0x00002aeb
    2540:	00002aeb 	.word	0x00002aeb
    2544:	00002aeb 	.word	0x00002aeb
    2548:	00002aeb 	.word	0x00002aeb
    254c:	00002aeb 	.word	0x00002aeb
    2550:	00002aeb 	.word	0x00002aeb
    2554:	00002aeb 	.word	0x00002aeb
    2558:	00002aeb 	.word	0x00002aeb
    255c:	00002aeb 	.word	0x00002aeb
    2560:	00002aeb 	.word	0x00002aeb
    2564:	00002aeb 	.word	0x00002aeb
    2568:	00002aeb 	.word	0x00002aeb
    256c:	00002aeb 	.word	0x00002aeb
    2570:	00002aeb 	.word	0x00002aeb
    2574:	00002aeb 	.word	0x00002aeb
    2578:	00002aeb 	.word	0x00002aeb
    257c:	00002aeb 	.word	0x00002aeb
    2580:	00002aeb 	.word	0x00002aeb
    2584:	00002aeb 	.word	0x00002aeb
    2588:	00002aeb 	.word	0x00002aeb
    258c:	00002aeb 	.word	0x00002aeb
    2590:	00002aeb 	.word	0x00002aeb
    2594:	00002aeb 	.word	0x00002aeb
    2598:	000028f1 	.word	0x000028f1
    259c:	00002aeb 	.word	0x00002aeb
    25a0:	00002aeb 	.word	0x00002aeb
    25a4:	00002aeb 	.word	0x00002aeb
    25a8:	00002aeb 	.word	0x00002aeb
    25ac:	00002aeb 	.word	0x00002aeb
    25b0:	00002aeb 	.word	0x00002aeb
    25b4:	00002aeb 	.word	0x00002aeb
    25b8:	00002aeb 	.word	0x00002aeb
    25bc:	00002aeb 	.word	0x00002aeb
    25c0:	00002aeb 	.word	0x00002aeb
    25c4:	00002aeb 	.word	0x00002aeb
    25c8:	00002aeb 	.word	0x00002aeb
    25cc:	00002aeb 	.word	0x00002aeb
    25d0:	00002aeb 	.word	0x00002aeb
    25d4:	00002aeb 	.word	0x00002aeb
    25d8:	00002aeb 	.word	0x00002aeb
    25dc:	00002aeb 	.word	0x00002aeb
    25e0:	00002665 	.word	0x00002665
    25e4:	00002aeb 	.word	0x00002aeb
    25e8:	00002aeb 	.word	0x00002aeb
    25ec:	00002aeb 	.word	0x00002aeb
    25f0:	00002aeb 	.word	0x00002aeb
    25f4:	00002aeb 	.word	0x00002aeb
    25f8:	00002aeb 	.word	0x00002aeb
    25fc:	00002aeb 	.word	0x00002aeb
    2600:	00002aeb 	.word	0x00002aeb
    2604:	00002aeb 	.word	0x00002aeb
    2608:	00002665 	.word	0x00002665
    260c:	0000292d 	.word	0x0000292d
    2610:	00002665 	.word	0x00002665
    2614:	00002aeb 	.word	0x00002aeb
    2618:	000028f1 	.word	0x000028f1
    261c:	00002aeb 	.word	0x00002aeb
    2620:	00002aeb 	.word	0x00002aeb
    2624:	00002665 	.word	0x00002665
    2628:	00002aeb 	.word	0x00002aeb
    262c:	00002aeb 	.word	0x00002aeb
    2630:	00002aeb 	.word	0x00002aeb
    2634:	00002aeb 	.word	0x00002aeb
    2638:	00002aeb 	.word	0x00002aeb
    263c:	00002665 	.word	0x00002665
    2640:	00002a8b 	.word	0x00002a8b
    2644:	00002aeb 	.word	0x00002aeb
    2648:	00002aeb 	.word	0x00002aeb
    264c:	000029b5 	.word	0x000029b5
    2650:	00002aeb 	.word	0x00002aeb
    2654:	00002665 	.word	0x00002665
    2658:	00002aeb 	.word	0x00002aeb
    265c:	00002aeb 	.word	0x00002aeb
    2660:	00002665 	.word	0x00002665
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
    2664:	683b      	ldr	r3, [r7, #0]
    2666:	781b      	ldrb	r3, [r3, #0]
    2668:	2b78      	cmp	r3, #120	; 0x78
    266a:	d003      	beq.n	2674 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x41c>
    266c:	683b      	ldr	r3, [r7, #0]
    266e:	781b      	ldrb	r3, [r3, #0]
    2670:	2b58      	cmp	r3, #88	; 0x58
    2672:	d102      	bne.n	267a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x422>
          base = 16U;
    2674:	2310      	movs	r3, #16
    2676:	643b      	str	r3, [r7, #64]	; 0x40
    2678:	e013      	b.n	26a2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else if (*format == 'o') {
    267a:	683b      	ldr	r3, [r7, #0]
    267c:	781b      	ldrb	r3, [r3, #0]
    267e:	2b6f      	cmp	r3, #111	; 0x6f
    2680:	d102      	bne.n	2688 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x430>
          base =  8U;
    2682:	2308      	movs	r3, #8
    2684:	643b      	str	r3, [r7, #64]	; 0x40
    2686:	e00c      	b.n	26a2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else if (*format == 'b') {
    2688:	683b      	ldr	r3, [r7, #0]
    268a:	781b      	ldrb	r3, [r3, #0]
    268c:	2b62      	cmp	r3, #98	; 0x62
    268e:	d102      	bne.n	2696 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x43e>
          base =  2U;
    2690:	2302      	movs	r3, #2
    2692:	643b      	str	r3, [r7, #64]	; 0x40
    2694:	e005      	b.n	26a2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x44a>
        }
        else {
          base = 10U;
    2696:	230a      	movs	r3, #10
    2698:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
    269a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    269c:	f023 0310 	bic.w	r3, r3, #16
    26a0:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
    26a2:	683b      	ldr	r3, [r7, #0]
    26a4:	781b      	ldrb	r3, [r3, #0]
    26a6:	2b58      	cmp	r3, #88	; 0x58
    26a8:	d103      	bne.n	26b2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x45a>
          flags |= FLAGS_UPPERCASE;
    26aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    26ac:	f043 0320 	orr.w	r3, r3, #32
    26b0:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
    26b2:	683b      	ldr	r3, [r7, #0]
    26b4:	781b      	ldrb	r3, [r3, #0]
    26b6:	2b69      	cmp	r3, #105	; 0x69
    26b8:	d007      	beq.n	26ca <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x472>
    26ba:	683b      	ldr	r3, [r7, #0]
    26bc:	781b      	ldrb	r3, [r3, #0]
    26be:	2b64      	cmp	r3, #100	; 0x64
    26c0:	d003      	beq.n	26ca <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x472>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    26c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    26c4:	f023 030c 	bic.w	r3, r3, #12
    26c8:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
    26ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    26cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    26d0:	2b00      	cmp	r3, #0
    26d2:	d003      	beq.n	26dc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x484>
          flags &= ~FLAGS_ZEROPAD;
    26d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    26d6:	f023 0301 	bic.w	r3, r3, #1
    26da:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
    26dc:	683b      	ldr	r3, [r7, #0]
    26de:	781b      	ldrb	r3, [r3, #0]
    26e0:	2b69      	cmp	r3, #105	; 0x69
    26e2:	d004      	beq.n	26ee <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x496>
    26e4:	683b      	ldr	r3, [r7, #0]
    26e6:	781b      	ldrb	r3, [r3, #0]
    26e8:	2b64      	cmp	r3, #100	; 0x64
    26ea:	f040 808d 	bne.w	2808 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5b0>
          // signed
          if (flags & FLAGS_LONG_LONG) {
    26ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    26f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
    26f4:	2b00      	cmp	r3, #0
    26f6:	d02e      	beq.n	2756 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4fe>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
    26f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    26fa:	3307      	adds	r3, #7
    26fc:	f023 0307 	bic.w	r3, r3, #7
    2700:	f103 0208 	add.w	r2, r3, #8
    2704:	66ba      	str	r2, [r7, #104]	; 0x68
    2706:	e9d3 3400 	ldrd	r3, r4, [r3]
    270a:	e9c7 3404 	strd	r3, r4, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    270e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
    2712:	2b00      	cmp	r3, #0
    2714:	f174 0200 	sbcs.w	r2, r4, #0
    2718:	da02      	bge.n	2720 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x4c8>
    271a:	425b      	negs	r3, r3
    271c:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
    2720:	4619      	mov	r1, r3
    2722:	4622      	mov	r2, r4
    2724:	697b      	ldr	r3, [r7, #20]
    2726:	0fdb      	lsrs	r3, r3, #31
    2728:	b2d8      	uxtb	r0, r3
    272a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    272c:	f04f 0400 	mov.w	r4, #0
    2730:	6d7d      	ldr	r5, [r7, #84]	; 0x54
    2732:	9508      	str	r5, [sp, #32]
    2734:	6d3d      	ldr	r5, [r7, #80]	; 0x50
    2736:	9507      	str	r5, [sp, #28]
    2738:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
    273a:	9506      	str	r5, [sp, #24]
    273c:	e9cd 3404 	strd	r3, r4, [sp, #16]
    2740:	9002      	str	r0, [sp, #8]
    2742:	e9cd 1200 	strd	r1, r2, [sp]
    2746:	687b      	ldr	r3, [r7, #4]
    2748:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    274a:	68b9      	ldr	r1, [r7, #8]
    274c:	68f8      	ldr	r0, [r7, #12]
    274e:	f7ff faf0 	bl	1d32 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
    2752:	6478      	str	r0, [r7, #68]	; 0x44
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
          }
    2754:	e0c8      	b.n	28e8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
          else if (flags & FLAGS_LONG) {
    2756:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2758:	f403 7380 	and.w	r3, r3, #256	; 0x100
    275c:	2b00      	cmp	r3, #0
    275e:	d01e      	beq.n	279e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x546>
            const long value = va_arg(va, long);
    2760:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2762:	1d1a      	adds	r2, r3, #4
    2764:	66ba      	str	r2, [r7, #104]	; 0x68
    2766:	681b      	ldr	r3, [r3, #0]
    2768:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    276a:	69fb      	ldr	r3, [r7, #28]
    276c:	2b00      	cmp	r3, #0
    276e:	bfb8      	it	lt
    2770:	425b      	neglt	r3, r3
    2772:	4619      	mov	r1, r3
    2774:	69fb      	ldr	r3, [r7, #28]
    2776:	0fdb      	lsrs	r3, r3, #31
    2778:	b2db      	uxtb	r3, r3
    277a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    277c:	9205      	str	r2, [sp, #20]
    277e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    2780:	9204      	str	r2, [sp, #16]
    2782:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    2784:	9203      	str	r2, [sp, #12]
    2786:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    2788:	9202      	str	r2, [sp, #8]
    278a:	9301      	str	r3, [sp, #4]
    278c:	9100      	str	r1, [sp, #0]
    278e:	687b      	ldr	r3, [r7, #4]
    2790:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2792:	68b9      	ldr	r1, [r7, #8]
    2794:	68f8      	ldr	r0, [r7, #12]
    2796:	f7ff fa64 	bl	1c62 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    279a:	6478      	str	r0, [r7, #68]	; 0x44
          }
    279c:	e0a4      	b.n	28e8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    279e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    27a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
    27a4:	2b00      	cmp	r3, #0
    27a6:	d005      	beq.n	27b4 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x55c>
    27a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    27aa:	1d1a      	adds	r2, r3, #4
    27ac:	66ba      	str	r2, [r7, #104]	; 0x68
    27ae:	681b      	ldr	r3, [r3, #0]
    27b0:	b2db      	uxtb	r3, r3
    27b2:	e00e      	b.n	27d2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x57a>
    27b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    27b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
    27ba:	2b00      	cmp	r3, #0
    27bc:	d005      	beq.n	27ca <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x572>
    27be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    27c0:	1d1a      	adds	r2, r3, #4
    27c2:	66ba      	str	r2, [r7, #104]	; 0x68
    27c4:	681b      	ldr	r3, [r3, #0]
    27c6:	b21b      	sxth	r3, r3
    27c8:	e003      	b.n	27d2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x57a>
    27ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    27cc:	1d1a      	adds	r2, r3, #4
    27ce:	66ba      	str	r2, [r7, #104]	; 0x68
    27d0:	681b      	ldr	r3, [r3, #0]
    27d2:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    27d4:	6a3b      	ldr	r3, [r7, #32]
    27d6:	2b00      	cmp	r3, #0
    27d8:	bfb8      	it	lt
    27da:	425b      	neglt	r3, r3
    27dc:	4619      	mov	r1, r3
    27de:	6a3b      	ldr	r3, [r7, #32]
    27e0:	0fdb      	lsrs	r3, r3, #31
    27e2:	b2db      	uxtb	r3, r3
    27e4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    27e6:	9205      	str	r2, [sp, #20]
    27e8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    27ea:	9204      	str	r2, [sp, #16]
    27ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    27ee:	9203      	str	r2, [sp, #12]
    27f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    27f2:	9202      	str	r2, [sp, #8]
    27f4:	9301      	str	r3, [sp, #4]
    27f6:	9100      	str	r1, [sp, #0]
    27f8:	687b      	ldr	r3, [r7, #4]
    27fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    27fc:	68b9      	ldr	r1, [r7, #8]
    27fe:	68f8      	ldr	r0, [r7, #12]
    2800:	f7ff fa2f 	bl	1c62 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    2804:	6478      	str	r0, [r7, #68]	; 0x44
          }
    2806:	e06f      	b.n	28e8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
    2808:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    280a:	f403 7300 	and.w	r3, r3, #512	; 0x200
    280e:	2b00      	cmp	r3, #0
    2810:	d020      	beq.n	2854 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x5fc>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
    2812:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2814:	3307      	adds	r3, #7
    2816:	f023 0307 	bic.w	r3, r3, #7
    281a:	f103 0208 	add.w	r2, r3, #8
    281e:	66ba      	str	r2, [r7, #104]	; 0x68
    2820:	e9d3 3400 	ldrd	r3, r4, [r3]
    2824:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    2826:	4611      	mov	r1, r2
    2828:	f04f 0200 	mov.w	r2, #0
    282c:	6d78      	ldr	r0, [r7, #84]	; 0x54
    282e:	9008      	str	r0, [sp, #32]
    2830:	6d38      	ldr	r0, [r7, #80]	; 0x50
    2832:	9007      	str	r0, [sp, #28]
    2834:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
    2836:	9006      	str	r0, [sp, #24]
    2838:	e9cd 1204 	strd	r1, r2, [sp, #16]
    283c:	2200      	movs	r2, #0
    283e:	9202      	str	r2, [sp, #8]
    2840:	e9cd 3400 	strd	r3, r4, [sp]
    2844:	687b      	ldr	r3, [r7, #4]
    2846:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2848:	68b9      	ldr	r1, [r7, #8]
    284a:	68f8      	ldr	r0, [r7, #12]
    284c:	f7ff fa71 	bl	1d32 <_ntoa_long_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long long, bool, unsigned long long, unsigned int, unsigned int, unsigned int)>
    2850:	6478      	str	r0, [r7, #68]	; 0x44
    2852:	e049      	b.n	28e8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
#endif
          }
          else if (flags & FLAGS_LONG) {
    2854:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2856:	f403 7380 	and.w	r3, r3, #256	; 0x100
    285a:	2b00      	cmp	r3, #0
    285c:	d016      	beq.n	288c <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x634>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    285e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2860:	1d1a      	adds	r2, r3, #4
    2862:	66ba      	str	r2, [r7, #104]	; 0x68
    2864:	681b      	ldr	r3, [r3, #0]
    2866:	6d7a      	ldr	r2, [r7, #84]	; 0x54
    2868:	9205      	str	r2, [sp, #20]
    286a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    286c:	9204      	str	r2, [sp, #16]
    286e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
    2870:	9203      	str	r2, [sp, #12]
    2872:	6c3a      	ldr	r2, [r7, #64]	; 0x40
    2874:	9202      	str	r2, [sp, #8]
    2876:	2200      	movs	r2, #0
    2878:	9201      	str	r2, [sp, #4]
    287a:	9300      	str	r3, [sp, #0]
    287c:	687b      	ldr	r3, [r7, #4]
    287e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2880:	68b9      	ldr	r1, [r7, #8]
    2882:	68f8      	ldr	r0, [r7, #12]
    2884:	f7ff f9ed 	bl	1c62 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    2888:	6478      	str	r0, [r7, #68]	; 0x44
    288a:	e02d      	b.n	28e8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x690>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    288c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    288e:	f003 0340 	and.w	r3, r3, #64	; 0x40
    2892:	2b00      	cmp	r3, #0
    2894:	d005      	beq.n	28a2 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x64a>
    2896:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2898:	1d1a      	adds	r2, r3, #4
    289a:	66ba      	str	r2, [r7, #104]	; 0x68
    289c:	681b      	ldr	r3, [r3, #0]
    289e:	b2db      	uxtb	r3, r3
    28a0:	e00e      	b.n	28c0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x668>
    28a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    28a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
    28a8:	2b00      	cmp	r3, #0
    28aa:	d005      	beq.n	28b8 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x660>
    28ac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    28ae:	1d1a      	adds	r2, r3, #4
    28b0:	66ba      	str	r2, [r7, #104]	; 0x68
    28b2:	681b      	ldr	r3, [r3, #0]
    28b4:	b29b      	uxth	r3, r3
    28b6:	e003      	b.n	28c0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x668>
    28b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    28ba:	1d1a      	adds	r2, r3, #4
    28bc:	66ba      	str	r2, [r7, #104]	; 0x68
    28be:	681b      	ldr	r3, [r3, #0]
    28c0:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    28c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    28c4:	9305      	str	r3, [sp, #20]
    28c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    28c8:	9304      	str	r3, [sp, #16]
    28ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    28cc:	9303      	str	r3, [sp, #12]
    28ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    28d0:	9302      	str	r3, [sp, #8]
    28d2:	2300      	movs	r3, #0
    28d4:	9301      	str	r3, [sp, #4]
    28d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    28d8:	9300      	str	r3, [sp, #0]
    28da:	687b      	ldr	r3, [r7, #4]
    28dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    28de:	68b9      	ldr	r1, [r7, #8]
    28e0:	68f8      	ldr	r0, [r7, #12]
    28e2:	f7ff f9be 	bl	1c62 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    28e6:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
    28e8:	683b      	ldr	r3, [r7, #0]
    28ea:	3301      	adds	r3, #1
    28ec:	603b      	str	r3, [r7, #0]
        break;
    28ee:	e109      	b.n	2b04 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
    28f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    28f2:	3307      	adds	r3, #7
    28f4:	f023 0307 	bic.w	r3, r3, #7
    28f8:	f103 0208 	add.w	r2, r3, #8
    28fc:	66ba      	str	r2, [r7, #104]	; 0x68
    28fe:	ed93 7b00 	vldr	d7, [r3]
    2902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2904:	9302      	str	r3, [sp, #8]
    2906:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    2908:	9301      	str	r3, [sp, #4]
    290a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    290c:	9300      	str	r3, [sp, #0]
    290e:	eeb0 0a47 	vmov.f32	s0, s14
    2912:	eef0 0a67 	vmov.f32	s1, s15
    2916:	687b      	ldr	r3, [r7, #4]
    2918:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    291a:	68b9      	ldr	r1, [r7, #8]
    291c:	68f8      	ldr	r0, [r7, #12]
    291e:	f7ff fa79 	bl	1e14 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)>
    2922:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
    2924:	683b      	ldr	r3, [r7, #0]
    2926:	3301      	adds	r3, #1
    2928:	603b      	str	r3, [r7, #0]
        break;
    292a:	e0eb      	b.n	2b04 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
    292c:	2301      	movs	r3, #1
    292e:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
    2930:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2932:	f003 0302 	and.w	r3, r3, #2
    2936:	2b00      	cmp	r3, #0
    2938:	d113      	bne.n	2962 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x70a>
          while (l++ < width) {
    293a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    293c:	1c5a      	adds	r2, r3, #1
    293e:	63fa      	str	r2, [r7, #60]	; 0x3c
    2940:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    2942:	429a      	cmp	r2, r3
    2944:	bf8c      	ite	hi
    2946:	2301      	movhi	r3, #1
    2948:	2300      	movls	r3, #0
    294a:	b2db      	uxtb	r3, r3
    294c:	2b00      	cmp	r3, #0
    294e:	d008      	beq.n	2962 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x70a>
            out(' ', buffer, idx++, maxlen);
    2950:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2952:	1c53      	adds	r3, r2, #1
    2954:	647b      	str	r3, [r7, #68]	; 0x44
    2956:	68fc      	ldr	r4, [r7, #12]
    2958:	687b      	ldr	r3, [r7, #4]
    295a:	68b9      	ldr	r1, [r7, #8]
    295c:	2020      	movs	r0, #32
    295e:	47a0      	blx	r4
          while (l++ < width) {
    2960:	e7eb      	b.n	293a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x6e2>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    2962:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2964:	1d1a      	adds	r2, r3, #4
    2966:	66ba      	str	r2, [r7, #104]	; 0x68
    2968:	681b      	ldr	r3, [r3, #0]
    296a:	b2d8      	uxtb	r0, r3
    296c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    296e:	1c53      	adds	r3, r2, #1
    2970:	647b      	str	r3, [r7, #68]	; 0x44
    2972:	68fc      	ldr	r4, [r7, #12]
    2974:	687b      	ldr	r3, [r7, #4]
    2976:	68b9      	ldr	r1, [r7, #8]
    2978:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
    297a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    297c:	f003 0302 	and.w	r3, r3, #2
    2980:	2b00      	cmp	r3, #0
    2982:	d013      	beq.n	29ac <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x754>
          while (l++ < width) {
    2984:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    2986:	1c5a      	adds	r2, r3, #1
    2988:	63fa      	str	r2, [r7, #60]	; 0x3c
    298a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    298c:	429a      	cmp	r2, r3
    298e:	bf8c      	ite	hi
    2990:	2301      	movhi	r3, #1
    2992:	2300      	movls	r3, #0
    2994:	b2db      	uxtb	r3, r3
    2996:	2b00      	cmp	r3, #0
    2998:	d008      	beq.n	29ac <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x754>
            out(' ', buffer, idx++, maxlen);
    299a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    299c:	1c53      	adds	r3, r2, #1
    299e:	647b      	str	r3, [r7, #68]	; 0x44
    29a0:	68fc      	ldr	r4, [r7, #12]
    29a2:	687b      	ldr	r3, [r7, #4]
    29a4:	68b9      	ldr	r1, [r7, #8]
    29a6:	2020      	movs	r0, #32
    29a8:	47a0      	blx	r4
          while (l++ < width) {
    29aa:	e7eb      	b.n	2984 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x72c>
          }
        }
        format++;
    29ac:	683b      	ldr	r3, [r7, #0]
    29ae:	3301      	adds	r3, #1
    29b0:	603b      	str	r3, [r7, #0]
        break;
    29b2:	e0a7      	b.n	2b04 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
      }

      case 's' : {
        char* p = va_arg(va, char*);
    29b4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    29b6:	1d1a      	adds	r2, r3, #4
    29b8:	66ba      	str	r2, [r7, #104]	; 0x68
    29ba:	681b      	ldr	r3, [r3, #0]
    29bc:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strlen(p);
    29be:	6bb8      	ldr	r0, [r7, #56]	; 0x38
    29c0:	f7fe ffdf 	bl	1982 <_strlen(char const*)>
    29c4:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
    29c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    29c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    29cc:	2b00      	cmp	r3, #0
    29ce:	d007      	beq.n	29e0 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x788>
          l = (l < precision ? l : precision);
    29d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    29d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    29d4:	429a      	cmp	r2, r3
    29d6:	d201      	bcs.n	29dc <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x784>
    29d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    29da:	e000      	b.n	29de <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x786>
    29dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    29de:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
    29e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    29e2:	f003 0302 	and.w	r3, r3, #2
    29e6:	2b00      	cmp	r3, #0
    29e8:	d113      	bne.n	2a12 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ba>
          while (l++ < width) {
    29ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    29ec:	1c5a      	adds	r2, r3, #1
    29ee:	637a      	str	r2, [r7, #52]	; 0x34
    29f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    29f2:	429a      	cmp	r2, r3
    29f4:	bf8c      	ite	hi
    29f6:	2301      	movhi	r3, #1
    29f8:	2300      	movls	r3, #0
    29fa:	b2db      	uxtb	r3, r3
    29fc:	2b00      	cmp	r3, #0
    29fe:	d008      	beq.n	2a12 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ba>
            out(' ', buffer, idx++, maxlen);
    2a00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2a02:	1c53      	adds	r3, r2, #1
    2a04:	647b      	str	r3, [r7, #68]	; 0x44
    2a06:	68fc      	ldr	r4, [r7, #12]
    2a08:	687b      	ldr	r3, [r7, #4]
    2a0a:	68b9      	ldr	r1, [r7, #8]
    2a0c:	2020      	movs	r0, #32
    2a0e:	47a0      	blx	r4
          while (l++ < width) {
    2a10:	e7eb      	b.n	29ea <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x792>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    2a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2a14:	781b      	ldrb	r3, [r3, #0]
    2a16:	2b00      	cmp	r3, #0
    2a18:	d00b      	beq.n	2a32 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7da>
    2a1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
    2a20:	2b00      	cmp	r3, #0
    2a22:	d004      	beq.n	2a2e <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7d6>
    2a24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    2a26:	1e5a      	subs	r2, r3, #1
    2a28:	64fa      	str	r2, [r7, #76]	; 0x4c
    2a2a:	2b00      	cmp	r3, #0
    2a2c:	d001      	beq.n	2a32 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7da>
    2a2e:	2301      	movs	r3, #1
    2a30:	e000      	b.n	2a34 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7dc>
    2a32:	2300      	movs	r3, #0
    2a34:	2b00      	cmp	r3, #0
    2a36:	d00b      	beq.n	2a50 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7f8>
          out(*(p++), buffer, idx++, maxlen);
    2a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    2a3a:	1c5a      	adds	r2, r3, #1
    2a3c:	63ba      	str	r2, [r7, #56]	; 0x38
    2a3e:	7818      	ldrb	r0, [r3, #0]
    2a40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2a42:	1c53      	adds	r3, r2, #1
    2a44:	647b      	str	r3, [r7, #68]	; 0x44
    2a46:	68fc      	ldr	r4, [r7, #12]
    2a48:	687b      	ldr	r3, [r7, #4]
    2a4a:	68b9      	ldr	r1, [r7, #8]
    2a4c:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    2a4e:	e7e0      	b.n	2a12 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x7ba>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
    2a50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2a52:	f003 0302 	and.w	r3, r3, #2
    2a56:	2b00      	cmp	r3, #0
    2a58:	d013      	beq.n	2a82 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x82a>
          while (l++ < width) {
    2a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    2a5c:	1c5a      	adds	r2, r3, #1
    2a5e:	637a      	str	r2, [r7, #52]	; 0x34
    2a60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
    2a62:	429a      	cmp	r2, r3
    2a64:	bf8c      	ite	hi
    2a66:	2301      	movhi	r3, #1
    2a68:	2300      	movls	r3, #0
    2a6a:	b2db      	uxtb	r3, r3
    2a6c:	2b00      	cmp	r3, #0
    2a6e:	d008      	beq.n	2a82 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x82a>
            out(' ', buffer, idx++, maxlen);
    2a70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2a72:	1c53      	adds	r3, r2, #1
    2a74:	647b      	str	r3, [r7, #68]	; 0x44
    2a76:	68fc      	ldr	r4, [r7, #12]
    2a78:	687b      	ldr	r3, [r7, #4]
    2a7a:	68b9      	ldr	r1, [r7, #8]
    2a7c:	2020      	movs	r0, #32
    2a7e:	47a0      	blx	r4
          while (l++ < width) {
    2a80:	e7eb      	b.n	2a5a <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x802>
          }
        }
        format++;
    2a82:	683b      	ldr	r3, [r7, #0]
    2a84:	3301      	adds	r3, #1
    2a86:	603b      	str	r3, [r7, #0]
        break;
    2a88:	e03c      	b.n	2b04 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
    2a8a:	2308      	movs	r3, #8
    2a8c:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
    2a8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2a90:	f043 0321 	orr.w	r3, r3, #33	; 0x21
    2a94:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
    2a96:	2300      	movs	r3, #0
    2a98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    2a9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
    2a9e:	1d1a      	adds	r2, r3, #4
    2aa0:	66ba      	str	r2, [r7, #104]	; 0x68
    2aa2:	681b      	ldr	r3, [r3, #0]
    2aa4:	461a      	mov	r2, r3
    2aa6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
    2aa8:	9305      	str	r3, [sp, #20]
    2aaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    2aac:	9304      	str	r3, [sp, #16]
    2aae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    2ab0:	9303      	str	r3, [sp, #12]
    2ab2:	2310      	movs	r3, #16
    2ab4:	9302      	str	r3, [sp, #8]
    2ab6:	2300      	movs	r3, #0
    2ab8:	9301      	str	r3, [sp, #4]
    2aba:	9200      	str	r2, [sp, #0]
    2abc:	687b      	ldr	r3, [r7, #4]
    2abe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2ac0:	68b9      	ldr	r1, [r7, #8]
    2ac2:	68f8      	ldr	r0, [r7, #12]
    2ac4:	f7ff f8cd 	bl	1c62 <_ntoa_long(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, unsigned long, bool, unsigned long, unsigned int, unsigned int, unsigned int)>
    2ac8:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
    2aca:	683b      	ldr	r3, [r7, #0]
    2acc:	3301      	adds	r3, #1
    2ace:	603b      	str	r3, [r7, #0]
        break;
    2ad0:	e018      	b.n	2b04 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
    2ad2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2ad4:	1c53      	adds	r3, r2, #1
    2ad6:	647b      	str	r3, [r7, #68]	; 0x44
    2ad8:	68fc      	ldr	r4, [r7, #12]
    2ada:	687b      	ldr	r3, [r7, #4]
    2adc:	68b9      	ldr	r1, [r7, #8]
    2ade:	2025      	movs	r0, #37	; 0x25
    2ae0:	47a0      	blx	r4
        format++;
    2ae2:	683b      	ldr	r3, [r7, #0]
    2ae4:	3301      	adds	r3, #1
    2ae6:	603b      	str	r3, [r7, #0]
        break;
    2ae8:	e00c      	b.n	2b04 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8ac>

      default :
        out(*format, buffer, idx++, maxlen);
    2aea:	683b      	ldr	r3, [r7, #0]
    2aec:	7818      	ldrb	r0, [r3, #0]
    2aee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2af0:	1c53      	adds	r3, r2, #1
    2af2:	647b      	str	r3, [r7, #68]	; 0x44
    2af4:	68fc      	ldr	r4, [r7, #12]
    2af6:	687b      	ldr	r3, [r7, #4]
    2af8:	68b9      	ldr	r1, [r7, #8]
    2afa:	47a0      	blx	r4
        format++;
    2afc:	683b      	ldr	r3, [r7, #0]
    2afe:	3301      	adds	r3, #1
    2b00:	603b      	str	r3, [r7, #0]
        break;
    2b02:	bf00      	nop
  while (*format)
    2b04:	f7ff bbb6 	b.w	2274 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x1c>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    2b08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2b0a:	687b      	ldr	r3, [r7, #4]
    2b0c:	429a      	cmp	r2, r3
    2b0e:	d302      	bcc.n	2b16 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8be>
    2b10:	687b      	ldr	r3, [r7, #4]
    2b12:	1e5a      	subs	r2, r3, #1
    2b14:	e000      	b.n	2b18 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)+0x8c0>
    2b16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
    2b18:	68fc      	ldr	r4, [r7, #12]
    2b1a:	687b      	ldr	r3, [r7, #4]
    2b1c:	68b9      	ldr	r1, [r7, #8]
    2b1e:	2000      	movs	r0, #0
    2b20:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
    2b22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
    2b24:	4618      	mov	r0, r3
    2b26:	3758      	adds	r7, #88	; 0x58
    2b28:	46bd      	mov	sp, r7
    2b2a:	bdb0      	pop	{r4, r5, r7, pc}

00002b2c <printf>:

///////////////////////////////////////////////////////////////////////////////


int printf(const char* format, ...)
{
    2b2c:	b40f      	push	{r0, r1, r2, r3}
    2b2e:	b580      	push	{r7, lr}
    2b30:	b086      	sub	sp, #24
    2b32:	af02      	add	r7, sp, #8
  va_list va;
  va_start(va, format);
    2b34:	f107 031c 	add.w	r3, r7, #28
    2b38:	60bb      	str	r3, [r7, #8]
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    2b3a:	1d39      	adds	r1, r7, #4
    2b3c:	68bb      	ldr	r3, [r7, #8]
    2b3e:	9300      	str	r3, [sp, #0]
    2b40:	69bb      	ldr	r3, [r7, #24]
    2b42:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    2b46:	4806      	ldr	r0, [pc, #24]	; (2b60 <printf+0x34>)
    2b48:	f7ff fb86 	bl	2258 <_vsnprintf(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, char const*, std::__va_list)>
    2b4c:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
    2b4e:	68fb      	ldr	r3, [r7, #12]
}
    2b50:	4618      	mov	r0, r3
    2b52:	3710      	adds	r7, #16
    2b54:	46bd      	mov	sp, r7
    2b56:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
    2b5a:	b004      	add	sp, #16
    2b5c:	4770      	bx	lr
    2b5e:	bf00      	nop
    2b60:	0000195d 	.word	0x0000195d

00002b64 <std::numeric_limits<long long>::max()>:

      static _GLIBCXX_CONSTEXPR long long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_LONG_MAX__; }
    2b64:	b490      	push	{r4, r7}
    2b66:	af00      	add	r7, sp, #0
    2b68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    2b6c:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    2b70:	4618      	mov	r0, r3
    2b72:	4621      	mov	r1, r4
    2b74:	46bd      	mov	sp, r7
    2b76:	bc90      	pop	{r4, r7}
    2b78:	4770      	bx	lr
    2b7a:	Address 0x0000000000002b7a is out of bounds.


00002b7c <sjsu::cortex::DwtCounter::Initialize()>:
{
 public:
  static inline DWT_Type * dwt = DWT;
  static inline CoreDebug_Type * core = CoreDebug;

  void Initialize()
    2b7c:	b480      	push	{r7}
    2b7e:	b083      	sub	sp, #12
    2b80:	af00      	add	r7, sp, #0
    2b82:	6078      	str	r0, [r7, #4]
  {
    core->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    2b84:	4b0c      	ldr	r3, [pc, #48]	; (2bb8 <sjsu::cortex::DwtCounter::Initialize()+0x3c>)
    2b86:	681b      	ldr	r3, [r3, #0]
    2b88:	68da      	ldr	r2, [r3, #12]
    2b8a:	4b0b      	ldr	r3, [pc, #44]	; (2bb8 <sjsu::cortex::DwtCounter::Initialize()+0x3c>)
    2b8c:	681b      	ldr	r3, [r3, #0]
    2b8e:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    2b92:	60da      	str	r2, [r3, #12]
    dwt->CYCCNT  = 0;
    2b94:	4b09      	ldr	r3, [pc, #36]	; (2bbc <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    2b96:	681b      	ldr	r3, [r3, #0]
    2b98:	2200      	movs	r2, #0
    2b9a:	605a      	str	r2, [r3, #4]
    dwt->CTRL   |= DWT_CTRL_CYCCNTENA_Msk;
    2b9c:	4b07      	ldr	r3, [pc, #28]	; (2bbc <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    2b9e:	681b      	ldr	r3, [r3, #0]
    2ba0:	681a      	ldr	r2, [r3, #0]
    2ba2:	4b06      	ldr	r3, [pc, #24]	; (2bbc <sjsu::cortex::DwtCounter::Initialize()+0x40>)
    2ba4:	681b      	ldr	r3, [r3, #0]
    2ba6:	f042 0201 	orr.w	r2, r2, #1
    2baa:	601a      	str	r2, [r3, #0]
  }
    2bac:	bf00      	nop
    2bae:	370c      	adds	r7, #12
    2bb0:	46bd      	mov	sp, r7
    2bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
    2bb6:	4770      	bx	lr
    2bb8:	10000010 	.word	0x10000010
    2bbc:	1000000c 	.word	0x1000000c

00002bc0 <sjsu::cortex::DwtCounter::GetCount()>:
  uint32_t GetCount()
    2bc0:	b480      	push	{r7}
    2bc2:	b083      	sub	sp, #12
    2bc4:	af00      	add	r7, sp, #0
    2bc6:	6078      	str	r0, [r7, #4]
  {
    return dwt->CYCCNT;
    2bc8:	4b04      	ldr	r3, [pc, #16]	; (2bdc <sjsu::cortex::DwtCounter::GetCount()+0x1c>)
    2bca:	681b      	ldr	r3, [r3, #0]
    2bcc:	685b      	ldr	r3, [r3, #4]
  }
    2bce:	4618      	mov	r0, r3
    2bd0:	370c      	adds	r7, #12
    2bd2:	46bd      	mov	sp, r7
    2bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
    2bd8:	4770      	bx	lr
    2bda:	bf00      	nop
    2bdc:	1000000c 	.word	0x1000000c

00002be0 <sjsu::cortex::InitializeFloatingPointUnit()>:
// are executed on an ARM platform
// Found here:
// http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.dui0553a/BABGHFIB.html
// // NOLINT
inline void InitializeFloatingPointUnit()
{
    2be0:	b480      	push	{r7}
    2be2:	af00      	add	r7, sp, #0
        // Write back the modified value to the CPACR
        "STR     R1, [R0]\n"
        // Wait for store to complete
        "DSB\n"
        // reset pipeline now the FPU is enabled
        "ISB\n");
    2be4:	f8df 001c 	ldr.w	r0, [pc, #28]	; 2c04 <sjsu::cortex::InitializeFloatingPointUnit()+0x24>
    2be8:	6801      	ldr	r1, [r0, #0]
    2bea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
    2bee:	6001      	str	r1, [r0, #0]
    2bf0:	f3bf 8f4f 	dsb	sy
    2bf4:	f3bf 8f6f 	isb	sy
  }
}
    2bf8:	bf00      	nop
    2bfa:	46bd      	mov	sp, r7
    2bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
    2c00:	4770      	bx	lr
    2c02:	0000      	.short	0x0000
    2c04:	e000ed88 	.word	0xe000ed88

00002c08 <units::literals::operator"" _Hz(unsigned long long)>:
	 *				`frequency_unit`.
	 * @anchor		frequencyContainers
	 * @sa			See unit_t for more information on unit type containers.
	 */
#if !defined(DISABLE_PREDEFINED_UNITS) || defined(ENABLE_PREDEFINED_FREQUENCY_UNITS)
	UNIT_ADD_WITH_METRIC_PREFIXES(frequency, hertz, hertz, Hz, unit<std::ratio<1>, units::category::frequency_unit>)
    2c08:	b580      	push	{r7, lr}
    2c0a:	b084      	sub	sp, #16
    2c0c:	af00      	add	r7, sp, #0
    2c0e:	e9c7 0100 	strd	r0, r1, [r7]

/// Used to set the FreeRTOS tick frequency defined in Hz
#if !defined(SJ2_RTOS_FREQUENCY)
#define SJ2_RTOS_FREQUENCY 1'000_Hz
#endif  // !defined(SJ2_RTOS_FREQUENCY)
SJ2_DECLARE_CONSTANT(RTOS_FREQUENCY, units::frequency::hertz_t, kRtosFrequency);
    2c12:	e9d7 0100 	ldrd	r0, r1, [r7]
    2c16:	f001 ff9f 	bl	4b58 <__aeabi_ul2f>
    2c1a:	4602      	mov	r2, r0
    2c1c:	f107 030c 	add.w	r3, r7, #12
    2c20:	ee00 2a10 	vmov	s0, r2
    2c24:	4618      	mov	r0, r3
    2c26:	f000 f85c 	bl	2ce2 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    2c2a:	68fb      	ldr	r3, [r7, #12]
    2c2c:	4618      	mov	r0, r3
    2c2e:	3710      	adds	r7, #16
    2c30:	46bd      	mov	sp, r7
    2c32:	bd80      	pop	{r7, pc}

00002c34 <units::literals::operator"" _MHz(unsigned long long)>:
    2c34:	b580      	push	{r7, lr}
    2c36:	b084      	sub	sp, #16
    2c38:	af00      	add	r7, sp, #0
    2c3a:	e9c7 0100 	strd	r0, r1, [r7]
SJ2_DECLARE_CONSTANT(SYSTEM_CLOCK_RATE_MHZ,
    2c3e:	e9d7 0100 	ldrd	r0, r1, [r7]
    2c42:	f001 ff89 	bl	4b58 <__aeabi_ul2f>
    2c46:	4602      	mov	r2, r0
    2c48:	f107 030c 	add.w	r3, r7, #12
    2c4c:	ee00 2a10 	vmov	s0, r2
    2c50:	4618      	mov	r0, r3
    2c52:	f000 f805 	bl	2c60 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    2c56:	68fb      	ldr	r3, [r7, #12]
    2c58:	4618      	mov	r0, r3
    2c5a:	3710      	adds	r7, #16
    2c5c:	46bd      	mov	sp, r7
    2c5e:	bd80      	pop	{r7, pc}

00002c60 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
    2c60:	b580      	push	{r7, lr}
    2c62:	b082      	sub	sp, #8
    2c64:	af00      	add	r7, sp, #0
    2c66:	6078      	str	r0, [r7, #4]
    2c68:	ed87 0a00 	vstr	s0, [r7]
    2c6c:	687b      	ldr	r3, [r7, #4]
    2c6e:	463a      	mov	r2, r7
    2c70:	4611      	mov	r1, r2
    2c72:	4618      	mov	r0, r3
    2c74:	f000 f805 	bl	2c82 <units::linear_scale<float>::linear_scale<>(float const&)>
		}
    2c78:	687b      	ldr	r3, [r7, #4]
    2c7a:	4618      	mov	r0, r3
    2c7c:	3708      	adds	r7, #8
    2c7e:	46bd      	mov	sp, r7
    2c80:	bd80      	pop	{r7, pc}

00002c82 <units::linear_scale<float>::linear_scale<>(float const&)>:
		inline constexpr linear_scale(const T& value, Args&&...) noexcept : m_value(value) {}	///< constructor.
    2c82:	b480      	push	{r7}
    2c84:	b083      	sub	sp, #12
    2c86:	af00      	add	r7, sp, #0
    2c88:	6078      	str	r0, [r7, #4]
    2c8a:	6039      	str	r1, [r7, #0]
    2c8c:	683b      	ldr	r3, [r7, #0]
    2c8e:	681a      	ldr	r2, [r3, #0]
    2c90:	687b      	ldr	r3, [r7, #4]
    2c92:	601a      	str	r2, [r3, #0]
    2c94:	687b      	ldr	r3, [r7, #4]
    2c96:	4618      	mov	r0, r3
    2c98:	370c      	adds	r7, #12
    2c9a:	46bd      	mov	sp, r7
    2c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ca0:	4770      	bx	lr

00002ca2 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    2ca2:	b580      	push	{r7, lr}
    2ca4:	b086      	sub	sp, #24
    2ca6:	af00      	add	r7, sp, #0
    2ca8:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    2caa:	6878      	ldr	r0, [r7, #4]
    2cac:	f000 f807 	bl	2cbe <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    2cb0:	eef0 7a40 	vmov.f32	s15, s0
	}
    2cb4:	eeb0 0a67 	vmov.f32	s0, s15
    2cb8:	3718      	adds	r7, #24
    2cba:	46bd      	mov	sp, r7
    2cbc:	bd80      	pop	{r7, pc}

00002cbe <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
    2cbe:	b480      	push	{r7}
    2cc0:	b085      	sub	sp, #20
    2cc2:	af00      	add	r7, sp, #0
    2cc4:	60f8      	str	r0, [r7, #12]
    2cc6:	7239      	strb	r1, [r7, #8]
    2cc8:	713a      	strb	r2, [r7, #4]
    2cca:	703b      	strb	r3, [r7, #0]
			return value;
    2ccc:	68fb      	ldr	r3, [r7, #12]
    2cce:	681b      	ldr	r3, [r3, #0]
    2cd0:	ee07 3a90 	vmov	s15, r3
		}
    2cd4:	eeb0 0a67 	vmov.f32	s0, s15
    2cd8:	3714      	adds	r7, #20
    2cda:	46bd      	mov	sp, r7
    2cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ce0:	4770      	bx	lr

00002ce2 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
    2ce2:	b580      	push	{r7, lr}
    2ce4:	b082      	sub	sp, #8
    2ce6:	af00      	add	r7, sp, #0
    2ce8:	6078      	str	r0, [r7, #4]
    2cea:	ed87 0a00 	vstr	s0, [r7]
    2cee:	687b      	ldr	r3, [r7, #4]
    2cf0:	463a      	mov	r2, r7
    2cf2:	4611      	mov	r1, r2
    2cf4:	4618      	mov	r0, r3
    2cf6:	f7ff ffc4 	bl	2c82 <units::linear_scale<float>::linear_scale<>(float const&)>
		}
    2cfa:	687b      	ldr	r3, [r7, #4]
    2cfc:	4618      	mov	r0, r3
    2cfe:	3708      	adds	r7, #8
    2d00:	46bd      	mov	sp, r7
    2d02:	bd80      	pop	{r7, pc}

00002d04 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    2d04:	b580      	push	{r7, lr}
    2d06:	b086      	sub	sp, #24
    2d08:	af00      	add	r7, sp, #0
    2d0a:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    2d0c:	6878      	ldr	r0, [r7, #4]
    2d0e:	f000 f807 	bl	2d20 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    2d12:	eef0 7a40 	vmov.f32	s15, s0
	}
    2d16:	eeb0 0a67 	vmov.f32	s0, s15
    2d1a:	3718      	adds	r7, #24
    2d1c:	46bd      	mov	sp, r7
    2d1e:	bd80      	pop	{r7, pc}

00002d20 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
    2d20:	b480      	push	{r7}
    2d22:	b085      	sub	sp, #20
    2d24:	af00      	add	r7, sp, #0
    2d26:	60f8      	str	r0, [r7, #12]
    2d28:	7239      	strb	r1, [r7, #8]
    2d2a:	713a      	strb	r2, [r7, #4]
    2d2c:	703b      	strb	r3, [r7, #0]
			return value;
    2d2e:	68fb      	ldr	r3, [r7, #12]
    2d30:	681b      	ldr	r3, [r3, #0]
    2d32:	ee07 3a90 	vmov	s15, r3
		}
    2d36:	eeb0 0a67 	vmov.f32	s0, s15
    2d3a:	3714      	adds	r7, #20
    2d3c:	46bd      	mov	sp, r7
    2d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    2d42:	4770      	bx	lr

00002d44 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator<=(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    2d44:	b580      	push	{r7, lr}
    2d46:	ed2d 8b02 	vpush	{d8}
    2d4a:	b082      	sub	sp, #8
    2d4c:	af00      	add	r7, sp, #0
    2d4e:	6078      	str	r0, [r7, #4]
    2d50:	6039      	str	r1, [r7, #0]
			return (nls::m_value <= units::convert<UnitsRhs, Units>(rhs.m_value));
    2d52:	687b      	ldr	r3, [r7, #4]
    2d54:	ed93 8a00 	vldr	s16, [r3]
    2d58:	683b      	ldr	r3, [r7, #0]
    2d5a:	4618      	mov	r0, r3
    2d5c:	f7ff ffd2 	bl	2d04 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    2d60:	eef0 7a40 	vmov.f32	s15, s0
    2d64:	eeb4 8ae7 	vcmpe.f32	s16, s15
    2d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    2d6c:	bf94      	ite	ls
    2d6e:	2301      	movls	r3, #1
    2d70:	2300      	movhi	r3, #0
    2d72:	b2db      	uxtb	r3, r3
		}
    2d74:	4618      	mov	r0, r3
    2d76:	3708      	adds	r7, #8
    2d78:	46bd      	mov	sp, r7
    2d7a:	ecbd 8b02 	vpop	{d8}
    2d7e:	bd80      	pop	{r7, pc}

00002d80 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>:

	template<typename _Rep2, typename = typename
	       enable_if<is_convertible<_Rep2, rep>::value
			 && (treat_as_floating_point<rep>::value
			     || !treat_as_floating_point<_Rep2>::value)>::type>
	  constexpr explicit duration(const _Rep2& __rep)
    2d80:	b490      	push	{r4, r7}
    2d82:	b082      	sub	sp, #8
    2d84:	af00      	add	r7, sp, #0
    2d86:	6078      	str	r0, [r7, #4]
    2d88:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
    2d8a:	683b      	ldr	r3, [r7, #0]
    2d8c:	e9d3 3400 	ldrd	r3, r4, [r3]
    2d90:	687a      	ldr	r2, [r7, #4]
    2d92:	e9c2 3400 	strd	r3, r4, [r2]
    2d96:	687b      	ldr	r3, [r7, #4]
    2d98:	4618      	mov	r0, r3
    2d9a:	3708      	adds	r7, #8
    2d9c:	46bd      	mov	sp, r7
    2d9e:	bc90      	pop	{r4, r7}
    2da0:	4770      	bx	lr
    2da2:	Address 0x0000000000002da2 is out of bounds.


00002da4 <sjsu::DefaultUptime()>:
{
// Definition of an UptimeFunction
using UptimeFunction = std::chrono::microseconds (*)();

inline std::chrono::microseconds DefaultUptime()
{
    2da4:	b580      	push	{r7, lr}
    2da6:	b082      	sub	sp, #8
    2da8:	af00      	add	r7, sp, #0
    2daa:	6078      	str	r0, [r7, #4]
  static std::chrono::microseconds default_uptime = 0us;
  return default_uptime++;
    2dac:	687b      	ldr	r3, [r7, #4]
    2dae:	2200      	movs	r2, #0
    2db0:	4903      	ldr	r1, [pc, #12]	; (2dc0 <sjsu::DefaultUptime()+0x1c>)
    2db2:	4618      	mov	r0, r3
    2db4:	f001 fae2 	bl	437c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator++(int)>
}
    2db8:	6878      	ldr	r0, [r7, #4]
    2dba:	3708      	adds	r7, #8
    2dbc:	46bd      	mov	sp, r7
    2dbe:	bd80      	pop	{r7, pc}
    2dc0:	100003c8 	.word	0x100003c8

00002dc4 <sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())>:

inline UptimeFunction Uptime = DefaultUptime;  // NOLINT

// Returns the system uptime in microseconds, do not use this function directly
inline void SetUptimeFunction(UptimeFunction uptime_function)
{
    2dc4:	b480      	push	{r7}
    2dc6:	b083      	sub	sp, #12
    2dc8:	af00      	add	r7, sp, #0
    2dca:	6078      	str	r0, [r7, #4]
  Uptime = uptime_function;
    2dcc:	4a04      	ldr	r2, [pc, #16]	; (2de0 <sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())+0x1c>)
    2dce:	687b      	ldr	r3, [r7, #4]
    2dd0:	6013      	str	r3, [r2, #0]
}
    2dd2:	bf00      	nop
    2dd4:	370c      	adds	r7, #12
    2dd6:	46bd      	mov	sp, r7
    2dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
    2ddc:	4770      	bx	lr
    2dde:	bf00      	nop
    2de0:	10000014 	.word	0x10000014

00002de4 <sjsu::cortex::InterruptController::LookupHandler()>:
  static void LookupHandler()
    2de4:	b580      	push	{r7, lr}
    2de6:	b082      	sub	sp, #8
    2de8:	af00      	add	r7, sp, #0
    int active_isr = (scb->ICSR & 0xFF);
    2dea:	4b09      	ldr	r3, [pc, #36]	; (2e10 <sjsu::cortex::InterruptController::LookupHandler()+0x2c>)
    2dec:	681b      	ldr	r3, [r3, #0]
    2dee:	685b      	ldr	r3, [r3, #4]
    2df0:	b2db      	uxtb	r3, r3
    2df2:	607b      	str	r3, [r7, #4]
    current_vector = active_isr;
    2df4:	4a07      	ldr	r2, [pc, #28]	; (2e14 <sjsu::cortex::InterruptController::LookupHandler()+0x30>)
    2df6:	687b      	ldr	r3, [r7, #4]
    2df8:	6013      	str	r3, [r2, #0]
    IsrPointer isr = table.vector[active_isr];
    2dfa:	4a07      	ldr	r2, [pc, #28]	; (2e18 <sjsu::cortex::InterruptController::LookupHandler()+0x34>)
    2dfc:	687b      	ldr	r3, [r7, #4]
    2dfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2e02:	603b      	str	r3, [r7, #0]
    isr();
    2e04:	683b      	ldr	r3, [r7, #0]
    2e06:	4798      	blx	r3
  }
    2e08:	bf00      	nop
    2e0a:	3708      	adds	r7, #8
    2e0c:	46bd      	mov	sp, r7
    2e0e:	bd80      	pop	{r7, pc}
    2e10:	10000018 	.word	0x10000018
    2e14:	10000000 	.word	0x10000000
    2e18:	100000f0 	.word	0x100000f0

00002e1c <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>:
  // ==============================
  // Utility Methods
  // ==============================

  /// @returns current bus/peripheral operating frequency
  units::frequency::hertz_t GetPeripheralFrequency(
    2e1c:	b580      	push	{r7, lr}
    2e1e:	b086      	sub	sp, #24
    2e20:	af00      	add	r7, sp, #0
    2e22:	6078      	str	r0, [r7, #4]
    2e24:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const
  {
    uint32_t peripheral_clock_divider =
        GetPeripheralClockDivider(peripheral_select);
    2e26:	687b      	ldr	r3, [r7, #4]
    2e28:	681b      	ldr	r3, [r3, #0]
    2e2a:	3308      	adds	r3, #8
    2e2c:	681b      	ldr	r3, [r3, #0]
    2e2e:	6839      	ldr	r1, [r7, #0]
    2e30:	6878      	ldr	r0, [r7, #4]
    2e32:	4798      	blx	r3
    2e34:	6178      	str	r0, [r7, #20]
    // return 0 if peripheral_clock_divider == 0
    units::frequency::hertz_t result = 0_Hz;
    2e36:	f04f 0300 	mov.w	r3, #0
    2e3a:	60fb      	str	r3, [r7, #12]
    if (peripheral_clock_divider != 0)
    2e3c:	697b      	ldr	r3, [r7, #20]
    2e3e:	2b00      	cmp	r3, #0
    2e40:	d00f      	beq.n	2e62 <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const+0x46>
    {
      result = GetSystemFrequency() / peripheral_clock_divider;
    2e42:	687b      	ldr	r3, [r7, #4]
    2e44:	681b      	ldr	r3, [r3, #0]
    2e46:	330c      	adds	r3, #12
    2e48:	681b      	ldr	r3, [r3, #0]
    2e4a:	6878      	ldr	r0, [r7, #4]
    2e4c:	4798      	blx	r3
    2e4e:	4603      	mov	r3, r0
    2e50:	613b      	str	r3, [r7, #16]
    2e52:	f107 0310 	add.w	r3, r7, #16
    2e56:	6979      	ldr	r1, [r7, #20]
    2e58:	4618      	mov	r0, r3
    2e5a:	f001 fad1 	bl	4400 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)>
    2e5e:	4603      	mov	r3, r0
    2e60:	60fb      	str	r3, [r7, #12]
    }
    return result;
    2e62:	68fb      	ldr	r3, [r7, #12]
  }
    2e64:	4618      	mov	r0, r3
    2e66:	3718      	adds	r7, #24
    2e68:	46bd      	mov	sp, r7
    2e6a:	bd80      	pop	{r7, pc}

00002e6c <sjsu::SystemTimer::SystemTimer()>:
#include "utility/status.hpp"
#include "utility/units.hpp"

namespace sjsu
{
class SystemTimer
    2e6c:	b480      	push	{r7}
    2e6e:	b083      	sub	sp, #12
    2e70:	af00      	add	r7, sp, #0
    2e72:	6078      	str	r0, [r7, #4]
    2e74:	4a04      	ldr	r2, [pc, #16]	; (2e88 <sjsu::SystemTimer::SystemTimer()+0x1c>)
    2e76:	687b      	ldr	r3, [r7, #4]
    2e78:	601a      	str	r2, [r3, #0]
    2e7a:	687b      	ldr	r3, [r7, #4]
    2e7c:	4618      	mov	r0, r3
    2e7e:	370c      	adds	r7, #12
    2e80:	46bd      	mov	sp, r7
    2e82:	f85d 7b04 	ldr.w	r7, [sp], #4
    2e86:	4770      	bx	lr
    2e88:	00007264 	.word	0x00007264

00002e8c <sjsu::cortex::SystemTimer::SystemTimer(sjsu::SystemController const&, sjsu::InterruptController const&)>:
  /// milliseconds counter.
  inline static std::chrono::microseconds counter = 0us;
  inline static const sjsu::cortex::InterruptController
      kCortexInterruptController = sjsu::cortex::InterruptController();

  explicit SystemTimer(const sjsu::SystemController & system_controller,
    2e8c:	b580      	push	{r7, lr}
    2e8e:	b084      	sub	sp, #16
    2e90:	af00      	add	r7, sp, #0
    2e92:	60f8      	str	r0, [r7, #12]
    2e94:	60b9      	str	r1, [r7, #8]
    2e96:	607a      	str	r2, [r7, #4]
                       const sjsu::InterruptController & interrupt_controller =
                           kCortexInterruptController)
      : system_controller_(system_controller),
        interrupt_controller_(interrupt_controller)
    2e98:	68fb      	ldr	r3, [r7, #12]
    2e9a:	4618      	mov	r0, r3
    2e9c:	f7ff ffe6 	bl	2e6c <sjsu::SystemTimer::SystemTimer()>
    2ea0:	4a06      	ldr	r2, [pc, #24]	; (2ebc <sjsu::cortex::SystemTimer::SystemTimer(sjsu::SystemController const&, sjsu::InterruptController const&)+0x30>)
    2ea2:	68fb      	ldr	r3, [r7, #12]
    2ea4:	601a      	str	r2, [r3, #0]
    2ea6:	68fb      	ldr	r3, [r7, #12]
    2ea8:	68ba      	ldr	r2, [r7, #8]
    2eaa:	605a      	str	r2, [r3, #4]
    2eac:	68fb      	ldr	r3, [r7, #12]
    2eae:	687a      	ldr	r2, [r7, #4]
    2eb0:	609a      	str	r2, [r3, #8]
  {
  }
    2eb2:	68fb      	ldr	r3, [r7, #12]
    2eb4:	4618      	mov	r0, r3
    2eb6:	3710      	adds	r7, #16
    2eb8:	46bd      	mov	sp, r7
    2eba:	bd80      	pop	{r7, pc}
    2ebc:	00007250 	.word	0x00007250

00002ec0 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()>:
    operator""ms(long double __msecs)
    { return chrono::duration<long double, milli>{__msecs}; }

    template <char... _Digits>
      constexpr chrono::milliseconds
      operator""ms()
    2ec0:	b580      	push	{r7, lr}
    2ec2:	b082      	sub	sp, #8
    2ec4:	af00      	add	r7, sp, #0
    2ec6:	6078      	str	r0, [r7, #4]
      { return __check_overflow<chrono::milliseconds, _Digits...>(); }
    2ec8:	687b      	ldr	r3, [r7, #4]
    2eca:	4618      	mov	r0, r3
    2ecc:	f000 f804 	bl	2ed8 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()>
    2ed0:	6878      	ldr	r0, [r7, #4]
    2ed2:	3708      	adds	r7, #8
    2ed4:	46bd      	mov	sp, r7
    2ed6:	bd80      	pop	{r7, pc}

00002ed8 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()>:
      constexpr _Dur __check_overflow()
    2ed8:	b580      	push	{r7, lr}
    2eda:	b082      	sub	sp, #8
    2edc:	af00      	add	r7, sp, #0
    2ede:	6078      	str	r0, [r7, #4]
	return _Dur{_CheckedVal::value};
    2ee0:	4903      	ldr	r1, [pc, #12]	; (2ef0 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::__check_overflow<std::chrono::duration<long long, std::ratio<1ll, 1000ll> >, (char)49>()+0x18>)
    2ee2:	6878      	ldr	r0, [r7, #4]
    2ee4:	f000 f806 	bl	2ef4 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)>
      }
    2ee8:	6878      	ldr	r0, [r7, #4]
    2eea:	3708      	adds	r7, #8
    2eec:	46bd      	mov	sp, r7
    2eee:	bd80      	pop	{r7, pc}
    2ef0:	000070f8 	.word	0x000070f8

00002ef4 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::duration<long long, void>(long long const&)>:
	  constexpr explicit duration(const _Rep2& __rep)
    2ef4:	b490      	push	{r4, r7}
    2ef6:	b082      	sub	sp, #8
    2ef8:	af00      	add	r7, sp, #0
    2efa:	6078      	str	r0, [r7, #4]
    2efc:	6039      	str	r1, [r7, #0]
	  : __r(static_cast<rep>(__rep)) { }
    2efe:	683b      	ldr	r3, [r7, #0]
    2f00:	e9d3 3400 	ldrd	r3, r4, [r3]
    2f04:	687a      	ldr	r2, [r7, #4]
    2f06:	e9c2 3400 	strd	r3, r4, [r2]
    2f0a:	687b      	ldr	r3, [r7, #4]
    2f0c:	4618      	mov	r0, r3
    2f0e:	3708      	adds	r7, #8
    2f10:	46bd      	mov	sp, r7
    2f12:	bc90      	pop	{r4, r7}
    2f14:	4770      	bx	lr

00002f16 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
      duration_cast(const duration<_Rep, _Period>& __d)
    2f16:	b580      	push	{r7, lr}
    2f18:	b082      	sub	sp, #8
    2f1a:	af00      	add	r7, sp, #0
    2f1c:	6078      	str	r0, [r7, #4]
    2f1e:	6039      	str	r1, [r7, #0]
	return __dc::__cast(__d);
    2f20:	687b      	ldr	r3, [r7, #4]
    2f22:	6839      	ldr	r1, [r7, #0]
    2f24:	4618      	mov	r0, r3
    2f26:	f000 f811 	bl	2f4c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
      }
    2f2a:	6878      	ldr	r0, [r7, #4]
    2f2c:	3708      	adds	r7, #8
    2f2e:	46bd      	mov	sp, r7
    2f30:	bd80      	pop	{r7, pc}

00002f32 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const>:
	count() const
    2f32:	b490      	push	{r4, r7}
    2f34:	b082      	sub	sp, #8
    2f36:	af00      	add	r7, sp, #0
    2f38:	6078      	str	r0, [r7, #4]
	{ return __r; }
    2f3a:	687b      	ldr	r3, [r7, #4]
    2f3c:	e9d3 3400 	ldrd	r3, r4, [r3]
    2f40:	4618      	mov	r0, r3
    2f42:	4621      	mov	r1, r4
    2f44:	3708      	adds	r7, #8
    2f46:	46bd      	mov	sp, r7
    2f48:	bc90      	pop	{r4, r7}
    2f4a:	4770      	bx	lr

00002f4c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > std::chrono::__duration_cast_impl<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::ratio<1000ll, 1ll>, long long, false, true>::__cast<long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
	  __cast(const duration<_Rep, _Period>& __d)
    2f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f4e:	b085      	sub	sp, #20
    2f50:	af00      	add	r7, sp, #0
    2f52:	6078      	str	r0, [r7, #4]
    2f54:	6039      	str	r1, [r7, #0]
	      static_cast<_CR>(__d.count()) * static_cast<_CR>(_CF::num)));
    2f56:	6838      	ldr	r0, [r7, #0]
    2f58:	f7ff ffeb 	bl	2f32 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> >::count() const>
    2f5c:	4605      	mov	r5, r0
    2f5e:	460e      	mov	r6, r1
    2f60:	462b      	mov	r3, r5
    2f62:	4634      	mov	r4, r6
    2f64:	f04f 0100 	mov.w	r1, #0
    2f68:	f04f 0200 	mov.w	r2, #0
    2f6c:	0162      	lsls	r2, r4, #5
    2f6e:	ea42 62d3 	orr.w	r2, r2, r3, lsr #27
    2f72:	0159      	lsls	r1, r3, #5
    2f74:	460b      	mov	r3, r1
    2f76:	4614      	mov	r4, r2
    2f78:	1b5b      	subs	r3, r3, r5
    2f7a:	eb64 0406 	sbc.w	r4, r4, r6
    2f7e:	f04f 0100 	mov.w	r1, #0
    2f82:	f04f 0200 	mov.w	r2, #0
    2f86:	00a2      	lsls	r2, r4, #2
    2f88:	ea42 7293 	orr.w	r2, r2, r3, lsr #30
    2f8c:	0099      	lsls	r1, r3, #2
    2f8e:	460b      	mov	r3, r1
    2f90:	4614      	mov	r4, r2
    2f92:	195b      	adds	r3, r3, r5
    2f94:	eb44 0406 	adc.w	r4, r4, r6
    2f98:	f04f 0100 	mov.w	r1, #0
    2f9c:	f04f 0200 	mov.w	r2, #0
    2fa0:	00e2      	lsls	r2, r4, #3
    2fa2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
    2fa6:	00d9      	lsls	r1, r3, #3
    2fa8:	460b      	mov	r3, r1
    2faa:	4614      	mov	r4, r2
    2fac:	e9c7 3402 	strd	r3, r4, [r7, #8]
    2fb0:	f107 0308 	add.w	r3, r7, #8
    2fb4:	4619      	mov	r1, r3
    2fb6:	6878      	ldr	r0, [r7, #4]
    2fb8:	f7ff fee2 	bl	2d80 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
	  }
    2fbc:	6878      	ldr	r0, [r7, #4]
    2fbe:	3714      	adds	r7, #20
    2fc0:	46bd      	mov	sp, r7
    2fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

00002fc4 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>:
	  constexpr duration(const duration<_Rep2, _Period2>& __d)
    2fc4:	b590      	push	{r4, r7, lr}
    2fc6:	b085      	sub	sp, #20
    2fc8:	af00      	add	r7, sp, #0
    2fca:	6078      	str	r0, [r7, #4]
    2fcc:	6039      	str	r1, [r7, #0]
	  : __r(duration_cast<duration>(__d).count()) { }
    2fce:	f107 0308 	add.w	r3, r7, #8
    2fd2:	6839      	ldr	r1, [r7, #0]
    2fd4:	4618      	mov	r0, r3
    2fd6:	f7ff ff9e 	bl	2f16 <std::enable_if<std::chrono::__is_duration<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::value, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::duration_cast<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, long long, std::ratio<1ll, 1000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
    2fda:	f107 0308 	add.w	r3, r7, #8
    2fde:	4618      	mov	r0, r3
    2fe0:	f000 f80a 	bl	2ff8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    2fe4:	4603      	mov	r3, r0
    2fe6:	460c      	mov	r4, r1
    2fe8:	687a      	ldr	r2, [r7, #4]
    2fea:	e9c2 3400 	strd	r3, r4, [r2]
    2fee:	687b      	ldr	r3, [r7, #4]
    2ff0:	4618      	mov	r0, r3
    2ff2:	3714      	adds	r7, #20
    2ff4:	46bd      	mov	sp, r7
    2ff6:	bd90      	pop	{r4, r7, pc}

00002ff8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>:
	count() const
    2ff8:	b490      	push	{r4, r7}
    2ffa:	b082      	sub	sp, #8
    2ffc:	af00      	add	r7, sp, #0
    2ffe:	6078      	str	r0, [r7, #4]
	{ return __r; }
    3000:	687b      	ldr	r3, [r7, #4]
    3002:	e9d3 3400 	ldrd	r3, r4, [r3]
    3006:	4618      	mov	r0, r3
    3008:	4621      	mov	r1, r4
    300a:	3708      	adds	r7, #8
    300c:	46bd      	mov	sp, r7
    300e:	bc90      	pop	{r4, r7}
    3010:	4770      	bx	lr
    3012:	Address 0x0000000000003012 is out of bounds.


00003014 <sjsu::cortex::SystemTimer::SystemTimerHandler()>:
  {
    sys_tick->LOAD = 0;
    sys_tick->VAL  = 0;
    sys_tick->CTRL = 0;
  }
  static void SystemTimerHandler()
    3014:	b580      	push	{r7, lr}
    3016:	b084      	sub	sp, #16
    3018:	af00      	add	r7, sp, #0
  {
    counter += 1ms;
    301a:	f107 0308 	add.w	r3, r7, #8
    301e:	4618      	mov	r0, r3
    3020:	f7ff ff4e 	bl	2ec0 <std::chrono::duration<long long, std::ratio<1ll, 1000ll> > std::literals::chrono_literals::operator"" ms<(char)49>()>
    3024:	f107 0208 	add.w	r2, r7, #8
    3028:	463b      	mov	r3, r7
    302a:	4611      	mov	r1, r2
    302c:	4618      	mov	r0, r3
    302e:	f7ff ffc9 	bl	2fc4 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, std::ratio<1ll, 1000ll>, void>(std::chrono::duration<long long, std::ratio<1ll, 1000ll> > const&)>
    3032:	463b      	mov	r3, r7
    3034:	4619      	mov	r1, r3
    3036:	4807      	ldr	r0, [pc, #28]	; (3054 <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x40>)
    3038:	f001 fa00 	bl	443c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    // This assumes that SysTickHandler is called every millisecond.
    // Changing that frequency will distort the milliseconds time.
    if (system_timer_isr != nullptr)
    303c:	4b06      	ldr	r3, [pc, #24]	; (3058 <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x44>)
    303e:	681b      	ldr	r3, [r3, #0]
    3040:	2b00      	cmp	r3, #0
    3042:	d002      	beq.n	304a <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x36>
    {
      system_timer_isr();
    3044:	4b04      	ldr	r3, [pc, #16]	; (3058 <sjsu::cortex::SystemTimer::SystemTimerHandler()+0x44>)
    3046:	681b      	ldr	r3, [r3, #0]
    3048:	4798      	blx	r3
    }
  }
    304a:	bf00      	nop
    304c:	3710      	adds	r7, #16
    304e:	46bd      	mov	sp, r7
    3050:	bd80      	pop	{r7, pc}
    3052:	bf00      	nop
    3054:	100003d8 	.word	0x100003d8
    3058:	100003d0 	.word	0x100003d0

0000305c <sjsu::cortex::SystemTimer::GetCount()>:
  static std::chrono::microseconds GetCount()
    305c:	b490      	push	{r4, r7}
    305e:	b082      	sub	sp, #8
    3060:	af00      	add	r7, sp, #0
    3062:	6078      	str	r0, [r7, #4]
  {
    return counter;
    3064:	687a      	ldr	r2, [r7, #4]
    3066:	4b05      	ldr	r3, [pc, #20]	; (307c <sjsu::cortex::SystemTimer::GetCount()+0x20>)
    3068:	e9d3 3400 	ldrd	r3, r4, [r3]
    306c:	e9c2 3400 	strd	r3, r4, [r2]
  }
    3070:	6878      	ldr	r0, [r7, #4]
    3072:	3708      	adds	r7, #8
    3074:	46bd      	mov	sp, r7
    3076:	bc90      	pop	{r4, r7}
    3078:	4770      	bx	lr
    307a:	bf00      	nop
    307c:	100003d8 	.word	0x100003d8

00003080 <sjsu::cortex::SystemTimer::SetInterrupt(void (*)()) const>:

  void SetInterrupt(IsrPointer isr) const override
    3080:	b480      	push	{r7}
    3082:	b083      	sub	sp, #12
    3084:	af00      	add	r7, sp, #0
    3086:	6078      	str	r0, [r7, #4]
    3088:	6039      	str	r1, [r7, #0]
  {
    system_timer_isr = isr;
    308a:	4a04      	ldr	r2, [pc, #16]	; (309c <sjsu::cortex::SystemTimer::SetInterrupt(void (*)()) const+0x1c>)
    308c:	683b      	ldr	r3, [r7, #0]
    308e:	6013      	str	r3, [r2, #0]
  }
    3090:	bf00      	nop
    3092:	370c      	adds	r7, #12
    3094:	46bd      	mov	sp, r7
    3096:	f85d 7b04 	ldr.w	r7, [sp], #4
    309a:	4770      	bx	lr
    309c:	100003d0 	.word	0x100003d0

000030a0 <sjsu::cortex::SystemTimer::StartTimer() const>:

  Status StartTimer() const override
    30a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    30a2:	b08b      	sub	sp, #44	; 0x2c
    30a4:	af02      	add	r7, sp, #8
    30a6:	6078      	str	r0, [r7, #4]
  {
    Status status = Status::kInvalidSettings;
    30a8:	2304      	movs	r3, #4
    30aa:	61fb      	str	r3, [r7, #28]

    if (sys_tick->LOAD != 0)
    30ac:	4b1f      	ldr	r3, [pc, #124]	; (312c <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    30ae:	681b      	ldr	r3, [r3, #0]
    30b0:	685b      	ldr	r3, [r3, #4]
    30b2:	2b00      	cmp	r3, #0
    30b4:	bf14      	ite	ne
    30b6:	2301      	movne	r3, #1
    30b8:	2300      	moveq	r3, #0
    30ba:	b2db      	uxtb	r3, r3
    30bc:	2b00      	cmp	r3, #0
    30be:	d030      	beq.n	3122 <sjsu::cortex::SystemTimer::StartTimer() const+0x82>
    {
      sys_tick->VAL = 0;
    30c0:	4b1a      	ldr	r3, [pc, #104]	; (312c <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    30c2:	681b      	ldr	r3, [r3, #0]
    30c4:	2200      	movs	r2, #0
    30c6:	609a      	str	r2, [r3, #8]
      sys_tick->CTRL |= (1 << ControlBitMap::kTickInterupt);
    30c8:	4b18      	ldr	r3, [pc, #96]	; (312c <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    30ca:	681b      	ldr	r3, [r3, #0]
    30cc:	681a      	ldr	r2, [r3, #0]
    30ce:	4b17      	ldr	r3, [pc, #92]	; (312c <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    30d0:	681b      	ldr	r3, [r3, #0]
    30d2:	f042 0202 	orr.w	r2, r2, #2
    30d6:	601a      	str	r2, [r3, #0]
      sys_tick->CTRL |= (1 << ControlBitMap::kEnableCounter);
    30d8:	4b14      	ldr	r3, [pc, #80]	; (312c <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    30da:	681b      	ldr	r3, [r3, #0]
    30dc:	681a      	ldr	r2, [r3, #0]
    30de:	4b13      	ldr	r3, [pc, #76]	; (312c <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    30e0:	681b      	ldr	r3, [r3, #0]
    30e2:	f042 0201 	orr.w	r2, r2, #1
    30e6:	601a      	str	r2, [r3, #0]
      sys_tick->CTRL |= (1 << ControlBitMap::kClkSource);
    30e8:	4b10      	ldr	r3, [pc, #64]	; (312c <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    30ea:	681b      	ldr	r3, [r3, #0]
    30ec:	681a      	ldr	r2, [r3, #0]
    30ee:	4b0f      	ldr	r3, [pc, #60]	; (312c <sjsu::cortex::SystemTimer::StartTimer() const+0x8c>)
    30f0:	681b      	ldr	r3, [r3, #0]
    30f2:	f042 0204 	orr.w	r2, r2, #4
    30f6:	601a      	str	r2, [r3, #0]

      interrupt_controller_.Register({
    30f8:	687b      	ldr	r3, [r7, #4]
    30fa:	689e      	ldr	r6, [r3, #8]
    30fc:	687b      	ldr	r3, [r7, #4]
    30fe:	689b      	ldr	r3, [r3, #8]
          .interrupt_request_number  = cortex::SysTick_IRQn,
          .interrupt_service_routine = SystemTimerHandler,
      });
    3100:	681b      	ldr	r3, [r3, #0]
    3102:	681d      	ldr	r5, [r3, #0]
      interrupt_controller_.Register({
    3104:	4b0a      	ldr	r3, [pc, #40]	; (3130 <sjsu::cortex::SystemTimer::StartTimer() const+0x90>)
    3106:	f107 040c 	add.w	r4, r7, #12
    310a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    310c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    3110:	69bb      	ldr	r3, [r7, #24]
    3112:	9300      	str	r3, [sp, #0]
    3114:	f107 030c 	add.w	r3, r7, #12
    3118:	cb0e      	ldmia	r3, {r1, r2, r3}
    311a:	4630      	mov	r0, r6
    311c:	47a8      	blx	r5
      status = Status::kSuccess;
    311e:	2300      	movs	r3, #0
    3120:	61fb      	str	r3, [r7, #28]
    }

    return status;
    3122:	69fb      	ldr	r3, [r7, #28]
  }
    3124:	4618      	mov	r0, r3
    3126:	3724      	adds	r7, #36	; 0x24
    3128:	46bd      	mov	sp, r7
    312a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    312c:	1000001c 	.word	0x1000001c
    3130:	00006d08 	.word	0x00006d08

00003134 <units::linear_scale<float>::operator()() const>:
		inline constexpr T operator()() const noexcept { return m_value; }							///< returns value.
    3134:	b480      	push	{r7}
    3136:	b083      	sub	sp, #12
    3138:	af00      	add	r7, sp, #0
    313a:	6078      	str	r0, [r7, #4]
    313c:	687b      	ldr	r3, [r7, #4]
    313e:	681b      	ldr	r3, [r3, #0]
    3140:	ee07 3a90 	vmov	s15, r3
    3144:	eeb0 0a67 	vmov.f32	s0, s15
    3148:	370c      	adds	r7, #12
    314a:	46bd      	mov	sp, r7
    314c:	f85d 7b04 	ldr.w	r7, [sp], #4
    3150:	4770      	bx	lr

00003152 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline constexpr dimensionless::scalar_t operator/(const UnitTypeLhs& lhs, const UnitTypeRhs& rhs) noexcept
    3152:	b580      	push	{r7, lr}
    3154:	ed2d 8b02 	vpush	{d8}
    3158:	b084      	sub	sp, #16
    315a:	af00      	add	r7, sp, #0
    315c:	6078      	str	r0, [r7, #4]
    315e:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() / convert<UnitsRhs, UnitsLhs>(rhs()));
    3160:	687b      	ldr	r3, [r7, #4]
    3162:	4618      	mov	r0, r3
    3164:	f7ff ffe6 	bl	3134 <units::linear_scale<float>::operator()() const>
    3168:	eeb0 8a40 	vmov.f32	s16, s0
    316c:	683b      	ldr	r3, [r7, #0]
    316e:	4618      	mov	r0, r3
    3170:	f7ff ffe0 	bl	3134 <units::linear_scale<float>::operator()() const>
    3174:	eef0 7a40 	vmov.f32	s15, s0
    3178:	edc7 7a03 	vstr	s15, [r7, #12]
    317c:	f107 030c 	add.w	r3, r7, #12
    3180:	4618      	mov	r0, r3
    3182:	f7ff fdbf 	bl	2d04 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    3186:	eeb0 7a40 	vmov.f32	s14, s0
    318a:	eec8 7a07 	vdiv.f32	s15, s16, s14
    318e:	f107 0308 	add.w	r3, r7, #8
    3192:	eeb0 0a67 	vmov.f32	s0, s15
    3196:	4618      	mov	r0, r3
    3198:	f000 f807 	bl	31aa <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    319c:	68bb      	ldr	r3, [r7, #8]
	}
    319e:	4618      	mov	r0, r3
    31a0:	3710      	adds	r7, #16
    31a2:	46bd      	mov	sp, r7
    31a4:	ecbd 8b02 	vpop	{d8}
    31a8:	bd80      	pop	{r7, pc}

000031aa <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>:
		inline explicit constexpr unit_t(const T value, const Args&... args) noexcept : nls(value, args...)
    31aa:	b580      	push	{r7, lr}
    31ac:	b082      	sub	sp, #8
    31ae:	af00      	add	r7, sp, #0
    31b0:	6078      	str	r0, [r7, #4]
    31b2:	ed87 0a00 	vstr	s0, [r7]
    31b6:	687b      	ldr	r3, [r7, #4]
    31b8:	463a      	mov	r2, r7
    31ba:	4611      	mov	r1, r2
    31bc:	4618      	mov	r0, r3
    31be:	f7ff fd60 	bl	2c82 <units::linear_scale<float>::linear_scale<>(float const&)>
		}
    31c2:	687b      	ldr	r3, [r7, #4]
    31c4:	4618      	mov	r0, r3
    31c6:	3708      	adds	r7, #8
    31c8:	46bd      	mov	sp, r7
    31ca:	bd80      	pop	{r7, pc}

000031cc <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>:
	inline constexpr dimensionless::scalar_t operator-(const dimensionless::scalar_t& lhs, T rhs) noexcept
    31cc:	b580      	push	{r7, lr}
    31ce:	b084      	sub	sp, #16
    31d0:	af00      	add	r7, sp, #0
    31d2:	6078      	str	r0, [r7, #4]
    31d4:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() - rhs);
    31d6:	687b      	ldr	r3, [r7, #4]
    31d8:	4618      	mov	r0, r3
    31da:	f7ff ffab 	bl	3134 <units::linear_scale<float>::operator()() const>
    31de:	eeb0 7a40 	vmov.f32	s14, s0
    31e2:	683b      	ldr	r3, [r7, #0]
    31e4:	ee07 3a90 	vmov	s15, r3
    31e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    31ec:	ee77 7a67 	vsub.f32	s15, s14, s15
    31f0:	f107 030c 	add.w	r3, r7, #12
    31f4:	eeb0 0a67 	vmov.f32	s0, s15
    31f8:	4618      	mov	r0, r3
    31fa:	f7ff ffd6 	bl	31aa <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    31fe:	68fb      	ldr	r3, [r7, #12]
	}
    3200:	4618      	mov	r0, r3
    3202:	3710      	adds	r7, #16
    3204:	46bd      	mov	sp, r7
    3206:	bd80      	pop	{r7, pc}

00003208 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
	inline constexpr T unit_cast(const Units& value) noexcept
    3208:	b580      	push	{r7, lr}
    320a:	b082      	sub	sp, #8
    320c:	af00      	add	r7, sp, #0
    320e:	6078      	str	r0, [r7, #4]
		return static_cast<T>(value);
    3210:	6878      	ldr	r0, [r7, #4]
    3212:	f001 f92b 	bl	446c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    3216:	4603      	mov	r3, r0
	}
    3218:	4618      	mov	r0, r3
    321a:	3708      	adds	r7, #8
    321c:	46bd      	mov	sp, r7
    321e:	bd80      	pop	{r7, pc}

00003220 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
	inline constexpr T unit_cast(const Units& value) noexcept
    3220:	b580      	push	{r7, lr}
    3222:	b082      	sub	sp, #8
    3224:	af00      	add	r7, sp, #0
    3226:	6078      	str	r0, [r7, #4]
		return static_cast<T>(value);
    3228:	6878      	ldr	r0, [r7, #4]
    322a:	f000 f805 	bl	3238 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    322e:	4603      	mov	r3, r0
	}
    3230:	4618      	mov	r0, r3
    3232:	3708      	adds	r7, #8
    3234:	46bd      	mov	sp, r7
    3236:	bd80      	pop	{r7, pc}

00003238 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
    3238:	b580      	push	{r7, lr}
    323a:	b082      	sub	sp, #8
    323c:	af00      	add	r7, sp, #0
    323e:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
    3240:	687b      	ldr	r3, [r7, #4]
    3242:	4618      	mov	r0, r3
    3244:	f7ff ff76 	bl	3134 <units::linear_scale<float>::operator()() const>
    3248:	eef0 7a40 	vmov.f32	s15, s0
    324c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    3250:	ee17 3a90 	vmov	r3, s15
		}
    3254:	4618      	mov	r0, r3
    3256:	3708      	adds	r7, #8
    3258:	46bd      	mov	sp, r7
    325a:	bd80      	pop	{r7, pc}

0000325c <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
  ///          remainder will be returned.
  ///          If the freqency supplied is less then 1Hz, the function will
  ///          return without changing any hardware and return -1.
  ///          If the reload value exceeds the SysTick_LOAD_RELOAD_Msk, the
  ///          returned value is the SysTick_LOAD_RELOAD_Msk.
  int32_t SetTickFrequency(units::frequency::hertz_t frequency) const override
    325c:	b590      	push	{r4, r7, lr}
    325e:	b089      	sub	sp, #36	; 0x24
    3260:	af00      	add	r7, sp, #0
    3262:	6078      	str	r0, [r7, #4]
    3264:	6039      	str	r1, [r7, #0]
  {
    if (frequency <= 1_Hz)
    3266:	f04f 0001 	mov.w	r0, #1
    326a:	f04f 0100 	mov.w	r1, #0
    326e:	f7ff fccb 	bl	2c08 <units::literals::operator"" _Hz(unsigned long long)>
    3272:	4603      	mov	r3, r0
    3274:	60fb      	str	r3, [r7, #12]
    3276:	f107 020c 	add.w	r2, r7, #12
    327a:	463b      	mov	r3, r7
    327c:	4611      	mov	r1, r2
    327e:	4618      	mov	r0, r3
    3280:	f7ff fd60 	bl	2d44 <bool units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator<=<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    3284:	4603      	mov	r3, r0
    3286:	2b00      	cmp	r3, #0
    3288:	d002      	beq.n	3290 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x34>
    {
      return -1;
    328a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    328e:	e041      	b.n	3314 <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xb8>
    }

    units::frequency::hertz_t system_frequency =
        system_controller_.GetSystemFrequency();
    3290:	687b      	ldr	r3, [r7, #4]
    3292:	685a      	ldr	r2, [r3, #4]
    3294:	687b      	ldr	r3, [r7, #4]
    3296:	685b      	ldr	r3, [r3, #4]
    3298:	681b      	ldr	r3, [r3, #0]
    329a:	330c      	adds	r3, #12
    329c:	681b      	ldr	r3, [r3, #0]
    329e:	4610      	mov	r0, r2
    32a0:	4798      	blx	r3
    32a2:	4603      	mov	r3, r0
    32a4:	60bb      	str	r3, [r7, #8]

    uint32_t reload_value =
        units::unit_cast<uint32_t>((system_frequency / frequency) - 1);
    32a6:	463a      	mov	r2, r7
    32a8:	f107 0308 	add.w	r3, r7, #8
    32ac:	4611      	mov	r1, r2
    32ae:	4618      	mov	r0, r3
    32b0:	f7ff ff4f 	bl	3152 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    32b4:	4603      	mov	r3, r0
    32b6:	617b      	str	r3, [r7, #20]
    32b8:	f107 0314 	add.w	r3, r7, #20
    32bc:	2101      	movs	r1, #1
    32be:	4618      	mov	r0, r3
    32c0:	f7ff ff84 	bl	31cc <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator-<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>
    32c4:	4603      	mov	r3, r0
    32c6:	613b      	str	r3, [r7, #16]
    32c8:	f107 0310 	add.w	r3, r7, #16
    32cc:	4618      	mov	r0, r3
    32ce:	f7ff ff9b 	bl	3208 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    32d2:	61f8      	str	r0, [r7, #28]

    int remainder = (units::unit_cast<uint32_t>(system_frequency) %
    32d4:	f107 0308 	add.w	r3, r7, #8
    32d8:	4618      	mov	r0, r3
    32da:	f7ff ffa1 	bl	3220 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    32de:	4604      	mov	r4, r0
                     units::unit_cast<uint32_t>(frequency));
    32e0:	463b      	mov	r3, r7
    32e2:	4618      	mov	r0, r3
    32e4:	f7ff ff9c 	bl	3220 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    32e8:	4603      	mov	r3, r0
    int remainder = (units::unit_cast<uint32_t>(system_frequency) %
    32ea:	fbb4 f2f3 	udiv	r2, r4, r3
    32ee:	fb03 f302 	mul.w	r3, r3, r2
    32f2:	1ae3      	subs	r3, r4, r3
                     units::unit_cast<uint32_t>(frequency));
    32f4:	61bb      	str	r3, [r7, #24]

    if (reload_value > SysTick_LOAD_RELOAD_Msk)
    32f6:	69fb      	ldr	r3, [r7, #28]
    32f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
    32fc:	d305      	bcc.n	330a <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xae>
    {
      reload_value = SysTick_LOAD_RELOAD_Msk;
    32fe:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    3302:	61fb      	str	r3, [r7, #28]
      remainder    = SysTick_LOAD_RELOAD_Msk;
    3304:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    3308:	61bb      	str	r3, [r7, #24]
    }

    sys_tick->LOAD = reload_value;
    330a:	4b04      	ldr	r3, [pc, #16]	; (331c <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc0>)
    330c:	681b      	ldr	r3, [r3, #0]
    330e:	69fa      	ldr	r2, [r7, #28]
    3310:	605a      	str	r2, [r3, #4]
    return remainder;
    3312:	69bb      	ldr	r3, [r7, #24]
  }
    3314:	4618      	mov	r0, r3
    3316:	3724      	adds	r7, #36	; 0x24
    3318:	46bd      	mov	sp, r7
    331a:	bd90      	pop	{r4, r7, pc}
    331c:	1000001c 	.word	0x1000001c

00003320 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    3320:	b580      	push	{r7, lr}
    3322:	b086      	sub	sp, #24
    3324:	af00      	add	r7, sp, #0
    3326:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    3328:	6878      	ldr	r0, [r7, #4]
    332a:	f000 f807 	bl	333c <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    332e:	eef0 7a40 	vmov.f32	s15, s0
	}
    3332:	eeb0 0a67 	vmov.f32	s0, s15
    3336:	3718      	adds	r7, #24
    3338:	46bd      	mov	sp, r7
    333a:	bd80      	pop	{r7, pc}

0000333c <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::false_type, std::false_type, std::false_type) noexcept
    333c:	b480      	push	{r7}
    333e:	b085      	sub	sp, #20
    3340:	af00      	add	r7, sp, #0
    3342:	60f8      	str	r0, [r7, #12]
    3344:	7239      	strb	r1, [r7, #8]
    3346:	713a      	strb	r2, [r7, #4]
    3348:	703b      	strb	r3, [r7, #0]
			return ((value * Ratio::num) / Ratio::den);
    334a:	68fb      	ldr	r3, [r7, #12]
    334c:	edd3 7a00 	vldr	s15, [r3]
    3350:	ed9f 7a05 	vldr	s14, [pc, #20]	; 3368 <float units::detail::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1000000ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, false>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)+0x2c>
    3354:	ee67 7a87 	vmul.f32	s15, s15, s14
		}
    3358:	eeb0 0a67 	vmov.f32	s0, s15
    335c:	3714      	adds	r7, #20
    335e:	46bd      	mov	sp, r7
    3360:	f85d 7b04 	ldr.w	r7, [sp], #4
    3364:	4770      	bx	lr
    3366:	bf00      	nop
    3368:	49742400 	.word	0x49742400

0000336c <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
    static constexpr bit::Mask kSelect  = bit::CreateMaskFromRange(8, 9);
  };

  inline static LPC_SC_TypeDef * system_controller = LPC_SC;

  void SetSystemClockFrequency(
    336c:	b580      	push	{r7, lr}
    336e:	b084      	sub	sp, #16
    3370:	af00      	add	r7, sp, #0
    3372:	6078      	str	r0, [r7, #4]
    3374:	6039      	str	r1, [r7, #0]
      units::frequency::megahertz_t frequency) const override
  {
    SelectOscillatorSource(OscillatorSource::kIrc);
    3376:	2100      	movs	r1, #0
    3378:	6878      	ldr	r0, [r7, #4]
    337a:	f000 f8e3 	bl	3544 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const>
    if (frequency > 12_MHz)
    337e:	f04f 000c 	mov.w	r0, #12
    3382:	f04f 0100 	mov.w	r1, #0
    3386:	f7ff fc55 	bl	2c34 <units::literals::operator"" _MHz(unsigned long long)>
    338a:	4603      	mov	r3, r0
    338c:	60bb      	str	r3, [r7, #8]
    338e:	f107 0208 	add.w	r2, r7, #8
    3392:	463b      	mov	r3, r7
    3394:	4611      	mov	r1, r2
    3396:	4618      	mov	r0, r3
    3398:	f001 f883 	bl	44a2 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    339c:	4603      	mov	r3, r0
    339e:	2b00      	cmp	r3, #0
    33a0:	d00f      	beq.n	33c2 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x56>
    {
      SetMainPll(PllInput::kIrc, frequency);
    33a2:	4b16      	ldr	r3, [pc, #88]	; (33fc <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x90>)
    33a4:	683a      	ldr	r2, [r7, #0]
    33a6:	6819      	ldr	r1, [r3, #0]
    33a8:	6878      	ldr	r0, [r7, #4]
    33aa:	f000 fabf 	bl	392c <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
      SelectMainClockSource(MainClockSource::kPllClock);
    33ae:	2101      	movs	r1, #1
    33b0:	6878      	ldr	r0, [r7, #4]
    33b2:	f000 f8eb 	bl	358c <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>
      speed_in_hertz = frequency;
    33b6:	463b      	mov	r3, r7
    33b8:	4619      	mov	r1, r3
    33ba:	4811      	ldr	r0, [pc, #68]	; (3400 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x94>)
    33bc:	f001 f88f 	bl	44de <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    33c0:	e007      	b.n	33d2 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x66>
    }
    else
    {
      SelectMainClockSource(MainClockSource::kBaseClock);
    33c2:	2100      	movs	r1, #0
    33c4:	6878      	ldr	r0, [r7, #4]
    33c6:	f000 f8e1 	bl	358c <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>
      speed_in_hertz = kDefaultIRCFrequency;
    33ca:	490e      	ldr	r1, [pc, #56]	; (3404 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x98>)
    33cc:	480c      	ldr	r0, [pc, #48]	; (3400 <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x94>)
    33ce:	f001 f886 	bl	44de <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    }
    SetCpuClockDivider(1);
    33d2:	2101      	movs	r1, #1
    33d4:	6878      	ldr	r0, [r7, #4]
    33d6:	f000 fb0d 	bl	39f4 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const>
    SetPeripheralClockDivider({}, 1);
    33da:	23ff      	movs	r3, #255	; 0xff
    33dc:	733b      	strb	r3, [r7, #12]
    33de:	f107 030c 	add.w	r3, r7, #12
    33e2:	2201      	movs	r2, #1
    33e4:	4619      	mov	r1, r3
    33e6:	6878      	ldr	r0, [r7, #4]
    33e8:	f000 f80e 	bl	3408 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>
    SetEmcClockDivider(EmcDivider::kSameSpeedAsCpu);
    33ec:	2100      	movs	r1, #0
    33ee:	6878      	ldr	r0, [r7, #4]
    33f0:	f000 fb3e 	bl	3a70 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const>
  }
    33f4:	bf00      	nop
    33f6:	3710      	adds	r7, #16
    33f8:	46bd      	mov	sp, r7
    33fa:	bd80      	pop	{r7, pc}
    33fc:	0000710c 	.word	0x0000710c
    3400:	10000020 	.word	0x10000020
    3404:	00007110 	.word	0x00007110

00003408 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>:

  void SetPeripheralClockDivider(const PeripheralID &,
    3408:	b580      	push	{r7, lr}
    340a:	b084      	sub	sp, #16
    340c:	af00      	add	r7, sp, #0
    340e:	60f8      	str	r0, [r7, #12]
    3410:	60b9      	str	r1, [r7, #8]
    3412:	4613      	mov	r3, r2
    3414:	71fb      	strb	r3, [r7, #7]
                                 uint8_t peripheral_divider) const override
  {
    SJ2_ASSERT_FATAL(peripheral_divider <= 4, "Divider mustn't exceed 32");
    3416:	79fb      	ldrb	r3, [r7, #7]
    3418:	2b04      	cmp	r3, #4
    341a:	d90d      	bls.n	3438 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x30>
    341c:	23b2      	movs	r3, #178	; 0xb2
    341e:	4a0b      	ldr	r2, [pc, #44]	; (344c <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x44>)
    3420:	490b      	ldr	r1, [pc, #44]	; (3450 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x48>)
    3422:	480c      	ldr	r0, [pc, #48]	; (3454 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x4c>)
    3424:	f7ff fb82 	bl	2b2c <printf>
    3428:	480b      	ldr	r0, [pc, #44]	; (3458 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x50>)
    342a:	f7fe fa63 	bl	18f4 <puts>
    342e:	2100      	movs	r1, #0
    3430:	2001      	movs	r0, #1
    3432:	f7fe f85b 	bl	14ec <sjsu::debug::PrintBacktrace(bool, void*)>
    3436:	e7fe      	b.n	3436 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x2e>
    system_controller->PCLKSEL = peripheral_divider;
    3438:	4b08      	ldr	r3, [pc, #32]	; (345c <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const+0x54>)
    343a:	681b      	ldr	r3, [r3, #0]
    343c:	79fa      	ldrb	r2, [r7, #7]
    343e:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
  }
    3442:	bf00      	nop
    3444:	3710      	adds	r7, #16
    3446:	46bd      	mov	sp, r7
    3448:	bd80      	pop	{r7, pc}
    344a:	bf00      	nop
    344c:	00007270 	.word	0x00007270
    3450:	0000712c 	.word	0x0000712c
    3454:	00006d18 	.word	0x00006d18
    3458:	00006db8 	.word	0x00006db8
    345c:	100003e0 	.word	0x100003e0

00003460 <sjsu::lpc40xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const>:

  uint32_t GetPeripheralClockDivider(const PeripheralID &) const override
    3460:	b480      	push	{r7}
    3462:	b083      	sub	sp, #12
    3464:	af00      	add	r7, sp, #0
    3466:	6078      	str	r0, [r7, #4]
    3468:	6039      	str	r1, [r7, #0]
  {
    return system_controller->PCLKSEL;
    346a:	4b05      	ldr	r3, [pc, #20]	; (3480 <sjsu::lpc40xx::SystemController::GetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&) const+0x20>)
    346c:	681b      	ldr	r3, [r3, #0]
    346e:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
  }
    3472:	4618      	mov	r0, r3
    3474:	370c      	adds	r7, #12
    3476:	46bd      	mov	sp, r7
    3478:	f85d 7b04 	ldr.w	r7, [sp], #4
    347c:	4770      	bx	lr
    347e:	bf00      	nop
    3480:	100003e0 	.word	0x100003e0

00003484 <sjsu::lpc40xx::SystemController::GetSystemFrequency() const>:

  units::frequency::hertz_t GetSystemFrequency() const override
    3484:	b480      	push	{r7}
    3486:	b083      	sub	sp, #12
    3488:	af00      	add	r7, sp, #0
    348a:	6078      	str	r0, [r7, #4]
  {
    return speed_in_hertz;
    348c:	4b03      	ldr	r3, [pc, #12]	; (349c <sjsu::lpc40xx::SystemController::GetSystemFrequency() const+0x18>)
    348e:	681b      	ldr	r3, [r3, #0]
  }
    3490:	4618      	mov	r0, r3
    3492:	370c      	adds	r7, #12
    3494:	46bd      	mov	sp, r7
    3496:	f85d 7b04 	ldr.w	r7, [sp], #4
    349a:	4770      	bx	lr
    349c:	10000020 	.word	0x10000020

000034a0 <sjsu::lpc40xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const>:

  /// Check if a peripheral is powered up by checking the power connection
  /// register. Should typically only be used for unit testing code and
  /// debugging.
  bool IsPeripheralPoweredUp(
    34a0:	b480      	push	{r7}
    34a2:	b085      	sub	sp, #20
    34a4:	af00      	add	r7, sp, #0
    34a6:	6078      	str	r0, [r7, #4]
    34a8:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const override
  {
    bool peripheral_is_powered_on =
        system_controller->PCONP & (1 << peripheral_select.device_id);
    34aa:	4b0b      	ldr	r3, [pc, #44]	; (34d8 <sjsu::lpc40xx::SystemController::IsPeripheralPoweredUp(sjsu::SystemController::PeripheralID const&) const+0x38>)
    34ac:	681b      	ldr	r3, [r3, #0]
    34ae:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
    34b2:	683a      	ldr	r2, [r7, #0]
    34b4:	7812      	ldrb	r2, [r2, #0]
    34b6:	4611      	mov	r1, r2
    34b8:	2201      	movs	r2, #1
    34ba:	408a      	lsls	r2, r1
    34bc:	4013      	ands	r3, r2
    34be:	2b00      	cmp	r3, #0
    34c0:	bf14      	ite	ne
    34c2:	2301      	movne	r3, #1
    34c4:	2300      	moveq	r3, #0
    34c6:	73fb      	strb	r3, [r7, #15]

    return peripheral_is_powered_on;
    34c8:	7bfb      	ldrb	r3, [r7, #15]
  }
    34ca:	4618      	mov	r0, r3
    34cc:	3714      	adds	r7, #20
    34ce:	46bd      	mov	sp, r7
    34d0:	f85d 7b04 	ldr.w	r7, [sp], #4
    34d4:	4770      	bx	lr
    34d6:	bf00      	nop
    34d8:	100003e0 	.word	0x100003e0

000034dc <sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const>:
  void PowerUpPeripheral(const PeripheralID & peripheral_select) const override
    34dc:	b590      	push	{r4, r7, lr}
    34de:	b083      	sub	sp, #12
    34e0:	af00      	add	r7, sp, #0
    34e2:	6078      	str	r0, [r7, #4]
    34e4:	6039      	str	r1, [r7, #0]
  {
    system_controller->PCONP =
        bit::Set(system_controller->PCONP, peripheral_select.device_id);
    34e6:	4b09      	ldr	r3, [pc, #36]	; (350c <sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
    34e8:	681b      	ldr	r3, [r3, #0]
    34ea:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
    34ee:	683b      	ldr	r3, [r7, #0]
    34f0:	781b      	ldrb	r3, [r3, #0]
    34f2:	4619      	mov	r1, r3
    system_controller->PCONP =
    34f4:	4b05      	ldr	r3, [pc, #20]	; (350c <sjsu::lpc40xx::SystemController::PowerUpPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
    34f6:	681c      	ldr	r4, [r3, #0]
        bit::Set(system_controller->PCONP, peripheral_select.device_id);
    34f8:	4610      	mov	r0, r2
    34fa:	f7fd fe7f 	bl	11fc <unsigned long sjsu::bit::Set<unsigned long>(unsigned long, unsigned long)>
    34fe:	4603      	mov	r3, r0
    system_controller->PCONP =
    3500:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  }
    3504:	bf00      	nop
    3506:	370c      	adds	r7, #12
    3508:	46bd      	mov	sp, r7
    350a:	bd90      	pop	{r4, r7, pc}
    350c:	100003e0 	.word	0x100003e0

00003510 <sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const>:
  void PowerDownPeripheral(
    3510:	b590      	push	{r4, r7, lr}
    3512:	b083      	sub	sp, #12
    3514:	af00      	add	r7, sp, #0
    3516:	6078      	str	r0, [r7, #4]
    3518:	6039      	str	r1, [r7, #0]
      const PeripheralID & peripheral_select) const override
  {
    system_controller->PCONP =
        bit::Clear(system_controller->PCONP, peripheral_select.device_id);
    351a:	4b09      	ldr	r3, [pc, #36]	; (3540 <sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
    351c:	681b      	ldr	r3, [r3, #0]
    351e:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
    3522:	683b      	ldr	r3, [r7, #0]
    3524:	781b      	ldrb	r3, [r3, #0]
    3526:	4619      	mov	r1, r3
    system_controller->PCONP =
    3528:	4b05      	ldr	r3, [pc, #20]	; (3540 <sjsu::lpc40xx::SystemController::PowerDownPeripheral(sjsu::SystemController::PeripheralID const&) const+0x30>)
    352a:	681c      	ldr	r4, [r3, #0]
        bit::Clear(system_controller->PCONP, peripheral_select.device_id);
    352c:	4610      	mov	r0, r2
    352e:	f7fd fe52 	bl	11d6 <unsigned long sjsu::bit::Clear<unsigned long>(unsigned long, unsigned long)>
    3532:	4603      	mov	r3, r0
    system_controller->PCONP =
    3534:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
  }
    3538:	bf00      	nop
    353a:	370c      	adds	r7, #12
    353c:	46bd      	mov	sp, r7
    353e:	bd90      	pop	{r4, r7, pc}
    3540:	100003e0 	.word	0x100003e0

00003544 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const>:

 private:
  void SelectOscillatorSource(OscillatorSource source) const
    3544:	b590      	push	{r4, r7, lr}
    3546:	b083      	sub	sp, #12
    3548:	af00      	add	r7, sp, #0
    354a:	6078      	str	r0, [r7, #4]
    354c:	460b      	mov	r3, r1
    354e:	807b      	strh	r3, [r7, #2]
  {
    system_controller->CLKSRCSEL = bit::Insert(system_controller->CLKSRCSEL,
    3550:	4b0c      	ldr	r3, [pc, #48]	; (3584 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const+0x40>)
    3552:	681b      	ldr	r3, [r3, #0]
    3554:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
    3558:	8879      	ldrh	r1, [r7, #2]
    355a:	4b0a      	ldr	r3, [pc, #40]	; (3584 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const+0x40>)
    355c:	681c      	ldr	r4, [r3, #0]
    355e:	4b0a      	ldr	r3, [pc, #40]	; (3588 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const+0x44>)
    3560:	781a      	ldrb	r2, [r3, #0]
    3562:	785b      	ldrb	r3, [r3, #1]
    3564:	021b      	lsls	r3, r3, #8
    3566:	431a      	orrs	r2, r3
    3568:	2300      	movs	r3, #0
    356a:	f362 030f 	bfi	r3, r2, #0, #16
    356e:	461a      	mov	r2, r3
    3570:	f000 ffc8 	bl	4504 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    3574:	4603      	mov	r3, r0
    3576:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
                                               static_cast<uint32_t>(source),
                                               Oscillator::kSelect);
  }
    357a:	bf00      	nop
    357c:	370c      	adds	r7, #12
    357e:	46bd      	mov	sp, r7
    3580:	bd90      	pop	{r4, r7, pc}
    3582:	bf00      	nop
    3584:	100003e0 	.word	0x100003e0
    3588:	00007114 	.word	0x00007114

0000358c <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>:
  void SelectMainClockSource(MainClockSource source) const
    358c:	b590      	push	{r4, r7, lr}
    358e:	b083      	sub	sp, #12
    3590:	af00      	add	r7, sp, #0
    3592:	6078      	str	r0, [r7, #4]
    3594:	460b      	mov	r3, r1
    3596:	807b      	strh	r3, [r7, #2]
  {
    system_controller->CCLKSEL = bit::Insert(system_controller->CCLKSEL,
    3598:	4b0c      	ldr	r3, [pc, #48]	; (35cc <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const+0x40>)
    359a:	681b      	ldr	r3, [r3, #0]
    359c:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
    35a0:	8879      	ldrh	r1, [r7, #2]
    35a2:	4b0a      	ldr	r3, [pc, #40]	; (35cc <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const+0x40>)
    35a4:	681c      	ldr	r4, [r3, #0]
    35a6:	4b0a      	ldr	r3, [pc, #40]	; (35d0 <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const+0x44>)
    35a8:	781a      	ldrb	r2, [r3, #0]
    35aa:	785b      	ldrb	r3, [r3, #1]
    35ac:	021b      	lsls	r3, r3, #8
    35ae:	431a      	orrs	r2, r3
    35b0:	2300      	movs	r3, #0
    35b2:	f362 030f 	bfi	r3, r2, #0, #16
    35b6:	461a      	mov	r2, r3
    35b8:	f000 ffa4 	bl	4504 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    35bc:	4603      	mov	r3, r0
    35be:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
                                             static_cast<uint32_t>(source),
                                             CpuClock::kSelect);
  }
    35c2:	bf00      	nop
    35c4:	370c      	adds	r7, #12
    35c6:	46bd      	mov	sp, r7
    35c8:	bd90      	pop	{r4, r7, pc}
    35ca:	bf00      	nop
    35cc:	100003e0 	.word	0x100003e0
    35d0:	00007120 	.word	0x00007120

000035d4 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const>:
  void SelectUsbClockSource(UsbSource usb_clock) const
    35d4:	b590      	push	{r4, r7, lr}
    35d6:	b083      	sub	sp, #12
    35d8:	af00      	add	r7, sp, #0
    35da:	6078      	str	r0, [r7, #4]
    35dc:	460b      	mov	r3, r1
    35de:	807b      	strh	r3, [r7, #2]
  {
    system_controller->USBCLKSEL = bit::Insert(system_controller->USBCLKSEL,
    35e0:	4b0c      	ldr	r3, [pc, #48]	; (3614 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const+0x40>)
    35e2:	681b      	ldr	r3, [r3, #0]
    35e4:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
    35e8:	8879      	ldrh	r1, [r7, #2]
    35ea:	4b0a      	ldr	r3, [pc, #40]	; (3614 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const+0x40>)
    35ec:	681c      	ldr	r4, [r3, #0]
    35ee:	4b0a      	ldr	r3, [pc, #40]	; (3618 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const+0x44>)
    35f0:	781a      	ldrb	r2, [r3, #0]
    35f2:	785b      	ldrb	r3, [r3, #1]
    35f4:	021b      	lsls	r3, r3, #8
    35f6:	431a      	orrs	r2, r3
    35f8:	2300      	movs	r3, #0
    35fa:	f362 030f 	bfi	r3, r2, #0, #16
    35fe:	461a      	mov	r2, r3
    3600:	f000 ff80 	bl	4504 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    3604:	4603      	mov	r3, r0
    3606:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
                                               static_cast<uint32_t>(usb_clock),
                                               UsbClock::kSelect);
  }
    360a:	bf00      	nop
    360c:	370c      	adds	r7, #12
    360e:	46bd      	mov	sp, r7
    3610:	bd90      	pop	{r4, r7, pc}
    3612:	bf00      	nop
    3614:	100003e0 	.word	0x100003e0
    3618:	00007124 	.word	0x00007124

0000361c <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const>:
  void SelectSpifiClockSource(SpifiSource spifi_clock) const
    361c:	b590      	push	{r4, r7, lr}
    361e:	b083      	sub	sp, #12
    3620:	af00      	add	r7, sp, #0
    3622:	6078      	str	r0, [r7, #4]
    3624:	460b      	mov	r3, r1
    3626:	807b      	strh	r3, [r7, #2]
  {
    system_controller->SPIFISEL =
        bit::Insert(system_controller->SPIFISEL,
    3628:	4b0c      	ldr	r3, [pc, #48]	; (365c <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const+0x40>)
    362a:	681b      	ldr	r3, [r3, #0]
    362c:	f8d3 01b4 	ldr.w	r0, [r3, #436]	; 0x1b4
    3630:	8879      	ldrh	r1, [r7, #2]
    system_controller->SPIFISEL =
    3632:	4b0a      	ldr	r3, [pc, #40]	; (365c <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const+0x40>)
    3634:	681c      	ldr	r4, [r3, #0]
        bit::Insert(system_controller->SPIFISEL,
    3636:	4b0a      	ldr	r3, [pc, #40]	; (3660 <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const+0x44>)
    3638:	781a      	ldrb	r2, [r3, #0]
    363a:	785b      	ldrb	r3, [r3, #1]
    363c:	021b      	lsls	r3, r3, #8
    363e:	431a      	orrs	r2, r3
    3640:	2300      	movs	r3, #0
    3642:	f362 030f 	bfi	r3, r2, #0, #16
    3646:	461a      	mov	r2, r3
    3648:	f000 ff5c 	bl	4504 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    364c:	4603      	mov	r3, r0
    system_controller->SPIFISEL =
    364e:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
                    static_cast<uint32_t>(spifi_clock),
                    SpiFiClock::kSelect);
  }
    3652:	bf00      	nop
    3654:	370c      	adds	r7, #12
    3656:	46bd      	mov	sp, r7
    3658:	bd90      	pop	{r4, r7, pc}
    365a:	bf00      	nop
    365c:	100003e0 	.word	0x100003e0
    3660:	00007128 	.word	0x00007128

00003664 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator<(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    3664:	b580      	push	{r7, lr}
    3666:	ed2d 8b02 	vpush	{d8}
    366a:	b082      	sub	sp, #8
    366c:	af00      	add	r7, sp, #0
    366e:	6078      	str	r0, [r7, #4]
    3670:	6039      	str	r1, [r7, #0]
			return (nls::m_value < units::convert<UnitsRhs, Units>(rhs.m_value));
    3672:	687b      	ldr	r3, [r7, #4]
    3674:	ed93 8a00 	vldr	s16, [r3]
    3678:	683b      	ldr	r3, [r7, #0]
    367a:	4618      	mov	r0, r3
    367c:	f7ff fb11 	bl	2ca2 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    3680:	eef0 7a40 	vmov.f32	s15, s0
    3684:	eeb4 8ae7 	vcmpe.f32	s16, s15
    3688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    368c:	bf4c      	ite	mi
    368e:	2301      	movmi	r3, #1
    3690:	2300      	movpl	r3, #0
    3692:	b2db      	uxtb	r3, r3
		}
    3694:	4618      	mov	r0, r3
    3696:	3708      	adds	r7, #8
    3698:	46bd      	mov	sp, r7
    369a:	ecbd 8b02 	vpop	{d8}
    369e:	bd80      	pop	{r7, pc}

000036a0 <unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>:
		inline constexpr Ty to() const noexcept
    36a0:	b580      	push	{r7, lr}
    36a2:	b082      	sub	sp, #8
    36a4:	af00      	add	r7, sp, #0
    36a6:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(*this);
    36a8:	6878      	ldr	r0, [r7, #4]
    36aa:	f000 f805 	bl	36b8 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    36ae:	4603      	mov	r3, r0
		}
    36b0:	4618      	mov	r0, r3
    36b2:	3708      	adds	r7, #8
    36b4:	46bd      	mov	sp, r7
    36b6:	bd80      	pop	{r7, pc}

000036b8 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
    36b8:	b580      	push	{r7, lr}
    36ba:	b082      	sub	sp, #8
    36bc:	af00      	add	r7, sp, #0
    36be:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
    36c0:	687b      	ldr	r3, [r7, #4]
    36c2:	4618      	mov	r0, r3
    36c4:	f7ff fd36 	bl	3134 <units::linear_scale<float>::operator()() const>
    36c8:	eef0 7a40 	vmov.f32	s15, s0
    36cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    36d0:	ee17 3a90 	vmov	r3, s15
		}
    36d4:	4618      	mov	r0, r3
    36d6:	3708      	adds	r7, #8
    36d8:	46bd      	mov	sp, r7
    36da:	bd80      	pop	{r7, pc}

000036dc <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline constexpr dimensionless::scalar_t operator/(const UnitTypeLhs& lhs, const UnitTypeRhs& rhs) noexcept
    36dc:	b580      	push	{r7, lr}
    36de:	ed2d 8b02 	vpush	{d8}
    36e2:	b084      	sub	sp, #16
    36e4:	af00      	add	r7, sp, #0
    36e6:	6078      	str	r0, [r7, #4]
    36e8:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() / convert<UnitsRhs, UnitsLhs>(rhs()));
    36ea:	687b      	ldr	r3, [r7, #4]
    36ec:	4618      	mov	r0, r3
    36ee:	f7ff fd21 	bl	3134 <units::linear_scale<float>::operator()() const>
    36f2:	eeb0 8a40 	vmov.f32	s16, s0
    36f6:	683b      	ldr	r3, [r7, #0]
    36f8:	4618      	mov	r0, r3
    36fa:	f7ff fd1b 	bl	3134 <units::linear_scale<float>::operator()() const>
    36fe:	eef0 7a40 	vmov.f32	s15, s0
    3702:	edc7 7a03 	vstr	s15, [r7, #12]
    3706:	f107 030c 	add.w	r3, r7, #12
    370a:	4618      	mov	r0, r3
    370c:	f7ff fac9 	bl	2ca2 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    3710:	eeb0 7a40 	vmov.f32	s14, s0
    3714:	eec8 7a07 	vdiv.f32	s15, s16, s14
    3718:	f107 0308 	add.w	r3, r7, #8
    371c:	eeb0 0a67 	vmov.f32	s0, s15
    3720:	4618      	mov	r0, r3
    3722:	f7ff fd42 	bl	31aa <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    3726:	68bb      	ldr	r3, [r7, #8]
	}
    3728:	4618      	mov	r0, r3
    372a:	3710      	adds	r7, #16
    372c:	46bd      	mov	sp, r7
    372e:	ecbd 8b02 	vpop	{d8}
    3732:	bd80      	pop	{r7, pc}

00003734 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator+<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>:
	inline constexpr dimensionless::scalar_t operator+(const dimensionless::scalar_t& lhs, T rhs) noexcept
    3734:	b580      	push	{r7, lr}
    3736:	b084      	sub	sp, #16
    3738:	af00      	add	r7, sp, #0
    373a:	6078      	str	r0, [r7, #4]
    373c:	6039      	str	r1, [r7, #0]
		return dimensionless::scalar_t(lhs() + rhs);
    373e:	687b      	ldr	r3, [r7, #4]
    3740:	4618      	mov	r0, r3
    3742:	f7ff fcf7 	bl	3134 <units::linear_scale<float>::operator()() const>
    3746:	eeb0 7a40 	vmov.f32	s14, s0
    374a:	683b      	ldr	r3, [r7, #0]
    374c:	ee07 3a90 	vmov	s15, r3
    3750:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3754:	ee77 7a27 	vadd.f32	s15, s14, s15
    3758:	f107 030c 	add.w	r3, r7, #12
    375c:	eeb0 0a67 	vmov.f32	s0, s15
    3760:	4618      	mov	r0, r3
    3762:	f7ff fd22 	bl	31aa <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    3766:	68fb      	ldr	r3, [r7, #12]
	}
    3768:	4618      	mov	r0, r3
    376a:	3710      	adds	r7, #16
    376c:	46bd      	mov	sp, r7
    376e:	bd80      	pop	{r7, pc}

00003770 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const>:
		inline constexpr explicit operator Ty() const noexcept
    3770:	b580      	push	{r7, lr}
    3772:	b082      	sub	sp, #8
    3774:	af00      	add	r7, sp, #0
    3776:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>((*this)());
    3778:	687b      	ldr	r3, [r7, #4]
    377a:	4618      	mov	r0, r3
    377c:	f7ff fcda 	bl	3134 <units::linear_scale<float>::operator()() const>
    3780:	eef0 7a40 	vmov.f32	s15, s0
    3784:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    3788:	ee17 3a90 	vmov	r3, s15
    378c:	b29b      	uxth	r3, r3
		}
    378e:	4618      	mov	r0, r3
    3790:	3708      	adds	r7, #8
    3792:	46bd      	mov	sp, r7
    3794:	bd80      	pop	{r7, pc}
    3796:	Address 0x0000000000003796 is out of bounds.


00003798 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:
  uint32_t CalculatePll(units::frequency::megahertz_t input_frequency,
    3798:	b590      	push	{r4, r7, lr}
    379a:	b08d      	sub	sp, #52	; 0x34
    379c:	af00      	add	r7, sp, #0
    379e:	60f8      	str	r0, [r7, #12]
    37a0:	60b9      	str	r1, [r7, #8]
    37a2:	607a      	str	r2, [r7, #4]
                        units::frequency::megahertz_t desired_frequency) const
  {
    SJ2_ASSERT_FATAL(desired_frequency < 384_MHz && desired_frequency > 12_MHz,
    37a4:	f44f 70c0 	mov.w	r0, #384	; 0x180
    37a8:	f04f 0100 	mov.w	r1, #0
    37ac:	f7ff fa42 	bl	2c34 <units::literals::operator"" _MHz(unsigned long long)>
    37b0:	4603      	mov	r3, r0
    37b2:	613b      	str	r3, [r7, #16]
    37b4:	f107 0210 	add.w	r2, r7, #16
    37b8:	1d3b      	adds	r3, r7, #4
    37ba:	4611      	mov	r1, r2
    37bc:	4618      	mov	r0, r3
    37be:	f7ff ff51 	bl	3664 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator< <units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    37c2:	4603      	mov	r3, r0
    37c4:	f083 0301 	eor.w	r3, r3, #1
    37c8:	b2db      	uxtb	r3, r3
    37ca:	2b00      	cmp	r3, #0
    37cc:	d114      	bne.n	37f8 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x60>
    37ce:	f04f 000c 	mov.w	r0, #12
    37d2:	f04f 0100 	mov.w	r1, #0
    37d6:	f7ff fa2d 	bl	2c34 <units::literals::operator"" _MHz(unsigned long long)>
    37da:	4603      	mov	r3, r0
    37dc:	617b      	str	r3, [r7, #20]
    37de:	f107 0214 	add.w	r2, r7, #20
    37e2:	1d3b      	adds	r3, r7, #4
    37e4:	4611      	mov	r1, r2
    37e6:	4618      	mov	r0, r3
    37e8:	f000 fe5b 	bl	44a2 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>
    37ec:	4603      	mov	r3, r0
    37ee:	f083 0301 	eor.w	r3, r3, #1
    37f2:	b2db      	uxtb	r3, r3
    37f4:	2b00      	cmp	r3, #0
    37f6:	d001      	beq.n	37fc <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x64>
    37f8:	2301      	movs	r3, #1
    37fa:	e000      	b.n	37fe <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x66>
    37fc:	2300      	movs	r3, #0
    37fe:	2b00      	cmp	r3, #0
    3800:	d00d      	beq.n	381e <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x86>
    3802:	23f6      	movs	r3, #246	; 0xf6
    3804:	4a43      	ldr	r2, [pc, #268]	; (3914 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x17c>)
    3806:	4944      	ldr	r1, [pc, #272]	; (3918 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x180>)
    3808:	4844      	ldr	r0, [pc, #272]	; (391c <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x184>)
    380a:	f7ff f98f 	bl	2b2c <printf>
    380e:	4844      	ldr	r0, [pc, #272]	; (3920 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x188>)
    3810:	f7fe f870 	bl	18f4 <puts>
    3814:	2100      	movs	r1, #0
    3816:	2001      	movs	r0, #1
    3818:	f7fd fe68 	bl	14ec <sjsu::debug::PrintBacktrace(bool, void*)>
    381c:	e7fe      	b.n	381c <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x84>
                     "Frequency must be lower than 384 MHz"
                     "and greater than or equal to 12 MHz");
    bool calculating = true;
    381e:	2301      	movs	r3, #1
    3820:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint32_t multiplier_value;
    if ((desired_frequency.to<uint32_t>() % input_frequency.to<uint32_t>()) > 0)
    3824:	1d3b      	adds	r3, r7, #4
    3826:	4618      	mov	r0, r3
    3828:	f7ff ff3a 	bl	36a0 <unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
    382c:	4604      	mov	r4, r0
    382e:	f107 0308 	add.w	r3, r7, #8
    3832:	4618      	mov	r0, r3
    3834:	f7ff ff34 	bl	36a0 <unsigned long units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::to<unsigned long, void>() const>
    3838:	4603      	mov	r3, r0
    383a:	fbb4 f2f3 	udiv	r2, r4, r3
    383e:	fb03 f302 	mul.w	r3, r3, r2
    3842:	1ae3      	subs	r3, r4, r3
    3844:	2b00      	cmp	r3, #0
    3846:	bf14      	ite	ne
    3848:	2301      	movne	r3, #1
    384a:	2300      	moveq	r3, #0
    384c:	b2db      	uxtb	r3, r3
    384e:	2b00      	cmp	r3, #0
    3850:	d017      	beq.n	3882 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xea>
    {
      multiplier_value =
          static_cast<uint32_t>((desired_frequency / input_frequency) + 1);
    3852:	f107 0208 	add.w	r2, r7, #8
    3856:	1d3b      	adds	r3, r7, #4
    3858:	4611      	mov	r1, r2
    385a:	4618      	mov	r0, r3
    385c:	f7ff ff3e 	bl	36dc <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    3860:	4603      	mov	r3, r0
    3862:	61fb      	str	r3, [r7, #28]
    3864:	f107 031c 	add.w	r3, r7, #28
    3868:	2101      	movs	r1, #1
    386a:	4618      	mov	r0, r3
    386c:	f7ff ff62 	bl	3734 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator+<int, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, int)>
    3870:	4603      	mov	r3, r0
    3872:	61bb      	str	r3, [r7, #24]
      multiplier_value =
    3874:	f107 0318 	add.w	r3, r7, #24
    3878:	4618      	mov	r0, r3
    387a:	f000 fdf7 	bl	446c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    387e:	62b8      	str	r0, [r7, #40]	; 0x28
    3880:	e00e      	b.n	38a0 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x108>
    }
    else
    {
      multiplier_value =
          static_cast<uint32_t>(desired_frequency / input_frequency);
    3882:	f107 0208 	add.w	r2, r7, #8
    3886:	1d3b      	adds	r3, r7, #4
    3888:	4611      	mov	r1, r2
    388a:	4618      	mov	r0, r3
    388c:	f7ff ff26 	bl	36dc <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, 0>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    3890:	4603      	mov	r3, r0
    3892:	623b      	str	r3, [r7, #32]
      multiplier_value =
    3894:	f107 0320 	add.w	r3, r7, #32
    3898:	4618      	mov	r0, r3
    389a:	f000 fde7 	bl	446c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>
    389e:	62b8      	str	r0, [r7, #40]	; 0x28
    }
    uint16_t divider_value = 1;
    38a0:	2301      	movs	r3, #1
    38a2:	84fb      	strh	r3, [r7, #38]	; 0x26
    while (calculating)
    38a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
    38a8:	2b00      	cmp	r3, #0
    38aa:	d02d      	beq.n	3908 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x170>
    {
      uint16_t current_controlled_oscillator_frequency;
      current_controlled_oscillator_frequency = static_cast<uint16_t>(
          (static_cast<uint16_t>(input_frequency) * multiplier_value * 2) *
    38ac:	f107 0308 	add.w	r3, r7, #8
    38b0:	4618      	mov	r0, r3
    38b2:	f7ff ff5d 	bl	3770 <units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned short<unsigned short, 0>() const>
    38b6:	4603      	mov	r3, r0
    38b8:	461a      	mov	r2, r3
      current_controlled_oscillator_frequency = static_cast<uint16_t>(
    38ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    38bc:	b29b      	uxth	r3, r3
    38be:	fb12 f303 	smulbb	r3, r2, r3
    38c2:	b29b      	uxth	r3, r3
    38c4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
    38c6:	fb12 f303 	smulbb	r3, r2, r3
    38ca:	b29b      	uxth	r3, r3
    38cc:	005b      	lsls	r3, r3, #1
    38ce:	84bb      	strh	r3, [r7, #36]	; 0x24
          divider_value);
      if (current_controlled_oscillator_frequency >= 156)
    38d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
    38d2:	2b9b      	cmp	r3, #155	; 0x9b
    38d4:	d903      	bls.n	38de <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x146>
      {
        calculating = false;
    38d6:	2300      	movs	r3, #0
    38d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    38dc:	e7e2      	b.n	38a4 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x10c>
      }
      else
      {
        divider_value = static_cast<uint16_t>(divider_value * 2);
    38de:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    38e0:	005b      	lsls	r3, r3, #1
    38e2:	84fb      	strh	r3, [r7, #38]	; 0x26
        SJ2_ASSERT_FATAL(divider_value < 8,
    38e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
    38e6:	2b07      	cmp	r3, #7
    38e8:	d9dc      	bls.n	38a4 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x10c>
    38ea:	f44f 7389 	mov.w	r3, #274	; 0x112
    38ee:	4a09      	ldr	r2, [pc, #36]	; (3914 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x17c>)
    38f0:	490c      	ldr	r1, [pc, #48]	; (3924 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x18c>)
    38f2:	480d      	ldr	r0, [pc, #52]	; (3928 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x190>)
    38f4:	f7ff f91a 	bl	2b2c <printf>
    38f8:	4809      	ldr	r0, [pc, #36]	; (3920 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x188>)
    38fa:	f7fd fffb 	bl	18f4 <puts>
    38fe:	2100      	movs	r1, #0
    3900:	2001      	movs	r0, #1
    3902:	f7fd fdf3 	bl	14ec <sjsu::debug::PrintBacktrace(bool, void*)>
    3906:	e7fe      	b.n	3906 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x16e>
                         "PLL divider value went out of bounds");
      }
    }

    return multiplier_value;
    3908:	6abb      	ldr	r3, [r7, #40]	; 0x28
  }
    390a:	4618      	mov	r0, r3
    390c:	3734      	adds	r7, #52	; 0x34
    390e:	46bd      	mov	sp, r7
    3910:	bd90      	pop	{r4, r7, pc}
    3912:	bf00      	nop
    3914:	000072f4 	.word	0x000072f4
    3918:	00007144 	.word	0x00007144
    391c:	00006dd0 	.word	0x00006dd0
    3920:	00006db8 	.word	0x00006db8
    3924:	0000715c 	.word	0x0000715c
    3928:	00006ec0 	.word	0x00006ec0

0000392c <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>:

  void SetMainPll(units::frequency::megahertz_t input_frequency,
    392c:	b580      	push	{r7, lr}
    392e:	b086      	sub	sp, #24
    3930:	af00      	add	r7, sp, #0
    3932:	60f8      	str	r0, [r7, #12]
    3934:	60b9      	str	r1, [r7, #8]
    3936:	607a      	str	r2, [r7, #4]
                  units::frequency::megahertz_t desired_frequency) const
  {
    uint16_t divider_value = 1;
    3938:	2301      	movs	r3, #1
    393a:	82fb      	strh	r3, [r7, #22]
    uint32_t multiplier_value =
        CalculatePll(input_frequency, desired_frequency);
    393c:	687a      	ldr	r2, [r7, #4]
    393e:	68b9      	ldr	r1, [r7, #8]
    3940:	68f8      	ldr	r0, [r7, #12]
    3942:	f7ff ff29 	bl	3798 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
    3946:	6138      	str	r0, [r7, #16]
    // units::frequency::megahertz_t actual_speed =
    //     input_frequency * multiplier_value;
    // TO DO: use registers to retreive values
    SelectOscillatorSource(OscillatorSource::kIrc);
    3948:	2100      	movs	r1, #0
    394a:	68f8      	ldr	r0, [r7, #12]
    394c:	f7ff fdfa 	bl	3544 <sjsu::lpc40xx::SystemController::SelectOscillatorSource(sjsu::lpc40xx::SystemController::OscillatorSource) const>
    SelectMainClockSource(MainClockSource::kBaseClock);
    3950:	2100      	movs	r1, #0
    3952:	68f8      	ldr	r0, [r7, #12]
    3954:	f7ff fe1a 	bl	358c <sjsu::lpc40xx::SystemController::SelectMainClockSource(sjsu::lpc40xx::SystemController::MainClockSource) const>
    SelectUsbClockSource(UsbSource::kBaseClock);
    3958:	2100      	movs	r1, #0
    395a:	68f8      	ldr	r0, [r7, #12]
    395c:	f7ff fe3a 	bl	35d4 <sjsu::lpc40xx::SystemController::SelectUsbClockSource(sjsu::lpc40xx::SystemController::UsbSource) const>
    SelectSpifiClockSource(SpifiSource::kBaseClock);
    3960:	2100      	movs	r1, #0
    3962:	68f8      	ldr	r0, [r7, #12]
    3964:	f7ff fe5a 	bl	361c <sjsu::lpc40xx::SystemController::SelectSpifiClockSource(sjsu::lpc40xx::SystemController::SpifiSource) const>
    // must subtract 1 from multiplier value as specified in datasheet
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
    3968:	4b21      	ldr	r3, [pc, #132]	; (39f0 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    396a:	681b      	ldr	r3, [r3, #0]
    396c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    3970:	f023 011f 	bic.w	r1, r3, #31
        (multiplier_value - 1);
    3974:	693b      	ldr	r3, [r7, #16]
    3976:	1e5a      	subs	r2, r3, #1
    system_controller->PLL0CFG =
    3978:	4b1d      	ldr	r3, [pc, #116]	; (39f0 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    397a:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllMultiplier) |
    397c:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
    397e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CFG =
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
    3982:	4b1b      	ldr	r3, [pc, #108]	; (39f0 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    3984:	681b      	ldr	r3, [r3, #0]
    3986:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
    398a:	f023 0260 	bic.w	r2, r3, #96	; 0x60
    398e:	8afb      	ldrh	r3, [r7, #22]
    3990:	015b      	lsls	r3, r3, #5
    3992:	4619      	mov	r1, r3
    system_controller->PLL0CFG =
    3994:	4b16      	ldr	r3, [pc, #88]	; (39f0 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    3996:	681b      	ldr	r3, [r3, #0]
        (system_controller->PLL0CFG & ~kClearPllDivider) | (divider_value << 5);
    3998:	430a      	orrs	r2, r1
    system_controller->PLL0CFG =
    399a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    system_controller->PLL0CON |= kEnablePll;
    399e:	4b14      	ldr	r3, [pc, #80]	; (39f0 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    39a0:	681b      	ldr	r3, [r3, #0]
    39a2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
    39a6:	4b12      	ldr	r3, [pc, #72]	; (39f0 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    39a8:	681b      	ldr	r3, [r3, #0]
    39aa:	f042 0201 	orr.w	r2, r2, #1
    39ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    // Necessary feed sequence to ensure the changes are intentional
    system_controller->PLL0FEED = 0xAA;
    39b2:	4b0f      	ldr	r3, [pc, #60]	; (39f0 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    39b4:	681b      	ldr	r3, [r3, #0]
    39b6:	22aa      	movs	r2, #170	; 0xaa
    39b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    system_controller->PLL0FEED = 0x55;
    39bc:	4b0c      	ldr	r3, [pc, #48]	; (39f0 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    39be:	681b      	ldr	r3, [r3, #0]
    39c0:	2255      	movs	r2, #85	; 0x55
    39c2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    while (!bit::Read(system_controller->PLL0STAT, kPlock))
    39c6:	4b0a      	ldr	r3, [pc, #40]	; (39f0 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xc4>)
    39c8:	681b      	ldr	r3, [r3, #0]
    39ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
    39ce:	210a      	movs	r1, #10
    39d0:	4618      	mov	r0, r3
    39d2:	f7fd fc25 	bl	1220 <bool sjsu::bit::Read<unsigned long>(unsigned long, unsigned long)>
    39d6:	4603      	mov	r3, r0
    39d8:	f083 0301 	eor.w	r3, r3, #1
    39dc:	b2db      	uxtb	r3, r3
    39de:	2b00      	cmp	r3, #0
    39e0:	d001      	beq.n	39e6 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0xba>
    {
      continue;
    39e2:	bf00      	nop
    while (!bit::Read(system_controller->PLL0STAT, kPlock))
    39e4:	e7ef      	b.n	39c6 <sjsu::lpc40xx::SystemController::SetMainPll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const+0x9a>
    }
  }
    39e6:	bf00      	nop
    39e8:	3718      	adds	r7, #24
    39ea:	46bd      	mov	sp, r7
    39ec:	bd80      	pop	{r7, pc}
    39ee:	bf00      	nop
    39f0:	100003e0 	.word	0x100003e0

000039f4 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const>:
    {
      continue;
    }
  }

  void SetCpuClockDivider(uint8_t cpu_divider) const
    39f4:	b590      	push	{r4, r7, lr}
    39f6:	b083      	sub	sp, #12
    39f8:	af00      	add	r7, sp, #0
    39fa:	6078      	str	r0, [r7, #4]
    39fc:	460b      	mov	r3, r1
    39fe:	70fb      	strb	r3, [r7, #3]
  {
    SJ2_ASSERT_FATAL(cpu_divider < 32, "Divider mustn't exceed 32");
    3a00:	78fb      	ldrb	r3, [r7, #3]
    3a02:	2b1f      	cmp	r3, #31
    3a04:	d90e      	bls.n	3a24 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x30>
    3a06:	f44f 73a9 	mov.w	r3, #338	; 0x152
    3a0a:	4a13      	ldr	r2, [pc, #76]	; (3a58 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x64>)
    3a0c:	4913      	ldr	r1, [pc, #76]	; (3a5c <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x68>)
    3a0e:	4814      	ldr	r0, [pc, #80]	; (3a60 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x6c>)
    3a10:	f7ff f88c 	bl	2b2c <printf>
    3a14:	4813      	ldr	r0, [pc, #76]	; (3a64 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x70>)
    3a16:	f7fd ff6d 	bl	18f4 <puts>
    3a1a:	2100      	movs	r1, #0
    3a1c:	2001      	movs	r0, #1
    3a1e:	f7fd fd65 	bl	14ec <sjsu::debug::PrintBacktrace(bool, void*)>
    3a22:	e7fe      	b.n	3a22 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x2e>

    system_controller->CCLKSEL = bit::Insert(
    3a24:	4b10      	ldr	r3, [pc, #64]	; (3a68 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x74>)
    3a26:	681b      	ldr	r3, [r3, #0]
        system_controller->CCLKSEL, cpu_divider, CpuClock::kDivider);
    3a28:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
    system_controller->CCLKSEL = bit::Insert(
    3a2c:	4b0e      	ldr	r3, [pc, #56]	; (3a68 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x74>)
    3a2e:	681c      	ldr	r4, [r3, #0]
    3a30:	4b0e      	ldr	r3, [pc, #56]	; (3a6c <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const+0x78>)
    3a32:	78f9      	ldrb	r1, [r7, #3]
    3a34:	781a      	ldrb	r2, [r3, #0]
    3a36:	785b      	ldrb	r3, [r3, #1]
    3a38:	021b      	lsls	r3, r3, #8
    3a3a:	431a      	orrs	r2, r3
    3a3c:	2300      	movs	r3, #0
    3a3e:	f362 030f 	bfi	r3, r2, #0, #16
    3a42:	461a      	mov	r2, r3
    3a44:	f7fd fbb4 	bl	11b0 <unsigned long sjsu::bit::Insert<unsigned long, unsigned char>(unsigned long, unsigned char, sjsu::bit::Mask)>
    3a48:	4603      	mov	r3, r0
    3a4a:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
  }
    3a4e:	bf00      	nop
    3a50:	370c      	adds	r7, #12
    3a52:	46bd      	mov	sp, r7
    3a54:	bd90      	pop	{r4, r7, pc}
    3a56:	bf00      	nop
    3a58:	00007370 	.word	0x00007370
    3a5c:	00007174 	.word	0x00007174
    3a60:	00006f68 	.word	0x00006f68
    3a64:	00006db8 	.word	0x00006db8
    3a68:	100003e0 	.word	0x100003e0
    3a6c:	0000711c 	.word	0x0000711c

00003a70 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const>:

  void SetEmcClockDivider(EmcDivider emc_divider) const
    3a70:	b590      	push	{r4, r7, lr}
    3a72:	b083      	sub	sp, #12
    3a74:	af00      	add	r7, sp, #0
    3a76:	6078      	str	r0, [r7, #4]
    3a78:	460b      	mov	r3, r1
    3a7a:	70fb      	strb	r3, [r7, #3]
  {
    system_controller->EMCCLKSEL =
        bit::Insert(system_controller->EMCCLKSEL,
    3a7c:	4b0c      	ldr	r3, [pc, #48]	; (3ab0 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const+0x40>)
    3a7e:	681b      	ldr	r3, [r3, #0]
    3a80:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
    3a84:	78f9      	ldrb	r1, [r7, #3]
    system_controller->EMCCLKSEL =
    3a86:	4b0a      	ldr	r3, [pc, #40]	; (3ab0 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const+0x40>)
    3a88:	681c      	ldr	r4, [r3, #0]
        bit::Insert(system_controller->EMCCLKSEL,
    3a8a:	4b0a      	ldr	r3, [pc, #40]	; (3ab4 <sjsu::lpc40xx::SystemController::SetEmcClockDivider(sjsu::lpc40xx::SystemController::EmcDivider) const+0x44>)
    3a8c:	781a      	ldrb	r2, [r3, #0]
    3a8e:	785b      	ldrb	r3, [r3, #1]
    3a90:	021b      	lsls	r3, r3, #8
    3a92:	431a      	orrs	r2, r3
    3a94:	2300      	movs	r3, #0
    3a96:	f362 030f 	bfi	r3, r2, #0, #16
    3a9a:	461a      	mov	r2, r3
    3a9c:	f000 fd32 	bl	4504 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>
    3aa0:	4603      	mov	r3, r0
    system_controller->EMCCLKSEL =
    3aa2:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
                    static_cast<uint32_t>(emc_divider),
                    EmcClock::kDivider);
  }
    3aa6:	bf00      	nop
    3aa8:	370c      	adds	r7, #12
    3aaa:	46bd      	mov	sp, r7
    3aac:	bd90      	pop	{r4, r7, pc}
    3aae:	bf00      	nop
    3ab0:	100003e0 	.word	0x100003e0
    3ab4:	00007118 	.word	0x00007118

00003ab8 <sjsu::lpc40xx::DefaultSystemController()>:
  // TODO(#181): Set USB and Spifi clock rates
  inline static units::frequency::hertz_t speed_in_hertz = kDefaultIRCFrequency;
};

inline const sjsu::lpc40xx::SystemController & DefaultSystemController()
{
    3ab8:	b480      	push	{r7}
    3aba:	af00      	add	r7, sp, #0
  static sjsu::lpc40xx::SystemController default_system_controller =
      sjsu::lpc40xx::SystemController();
  return default_system_controller;
    3abc:	4b02      	ldr	r3, [pc, #8]	; (3ac8 <sjsu::lpc40xx::DefaultSystemController()+0x10>)
}
    3abe:	4618      	mov	r0, r3
    3ac0:	46bd      	mov	sp, r7
    3ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ac6:	4770      	bx	lr
    3ac8:	10000024 	.word	0x10000024

00003acc <sjsu::lpc40xx::uart::FindClosestFractional(float)>:
  uint32_t divide_add   = 0;
  uint32_t multiply     = 1;
};

constexpr UartCalibration_t FindClosestFractional(float decimal)
{
    3acc:	b480      	push	{r7}
    3ace:	b089      	sub	sp, #36	; 0x24
    3ad0:	af00      	add	r7, sp, #0
    3ad2:	6078      	str	r0, [r7, #4]
    3ad4:	ed87 0a00 	vstr	s0, [r7]
  UartCalibration_t result;
    3ad8:	687b      	ldr	r3, [r7, #4]
    3ada:	2200      	movs	r2, #0
    3adc:	601a      	str	r2, [r3, #0]
    3ade:	687b      	ldr	r3, [r7, #4]
    3ae0:	2200      	movs	r2, #0
    3ae2:	605a      	str	r2, [r3, #4]
    3ae4:	687b      	ldr	r3, [r7, #4]
    3ae6:	2201      	movs	r2, #1
    3ae8:	609a      	str	r2, [r3, #8]
  bool finished = false;
    3aea:	2300      	movs	r3, #0
    3aec:	77fb      	strb	r3, [r7, #31]
  for (int div = 0; div < 15 && !finished; div++)
    3aee:	2300      	movs	r3, #0
    3af0:	61bb      	str	r3, [r7, #24]
    3af2:	69bb      	ldr	r3, [r7, #24]
    3af4:	2b0e      	cmp	r3, #14
    3af6:	dc4f      	bgt.n	3b98 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xcc>
    3af8:	7ffb      	ldrb	r3, [r7, #31]
    3afa:	2b00      	cmp	r3, #0
    3afc:	d14c      	bne.n	3b98 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xcc>
  {
    for (int mul = div + 1; mul < 15 && !finished; mul++)
    3afe:	69bb      	ldr	r3, [r7, #24]
    3b00:	3301      	adds	r3, #1
    3b02:	617b      	str	r3, [r7, #20]
    3b04:	697b      	ldr	r3, [r7, #20]
    3b06:	2b0e      	cmp	r3, #14
    3b08:	dc42      	bgt.n	3b90 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xc4>
    3b0a:	7ffb      	ldrb	r3, [r7, #31]
    3b0c:	2b00      	cmp	r3, #0
    3b0e:	d13f      	bne.n	3b90 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xc4>
    {
      float divf         = static_cast<float>(div);
    3b10:	69bb      	ldr	r3, [r7, #24]
    3b12:	ee07 3a90 	vmov	s15, r3
    3b16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3b1a:	edc7 7a04 	vstr	s15, [r7, #16]
      float mulf         = static_cast<float>(mul);
    3b1e:	697b      	ldr	r3, [r7, #20]
    3b20:	ee07 3a90 	vmov	s15, r3
    3b24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    3b28:	edc7 7a03 	vstr	s15, [r7, #12]
      float test_decimal = 1.0f + divf / mulf;
    3b2c:	edd7 6a04 	vldr	s13, [r7, #16]
    3b30:	ed97 7a03 	vldr	s14, [r7, #12]
    3b34:	eec6 7a87 	vdiv.f32	s15, s13, s14
    3b38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    3b3c:	ee77 7a87 	vadd.f32	s15, s15, s14
    3b40:	edc7 7a02 	vstr	s15, [r7, #8]
      if (decimal <= test_decimal + kThreshold &&
    3b44:	edd7 7a02 	vldr	s15, [r7, #8]
    3b48:	ed9f 7a17 	vldr	s14, [pc, #92]	; 3ba8 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xdc>
    3b4c:	ee77 7a87 	vadd.f32	s15, s15, s14
    3b50:	ed97 7a00 	vldr	s14, [r7]
    3b54:	eeb4 7ae7 	vcmpe.f32	s14, s15
    3b58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3b5c:	d814      	bhi.n	3b88 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xbc>
          decimal >= test_decimal - kThreshold)
    3b5e:	edd7 7a02 	vldr	s15, [r7, #8]
    3b62:	ed9f 7a11 	vldr	s14, [pc, #68]	; 3ba8 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xdc>
    3b66:	ee77 7ac7 	vsub.f32	s15, s15, s14
      if (decimal <= test_decimal + kThreshold &&
    3b6a:	ed97 7a00 	vldr	s14, [r7]
    3b6e:	eeb4 7ae7 	vcmpe.f32	s14, s15
    3b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3b76:	db07      	blt.n	3b88 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0xbc>
      {
        result.divide_add = div;
    3b78:	69ba      	ldr	r2, [r7, #24]
    3b7a:	687b      	ldr	r3, [r7, #4]
    3b7c:	605a      	str	r2, [r3, #4]
        result.multiply   = mul;
    3b7e:	697a      	ldr	r2, [r7, #20]
    3b80:	687b      	ldr	r3, [r7, #4]
    3b82:	609a      	str	r2, [r3, #8]
        finished          = true;
    3b84:	2301      	movs	r3, #1
    3b86:	77fb      	strb	r3, [r7, #31]
    for (int mul = div + 1; mul < 15 && !finished; mul++)
    3b88:	697b      	ldr	r3, [r7, #20]
    3b8a:	3301      	adds	r3, #1
    3b8c:	617b      	str	r3, [r7, #20]
    3b8e:	e7b9      	b.n	3b04 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0x38>
  for (int div = 0; div < 15 && !finished; div++)
    3b90:	69bb      	ldr	r3, [r7, #24]
    3b92:	3301      	adds	r3, #1
    3b94:	61bb      	str	r3, [r7, #24]
    3b96:	e7ac      	b.n	3af2 <sjsu::lpc40xx::uart::FindClosestFractional(float)+0x26>
      }
    }
  }
  return result;
    3b98:	bf00      	nop
}
    3b9a:	6878      	ldr	r0, [r7, #4]
    3b9c:	3724      	adds	r7, #36	; 0x24
    3b9e:	46bd      	mov	sp, r7
    3ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
    3ba4:	4770      	bx	lr
    3ba6:	bf00      	nop
    3ba8:	3d4ccccd 	.word	0x3d4ccccd

00003bac <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>:

constexpr float DividerEstimate(float baud_rate,
                                float fraction_estimate       = 1,
                                uint32_t peripheral_frequency = 1)
{
    3bac:	b480      	push	{r7}
    3bae:	b087      	sub	sp, #28
    3bb0:	af00      	add	r7, sp, #0
    3bb2:	ed87 0a03 	vstr	s0, [r7, #12]
    3bb6:	edc7 0a02 	vstr	s1, [r7, #8]
    3bba:	6078      	str	r0, [r7, #4]
  float clock_frequency = static_cast<float>(peripheral_frequency);
    3bbc:	687b      	ldr	r3, [r7, #4]
    3bbe:	ee07 3a90 	vmov	s15, r3
    3bc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
    3bc6:	edc7 7a05 	vstr	s15, [r7, #20]
  return clock_frequency / (16.0f * baud_rate * fraction_estimate);
    3bca:	edd7 7a03 	vldr	s15, [r7, #12]
    3bce:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
    3bd2:	ee27 7a87 	vmul.f32	s14, s15, s14
    3bd6:	edd7 7a02 	vldr	s15, [r7, #8]
    3bda:	ee67 7a27 	vmul.f32	s15, s14, s15
    3bde:	ed97 7a05 	vldr	s14, [r7, #20]
    3be2:	eec7 6a27 	vdiv.f32	s13, s14, s15
    3be6:	eef0 7a66 	vmov.f32	s15, s13
}
    3bea:	eeb0 0a67 	vmov.f32	s0, s15
    3bee:	371c      	adds	r7, #28
    3bf0:	46bd      	mov	sp, r7
    3bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
    3bf6:	4770      	bx	lr

00003bf8 <sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)>:

constexpr float FractionalEstimate(float baud_rate,
                                   float divider,
                                   uint32_t peripheral_frequency)
{
    3bf8:	b480      	push	{r7}
    3bfa:	b087      	sub	sp, #28
    3bfc:	af00      	add	r7, sp, #0
    3bfe:	ed87 0a03 	vstr	s0, [r7, #12]
    3c02:	edc7 0a02 	vstr	s1, [r7, #8]
    3c06:	6078      	str	r0, [r7, #4]
  float clock_frequency = static_cast<float>(peripheral_frequency);
    3c08:	687b      	ldr	r3, [r7, #4]
    3c0a:	ee07 3a90 	vmov	s15, r3
    3c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
    3c12:	edc7 7a05 	vstr	s15, [r7, #20]
  return clock_frequency / (16.0f * baud_rate * divider);
    3c16:	edd7 7a03 	vldr	s15, [r7, #12]
    3c1a:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
    3c1e:	ee27 7a87 	vmul.f32	s14, s15, s14
    3c22:	edd7 7a02 	vldr	s15, [r7, #8]
    3c26:	ee67 7a27 	vmul.f32	s15, s14, s15
    3c2a:	ed97 7a05 	vldr	s14, [r7, #20]
    3c2e:	eec7 6a27 	vdiv.f32	s13, s14, s15
    3c32:	eef0 7a66 	vmov.f32	s15, s13
}
    3c36:	eeb0 0a67 	vmov.f32	s0, s15
    3c3a:	371c      	adds	r7, #28
    3c3c:	46bd      	mov	sp, r7
    3c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c42:	4770      	bx	lr

00003c44 <sjsu::lpc40xx::uart::RoundFloat(float)>:

constexpr float RoundFloat(float value)
{
    3c44:	b480      	push	{r7}
    3c46:	b083      	sub	sp, #12
    3c48:	af00      	add	r7, sp, #0
    3c4a:	ed87 0a01 	vstr	s0, [r7, #4]
  return static_cast<float>(static_cast<int>(value + 0.5f));
    3c4e:	edd7 7a01 	vldr	s15, [r7, #4]
    3c52:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
    3c56:	ee77 7a87 	vadd.f32	s15, s15, s14
    3c5a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
    3c5e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
}
    3c62:	eeb0 0a67 	vmov.f32	s0, s15
    3c66:	370c      	adds	r7, #12
    3c68:	46bd      	mov	sp, r7
    3c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
    3c6e:	4770      	bx	lr

00003c70 <sjsu::lpc40xx::uart::IsDecmial(float)>:

constexpr bool IsDecmial(float value)
{
    3c70:	b580      	push	{r7, lr}
    3c72:	b086      	sub	sp, #24
    3c74:	af00      	add	r7, sp, #0
    3c76:	ed87 0a01 	vstr	s0, [r7, #4]
  bool result         = false;
    3c7a:	2300      	movs	r3, #0
    3c7c:	75fb      	strb	r3, [r7, #23]
  float rounded_value = RoundFloat(value);
    3c7e:	ed97 0a01 	vldr	s0, [r7, #4]
    3c82:	f7ff ffdf 	bl	3c44 <sjsu::lpc40xx::uart::RoundFloat(float)>
    3c86:	ed87 0a04 	vstr	s0, [r7, #16]
  float error         = value - rounded_value;
    3c8a:	ed97 7a01 	vldr	s14, [r7, #4]
    3c8e:	edd7 7a04 	vldr	s15, [r7, #16]
    3c92:	ee77 7a67 	vsub.f32	s15, s14, s15
    3c96:	edc7 7a03 	vstr	s15, [r7, #12]
  if (-kThreshold <= error && error <= kThreshold)
    3c9a:	edd7 7a03 	vldr	s15, [r7, #12]
    3c9e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 3ccc <sjsu::lpc40xx::uart::IsDecmial(float)+0x5c>
    3ca2:	eef4 7ac7 	vcmpe.f32	s15, s14
    3ca6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3caa:	db0a      	blt.n	3cc2 <sjsu::lpc40xx::uart::IsDecmial(float)+0x52>
    3cac:	edd7 7a03 	vldr	s15, [r7, #12]
    3cb0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 3cd0 <sjsu::lpc40xx::uart::IsDecmial(float)+0x60>
    3cb4:	eef4 7ac7 	vcmpe.f32	s15, s14
    3cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3cbc:	d801      	bhi.n	3cc2 <sjsu::lpc40xx::uart::IsDecmial(float)+0x52>
  {
    result = true;
    3cbe:	2301      	movs	r3, #1
    3cc0:	75fb      	strb	r3, [r7, #23]
  }
  return result;
    3cc2:	7dfb      	ldrb	r3, [r7, #23]
}
    3cc4:	4618      	mov	r0, r3
    3cc6:	3718      	adds	r7, #24
    3cc8:	46bd      	mov	sp, r7
    3cca:	bd80      	pop	{r7, pc}
    3ccc:	bd4ccccd 	.word	0xbd4ccccd
    3cd0:	3d4ccccd 	.word	0x3d4ccccd

00003cd4 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>:
  kDone
};

constexpr static UartCalibration_t GenerateUartCalibration(
    uint32_t baud_rate, units::frequency::hertz_t peripheral_frequency)
{
    3cd4:	b590      	push	{r4, r7, lr}
    3cd6:	b091      	sub	sp, #68	; 0x44
    3cd8:	af00      	add	r7, sp, #0
    3cda:	61f8      	str	r0, [r7, #28]
    3cdc:	61b9      	str	r1, [r7, #24]
    3cde:	617a      	str	r2, [r7, #20]
  uint32_t integer_peripheral_frequency =
      units::unit_cast<uint32_t>(peripheral_frequency);
    3ce0:	f107 0314 	add.w	r3, r7, #20
    3ce4:	4618      	mov	r0, r3
    3ce6:	f7ff fa9b 	bl	3220 <unsigned long units::unit_cast<unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, void>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>
    3cea:	62b8      	str	r0, [r7, #40]	; 0x28
  States state = States::kCalculateIntegerDivideLatch;
    3cec:	2300      	movs	r3, #0
    3cee:	63fb      	str	r3, [r7, #60]	; 0x3c
  UartCalibration_t uart_calibration;
    3cf0:	69fb      	ldr	r3, [r7, #28]
    3cf2:	2200      	movs	r2, #0
    3cf4:	601a      	str	r2, [r3, #0]
    3cf6:	69fb      	ldr	r3, [r7, #28]
    3cf8:	2200      	movs	r2, #0
    3cfa:	605a      	str	r2, [r3, #4]
    3cfc:	69fb      	ldr	r3, [r7, #28]
    3cfe:	2201      	movs	r2, #1
    3d00:	609a      	str	r2, [r3, #8]
  float baud_rate_float = static_cast<float>(baud_rate);
    3d02:	69bb      	ldr	r3, [r7, #24]
    3d04:	ee07 3a90 	vmov	s15, r3
    3d08:	eef8 7a67 	vcvt.f32.u32	s15, s15
    3d0c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
  float divide_estimate = 0;
    3d10:	f04f 0300 	mov.w	r3, #0
    3d14:	63bb      	str	r3, [r7, #56]	; 0x38
  float decimal         = 1.5;
    3d16:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
    3d1a:	637b      	str	r3, [r7, #52]	; 0x34
  float div             = 1;
    3d1c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
    3d20:	633b      	str	r3, [r7, #48]	; 0x30
  float mul             = 2;
    3d22:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (state != States::kDone)
    3d28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3d2a:	2b04      	cmp	r3, #4
    3d2c:	f000 80be 	beq.w	3eac <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d8>
  {
    switch (state)
    3d30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    3d32:	2b03      	cmp	r3, #3
    3d34:	f200 80b8 	bhi.w	3ea8 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d4>
    3d38:	a201      	add	r2, pc, #4	; (adr r2, 3d40 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x6c>)
    3d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3d3e:	bf00      	nop
    3d40:	00003d51 	.word	0x00003d51
    3d44:	00003dab 	.word	0x00003dab
    3d48:	00003e0b 	.word	0x00003e0b
    3d4c:	00003e7b 	.word	0x00003e7b
    {
      case States::kCalculateIntegerDivideLatch:
      {
        divide_estimate =
    3d50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    3d52:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
    3d56:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
    3d5a:	f7ff ff27 	bl	3bac <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>
    3d5e:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
            DividerEstimate(baud_rate_float, 1, integer_peripheral_frequency);

        if (divide_estimate < 1.0f)
    3d62:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    3d66:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    3d6a:	eef4 7ac7 	vcmpe.f32	s15, s14
    3d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3d72:	d505      	bpl.n	3d80 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0xac>
        {
          uart_calibration.divide_latch = 0;
    3d74:	69fb      	ldr	r3, [r7, #28]
    3d76:	2200      	movs	r2, #0
    3d78:	601a      	str	r2, [r3, #0]
          state                         = States::kDone;
    3d7a:	2304      	movs	r3, #4
    3d7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          state = States::kCalculateDivideLatchWithDecimal;
        }
        break;
    3d7e:	e094      	b.n	3eaa <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
        else if (IsDecmial(divide_estimate))
    3d80:	ed97 0a0e 	vldr	s0, [r7, #56]	; 0x38
    3d84:	f7ff ff74 	bl	3c70 <sjsu::lpc40xx::uart::IsDecmial(float)>
    3d88:	4603      	mov	r3, r0
    3d8a:	2b00      	cmp	r3, #0
    3d8c:	d00a      	beq.n	3da4 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0xd0>
              static_cast<uint32_t>(divide_estimate);
    3d8e:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    3d92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    3d96:	ee17 2a90 	vmov	r2, s15
          uart_calibration.divide_latch =
    3d9a:	69fb      	ldr	r3, [r7, #28]
    3d9c:	601a      	str	r2, [r3, #0]
          state = States::kDone;
    3d9e:	2304      	movs	r3, #4
    3da0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    3da2:	e082      	b.n	3eaa <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
          state = States::kCalculateDivideLatchWithDecimal;
    3da4:	2301      	movs	r3, #1
    3da6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    3da8:	e07f      	b.n	3eaa <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kCalculateDivideLatchWithDecimal:
      {
        divide_estimate = RoundFloat(DividerEstimate(
    3daa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    3dac:	edd7 0a0d 	vldr	s1, [r7, #52]	; 0x34
    3db0:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
    3db4:	f7ff fefa 	bl	3bac <sjsu::lpc40xx::uart::DividerEstimate(float, float, unsigned long)>
    3db8:	eef0 7a40 	vmov.f32	s15, s0
    3dbc:	eeb0 0a67 	vmov.f32	s0, s15
    3dc0:	f7ff ff40 	bl	3c44 <sjsu::lpc40xx::uart::RoundFloat(float)>
    3dc4:	ed87 0a0e 	vstr	s0, [r7, #56]	; 0x38
            baud_rate_float, decimal, integer_peripheral_frequency));
        decimal         = FractionalEstimate(
    3dc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    3dca:	edd7 0a0e 	vldr	s1, [r7, #56]	; 0x38
    3dce:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
    3dd2:	f7ff ff11 	bl	3bf8 <sjsu::lpc40xx::uart::FractionalEstimate(float, float, unsigned long)>
    3dd6:	ed87 0a0d 	vstr	s0, [r7, #52]	; 0x34
            baud_rate_float, divide_estimate, integer_peripheral_frequency);
        if (1.1f <= decimal && decimal <= 1.9f)
    3dda:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
    3dde:	ed9f 7a36 	vldr	s14, [pc, #216]	; 3eb8 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1e4>
    3de2:	eef4 7ac7 	vcmpe.f32	s15, s14
    3de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3dea:	db0b      	blt.n	3e04 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x130>
    3dec:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
    3df0:	ed9f 7a32 	vldr	s14, [pc, #200]	; 3ebc <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1e8>
    3df4:	eef4 7ac7 	vcmpe.f32	s15, s14
    3df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3dfc:	d802      	bhi.n	3e04 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x130>
        {
          state = States::kGenerateFractionFromDecimal;
    3dfe:	2303      	movs	r3, #3
    3e00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          state = States::kDecimalFailedGenerateNewDecimal;
        }
        break;
    3e02:	e052      	b.n	3eaa <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
          state = States::kDecimalFailedGenerateNewDecimal;
    3e04:	2302      	movs	r3, #2
    3e06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    3e08:	e04f      	b.n	3eaa <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kDecimalFailedGenerateNewDecimal:
      {
        mul += 1;
    3e0a:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
    3e0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    3e12:	ee77 7a87 	vadd.f32	s15, s15, s14
    3e16:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

        if (div > 15)
    3e1a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    3e1e:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
    3e22:	eef4 7ac7 	vcmpe.f32	s15, s14
    3e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3e2a:	dd02      	ble.n	3e32 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x15e>
        {
          state = States::kDone;
    3e2c:	2304      	movs	r3, #4
    3e2e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
    3e30:	e03b      	b.n	3eaa <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
        }
        else if (mul > 15)
    3e32:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
    3e36:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
    3e3a:	eef4 7ac7 	vcmpe.f32	s15, s14
    3e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    3e42:	dd0f      	ble.n	3e64 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x190>
        {
          div += 1;
    3e44:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    3e48:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    3e4c:	ee77 7a87 	vadd.f32	s15, s15, s14
    3e50:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
          mul = div + 1;
    3e54:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
    3e58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
    3e5c:	ee77 7a87 	vadd.f32	s15, s15, s14
    3e60:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        }
        decimal = div / mul;
    3e64:	edd7 6a0c 	vldr	s13, [r7, #48]	; 0x30
    3e68:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
    3e6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
    3e70:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        state   = States::kCalculateDivideLatchWithDecimal;
    3e74:	2301      	movs	r3, #1
    3e76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    3e78:	e017      	b.n	3eaa <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kGenerateFractionFromDecimal:
      {
        uart_calibration              = FindClosestFractional(decimal);
    3e7a:	69fc      	ldr	r4, [r7, #28]
    3e7c:	463b      	mov	r3, r7
    3e7e:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
    3e82:	4618      	mov	r0, r3
    3e84:	f7ff fe22 	bl	3acc <sjsu::lpc40xx::uart::FindClosestFractional(float)>
    3e88:	463b      	mov	r3, r7
    3e8a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    3e8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        uart_calibration.divide_latch = static_cast<uint32_t>(divide_estimate);
    3e92:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
    3e96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    3e9a:	ee17 2a90 	vmov	r2, s15
    3e9e:	69fb      	ldr	r3, [r7, #28]
    3ea0:	601a      	str	r2, [r3, #0]
        state                         = States::kDone;
    3ea2:	2304      	movs	r3, #4
    3ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
    3ea6:	e000      	b.n	3eaa <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x1d6>
      }
      case States::kDone:
      default: break;
    3ea8:	bf00      	nop
  while (state != States::kDone)
    3eaa:	e73d      	b.n	3d28 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)+0x54>
    }
  }
  return uart_calibration;
    3eac:	bf00      	nop
}
    3eae:	69f8      	ldr	r0, [r7, #28]
    3eb0:	3744      	adds	r7, #68	; 0x44
    3eb2:	46bd      	mov	sp, r7
    3eb4:	bd90      	pop	{r4, r7, pc}
    3eb6:	bf00      	nop
    3eb8:	3f8ccccd 	.word	0x3f8ccccd
    3ebc:	3ff33333 	.word	0x3ff33333

00003ec0 <sjsu::Uart::Uart()>:
#include "utility/status.hpp"
#include "utility/time.hpp"

namespace sjsu
{
class Uart
    3ec0:	b480      	push	{r7}
    3ec2:	b083      	sub	sp, #12
    3ec4:	af00      	add	r7, sp, #0
    3ec6:	6078      	str	r0, [r7, #4]
    3ec8:	4a04      	ldr	r2, [pc, #16]	; (3edc <sjsu::Uart::Uart()+0x1c>)
    3eca:	687b      	ldr	r3, [r7, #4]
    3ecc:	601a      	str	r2, [r3, #0]
    3ece:	687b      	ldr	r3, [r7, #4]
    3ed0:	4618      	mov	r0, r3
    3ed2:	370c      	adds	r7, #12
    3ed4:	46bd      	mov	sp, r7
    3ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
    3eda:	4770      	bx	lr
    3edc:	00007210 	.word	0x00007210

00003ee0 <sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)>:
      .tx_function_id = 0b101,
      .rx_function_id = 0b011,
    };
  };

  explicit constexpr Uart(const Port_t & port,
    3ee0:	b580      	push	{r7, lr}
    3ee2:	b084      	sub	sp, #16
    3ee4:	af00      	add	r7, sp, #0
    3ee6:	60f8      	str	r0, [r7, #12]
    3ee8:	60b9      	str	r1, [r7, #8]
    3eea:	607a      	str	r2, [r7, #4]
                          const sjsu::SystemController & system_controller =
                              DefaultSystemController())
      : port_(port), system_controller_(system_controller)
    3eec:	68fb      	ldr	r3, [r7, #12]
    3eee:	4618      	mov	r0, r3
    3ef0:	f7ff ffe6 	bl	3ec0 <sjsu::Uart::Uart()>
    3ef4:	4a06      	ldr	r2, [pc, #24]	; (3f10 <sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)+0x30>)
    3ef6:	68fb      	ldr	r3, [r7, #12]
    3ef8:	601a      	str	r2, [r3, #0]
    3efa:	68fb      	ldr	r3, [r7, #12]
    3efc:	68ba      	ldr	r2, [r7, #8]
    3efe:	605a      	str	r2, [r3, #4]
    3f00:	68fb      	ldr	r3, [r7, #12]
    3f02:	687a      	ldr	r2, [r7, #4]
    3f04:	609a      	str	r2, [r3, #8]
  {
  }
    3f06:	68fb      	ldr	r3, [r7, #12]
    3f08:	4618      	mov	r0, r3
    3f0a:	3710      	adds	r7, #16
    3f0c:	46bd      	mov	sp, r7
    3f0e:	bd80      	pop	{r7, pc}
    3f10:	000071f4 	.word	0x000071f4

00003f14 <sjsu::lpc40xx::Uart::Initialize(unsigned long) const>:

  Status Initialize(uint32_t baud_rate) const override
    3f14:	b580      	push	{r7, lr}
    3f16:	b084      	sub	sp, #16
    3f18:	af00      	add	r7, sp, #0
    3f1a:	6078      	str	r0, [r7, #4]
    3f1c:	6039      	str	r1, [r7, #0]
  {
    constexpr uint8_t kFIFOEnableAndReset = 0b111;
    3f1e:	2307      	movs	r3, #7
    3f20:	73fb      	strb	r3, [r7, #15]
    system_controller_.PowerUpPeripheral(port_.power_on_id);
    3f22:	687b      	ldr	r3, [r7, #4]
    3f24:	6898      	ldr	r0, [r3, #8]
    3f26:	687b      	ldr	r3, [r7, #4]
    3f28:	689b      	ldr	r3, [r3, #8]
    3f2a:	681b      	ldr	r3, [r3, #0]
    3f2c:	3314      	adds	r3, #20
    3f2e:	681b      	ldr	r3, [r3, #0]
    3f30:	687a      	ldr	r2, [r7, #4]
    3f32:	6852      	ldr	r2, [r2, #4]
    3f34:	3204      	adds	r2, #4
    3f36:	4611      	mov	r1, r2
    3f38:	4798      	blx	r3

    SetBaudRate(baud_rate);
    3f3a:	6839      	ldr	r1, [r7, #0]
    3f3c:	6878      	ldr	r0, [r7, #4]
    3f3e:	f000 f849 	bl	3fd4 <sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const>

    port_.rx.SetPinFunction(port_.rx_function_id);
    3f42:	687b      	ldr	r3, [r7, #4]
    3f44:	685b      	ldr	r3, [r3, #4]
    3f46:	68d8      	ldr	r0, [r3, #12]
    3f48:	687b      	ldr	r3, [r7, #4]
    3f4a:	685b      	ldr	r3, [r3, #4]
    3f4c:	68db      	ldr	r3, [r3, #12]
    3f4e:	681b      	ldr	r3, [r3, #0]
    3f50:	681b      	ldr	r3, [r3, #0]
    3f52:	687a      	ldr	r2, [r7, #4]
    3f54:	6852      	ldr	r2, [r2, #4]
    3f56:	7c12      	ldrb	r2, [r2, #16]
    3f58:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    3f5c:	b2d2      	uxtb	r2, r2
    3f5e:	4611      	mov	r1, r2
    3f60:	4798      	blx	r3
    port_.tx.SetPinFunction(port_.tx_function_id);
    3f62:	687b      	ldr	r3, [r7, #4]
    3f64:	685b      	ldr	r3, [r3, #4]
    3f66:	6898      	ldr	r0, [r3, #8]
    3f68:	687b      	ldr	r3, [r7, #4]
    3f6a:	685b      	ldr	r3, [r3, #4]
    3f6c:	689b      	ldr	r3, [r3, #8]
    3f6e:	681b      	ldr	r3, [r3, #0]
    3f70:	681b      	ldr	r3, [r3, #0]
    3f72:	687a      	ldr	r2, [r7, #4]
    3f74:	6852      	ldr	r2, [r2, #4]
    3f76:	7c12      	ldrb	r2, [r2, #16]
    3f78:	f3c2 0202 	ubfx	r2, r2, #0, #3
    3f7c:	b2d2      	uxtb	r2, r2
    3f7e:	4611      	mov	r1, r2
    3f80:	4798      	blx	r3
    port_.rx.SetPull(sjsu::Pin::Resistor::kPullUp);
    3f82:	687b      	ldr	r3, [r7, #4]
    3f84:	685b      	ldr	r3, [r3, #4]
    3f86:	68da      	ldr	r2, [r3, #12]
    3f88:	687b      	ldr	r3, [r7, #4]
    3f8a:	685b      	ldr	r3, [r3, #4]
    3f8c:	68db      	ldr	r3, [r3, #12]
    3f8e:	681b      	ldr	r3, [r3, #0]
    3f90:	3304      	adds	r3, #4
    3f92:	681b      	ldr	r3, [r3, #0]
    3f94:	2102      	movs	r1, #2
    3f96:	4610      	mov	r0, r2
    3f98:	4798      	blx	r3
    port_.tx.SetPull(sjsu::Pin::Resistor::kPullUp);
    3f9a:	687b      	ldr	r3, [r7, #4]
    3f9c:	685b      	ldr	r3, [r3, #4]
    3f9e:	689a      	ldr	r2, [r3, #8]
    3fa0:	687b      	ldr	r3, [r7, #4]
    3fa2:	685b      	ldr	r3, [r3, #4]
    3fa4:	689b      	ldr	r3, [r3, #8]
    3fa6:	681b      	ldr	r3, [r3, #0]
    3fa8:	3304      	adds	r3, #4
    3faa:	681b      	ldr	r3, [r3, #0]
    3fac:	2102      	movs	r1, #2
    3fae:	4610      	mov	r0, r2
    3fb0:	4798      	blx	r3
    port_.registers->FCR |= kFIFOEnableAndReset;
    3fb2:	687b      	ldr	r3, [r7, #4]
    3fb4:	685b      	ldr	r3, [r3, #4]
    3fb6:	681b      	ldr	r3, [r3, #0]
    3fb8:	7a1b      	ldrb	r3, [r3, #8]
    3fba:	b2da      	uxtb	r2, r3
    3fbc:	687b      	ldr	r3, [r7, #4]
    3fbe:	685b      	ldr	r3, [r3, #4]
    3fc0:	681b      	ldr	r3, [r3, #0]
    3fc2:	f042 0207 	orr.w	r2, r2, #7
    3fc6:	b2d2      	uxtb	r2, r2
    3fc8:	721a      	strb	r2, [r3, #8]

    return Status::kSuccess;
    3fca:	2300      	movs	r3, #0
  }
    3fcc:	4618      	mov	r0, r3
    3fce:	3710      	adds	r7, #16
    3fd0:	46bd      	mov	sp, r7
    3fd2:	bd80      	pop	{r7, pc}

00003fd4 <sjsu::lpc40xx::Uart::SetBaudRate(unsigned long) const>:

  bool SetBaudRate(uint32_t baud_rate) const override
    3fd4:	b580      	push	{r7, lr}
    3fd6:	b086      	sub	sp, #24
    3fd8:	af00      	add	r7, sp, #0
    3fda:	6078      	str	r0, [r7, #4]
    3fdc:	6039      	str	r1, [r7, #0]
  {
    uart::UartCalibration_t calibration = uart::GenerateUartCalibration(
        baud_rate,
        system_controller_.GetPeripheralFrequency(port_.power_on_id));
    3fde:	687b      	ldr	r3, [r7, #4]
    3fe0:	689a      	ldr	r2, [r3, #8]
    3fe2:	687b      	ldr	r3, [r7, #4]
    3fe4:	685b      	ldr	r3, [r3, #4]
    3fe6:	3304      	adds	r3, #4
    3fe8:	4619      	mov	r1, r3
    3fea:	4610      	mov	r0, r2
    3fec:	f7fe ff16 	bl	2e1c <sjsu::SystemController::GetPeripheralFrequency(sjsu::SystemController::PeripheralID const&) const>
    3ff0:	4602      	mov	r2, r0
    3ff2:	f107 0308 	add.w	r3, r7, #8
    3ff6:	6839      	ldr	r1, [r7, #0]
    3ff8:	4618      	mov	r0, r3
    3ffa:	f7ff fe6b 	bl	3cd4 <sjsu::lpc40xx::uart::GenerateUartCalibration(unsigned long, units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>)>

    constexpr uint8_t kDlabBit = (1 << 7);
    3ffe:	2380      	movs	r3, #128	; 0x80
    4000:	75fb      	strb	r3, [r7, #23]

    uint8_t dlm = static_cast<uint8_t>((calibration.divide_latch >> 8) & 0xFF);
    4002:	68bb      	ldr	r3, [r7, #8]
    4004:	0a1b      	lsrs	r3, r3, #8
    4006:	75bb      	strb	r3, [r7, #22]
    uint8_t dll = static_cast<uint8_t>(calibration.divide_latch & 0xFF);
    4008:	68bb      	ldr	r3, [r7, #8]
    400a:	757b      	strb	r3, [r7, #21]
    uint8_t fdr = static_cast<uint8_t>((calibration.multiply & 0xF) << 4 |
    400c:	693b      	ldr	r3, [r7, #16]
    400e:	b2db      	uxtb	r3, r3
    4010:	011b      	lsls	r3, r3, #4
    4012:	b2da      	uxtb	r2, r3
                                       (calibration.divide_add & 0xF));
    4014:	68fb      	ldr	r3, [r7, #12]
    4016:	b2db      	uxtb	r3, r3
    4018:	f003 030f 	and.w	r3, r3, #15
    401c:	b2db      	uxtb	r3, r3
    uint8_t fdr = static_cast<uint8_t>((calibration.multiply & 0xF) << 4 |
    401e:	4313      	orrs	r3, r2
    4020:	753b      	strb	r3, [r7, #20]

    port_.registers->LCR = kDlabBit;
    4022:	687b      	ldr	r3, [r7, #4]
    4024:	685b      	ldr	r3, [r3, #4]
    4026:	681b      	ldr	r3, [r3, #0]
    4028:	2280      	movs	r2, #128	; 0x80
    402a:	731a      	strb	r2, [r3, #12]
    port_.registers->DLM = dlm;
    402c:	687b      	ldr	r3, [r7, #4]
    402e:	685b      	ldr	r3, [r3, #4]
    4030:	681b      	ldr	r3, [r3, #0]
    4032:	7dba      	ldrb	r2, [r7, #22]
    4034:	711a      	strb	r2, [r3, #4]
    port_.registers->DLL = dll;
    4036:	687b      	ldr	r3, [r7, #4]
    4038:	685b      	ldr	r3, [r3, #4]
    403a:	681b      	ldr	r3, [r3, #0]
    403c:	7d7a      	ldrb	r2, [r7, #21]
    403e:	701a      	strb	r2, [r3, #0]
    port_.registers->FDR = fdr;
    4040:	687b      	ldr	r3, [r7, #4]
    4042:	685b      	ldr	r3, [r3, #4]
    4044:	681b      	ldr	r3, [r3, #0]
    4046:	7d3a      	ldrb	r2, [r7, #20]
    4048:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    port_.registers->LCR = kStandardUart;
    404c:	687b      	ldr	r3, [r7, #4]
    404e:	685b      	ldr	r3, [r3, #4]
    4050:	681b      	ldr	r3, [r3, #0]
    4052:	2203      	movs	r2, #3
    4054:	731a      	strb	r2, [r3, #12]
    return true;
    4056:	2301      	movs	r3, #1
  }
    4058:	4618      	mov	r0, r3
    405a:	3718      	adds	r7, #24
    405c:	46bd      	mov	sp, r7
    405e:	bd80      	pop	{r7, pc}

00004060 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const>:

  void Write(const uint8_t * data, size_t size) const override
    4060:	b580      	push	{r7, lr}
    4062:	b086      	sub	sp, #24
    4064:	af00      	add	r7, sp, #0
    4066:	60f8      	str	r0, [r7, #12]
    4068:	60b9      	str	r1, [r7, #8]
    406a:	607a      	str	r2, [r7, #4]
  {
    for (size_t i = 0; i < size; i++)
    406c:	2300      	movs	r3, #0
    406e:	617b      	str	r3, [r7, #20]
    4070:	697a      	ldr	r2, [r7, #20]
    4072:	687b      	ldr	r3, [r7, #4]
    4074:	429a      	cmp	r2, r3
    4076:	d216      	bcs.n	40a6 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x46>
    {
      port_.registers->THR = data[i];
    4078:	68ba      	ldr	r2, [r7, #8]
    407a:	697b      	ldr	r3, [r7, #20]
    407c:	441a      	add	r2, r3
    407e:	68fb      	ldr	r3, [r7, #12]
    4080:	685b      	ldr	r3, [r3, #4]
    4082:	681b      	ldr	r3, [r3, #0]
    4084:	7812      	ldrb	r2, [r2, #0]
    4086:	701a      	strb	r2, [r3, #0]
      while (!TransmissionComplete())
    4088:	68f8      	ldr	r0, [r7, #12]
    408a:	f000 f8b5 	bl	41f8 <sjsu::lpc40xx::Uart::TransmissionComplete() const>
    408e:	4603      	mov	r3, r0
    4090:	f083 0301 	eor.w	r3, r3, #1
    4094:	b2db      	uxtb	r3, r3
    4096:	2b00      	cmp	r3, #0
    4098:	d001      	beq.n	409e <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x3e>
      {
        continue;
    409a:	bf00      	nop
      while (!TransmissionComplete())
    409c:	e7f4      	b.n	4088 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x28>
    for (size_t i = 0; i < size; i++)
    409e:	697b      	ldr	r3, [r7, #20]
    40a0:	3301      	adds	r3, #1
    40a2:	617b      	str	r3, [r7, #20]
    40a4:	e7e4      	b.n	4070 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const+0x10>
      }
    }
  }
    40a6:	bf00      	nop
    40a8:	3718      	adds	r7, #24
    40aa:	46bd      	mov	sp, r7
    40ac:	bd80      	pop	{r7, pc}

000040ae <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const>:
              std::chrono::microseconds timeout =
                  std::chrono::microseconds::max()) const override
  {
    uint32_t position = 0;
    // NOTE: Consider changing this to using a Wait() call.
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    40ae:	b590      	push	{r4, r7, lr}
    40b0:	b083      	sub	sp, #12
    40b2:	af00      	add	r7, sp, #0
    40b4:	6078      	str	r0, [r7, #4]
    40b6:	687b      	ldr	r3, [r7, #4]
    40b8:	681b      	ldr	r3, [r3, #0]
      if (HasData())
    40ba:	4618      	mov	r0, r3
    40bc:	f000 f88a 	bl	41d4 <sjsu::lpc40xx::Uart::HasData() const>
    40c0:	4603      	mov	r3, r0
    40c2:	2b00      	cmp	r3, #0
    40c4:	d010      	beq.n	40e8 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const+0x3a>
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    40c6:	687b      	ldr	r3, [r7, #4]
    40c8:	681b      	ldr	r3, [r3, #0]
      {
        data[position++] = static_cast<uint8_t>(port_.registers->RBR);
    40ca:	685b      	ldr	r3, [r3, #4]
    40cc:	681b      	ldr	r3, [r3, #0]
    40ce:	781b      	ldrb	r3, [r3, #0]
    40d0:	b2dc      	uxtb	r4, r3
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    40d2:	687b      	ldr	r3, [r7, #4]
    40d4:	685b      	ldr	r3, [r3, #4]
        data[position++] = static_cast<uint8_t>(port_.registers->RBR);
    40d6:	6819      	ldr	r1, [r3, #0]
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    40d8:	687b      	ldr	r3, [r7, #4]
    40da:	68da      	ldr	r2, [r3, #12]
        data[position++] = static_cast<uint8_t>(port_.registers->RBR);
    40dc:	6813      	ldr	r3, [r2, #0]
    40de:	1c58      	adds	r0, r3, #1
    40e0:	6010      	str	r0, [r2, #0]
    40e2:	440b      	add	r3, r1
    40e4:	4622      	mov	r2, r4
    40e6:	701a      	strb	r2, [r3, #0]
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    40e8:	687b      	ldr	r3, [r7, #4]
    40ea:	68db      	ldr	r3, [r3, #12]
      }
      if (position >= size)
    40ec:	681a      	ldr	r2, [r3, #0]
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    40ee:	687b      	ldr	r3, [r7, #4]
    40f0:	689b      	ldr	r3, [r3, #8]
      if (position >= size)
    40f2:	429a      	cmp	r2, r3
    40f4:	d301      	bcc.n	40fa <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const+0x4c>
      {
        return true;
    40f6:	2301      	movs	r3, #1
    40f8:	e000      	b.n	40fc <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const+0x4e>
      }
      return false;
    40fa:	2300      	movs	r3, #0
    });
    40fc:	4618      	mov	r0, r3
    40fe:	370c      	adds	r7, #12
    4100:	46bd      	mov	sp, r7
    4102:	bd90      	pop	{r4, r7, pc}

00004104 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const>:
  Status Read(uint8_t * data,
    4104:	b590      	push	{r4, r7, lr}
    4106:	b09d      	sub	sp, #116	; 0x74
    4108:	af00      	add	r7, sp, #0
    410a:	6178      	str	r0, [r7, #20]
    410c:	6139      	str	r1, [r7, #16]
    410e:	60fa      	str	r2, [r7, #12]
    uint32_t position = 0;
    4110:	2300      	movs	r3, #0
    4112:	63fb      	str	r3, [r7, #60]	; 0x3c
    return Wait(timeout, [this, &data, size, &position]() -> bool {
    4114:	697b      	ldr	r3, [r7, #20]
    4116:	643b      	str	r3, [r7, #64]	; 0x40
    4118:	f107 0310 	add.w	r3, r7, #16
    411c:	647b      	str	r3, [r7, #68]	; 0x44
    411e:	68fb      	ldr	r3, [r7, #12]
    4120:	64bb      	str	r3, [r7, #72]	; 0x48
    4122:	f107 033c 	add.w	r3, r7, #60	; 0x3c
    4126:	64fb      	str	r3, [r7, #76]	; 0x4c
    4128:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
    412c:	e9c7 3408 	strd	r3, r4, [r7, #32]
    4130:	f107 042c 	add.w	r4, r7, #44	; 0x2c
    4134:	f107 0340 	add.w	r3, r7, #64	; 0x40
    4138:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    413a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                                          F is_done);
template <typename F>
inline Status Wait(std::chrono::microseconds timeout, F is_done)
{
  std::chrono::microseconds timeout_time;
  if (timeout == std::chrono::microseconds::max())
    413e:	f107 0360 	add.w	r3, r7, #96	; 0x60
    4142:	4618      	mov	r0, r3
    4144:	f000 f885 	bl	4252 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>
    4148:	f107 0260 	add.w	r2, r7, #96	; 0x60
    414c:	f107 0320 	add.w	r3, r7, #32
    4150:	4611      	mov	r1, r2
    4152:	4618      	mov	r0, r3
    4154:	f000 f92d 	bl	43b2 <bool std::chrono::operator==<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    4158:	4603      	mov	r3, r0
    415a:	2b00      	cmp	r3, #0
    415c:	d004      	beq.n	4168 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0x64>
  {
    timeout_time = timeout;
    415e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
    4162:	e9c7 3406 	strd	r3, r4, [r7, #24]
    4166:	e011      	b.n	418c <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0x88>
  }
  else
  {
    timeout_time = Uptime() + timeout;
    4168:	4b19      	ldr	r3, [pc, #100]	; (41d0 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0xcc>)
    416a:	681b      	ldr	r3, [r3, #0]
    416c:	f107 0258 	add.w	r2, r7, #88	; 0x58
    4170:	4610      	mov	r0, r2
    4172:	4798      	blx	r3
    4174:	463b      	mov	r3, r7
    4176:	f107 0220 	add.w	r2, r7, #32
    417a:	f107 0158 	add.w	r1, r7, #88	; 0x58
    417e:	4618      	mov	r0, r3
    4180:	f000 f9e9 	bl	4556 <std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    4184:	e9d7 3400 	ldrd	r3, r4, [r7]
    4188:	e9c7 3406 	strd	r3, r4, [r7, #24]
  }

  Status status = Status::kTimedOut;
    418c:	2301      	movs	r3, #1
    418e:	66fb      	str	r3, [r7, #108]	; 0x6c
  while (Uptime() < timeout_time)
    4190:	4b0f      	ldr	r3, [pc, #60]	; (41d0 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0xcc>)
    4192:	681b      	ldr	r3, [r3, #0]
    4194:	f107 0250 	add.w	r2, r7, #80	; 0x50
    4198:	4610      	mov	r0, r2
    419a:	4798      	blx	r3
    419c:	f107 0218 	add.w	r2, r7, #24
    41a0:	f107 0350 	add.w	r3, r7, #80	; 0x50
    41a4:	4611      	mov	r1, r2
    41a6:	4618      	mov	r0, r3
    41a8:	f000 fa02 	bl	45b0 <bool std::chrono::operator< <long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>
    41ac:	4603      	mov	r3, r0
    41ae:	2b00      	cmp	r3, #0
    41b0:	d009      	beq.n	41c6 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0xc2>
  {
    if (is_done())
    41b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
    41b6:	4618      	mov	r0, r3
    41b8:	f7ff ff79 	bl	40ae <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const::{lambda()#1}::operator()() const>
    41bc:	4603      	mov	r3, r0
    41be:	2b00      	cmp	r3, #0
    41c0:	d0e6      	beq.n	4190 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const+0x8c>
    {
      status = Status::kSuccess;
    41c2:	2300      	movs	r3, #0
    41c4:	66fb      	str	r3, [r7, #108]	; 0x6c
      break;
    }
  }
  return status;
    41c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
  }
    41c8:	4618      	mov	r0, r3
    41ca:	3774      	adds	r7, #116	; 0x74
    41cc:	46bd      	mov	sp, r7
    41ce:	bd90      	pop	{r4, r7, pc}
    41d0:	10000014 	.word	0x10000014

000041d4 <sjsu::lpc40xx::Uart::HasData() const>:
  bool HasData() const override
    41d4:	b580      	push	{r7, lr}
    41d6:	b082      	sub	sp, #8
    41d8:	af00      	add	r7, sp, #0
    41da:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(port_.registers->LSR, 0);
    41dc:	687b      	ldr	r3, [r7, #4]
    41de:	685b      	ldr	r3, [r3, #4]
    41e0:	681b      	ldr	r3, [r3, #0]
    41e2:	7d1b      	ldrb	r3, [r3, #20]
    41e4:	b2db      	uxtb	r3, r3
    41e6:	2100      	movs	r1, #0
    41e8:	4618      	mov	r0, r3
    41ea:	f000 f99d 	bl	4528 <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>
    41ee:	4603      	mov	r3, r0
  }
    41f0:	4618      	mov	r0, r3
    41f2:	3708      	adds	r7, #8
    41f4:	46bd      	mov	sp, r7
    41f6:	bd80      	pop	{r7, pc}

000041f8 <sjsu::lpc40xx::Uart::TransmissionComplete() const>:

 private:
  bool TransmissionComplete() const
    41f8:	b580      	push	{r7, lr}
    41fa:	b082      	sub	sp, #8
    41fc:	af00      	add	r7, sp, #0
    41fe:	6078      	str	r0, [r7, #4]
  {
    return bit::Read(port_.registers->LSR, 5);
    4200:	687b      	ldr	r3, [r7, #4]
    4202:	685b      	ldr	r3, [r3, #4]
    4204:	681b      	ldr	r3, [r3, #0]
    4206:	7d1b      	ldrb	r3, [r3, #20]
    4208:	b2db      	uxtb	r3, r3
    420a:	2105      	movs	r1, #5
    420c:	4618      	mov	r0, r3
    420e:	f000 f98b 	bl	4528 <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>
    4212:	4603      	mov	r3, r0
  }
    4214:	4618      	mov	r0, r3
    4216:	3708      	adds	r7, #8
    4218:	46bd      	mov	sp, r7
    421a:	bd80      	pop	{r7, pc}

0000421c <(anonymous namespace)::Lpc40xxStdOut(char const*, unsigned int)>:
sjsu::cortex::SystemTimer system_timer(system_controller);
// Cortex NVIC interrupt controller used to setup FreeRTOS ISRs
sjsu::cortex::InterruptController interrupt_controller;

int Lpc40xxStdOut(const char * data, size_t length)
{
    421c:	b580      	push	{r7, lr}
    421e:	b082      	sub	sp, #8
    4220:	af00      	add	r7, sp, #0
    4222:	6078      	str	r0, [r7, #4]
    4224:	6039      	str	r1, [r7, #0]
  uart0.Write(reinterpret_cast<const uint8_t *>(data), length);
    4226:	683a      	ldr	r2, [r7, #0]
    4228:	6879      	ldr	r1, [r7, #4]
    422a:	4804      	ldr	r0, [pc, #16]	; (423c <(anonymous namespace)::Lpc40xxStdOut(char const*, unsigned int)+0x20>)
    422c:	f7ff ff18 	bl	4060 <sjsu::lpc40xx::Uart::Write(unsigned char const*, unsigned int) const>
  return length;
    4230:	683b      	ldr	r3, [r7, #0]
}
    4232:	4618      	mov	r0, r3
    4234:	3708      	adds	r7, #8
    4236:	46bd      	mov	sp, r7
    4238:	bd80      	pop	{r7, pc}
    423a:	bf00      	nop
    423c:	100003e8 	.word	0x100003e8

00004240 <std::chrono::duration_values<long long>::max()>:
	max()
    4240:	b598      	push	{r3, r4, r7, lr}
    4242:	af00      	add	r7, sp, #0
	{ return numeric_limits<_Rep>::max(); }
    4244:	f7fe fc8e 	bl	2b64 <std::numeric_limits<long long>::max()>
    4248:	4603      	mov	r3, r0
    424a:	460c      	mov	r4, r1
    424c:	4618      	mov	r0, r3
    424e:	4621      	mov	r1, r4
    4250:	bd98      	pop	{r3, r4, r7, pc}

00004252 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>:
	max()
    4252:	b590      	push	{r4, r7, lr}
    4254:	b085      	sub	sp, #20
    4256:	af00      	add	r7, sp, #0
    4258:	6078      	str	r0, [r7, #4]
	{ return duration(duration_values<rep>::max()); }
    425a:	f7ff fff1 	bl	4240 <std::chrono::duration_values<long long>::max()>
    425e:	4603      	mov	r3, r0
    4260:	460c      	mov	r4, r1
    4262:	e9c7 3402 	strd	r3, r4, [r7, #8]
    4266:	f107 0308 	add.w	r3, r7, #8
    426a:	4619      	mov	r1, r3
    426c:	6878      	ldr	r0, [r7, #4]
    426e:	f7fe fd87 	bl	2d80 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
    4272:	6878      	ldr	r0, [r7, #4]
    4274:	3714      	adds	r7, #20
    4276:	46bd      	mov	sp, r7
    4278:	bd90      	pop	{r4, r7, pc}
    427a:	Address 0x000000000000427a is out of bounds.


0000427c <(anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)>:

int Lpc40xxStdIn(char * data, size_t length)
{
    427c:	b590      	push	{r4, r7, lr}
    427e:	b087      	sub	sp, #28
    4280:	af02      	add	r7, sp, #8
    4282:	6078      	str	r0, [r7, #4]
    4284:	6039      	str	r1, [r7, #0]
  uart0.Read(reinterpret_cast<uint8_t *>(data), length);
    4286:	f107 0308 	add.w	r3, r7, #8
    428a:	4618      	mov	r0, r3
    428c:	f7ff ffe1 	bl	4252 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::max()>
    4290:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
    4294:	e9cd 3400 	strd	r3, r4, [sp]
    4298:	683a      	ldr	r2, [r7, #0]
    429a:	6879      	ldr	r1, [r7, #4]
    429c:	4803      	ldr	r0, [pc, #12]	; (42ac <(anonymous namespace)::Lpc40xxStdIn(char*, unsigned int)+0x30>)
    429e:	f7ff ff31 	bl	4104 <sjsu::lpc40xx::Uart::Read(unsigned char*, unsigned int, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >) const>
  return length;
    42a2:	683b      	ldr	r3, [r7, #0]
}
    42a4:	4618      	mov	r0, r3
    42a6:	3714      	adds	r7, #20
    42a8:	46bd      	mov	sp, r7
    42aa:	bd90      	pop	{r4, r7, pc}
    42ac:	100003e8 	.word	0x100003e8

000042b0 <ThreadRuntimeCounter>:
}  // namespace

extern "C" uint32_t ThreadRuntimeCounter()
{
    42b0:	b580      	push	{r7, lr}
    42b2:	af00      	add	r7, sp, #0
  return arm_dwt_counter.GetCount();
    42b4:	4802      	ldr	r0, [pc, #8]	; (42c0 <ThreadRuntimeCounter+0x10>)
    42b6:	f7fe fc83 	bl	2bc0 <sjsu::cortex::DwtCounter::GetCount()>
    42ba:	4603      	mov	r3, r0
}
    42bc:	4618      	mov	r0, r3
    42be:	bd80      	pop	{r7, pc}
    42c0:	100003e4 	.word	0x100003e4

000042c4 <sjsu::InitializePlatform()>:

namespace sjsu
{
SJ2_WEAK(void InitializePlatform());
void InitializePlatform()
{
    42c4:	b580      	push	{r7, lr}
    42c6:	b082      	sub	sp, #8
    42c8:	af00      	add	r7, sp, #0
  // Enable FPU (F.loating P.oint U.nit)
  // System will crash if floating point instruction is executed before
  // Initializing the FPU first.
  sjsu::cortex::InitializeFloatingPointUnit();
    42ca:	f7fe fc89 	bl	2be0 <sjsu::cortex::InitializeFloatingPointUnit()>
  // Set Clock Speed
  // SetSystemClockFrequency will timeout return the offset between desire
  // clockspeed and actual clockspeed if the PLL doesn't get a frequency fix
  // within a defined timeout (see L1/system_clock.hpp:kDefaultTimeout)
  system_controller.SetSystemClockFrequency(config::kSystemClockRateMhz);
    42ce:	4b1e      	ldr	r3, [pc, #120]	; (4348 <sjsu::InitializePlatform()+0x84>)
    42d0:	6819      	ldr	r1, [r3, #0]
    42d2:	481e      	ldr	r0, [pc, #120]	; (434c <sjsu::InitializePlatform()+0x88>)
    42d4:	f7ff f84a 	bl	336c <sjsu::lpc40xx::SystemController::SetSystemClockFrequency(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
  // Enable Peripheral Clock and set its divider to 1 meaning the clock speed
  // fed to all peripherals will be 48Mhz.
  system_controller.SetPeripheralClockDivider({}, 1);
    42d8:	23ff      	movs	r3, #255	; 0xff
    42da:	703b      	strb	r3, [r7, #0]
    42dc:	463b      	mov	r3, r7
    42de:	2201      	movs	r2, #1
    42e0:	4619      	mov	r1, r3
    42e2:	481a      	ldr	r0, [pc, #104]	; (434c <sjsu::InitializePlatform()+0x88>)
    42e4:	f7ff f890 	bl	3408 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const>
  // Set UART0 baudrate, which is required for printf and scanf to work properly
  uart0.Initialize(config::kBaudRate);
    42e8:	f44f 4116 	mov.w	r1, #38400	; 0x9600
    42ec:	4818      	ldr	r0, [pc, #96]	; (4350 <sjsu::InitializePlatform()+0x8c>)
    42ee:	f7ff fe11 	bl	3f14 <sjsu::lpc40xx::Uart::Initialize(unsigned long) const>
  sjsu::newlib::SetStdout(Lpc40xxStdOut);
    42f2:	4818      	ldr	r0, [pc, #96]	; (4354 <sjsu::InitializePlatform()+0x90>)
    42f4:	f000 fad0 	bl	4898 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))>
  sjsu::newlib::SetStdin(Lpc40xxStdIn);
    42f8:	4817      	ldr	r0, [pc, #92]	; (4358 <sjsu::InitializePlatform()+0x94>)
    42fa:	f000 fadd 	bl	48b8 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))>

  system_timer.SetTickFrequency(config::kRtosFrequency);
    42fe:	4b17      	ldr	r3, [pc, #92]	; (435c <sjsu::InitializePlatform()+0x98>)
    4300:	6819      	ldr	r1, [r3, #0]
    4302:	4817      	ldr	r0, [pc, #92]	; (4360 <sjsu::InitializePlatform()+0x9c>)
    4304:	f7fe ffaa 	bl	325c <sjsu::cortex::SystemTimer::SetTickFrequency(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const>
  sjsu::Status timer_start_status = system_timer.StartTimer();
    4308:	4815      	ldr	r0, [pc, #84]	; (4360 <sjsu::InitializePlatform()+0x9c>)
    430a:	f7fe fec9 	bl	30a0 <sjsu::cortex::SystemTimer::StartTimer() const>
    430e:	6078      	str	r0, [r7, #4]

  SJ2_ASSERT_FATAL(timer_start_status == sjsu::Status::kSuccess,
    4310:	687b      	ldr	r3, [r7, #4]
    4312:	2b00      	cmp	r3, #0
    4314:	d00d      	beq.n	4332 <sjsu::InitializePlatform()+0x6e>
    4316:	23d6      	movs	r3, #214	; 0xd6
    4318:	4a12      	ldr	r2, [pc, #72]	; (4364 <sjsu::InitializePlatform()+0xa0>)
    431a:	4913      	ldr	r1, [pc, #76]	; (4368 <sjsu::InitializePlatform()+0xa4>)
    431c:	4813      	ldr	r0, [pc, #76]	; (436c <sjsu::InitializePlatform()+0xa8>)
    431e:	f7fe fc05 	bl	2b2c <printf>
    4322:	4813      	ldr	r0, [pc, #76]	; (4370 <sjsu::InitializePlatform()+0xac>)
    4324:	f7fd fae6 	bl	18f4 <puts>
    4328:	2100      	movs	r1, #0
    432a:	2001      	movs	r0, #1
    432c:	f7fd f8de 	bl	14ec <sjsu::debug::PrintBacktrace(bool, void*)>
    4330:	e7fe      	b.n	4330 <sjsu::InitializePlatform()+0x6c>
                   "System Timer (used by FreeRTOS) has FAILED to start!");

  arm_dwt_counter.Initialize();
    4332:	4810      	ldr	r0, [pc, #64]	; (4374 <sjsu::InitializePlatform()+0xb0>)
    4334:	f7fe fc22 	bl	2b7c <sjsu::cortex::DwtCounter::Initialize()>
  sjsu::SetUptimeFunction(sjsu::cortex::SystemTimer::GetCount);
    4338:	480f      	ldr	r0, [pc, #60]	; (4378 <sjsu::InitializePlatform()+0xb4>)
    433a:	f7fe fd43 	bl	2dc4 <sjsu::SetUptimeFunction(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > (*)())>
}
    433e:	bf00      	nop
    4340:	3708      	adds	r7, #8
    4342:	46bd      	mov	sp, r7
    4344:	bd80      	pop	{r7, pc}
    4346:	bf00      	nop
    4348:	00007100 	.word	0x00007100
    434c:	10000064 	.word	0x10000064
    4350:	100003e8 	.word	0x100003e8
    4354:	0000421d 	.word	0x0000421d
    4358:	0000427d 	.word	0x0000427d
    435c:	00007104 	.word	0x00007104
    4360:	100003f4 	.word	0x100003f4
    4364:	000073b8 	.word	0x000073b8
    4368:	000071e0 	.word	0x000071e0
    436c:	00007024 	.word	0x00007024
    4370:	00006db8 	.word	0x00006db8
    4374:	100003e4 	.word	0x100003e4
    4378:	0000305d 	.word	0x0000305d

0000437c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator++(int)>:
	operator++(int)
    437c:	b590      	push	{r4, r7, lr}
    437e:	b087      	sub	sp, #28
    4380:	af00      	add	r7, sp, #0
    4382:	60f8      	str	r0, [r7, #12]
    4384:	60b9      	str	r1, [r7, #8]
    4386:	607a      	str	r2, [r7, #4]
	{ return duration(__r++); }
    4388:	68bb      	ldr	r3, [r7, #8]
    438a:	e9d3 3400 	ldrd	r3, r4, [r3]
    438e:	1c59      	adds	r1, r3, #1
    4390:	f144 0200 	adc.w	r2, r4, #0
    4394:	68b8      	ldr	r0, [r7, #8]
    4396:	e9c0 1200 	strd	r1, r2, [r0]
    439a:	e9c7 3404 	strd	r3, r4, [r7, #16]
    439e:	f107 0310 	add.w	r3, r7, #16
    43a2:	4619      	mov	r1, r3
    43a4:	68f8      	ldr	r0, [r7, #12]
    43a6:	f7fe fceb 	bl	2d80 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
    43aa:	68f8      	ldr	r0, [r7, #12]
    43ac:	371c      	adds	r7, #28
    43ae:	46bd      	mov	sp, r7
    43b0:	bd90      	pop	{r4, r7, pc}

000043b2 <bool std::chrono::operator==<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
      operator==(const duration<_Rep1, _Period1>& __lhs,
    43b2:	b5f0      	push	{r4, r5, r6, r7, lr}
    43b4:	b087      	sub	sp, #28
    43b6:	af00      	add	r7, sp, #0
    43b8:	6078      	str	r0, [r7, #4]
    43ba:	6039      	str	r1, [r7, #0]
	return __ct(__lhs).count() == __ct(__rhs).count();
    43bc:	687b      	ldr	r3, [r7, #4]
    43be:	e9d3 3400 	ldrd	r3, r4, [r3]
    43c2:	e9c7 3402 	strd	r3, r4, [r7, #8]
    43c6:	f107 0308 	add.w	r3, r7, #8
    43ca:	4618      	mov	r0, r3
    43cc:	f7fe fe14 	bl	2ff8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    43d0:	4605      	mov	r5, r0
    43d2:	460e      	mov	r6, r1
    43d4:	683b      	ldr	r3, [r7, #0]
    43d6:	e9d3 3400 	ldrd	r3, r4, [r3]
    43da:	e9c7 3404 	strd	r3, r4, [r7, #16]
    43de:	f107 0310 	add.w	r3, r7, #16
    43e2:	4618      	mov	r0, r3
    43e4:	f7fe fe08 	bl	2ff8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    43e8:	4603      	mov	r3, r0
    43ea:	460c      	mov	r4, r1
    43ec:	42a6      	cmp	r6, r4
    43ee:	bf06      	itte	eq
    43f0:	429d      	cmpeq	r5, r3
    43f2:	2301      	moveq	r3, #1
    43f4:	2300      	movne	r3, #0
    43f6:	b2db      	uxtb	r3, r3
      }
    43f8:	4618      	mov	r0, r3
    43fa:	371c      	adds	r7, #28
    43fc:	46bd      	mov	sp, r7
    43fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004400 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> units::operator/<units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, unsigned long, 0>(units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&, unsigned long)>:
		inline constexpr UnitTypeLhs operator/(const UnitTypeLhs& lhs, T rhs) noexcept
    4400:	b580      	push	{r7, lr}
    4402:	b084      	sub	sp, #16
    4404:	af00      	add	r7, sp, #0
    4406:	6078      	str	r0, [r7, #4]
    4408:	6039      	str	r1, [r7, #0]
		return UnitTypeLhs(lhs() / rhs);
    440a:	687b      	ldr	r3, [r7, #4]
    440c:	4618      	mov	r0, r3
    440e:	f7fe fe91 	bl	3134 <units::linear_scale<float>::operator()() const>
    4412:	eef0 6a40 	vmov.f32	s13, s0
    4416:	683b      	ldr	r3, [r7, #0]
    4418:	ee07 3a90 	vmov	s15, r3
    441c:	eef8 7a67 	vcvt.f32.u32	s15, s15
    4420:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    4424:	f107 030c 	add.w	r3, r7, #12
    4428:	eeb0 0a47 	vmov.f32	s0, s14
    442c:	4618      	mov	r0, r3
    442e:	f7fe fc58 	bl	2ce2 <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::unit_t<>(float)>
    4432:	68fb      	ldr	r3, [r7, #12]
	}
    4434:	4618      	mov	r0, r3
    4436:	3710      	adds	r7, #16
    4438:	46bd      	mov	sp, r7
    443a:	bd80      	pop	{r7, pc}

0000443c <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::operator+=(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
	operator+=(const duration& __d)
    443c:	b5f0      	push	{r4, r5, r6, r7, lr}
    443e:	b083      	sub	sp, #12
    4440:	af00      	add	r7, sp, #0
    4442:	6078      	str	r0, [r7, #4]
    4444:	6039      	str	r1, [r7, #0]
	  __r += __d.count();
    4446:	6838      	ldr	r0, [r7, #0]
    4448:	f7fe fdd6 	bl	2ff8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    444c:	460a      	mov	r2, r1
    444e:	4601      	mov	r1, r0
    4450:	687b      	ldr	r3, [r7, #4]
    4452:	e9d3 5600 	ldrd	r5, r6, [r3]
    4456:	186b      	adds	r3, r5, r1
    4458:	eb46 0402 	adc.w	r4, r6, r2
    445c:	687a      	ldr	r2, [r7, #4]
    445e:	e9c2 3400 	strd	r3, r4, [r2]
	  return *this;
    4462:	687b      	ldr	r3, [r7, #4]
	}
    4464:	4618      	mov	r0, r3
    4466:	370c      	adds	r7, #12
    4468:	46bd      	mov	sp, r7
    446a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000446c <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator unsigned long<unsigned long, 0>() const>:
		inline constexpr operator Ty() const noexcept
    446c:	b580      	push	{r7, lr}
    446e:	b084      	sub	sp, #16
    4470:	af00      	add	r7, sp, #0
    4472:	6078      	str	r0, [r7, #4]
			return static_cast<Ty>(units::convert<Units, unit<std::ratio<1>, units::category::scalar_unit>>((*this)()));
    4474:	687b      	ldr	r3, [r7, #4]
    4476:	4618      	mov	r0, r3
    4478:	f7fe fe5c 	bl	3134 <units::linear_scale<float>::operator()() const>
    447c:	eef0 7a40 	vmov.f32	s15, s0
    4480:	edc7 7a03 	vstr	s15, [r7, #12]
    4484:	f107 030c 	add.w	r3, r7, #12
    4488:	4618      	mov	r0, r3
    448a:	f000 f8b9 	bl	4600 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    448e:	eef0 7a40 	vmov.f32	s15, s0
    4492:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    4496:	ee17 3a90 	vmov	r3, s15
		}
    449a:	4618      	mov	r0, r3
    449c:	3710      	adds	r7, #16
    449e:	46bd      	mov	sp, r7
    44a0:	bd80      	pop	{r7, pc}

000044a2 <bool units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator><units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&) const>:
		inline constexpr bool operator>(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) const noexcept
    44a2:	b580      	push	{r7, lr}
    44a4:	ed2d 8b02 	vpush	{d8}
    44a8:	b082      	sub	sp, #8
    44aa:	af00      	add	r7, sp, #0
    44ac:	6078      	str	r0, [r7, #4]
    44ae:	6039      	str	r1, [r7, #0]
			return (nls::m_value > units::convert<UnitsRhs, Units>(rhs.m_value));
    44b0:	687b      	ldr	r3, [r7, #4]
    44b2:	ed93 8a00 	vldr	s16, [r3]
    44b6:	683b      	ldr	r3, [r7, #0]
    44b8:	4618      	mov	r0, r3
    44ba:	f7fe fbf2 	bl	2ca2 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    44be:	eef0 7a40 	vmov.f32	s15, s0
    44c2:	eeb4 8ae7 	vcmpe.f32	s16, s15
    44c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    44ca:	bfcc      	ite	gt
    44cc:	2301      	movgt	r3, #1
    44ce:	2300      	movle	r3, #0
    44d0:	b2db      	uxtb	r3, r3
		}
    44d2:	4618      	mov	r0, r3
    44d4:	3708      	adds	r7, #8
    44d6:	46bd      	mov	sp, r7
    44d8:	ecbd 8b02 	vpop	{d8}
    44dc:	bd80      	pop	{r7, pc}

000044de <units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>& units::unit_t<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>::operator=<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale> const&)>:
		inline unit_t& operator=(const unit_t<UnitsRhs, Ty, NlsRhs>& rhs) noexcept
    44de:	b580      	push	{r7, lr}
    44e0:	b082      	sub	sp, #8
    44e2:	af00      	add	r7, sp, #0
    44e4:	6078      	str	r0, [r7, #4]
    44e6:	6039      	str	r1, [r7, #0]
			nls::m_value = units::convert<UnitsRhs, Units, T>(rhs.m_value);
    44e8:	683b      	ldr	r3, [r7, #0]
    44ea:	4618      	mov	r0, r3
    44ec:	f7fe ff18 	bl	3320 <float units::convert<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>
    44f0:	eef0 7a40 	vmov.f32	s15, s0
    44f4:	687b      	ldr	r3, [r7, #4]
    44f6:	edc3 7a00 	vstr	s15, [r3]
			return *this;
    44fa:	687b      	ldr	r3, [r7, #4]
		}
    44fc:	4618      	mov	r0, r3
    44fe:	3708      	adds	r7, #8
    4500:	46bd      	mov	sp, r7
    4502:	bd80      	pop	{r7, pc}

00004504 <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, sjsu::bit::Mask)>:
[[nodiscard]] constexpr T Insert(T target, U value, Mask bitmask)
    4504:	b580      	push	{r7, lr}
    4506:	b084      	sub	sp, #16
    4508:	af00      	add	r7, sp, #0
    450a:	60f8      	str	r0, [r7, #12]
    450c:	60b9      	str	r1, [r7, #8]
    450e:	80ba      	strh	r2, [r7, #4]
  return Insert(target, value, bitmask.position, bitmask.width);
    4510:	793b      	ldrb	r3, [r7, #4]
    4512:	461a      	mov	r2, r3
    4514:	797b      	ldrb	r3, [r7, #5]
    4516:	68b9      	ldr	r1, [r7, #8]
    4518:	68f8      	ldr	r0, [r7, #12]
    451a:	f000 f87f 	bl	461c <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)>
    451e:	4603      	mov	r3, r0
}
    4520:	4618      	mov	r0, r3
    4522:	3710      	adds	r7, #16
    4524:	46bd      	mov	sp, r7
    4526:	bd80      	pop	{r7, pc}

00004528 <bool sjsu::bit::Read<unsigned char>(unsigned char, unsigned long)>:
[[nodiscard]] constexpr bool Read(T target, uint32_t position)
    4528:	b480      	push	{r7}
    452a:	b083      	sub	sp, #12
    452c:	af00      	add	r7, sp, #0
    452e:	4603      	mov	r3, r0
    4530:	6039      	str	r1, [r7, #0]
    4532:	71fb      	strb	r3, [r7, #7]
  return static_cast<bool>(target & (1 << position));
    4534:	79fa      	ldrb	r2, [r7, #7]
    4536:	683b      	ldr	r3, [r7, #0]
    4538:	fa42 f303 	asr.w	r3, r2, r3
    453c:	f003 0301 	and.w	r3, r3, #1
    4540:	2b00      	cmp	r3, #0
    4542:	bf14      	ite	ne
    4544:	2301      	movne	r3, #1
    4546:	2300      	moveq	r3, #0
    4548:	b2db      	uxtb	r3, r3
}
    454a:	4618      	mov	r0, r3
    454c:	370c      	adds	r7, #12
    454e:	46bd      	mov	sp, r7
    4550:	f85d 7b04 	ldr.w	r7, [sp], #4
    4554:	4770      	bx	lr

00004556 <std::common_type<std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > >::type std::chrono::operator+<long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
      operator+(const duration<_Rep1, _Period1>& __lhs,
    4556:	b5f0      	push	{r4, r5, r6, r7, lr}
    4558:	b08b      	sub	sp, #44	; 0x2c
    455a:	af00      	add	r7, sp, #0
    455c:	60f8      	str	r0, [r7, #12]
    455e:	60b9      	str	r1, [r7, #8]
    4560:	607a      	str	r2, [r7, #4]
	return __cd(__cd(__lhs).count() + __cd(__rhs).count());
    4562:	68bb      	ldr	r3, [r7, #8]
    4564:	e9d3 3400 	ldrd	r3, r4, [r3]
    4568:	e9c7 3406 	strd	r3, r4, [r7, #24]
    456c:	f107 0318 	add.w	r3, r7, #24
    4570:	4618      	mov	r0, r3
    4572:	f7fe fd41 	bl	2ff8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    4576:	4605      	mov	r5, r0
    4578:	460e      	mov	r6, r1
    457a:	687b      	ldr	r3, [r7, #4]
    457c:	e9d3 3400 	ldrd	r3, r4, [r3]
    4580:	e9c7 3408 	strd	r3, r4, [r7, #32]
    4584:	f107 0320 	add.w	r3, r7, #32
    4588:	4618      	mov	r0, r3
    458a:	f7fe fd35 	bl	2ff8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    458e:	460a      	mov	r2, r1
    4590:	4601      	mov	r1, r0
    4592:	194b      	adds	r3, r1, r5
    4594:	eb42 0406 	adc.w	r4, r2, r6
    4598:	e9c7 3404 	strd	r3, r4, [r7, #16]
    459c:	f107 0310 	add.w	r3, r7, #16
    45a0:	4619      	mov	r1, r3
    45a2:	68f8      	ldr	r0, [r7, #12]
    45a4:	f7fe fbec 	bl	2d80 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::duration<long long, void>(long long const&)>
      }
    45a8:	68f8      	ldr	r0, [r7, #12]
    45aa:	372c      	adds	r7, #44	; 0x2c
    45ac:	46bd      	mov	sp, r7
    45ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

000045b0 <bool std::chrono::operator< <long long, std::ratio<1ll, 1000000ll>, long long, std::ratio<1ll, 1000000ll> >(std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&, std::chrono::duration<long long, std::ratio<1ll, 1000000ll> > const&)>:
      operator<(const duration<_Rep1, _Period1>& __lhs,
    45b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    45b2:	b087      	sub	sp, #28
    45b4:	af00      	add	r7, sp, #0
    45b6:	6078      	str	r0, [r7, #4]
    45b8:	6039      	str	r1, [r7, #0]
	return __ct(__lhs).count() < __ct(__rhs).count();
    45ba:	687b      	ldr	r3, [r7, #4]
    45bc:	e9d3 3400 	ldrd	r3, r4, [r3]
    45c0:	e9c7 3402 	strd	r3, r4, [r7, #8]
    45c4:	f107 0308 	add.w	r3, r7, #8
    45c8:	4618      	mov	r0, r3
    45ca:	f7fe fd15 	bl	2ff8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    45ce:	4605      	mov	r5, r0
    45d0:	460e      	mov	r6, r1
    45d2:	683b      	ldr	r3, [r7, #0]
    45d4:	e9d3 3400 	ldrd	r3, r4, [r3]
    45d8:	e9c7 3404 	strd	r3, r4, [r7, #16]
    45dc:	f107 0310 	add.w	r3, r7, #16
    45e0:	4618      	mov	r0, r3
    45e2:	f7fe fd09 	bl	2ff8 <std::chrono::duration<long long, std::ratio<1ll, 1000000ll> >::count() const>
    45e6:	4603      	mov	r3, r0
    45e8:	460c      	mov	r4, r1
    45ea:	429d      	cmp	r5, r3
    45ec:	eb76 0304 	sbcs.w	r3, r6, r4
    45f0:	bfb4      	ite	lt
    45f2:	2301      	movlt	r3, #1
    45f4:	2300      	movge	r3, #0
    45f6:	b2db      	uxtb	r3, r3
      }
    45f8:	4618      	mov	r0, r3
    45fa:	371c      	adds	r7, #28
    45fc:	46bd      	mov	sp, r7
    45fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

00004600 <float units::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float>(float const&)>:
	static inline constexpr T convert(const T& value) noexcept
    4600:	b580      	push	{r7, lr}
    4602:	b086      	sub	sp, #24
    4604:	af00      	add	r7, sp, #0
    4606:	6078      	str	r0, [r7, #4]
			(value, isSame{}, piRequired{}, translationRequired{});
    4608:	6878      	ldr	r0, [r7, #4]
    460a:	f000 f833 	bl	4674 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>
    460e:	eef0 7a40 	vmov.f32	s15, s0
	}
    4612:	eeb0 0a67 	vmov.f32	s0, s15
    4616:	3718      	adds	r7, #24
    4618:	46bd      	mov	sp, r7
    461a:	bd80      	pop	{r7, pc}

0000461c <unsigned long sjsu::bit::Insert<unsigned long, unsigned long>(unsigned long, unsigned long, unsigned long, unsigned long)>:
[[nodiscard]] constexpr T Insert(T target,
    461c:	b480      	push	{r7}
    461e:	b089      	sub	sp, #36	; 0x24
    4620:	af00      	add	r7, sp, #0
    4622:	60f8      	str	r0, [r7, #12]
    4624:	60b9      	str	r1, [r7, #8]
    4626:	607a      	str	r2, [r7, #4]
    4628:	603b      	str	r3, [r7, #0]
  constexpr UnsignedT kFieldOfOnes = std::numeric_limits<UnsignedT>::max();
    462a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    462e:	61fb      	str	r3, [r7, #28]
  constexpr size_t kTargetWidth = sizeof(T) * 8;
    4630:	2320      	movs	r3, #32
    4632:	61bb      	str	r3, [r7, #24]
  UnsignedT mask = kFieldOfOnes >> (kTargetWidth - width);
    4634:	683b      	ldr	r3, [r7, #0]
    4636:	f1c3 0320 	rsb	r3, r3, #32
    463a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    463e:	fa22 f303 	lsr.w	r3, r2, r3
    4642:	617b      	str	r3, [r7, #20]
  target &= ~(mask << position);
    4644:	697a      	ldr	r2, [r7, #20]
    4646:	687b      	ldr	r3, [r7, #4]
    4648:	fa02 f303 	lsl.w	r3, r2, r3
    464c:	43db      	mvns	r3, r3
    464e:	68fa      	ldr	r2, [r7, #12]
    4650:	4013      	ands	r3, r2
    4652:	60fb      	str	r3, [r7, #12]
  target |= (value & mask) << position;
    4654:	68ba      	ldr	r2, [r7, #8]
    4656:	697b      	ldr	r3, [r7, #20]
    4658:	401a      	ands	r2, r3
    465a:	687b      	ldr	r3, [r7, #4]
    465c:	fa02 f303 	lsl.w	r3, r2, r3
    4660:	68fa      	ldr	r2, [r7, #12]
    4662:	4313      	orrs	r3, r2
    4664:	60fb      	str	r3, [r7, #12]
  return static_cast<T>(target);
    4666:	68fb      	ldr	r3, [r7, #12]
}
    4668:	4618      	mov	r0, r3
    466a:	3724      	adds	r7, #36	; 0x24
    466c:	46bd      	mov	sp, r7
    466e:	f85d 7b04 	ldr.w	r7, [sp], #4
    4672:	4770      	bx	lr

00004674 <float units::detail::convert<units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, float>(float const&, std::integral_constant<bool, true>, std::integral_constant<bool, false>, std::integral_constant<bool, false>)>:
		static inline constexpr T convert(const T& value, std::true_type, std::false_type, std::false_type) noexcept
    4674:	b480      	push	{r7}
    4676:	b085      	sub	sp, #20
    4678:	af00      	add	r7, sp, #0
    467a:	60f8      	str	r0, [r7, #12]
    467c:	7239      	strb	r1, [r7, #8]
    467e:	713a      	strb	r2, [r7, #4]
    4680:	703b      	strb	r3, [r7, #0]
			return value;
    4682:	68fb      	ldr	r3, [r7, #12]
    4684:	681b      	ldr	r3, [r3, #0]
    4686:	ee07 3a90 	vmov	s15, r3
		}
    468a:	eeb0 0a67 	vmov.f32	s0, s15
    468e:	3714      	adds	r7, #20
    4690:	46bd      	mov	sp, r7
    4692:	f85d 7b04 	ldr.w	r7, [sp], #4
    4696:	4770      	bx	lr

00004698 <__static_initialization_and_destruction_0(int, int)>:
}  // namespace sjsu
    4698:	b580      	push	{r7, lr}
    469a:	b082      	sub	sp, #8
    469c:	af00      	add	r7, sp, #0
    469e:	6078      	str	r0, [r7, #4]
    46a0:	6039      	str	r1, [r7, #0]
    46a2:	687b      	ldr	r3, [r7, #4]
    46a4:	2b01      	cmp	r3, #1
    46a6:	d15a      	bne.n	475e <__static_initialization_and_destruction_0(int, int)+0xc6>
    46a8:	683b      	ldr	r3, [r7, #0]
    46aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
    46ae:	4293      	cmp	r3, r2
    46b0:	d155      	bne.n	475e <__static_initialization_and_destruction_0(int, int)+0xc6>
  inline static VectorTable_t table = VectorTable_t::GenerateDefaultTable();
    46b2:	4b2d      	ldr	r3, [pc, #180]	; (4768 <__static_initialization_and_destruction_0(int, int)+0xd0>)
    46b4:	681b      	ldr	r3, [r3, #0]
    46b6:	f003 0301 	and.w	r3, r3, #1
    46ba:	2b00      	cmp	r3, #0
    46bc:	d106      	bne.n	46cc <__static_initialization_and_destruction_0(int, int)+0x34>
    46be:	4b2a      	ldr	r3, [pc, #168]	; (4768 <__static_initialization_and_destruction_0(int, int)+0xd0>)
    46c0:	2201      	movs	r2, #1
    46c2:	601a      	str	r2, [r3, #0]
    46c4:	4b29      	ldr	r3, [pc, #164]	; (476c <__static_initialization_and_destruction_0(int, int)+0xd4>)
    46c6:	4618      	mov	r0, r3
    46c8:	f7fb ffd6 	bl	678 <sjsu::cortex::InterruptController::VectorTable_t::GenerateDefaultTable()>
  inline static LPC_SC_TypeDef * system_controller = LPC_SC;
    46cc:	4b28      	ldr	r3, [pc, #160]	; (4770 <__static_initialization_and_destruction_0(int, int)+0xd8>)
    46ce:	681b      	ldr	r3, [r3, #0]
    46d0:	f003 0301 	and.w	r3, r3, #1
    46d4:	2b00      	cmp	r3, #0
    46d6:	d105      	bne.n	46e4 <__static_initialization_and_destruction_0(int, int)+0x4c>
    46d8:	4b25      	ldr	r3, [pc, #148]	; (4770 <__static_initialization_and_destruction_0(int, int)+0xd8>)
    46da:	2201      	movs	r2, #1
    46dc:	601a      	str	r2, [r3, #0]
    46de:	4a25      	ldr	r2, [pc, #148]	; (4774 <__static_initialization_and_destruction_0(int, int)+0xdc>)
    46e0:	4b25      	ldr	r3, [pc, #148]	; (4778 <__static_initialization_and_destruction_0(int, int)+0xe0>)
    46e2:	601a      	str	r2, [r3, #0]
    46e4:	4b25      	ldr	r3, [pc, #148]	; (477c <__static_initialization_and_destruction_0(int, int)+0xe4>)
    46e6:	681b      	ldr	r3, [r3, #0]
    46e8:	f003 0301 	and.w	r3, r3, #1
    46ec:	2b00      	cmp	r3, #0
    46ee:	d105      	bne.n	46fc <__static_initialization_and_destruction_0(int, int)+0x64>
    46f0:	4b22      	ldr	r3, [pc, #136]	; (477c <__static_initialization_and_destruction_0(int, int)+0xe4>)
    46f2:	2201      	movs	r2, #1
    46f4:	601a      	str	r2, [r3, #0]
    46f6:	4a22      	ldr	r2, [pc, #136]	; (4780 <__static_initialization_and_destruction_0(int, int)+0xe8>)
    46f8:	4b22      	ldr	r3, [pc, #136]	; (4784 <__static_initialization_and_destruction_0(int, int)+0xec>)
    46fa:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart2 = {
    46fc:	4b22      	ldr	r3, [pc, #136]	; (4788 <__static_initialization_and_destruction_0(int, int)+0xf0>)
    46fe:	681b      	ldr	r3, [r3, #0]
    4700:	f003 0301 	and.w	r3, r3, #1
    4704:	2b00      	cmp	r3, #0
    4706:	d105      	bne.n	4714 <__static_initialization_and_destruction_0(int, int)+0x7c>
    4708:	4b1f      	ldr	r3, [pc, #124]	; (4788 <__static_initialization_and_destruction_0(int, int)+0xf0>)
    470a:	2201      	movs	r2, #1
    470c:	601a      	str	r2, [r3, #0]
    };
    470e:	4a1f      	ldr	r2, [pc, #124]	; (478c <__static_initialization_and_destruction_0(int, int)+0xf4>)
    4710:	4b1f      	ldr	r3, [pc, #124]	; (4790 <__static_initialization_and_destruction_0(int, int)+0xf8>)
    4712:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart3 = {
    4714:	4b1f      	ldr	r3, [pc, #124]	; (4794 <__static_initialization_and_destruction_0(int, int)+0xfc>)
    4716:	681b      	ldr	r3, [r3, #0]
    4718:	f003 0301 	and.w	r3, r3, #1
    471c:	2b00      	cmp	r3, #0
    471e:	d105      	bne.n	472c <__static_initialization_and_destruction_0(int, int)+0x94>
    4720:	4b1c      	ldr	r3, [pc, #112]	; (4794 <__static_initialization_and_destruction_0(int, int)+0xfc>)
    4722:	2201      	movs	r2, #1
    4724:	601a      	str	r2, [r3, #0]
    };
    4726:	4a1c      	ldr	r2, [pc, #112]	; (4798 <__static_initialization_and_destruction_0(int, int)+0x100>)
    4728:	4b1c      	ldr	r3, [pc, #112]	; (479c <__static_initialization_and_destruction_0(int, int)+0x104>)
    472a:	601a      	str	r2, [r3, #0]
    inline static const Port_t kUart4 = {
    472c:	4b1c      	ldr	r3, [pc, #112]	; (47a0 <__static_initialization_and_destruction_0(int, int)+0x108>)
    472e:	681b      	ldr	r3, [r3, #0]
    4730:	f003 0301 	and.w	r3, r3, #1
    4734:	2b00      	cmp	r3, #0
    4736:	d105      	bne.n	4744 <__static_initialization_and_destruction_0(int, int)+0xac>
    4738:	4b19      	ldr	r3, [pc, #100]	; (47a0 <__static_initialization_and_destruction_0(int, int)+0x108>)
    473a:	2201      	movs	r2, #1
    473c:	601a      	str	r2, [r3, #0]
    };
    473e:	4a19      	ldr	r2, [pc, #100]	; (47a4 <__static_initialization_and_destruction_0(int, int)+0x10c>)
    4740:	4b19      	ldr	r3, [pc, #100]	; (47a8 <__static_initialization_and_destruction_0(int, int)+0x110>)
    4742:	601a      	str	r2, [r3, #0]
                              DefaultSystemController())
    4744:	f7ff f9b8 	bl	3ab8 <sjsu::lpc40xx::DefaultSystemController()>
    4748:	4603      	mov	r3, r0
sjsu::lpc40xx::Uart uart0(sjsu::lpc40xx::Uart::Port::kUart0);
    474a:	461a      	mov	r2, r3
    474c:	4917      	ldr	r1, [pc, #92]	; (47ac <__static_initialization_and_destruction_0(int, int)+0x114>)
    474e:	4818      	ldr	r0, [pc, #96]	; (47b0 <__static_initialization_and_destruction_0(int, int)+0x118>)
    4750:	f7ff fbc6 	bl	3ee0 <sjsu::lpc40xx::Uart::Uart(sjsu::lpc40xx::Uart::Port_t const&, sjsu::SystemController const&)>
sjsu::cortex::SystemTimer system_timer(system_controller);
    4754:	4a17      	ldr	r2, [pc, #92]	; (47b4 <__static_initialization_and_destruction_0(int, int)+0x11c>)
    4756:	4918      	ldr	r1, [pc, #96]	; (47b8 <__static_initialization_and_destruction_0(int, int)+0x120>)
    4758:	4818      	ldr	r0, [pc, #96]	; (47bc <__static_initialization_and_destruction_0(int, int)+0x124>)
    475a:	f7fe fb97 	bl	2e8c <sjsu::cortex::SystemTimer::SystemTimer(sjsu::SystemController const&, sjsu::InterruptController const&)>
}  // namespace sjsu
    475e:	bf00      	nop
    4760:	3708      	adds	r7, #8
    4762:	46bd      	mov	sp, r7
    4764:	bd80      	pop	{r7, pc}
    4766:	bf00      	nop
    4768:	10000338 	.word	0x10000338
    476c:	100000f0 	.word	0x100000f0
    4770:	10000400 	.word	0x10000400
    4774:	400fc000 	.word	0x400fc000
    4778:	100003e0 	.word	0x100003e0
    477c:	10000334 	.word	0x10000334
    4780:	4002c000 	.word	0x4002c000
    4784:	100000ec 	.word	0x100000ec
    4788:	10000404 	.word	0x10000404
    478c:	40098000 	.word	0x40098000
    4790:	10000028 	.word	0x10000028
    4794:	10000408 	.word	0x10000408
    4798:	4009c000 	.word	0x4009c000
    479c:	1000003c 	.word	0x1000003c
    47a0:	1000040c 	.word	0x1000040c
    47a4:	400a4000 	.word	0x400a4000
    47a8:	10000050 	.word	0x10000050
    47ac:	000071cc 	.word	0x000071cc
    47b0:	100003e8 	.word	0x100003e8
    47b4:	00007108 	.word	0x00007108
    47b8:	10000064 	.word	0x10000064
    47bc:	100003f4 	.word	0x100003f4

000047c0 <_GLOBAL__sub_I_ThreadRuntimeCounter>:
    47c0:	b580      	push	{r7, lr}
    47c2:	af00      	add	r7, sp, #0
    47c4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    47c8:	2001      	movs	r0, #1
    47ca:	f7ff ff65 	bl	4698 <__static_initialization_and_destruction_0(int, int)>
    47ce:	bd80      	pop	{r7, pc}

000047d0 <vPortSVCHandler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
    47d0:	4b07      	ldr	r3, [pc, #28]	; (47f0 <pxCurrentTCBConst2>)
    47d2:	6819      	ldr	r1, [r3, #0]
    47d4:	6808      	ldr	r0, [r1, #0]
    47d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    47da:	f380 8809 	msr	PSP, r0
    47de:	f3bf 8f6f 	isb	sy
    47e2:	f04f 0000 	mov.w	r0, #0
    47e6:	f380 8811 	msr	BASEPRI, r0
    47ea:	4770      	bx	lr
    47ec:	f3af 8000 	nop.w

000047f0 <pxCurrentTCBConst2>:
    47f0:	10000348 	.word	0x10000348
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
    47f4:	bf00      	nop
    47f6:	bf00      	nop
    47f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
    47fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

00004800 <xPortPendSVHandler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
    4800:	f3ef 8009 	mrs	r0, PSP
    4804:	f3bf 8f6f 	isb	sy
    4808:	4b15      	ldr	r3, [pc, #84]	; (4860 <pxCurrentTCBConst>)
    480a:	681a      	ldr	r2, [r3, #0]
    480c:	f01e 0f10 	tst.w	lr, #16
    4810:	bf08      	it	eq
    4812:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
    4816:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    481a:	6010      	str	r0, [r2, #0]
    481c:	e92d 0009 	stmdb	sp!, {r0, r3}
    4820:	f04f 0028 	mov.w	r0, #40	; 0x28
    4824:	f380 8811 	msr	BASEPRI, r0
    4828:	f3bf 8f4f 	dsb	sy
    482c:	f3bf 8f6f 	isb	sy
    4830:	f7fc ffe2 	bl	17f8 <vTaskSwitchContext>
    4834:	f04f 0000 	mov.w	r0, #0
    4838:	f380 8811 	msr	BASEPRI, r0
    483c:	bc09      	pop	{r0, r3}
    483e:	6819      	ldr	r1, [r3, #0]
    4840:	6808      	ldr	r0, [r1, #0]
    4842:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4846:	f01e 0f10 	tst.w	lr, #16
    484a:	bf08      	it	eq
    484c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
    4850:	f380 8809 	msr	PSP, r0
    4854:	f3bf 8f6f 	isb	sy
    4858:	4770      	bx	lr
    485a:	bf00      	nop
    485c:	f3af 8000 	nop.w

00004860 <pxCurrentTCBConst>:
    4860:	10000348 	.word	0x10000348
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
    4864:	bf00      	nop
    4866:	bf00      	nop

00004868 <sjsu::newlib::DoNothingStdOut(char const*, unsigned int)>:
namespace sjsu
{
namespace newlib
{
int DoNothingStdOut(const char *, size_t)
{
    4868:	b480      	push	{r7}
    486a:	b083      	sub	sp, #12
    486c:	af00      	add	r7, sp, #0
    486e:	6078      	str	r0, [r7, #4]
    4870:	6039      	str	r1, [r7, #0]
  return 1;
    4872:	2301      	movs	r3, #1
}
    4874:	4618      	mov	r0, r3
    4876:	370c      	adds	r7, #12
    4878:	46bd      	mov	sp, r7
    487a:	f85d 7b04 	ldr.w	r7, [sp], #4
    487e:	4770      	bx	lr

00004880 <sjsu::newlib::DoNothingStdIn(char*, unsigned int)>:
int DoNothingStdIn(char *, size_t)
{
    4880:	b480      	push	{r7}
    4882:	b083      	sub	sp, #12
    4884:	af00      	add	r7, sp, #0
    4886:	6078      	str	r0, [r7, #4]
    4888:	6039      	str	r1, [r7, #0]
  return 0;
    488a:	2300      	movs	r3, #0
}
    488c:	4618      	mov	r0, r3
    488e:	370c      	adds	r7, #12
    4890:	46bd      	mov	sp, r7
    4892:	f85d 7b04 	ldr.w	r7, [sp], #4
    4896:	4770      	bx	lr

00004898 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))>:
void SetStdout(Stdout stdout_handler)
{
    4898:	b480      	push	{r7}
    489a:	b083      	sub	sp, #12
    489c:	af00      	add	r7, sp, #0
    489e:	6078      	str	r0, [r7, #4]
  out = stdout_handler;
    48a0:	4a04      	ldr	r2, [pc, #16]	; (48b4 <sjsu::newlib::SetStdout(int (*)(char const*, unsigned int))+0x1c>)
    48a2:	687b      	ldr	r3, [r7, #4]
    48a4:	6013      	str	r3, [r2, #0]
}
    48a6:	bf00      	nop
    48a8:	370c      	adds	r7, #12
    48aa:	46bd      	mov	sp, r7
    48ac:	f85d 7b04 	ldr.w	r7, [sp], #4
    48b0:	4770      	bx	lr
    48b2:	bf00      	nop
    48b4:	10000004 	.word	0x10000004

000048b8 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))>:
void SetStdin(Stdin stdin_handler)
{
    48b8:	b480      	push	{r7}
    48ba:	b083      	sub	sp, #12
    48bc:	af00      	add	r7, sp, #0
    48be:	6078      	str	r0, [r7, #4]
  in = stdin_handler;
    48c0:	4a04      	ldr	r2, [pc, #16]	; (48d4 <sjsu::newlib::SetStdin(int (*)(char*, unsigned int))+0x1c>)
    48c2:	687b      	ldr	r3, [r7, #4]
    48c4:	6013      	str	r3, [r2, #0]
}
    48c6:	bf00      	nop
    48c8:	370c      	adds	r7, #12
    48ca:	46bd      	mov	sp, r7
    48cc:	f85d 7b04 	ldr.w	r7, [sp], #4
    48d0:	4770      	bx	lr
    48d2:	bf00      	nop
    48d4:	10000008 	.word	0x10000008

000048d8 <_putchar>:
}  // namespace newlib
}  // namespace sjsu

// Needed by third party "printf" library
extern "C" void _putchar(char character)  // NOLINT
{
    48d8:	b580      	push	{r7, lr}
    48da:	b082      	sub	sp, #8
    48dc:	af00      	add	r7, sp, #0
    48de:	4603      	mov	r3, r0
    48e0:	71fb      	strb	r3, [r7, #7]
  sjsu::newlib::out(&character, 1);
    48e2:	4b05      	ldr	r3, [pc, #20]	; (48f8 <_putchar+0x20>)
    48e4:	681b      	ldr	r3, [r3, #0]
    48e6:	1dfa      	adds	r2, r7, #7
    48e8:	2101      	movs	r1, #1
    48ea:	4610      	mov	r0, r2
    48ec:	4798      	blx	r3
}
    48ee:	bf00      	nop
    48f0:	3708      	adds	r7, #8
    48f2:	46bd      	mov	sp, r7
    48f4:	bd80      	pop	{r7, pc}
    48f6:	bf00      	nop
    48f8:	10000004 	.word	0x10000004

000048fc <__cxa_pure_virtual>:
    48fc:	b508      	push	{r3, lr}
    48fe:	f000 f80d 	bl	491c <std::terminate()>

00004902 <__cxxabiv1::__terminate(void (*)())>:
    4902:	b508      	push	{r3, lr}
    4904:	4780      	blx	r0
    4906:	f001 fa73 	bl	5df0 <abort>
    490a:	Address 0x000000000000490a is out of bounds.


0000490c <std::get_terminate()>:
    490c:	4b02      	ldr	r3, [pc, #8]	; (4918 <std::get_terminate()+0xc>)
    490e:	6818      	ldr	r0, [r3, #0]
    4910:	f3bf 8f5b 	dmb	ish
    4914:	4770      	bx	lr
    4916:	bf00      	nop
    4918:	10000068 	.word	0x10000068

0000491c <std::terminate()>:
    491c:	b508      	push	{r3, lr}
    491e:	f7ff fff5 	bl	490c <std::get_terminate()>
    4922:	f7ff ffee 	bl	4902 <__cxxabiv1::__terminate(void (*)())>
    4926:	Address 0x0000000000004926 is out of bounds.


00004928 <__aeabi_d2f>:
    4928:	ea4f 0241 	mov.w	r2, r1, lsl #1
    492c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
    4930:	bf24      	itt	cs
    4932:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
    4936:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
    493a:	d90d      	bls.n	4958 <__aeabi_d2f+0x30>
    493c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
    4940:	ea4f 02c0 	mov.w	r2, r0, lsl #3
    4944:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
    4948:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
    494c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
    4950:	bf08      	it	eq
    4952:	f020 0001 	biceq.w	r0, r0, #1
    4956:	4770      	bx	lr
    4958:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
    495c:	d121      	bne.n	49a2 <__aeabi_d2f+0x7a>
    495e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
    4962:	bfbc      	itt	lt
    4964:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
    4968:	4770      	bxlt	lr
    496a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
    496e:	ea4f 5252 	mov.w	r2, r2, lsr #21
    4972:	f1c2 0218 	rsb	r2, r2, #24
    4976:	f1c2 0c20 	rsb	ip, r2, #32
    497a:	fa10 f30c 	lsls.w	r3, r0, ip
    497e:	fa20 f002 	lsr.w	r0, r0, r2
    4982:	bf18      	it	ne
    4984:	f040 0001 	orrne.w	r0, r0, #1
    4988:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    498c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
    4990:	fa03 fc0c 	lsl.w	ip, r3, ip
    4994:	ea40 000c 	orr.w	r0, r0, ip
    4998:	fa23 f302 	lsr.w	r3, r3, r2
    499c:	ea4f 0343 	mov.w	r3, r3, lsl #1
    49a0:	e7cc      	b.n	493c <__aeabi_d2f+0x14>
    49a2:	ea7f 5362 	mvns.w	r3, r2, asr #21
    49a6:	d107      	bne.n	49b8 <__aeabi_d2f+0x90>
    49a8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
    49ac:	bf1e      	ittt	ne
    49ae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
    49b2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
    49b6:	4770      	bxne	lr
    49b8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
    49bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
    49c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    49c4:	4770      	bx	lr
    49c6:	bf00      	nop

000049c8 <__aeabi_frsub>:
    49c8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
    49cc:	e002      	b.n	49d4 <__addsf3>
    49ce:	bf00      	nop

000049d0 <__aeabi_fsub>:
    49d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000049d4 <__addsf3>:
    49d4:	0042      	lsls	r2, r0, #1
    49d6:	bf1f      	itttt	ne
    49d8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
    49dc:	ea92 0f03 	teqne	r2, r3
    49e0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
    49e4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    49e8:	d06a      	beq.n	4ac0 <__addsf3+0xec>
    49ea:	ea4f 6212 	mov.w	r2, r2, lsr #24
    49ee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
    49f2:	bfc1      	itttt	gt
    49f4:	18d2      	addgt	r2, r2, r3
    49f6:	4041      	eorgt	r1, r0
    49f8:	4048      	eorgt	r0, r1
    49fa:	4041      	eorgt	r1, r0
    49fc:	bfb8      	it	lt
    49fe:	425b      	neglt	r3, r3
    4a00:	2b19      	cmp	r3, #25
    4a02:	bf88      	it	hi
    4a04:	4770      	bxhi	lr
    4a06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
    4a0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    4a0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    4a12:	bf18      	it	ne
    4a14:	4240      	negne	r0, r0
    4a16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    4a1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
    4a1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
    4a22:	bf18      	it	ne
    4a24:	4249      	negne	r1, r1
    4a26:	ea92 0f03 	teq	r2, r3
    4a2a:	d03f      	beq.n	4aac <__addsf3+0xd8>
    4a2c:	f1a2 0201 	sub.w	r2, r2, #1
    4a30:	fa41 fc03 	asr.w	ip, r1, r3
    4a34:	eb10 000c 	adds.w	r0, r0, ip
    4a38:	f1c3 0320 	rsb	r3, r3, #32
    4a3c:	fa01 f103 	lsl.w	r1, r1, r3
    4a40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    4a44:	d502      	bpl.n	4a4c <__addsf3+0x78>
    4a46:	4249      	negs	r1, r1
    4a48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
    4a4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4a50:	d313      	bcc.n	4a7a <__addsf3+0xa6>
    4a52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
    4a56:	d306      	bcc.n	4a66 <__addsf3+0x92>
    4a58:	0840      	lsrs	r0, r0, #1
    4a5a:	ea4f 0131 	mov.w	r1, r1, rrx
    4a5e:	f102 0201 	add.w	r2, r2, #1
    4a62:	2afe      	cmp	r2, #254	; 0xfe
    4a64:	d251      	bcs.n	4b0a <__addsf3+0x136>
    4a66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
    4a6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
    4a6e:	bf08      	it	eq
    4a70:	f020 0001 	biceq.w	r0, r0, #1
    4a74:	ea40 0003 	orr.w	r0, r0, r3
    4a78:	4770      	bx	lr
    4a7a:	0049      	lsls	r1, r1, #1
    4a7c:	eb40 0000 	adc.w	r0, r0, r0
    4a80:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    4a84:	f1a2 0201 	sub.w	r2, r2, #1
    4a88:	d1ed      	bne.n	4a66 <__addsf3+0x92>
    4a8a:	fab0 fc80 	clz	ip, r0
    4a8e:	f1ac 0c08 	sub.w	ip, ip, #8
    4a92:	ebb2 020c 	subs.w	r2, r2, ip
    4a96:	fa00 f00c 	lsl.w	r0, r0, ip
    4a9a:	bfaa      	itet	ge
    4a9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
    4aa0:	4252      	neglt	r2, r2
    4aa2:	4318      	orrge	r0, r3
    4aa4:	bfbc      	itt	lt
    4aa6:	40d0      	lsrlt	r0, r2
    4aa8:	4318      	orrlt	r0, r3
    4aaa:	4770      	bx	lr
    4aac:	f092 0f00 	teq	r2, #0
    4ab0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
    4ab4:	bf06      	itte	eq
    4ab6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
    4aba:	3201      	addeq	r2, #1
    4abc:	3b01      	subne	r3, #1
    4abe:	e7b5      	b.n	4a2c <__addsf3+0x58>
    4ac0:	ea4f 0341 	mov.w	r3, r1, lsl #1
    4ac4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
    4ac8:	bf18      	it	ne
    4aca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
    4ace:	d021      	beq.n	4b14 <__addsf3+0x140>
    4ad0:	ea92 0f03 	teq	r2, r3
    4ad4:	d004      	beq.n	4ae0 <__addsf3+0x10c>
    4ad6:	f092 0f00 	teq	r2, #0
    4ada:	bf08      	it	eq
    4adc:	4608      	moveq	r0, r1
    4ade:	4770      	bx	lr
    4ae0:	ea90 0f01 	teq	r0, r1
    4ae4:	bf1c      	itt	ne
    4ae6:	2000      	movne	r0, #0
    4ae8:	4770      	bxne	lr
    4aea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
    4aee:	d104      	bne.n	4afa <__addsf3+0x126>
    4af0:	0040      	lsls	r0, r0, #1
    4af2:	bf28      	it	cs
    4af4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
    4af8:	4770      	bx	lr
    4afa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
    4afe:	bf3c      	itt	cc
    4b00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
    4b04:	4770      	bxcc	lr
    4b06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
    4b0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
    4b0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
    4b12:	4770      	bx	lr
    4b14:	ea7f 6222 	mvns.w	r2, r2, asr #24
    4b18:	bf16      	itet	ne
    4b1a:	4608      	movne	r0, r1
    4b1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
    4b20:	4601      	movne	r1, r0
    4b22:	0242      	lsls	r2, r0, #9
    4b24:	bf06      	itte	eq
    4b26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
    4b2a:	ea90 0f01 	teqeq	r0, r1
    4b2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
    4b32:	4770      	bx	lr

00004b34 <__aeabi_ui2f>:
    4b34:	f04f 0300 	mov.w	r3, #0
    4b38:	e004      	b.n	4b44 <__aeabi_i2f+0x8>
    4b3a:	bf00      	nop

00004b3c <__aeabi_i2f>:
    4b3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
    4b40:	bf48      	it	mi
    4b42:	4240      	negmi	r0, r0
    4b44:	ea5f 0c00 	movs.w	ip, r0
    4b48:	bf08      	it	eq
    4b4a:	4770      	bxeq	lr
    4b4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
    4b50:	4601      	mov	r1, r0
    4b52:	f04f 0000 	mov.w	r0, #0
    4b56:	e01c      	b.n	4b92 <__aeabi_l2f+0x2a>

00004b58 <__aeabi_ul2f>:
    4b58:	ea50 0201 	orrs.w	r2, r0, r1
    4b5c:	bf08      	it	eq
    4b5e:	4770      	bxeq	lr
    4b60:	f04f 0300 	mov.w	r3, #0
    4b64:	e00a      	b.n	4b7c <__aeabi_l2f+0x14>
    4b66:	bf00      	nop

00004b68 <__aeabi_l2f>:
    4b68:	ea50 0201 	orrs.w	r2, r0, r1
    4b6c:	bf08      	it	eq
    4b6e:	4770      	bxeq	lr
    4b70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
    4b74:	d502      	bpl.n	4b7c <__aeabi_l2f+0x14>
    4b76:	4240      	negs	r0, r0
    4b78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
    4b7c:	ea5f 0c01 	movs.w	ip, r1
    4b80:	bf02      	ittt	eq
    4b82:	4684      	moveq	ip, r0
    4b84:	4601      	moveq	r1, r0
    4b86:	2000      	moveq	r0, #0
    4b88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
    4b8c:	bf08      	it	eq
    4b8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
    4b92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
    4b96:	fabc f28c 	clz	r2, ip
    4b9a:	3a08      	subs	r2, #8
    4b9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
    4ba0:	db10      	blt.n	4bc4 <__aeabi_l2f+0x5c>
    4ba2:	fa01 fc02 	lsl.w	ip, r1, r2
    4ba6:	4463      	add	r3, ip
    4ba8:	fa00 fc02 	lsl.w	ip, r0, r2
    4bac:	f1c2 0220 	rsb	r2, r2, #32
    4bb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
    4bb4:	fa20 f202 	lsr.w	r2, r0, r2
    4bb8:	eb43 0002 	adc.w	r0, r3, r2
    4bbc:	bf08      	it	eq
    4bbe:	f020 0001 	biceq.w	r0, r0, #1
    4bc2:	4770      	bx	lr
    4bc4:	f102 0220 	add.w	r2, r2, #32
    4bc8:	fa01 fc02 	lsl.w	ip, r1, r2
    4bcc:	f1c2 0220 	rsb	r2, r2, #32
    4bd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
    4bd4:	fa21 f202 	lsr.w	r2, r1, r2
    4bd8:	eb43 0002 	adc.w	r0, r3, r2
    4bdc:	bf08      	it	eq
    4bde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
    4be2:	4770      	bx	lr

00004be4 <__aeabi_uldivmod>:
    4be4:	b953      	cbnz	r3, 4bfc <__aeabi_uldivmod+0x18>
    4be6:	b94a      	cbnz	r2, 4bfc <__aeabi_uldivmod+0x18>
    4be8:	2900      	cmp	r1, #0
    4bea:	bf08      	it	eq
    4bec:	2800      	cmpeq	r0, #0
    4bee:	bf1c      	itt	ne
    4bf0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    4bf4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    4bf8:	f001 b8f8 	b.w	5dec <__aeabi_idiv0>
    4bfc:	f1ad 0c08 	sub.w	ip, sp, #8
    4c00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    4c04:	f000 f806 	bl	4c14 <__udivmoddi4>
    4c08:	f8dd e004 	ldr.w	lr, [sp, #4]
    4c0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    4c10:	b004      	add	sp, #16
    4c12:	4770      	bx	lr

00004c14 <__udivmoddi4>:
    4c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4c18:	9e08      	ldr	r6, [sp, #32]
    4c1a:	4604      	mov	r4, r0
    4c1c:	4688      	mov	r8, r1
    4c1e:	2b00      	cmp	r3, #0
    4c20:	d14b      	bne.n	4cba <__udivmoddi4+0xa6>
    4c22:	428a      	cmp	r2, r1
    4c24:	4615      	mov	r5, r2
    4c26:	d967      	bls.n	4cf8 <__udivmoddi4+0xe4>
    4c28:	fab2 f282 	clz	r2, r2
    4c2c:	b14a      	cbz	r2, 4c42 <__udivmoddi4+0x2e>
    4c2e:	f1c2 0720 	rsb	r7, r2, #32
    4c32:	fa01 f302 	lsl.w	r3, r1, r2
    4c36:	fa20 f707 	lsr.w	r7, r0, r7
    4c3a:	4095      	lsls	r5, r2
    4c3c:	ea47 0803 	orr.w	r8, r7, r3
    4c40:	4094      	lsls	r4, r2
    4c42:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    4c46:	0c23      	lsrs	r3, r4, #16
    4c48:	fbb8 f7fe 	udiv	r7, r8, lr
    4c4c:	fa1f fc85 	uxth.w	ip, r5
    4c50:	fb0e 8817 	mls	r8, lr, r7, r8
    4c54:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
    4c58:	fb07 f10c 	mul.w	r1, r7, ip
    4c5c:	4299      	cmp	r1, r3
    4c5e:	d909      	bls.n	4c74 <__udivmoddi4+0x60>
    4c60:	18eb      	adds	r3, r5, r3
    4c62:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
    4c66:	f080 811b 	bcs.w	4ea0 <__udivmoddi4+0x28c>
    4c6a:	4299      	cmp	r1, r3
    4c6c:	f240 8118 	bls.w	4ea0 <__udivmoddi4+0x28c>
    4c70:	3f02      	subs	r7, #2
    4c72:	442b      	add	r3, r5
    4c74:	1a5b      	subs	r3, r3, r1
    4c76:	b2a4      	uxth	r4, r4
    4c78:	fbb3 f0fe 	udiv	r0, r3, lr
    4c7c:	fb0e 3310 	mls	r3, lr, r0, r3
    4c80:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    4c84:	fb00 fc0c 	mul.w	ip, r0, ip
    4c88:	45a4      	cmp	ip, r4
    4c8a:	d909      	bls.n	4ca0 <__udivmoddi4+0x8c>
    4c8c:	192c      	adds	r4, r5, r4
    4c8e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    4c92:	f080 8107 	bcs.w	4ea4 <__udivmoddi4+0x290>
    4c96:	45a4      	cmp	ip, r4
    4c98:	f240 8104 	bls.w	4ea4 <__udivmoddi4+0x290>
    4c9c:	3802      	subs	r0, #2
    4c9e:	442c      	add	r4, r5
    4ca0:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
    4ca4:	eba4 040c 	sub.w	r4, r4, ip
    4ca8:	2700      	movs	r7, #0
    4caa:	b11e      	cbz	r6, 4cb4 <__udivmoddi4+0xa0>
    4cac:	40d4      	lsrs	r4, r2
    4cae:	2300      	movs	r3, #0
    4cb0:	e9c6 4300 	strd	r4, r3, [r6]
    4cb4:	4639      	mov	r1, r7
    4cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4cba:	428b      	cmp	r3, r1
    4cbc:	d909      	bls.n	4cd2 <__udivmoddi4+0xbe>
    4cbe:	2e00      	cmp	r6, #0
    4cc0:	f000 80eb 	beq.w	4e9a <__udivmoddi4+0x286>
    4cc4:	2700      	movs	r7, #0
    4cc6:	e9c6 0100 	strd	r0, r1, [r6]
    4cca:	4638      	mov	r0, r7
    4ccc:	4639      	mov	r1, r7
    4cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4cd2:	fab3 f783 	clz	r7, r3
    4cd6:	2f00      	cmp	r7, #0
    4cd8:	d147      	bne.n	4d6a <__udivmoddi4+0x156>
    4cda:	428b      	cmp	r3, r1
    4cdc:	d302      	bcc.n	4ce4 <__udivmoddi4+0xd0>
    4cde:	4282      	cmp	r2, r0
    4ce0:	f200 80fa 	bhi.w	4ed8 <__udivmoddi4+0x2c4>
    4ce4:	1a84      	subs	r4, r0, r2
    4ce6:	eb61 0303 	sbc.w	r3, r1, r3
    4cea:	2001      	movs	r0, #1
    4cec:	4698      	mov	r8, r3
    4cee:	2e00      	cmp	r6, #0
    4cf0:	d0e0      	beq.n	4cb4 <__udivmoddi4+0xa0>
    4cf2:	e9c6 4800 	strd	r4, r8, [r6]
    4cf6:	e7dd      	b.n	4cb4 <__udivmoddi4+0xa0>
    4cf8:	b902      	cbnz	r2, 4cfc <__udivmoddi4+0xe8>
    4cfa:	deff      	udf	#255	; 0xff
    4cfc:	fab2 f282 	clz	r2, r2
    4d00:	2a00      	cmp	r2, #0
    4d02:	f040 808f 	bne.w	4e24 <__udivmoddi4+0x210>
    4d06:	1b49      	subs	r1, r1, r5
    4d08:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    4d0c:	fa1f f885 	uxth.w	r8, r5
    4d10:	2701      	movs	r7, #1
    4d12:	fbb1 fcfe 	udiv	ip, r1, lr
    4d16:	0c23      	lsrs	r3, r4, #16
    4d18:	fb0e 111c 	mls	r1, lr, ip, r1
    4d1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    4d20:	fb08 f10c 	mul.w	r1, r8, ip
    4d24:	4299      	cmp	r1, r3
    4d26:	d907      	bls.n	4d38 <__udivmoddi4+0x124>
    4d28:	18eb      	adds	r3, r5, r3
    4d2a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
    4d2e:	d202      	bcs.n	4d36 <__udivmoddi4+0x122>
    4d30:	4299      	cmp	r1, r3
    4d32:	f200 80cd 	bhi.w	4ed0 <__udivmoddi4+0x2bc>
    4d36:	4684      	mov	ip, r0
    4d38:	1a59      	subs	r1, r3, r1
    4d3a:	b2a3      	uxth	r3, r4
    4d3c:	fbb1 f0fe 	udiv	r0, r1, lr
    4d40:	fb0e 1410 	mls	r4, lr, r0, r1
    4d44:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
    4d48:	fb08 f800 	mul.w	r8, r8, r0
    4d4c:	45a0      	cmp	r8, r4
    4d4e:	d907      	bls.n	4d60 <__udivmoddi4+0x14c>
    4d50:	192c      	adds	r4, r5, r4
    4d52:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    4d56:	d202      	bcs.n	4d5e <__udivmoddi4+0x14a>
    4d58:	45a0      	cmp	r8, r4
    4d5a:	f200 80b6 	bhi.w	4eca <__udivmoddi4+0x2b6>
    4d5e:	4618      	mov	r0, r3
    4d60:	eba4 0408 	sub.w	r4, r4, r8
    4d64:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
    4d68:	e79f      	b.n	4caa <__udivmoddi4+0x96>
    4d6a:	f1c7 0c20 	rsb	ip, r7, #32
    4d6e:	40bb      	lsls	r3, r7
    4d70:	fa22 fe0c 	lsr.w	lr, r2, ip
    4d74:	ea4e 0e03 	orr.w	lr, lr, r3
    4d78:	fa01 f407 	lsl.w	r4, r1, r7
    4d7c:	fa20 f50c 	lsr.w	r5, r0, ip
    4d80:	fa21 f30c 	lsr.w	r3, r1, ip
    4d84:	ea4f 481e 	mov.w	r8, lr, lsr #16
    4d88:	4325      	orrs	r5, r4
    4d8a:	fbb3 f9f8 	udiv	r9, r3, r8
    4d8e:	0c2c      	lsrs	r4, r5, #16
    4d90:	fb08 3319 	mls	r3, r8, r9, r3
    4d94:	fa1f fa8e 	uxth.w	sl, lr
    4d98:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
    4d9c:	fb09 f40a 	mul.w	r4, r9, sl
    4da0:	429c      	cmp	r4, r3
    4da2:	fa02 f207 	lsl.w	r2, r2, r7
    4da6:	fa00 f107 	lsl.w	r1, r0, r7
    4daa:	d90b      	bls.n	4dc4 <__udivmoddi4+0x1b0>
    4dac:	eb1e 0303 	adds.w	r3, lr, r3
    4db0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    4db4:	f080 8087 	bcs.w	4ec6 <__udivmoddi4+0x2b2>
    4db8:	429c      	cmp	r4, r3
    4dba:	f240 8084 	bls.w	4ec6 <__udivmoddi4+0x2b2>
    4dbe:	f1a9 0902 	sub.w	r9, r9, #2
    4dc2:	4473      	add	r3, lr
    4dc4:	1b1b      	subs	r3, r3, r4
    4dc6:	b2ad      	uxth	r5, r5
    4dc8:	fbb3 f0f8 	udiv	r0, r3, r8
    4dcc:	fb08 3310 	mls	r3, r8, r0, r3
    4dd0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
    4dd4:	fb00 fa0a 	mul.w	sl, r0, sl
    4dd8:	45a2      	cmp	sl, r4
    4dda:	d908      	bls.n	4dee <__udivmoddi4+0x1da>
    4ddc:	eb1e 0404 	adds.w	r4, lr, r4
    4de0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    4de4:	d26b      	bcs.n	4ebe <__udivmoddi4+0x2aa>
    4de6:	45a2      	cmp	sl, r4
    4de8:	d969      	bls.n	4ebe <__udivmoddi4+0x2aa>
    4dea:	3802      	subs	r0, #2
    4dec:	4474      	add	r4, lr
    4dee:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    4df2:	fba0 8902 	umull	r8, r9, r0, r2
    4df6:	eba4 040a 	sub.w	r4, r4, sl
    4dfa:	454c      	cmp	r4, r9
    4dfc:	46c2      	mov	sl, r8
    4dfe:	464b      	mov	r3, r9
    4e00:	d354      	bcc.n	4eac <__udivmoddi4+0x298>
    4e02:	d051      	beq.n	4ea8 <__udivmoddi4+0x294>
    4e04:	2e00      	cmp	r6, #0
    4e06:	d069      	beq.n	4edc <__udivmoddi4+0x2c8>
    4e08:	ebb1 050a 	subs.w	r5, r1, sl
    4e0c:	eb64 0403 	sbc.w	r4, r4, r3
    4e10:	fa04 fc0c 	lsl.w	ip, r4, ip
    4e14:	40fd      	lsrs	r5, r7
    4e16:	40fc      	lsrs	r4, r7
    4e18:	ea4c 0505 	orr.w	r5, ip, r5
    4e1c:	e9c6 5400 	strd	r5, r4, [r6]
    4e20:	2700      	movs	r7, #0
    4e22:	e747      	b.n	4cb4 <__udivmoddi4+0xa0>
    4e24:	f1c2 0320 	rsb	r3, r2, #32
    4e28:	fa20 f703 	lsr.w	r7, r0, r3
    4e2c:	4095      	lsls	r5, r2
    4e2e:	fa01 f002 	lsl.w	r0, r1, r2
    4e32:	fa21 f303 	lsr.w	r3, r1, r3
    4e36:	ea4f 4e15 	mov.w	lr, r5, lsr #16
    4e3a:	4338      	orrs	r0, r7
    4e3c:	0c01      	lsrs	r1, r0, #16
    4e3e:	fbb3 f7fe 	udiv	r7, r3, lr
    4e42:	fa1f f885 	uxth.w	r8, r5
    4e46:	fb0e 3317 	mls	r3, lr, r7, r3
    4e4a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    4e4e:	fb07 f308 	mul.w	r3, r7, r8
    4e52:	428b      	cmp	r3, r1
    4e54:	fa04 f402 	lsl.w	r4, r4, r2
    4e58:	d907      	bls.n	4e6a <__udivmoddi4+0x256>
    4e5a:	1869      	adds	r1, r5, r1
    4e5c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
    4e60:	d22f      	bcs.n	4ec2 <__udivmoddi4+0x2ae>
    4e62:	428b      	cmp	r3, r1
    4e64:	d92d      	bls.n	4ec2 <__udivmoddi4+0x2ae>
    4e66:	3f02      	subs	r7, #2
    4e68:	4429      	add	r1, r5
    4e6a:	1acb      	subs	r3, r1, r3
    4e6c:	b281      	uxth	r1, r0
    4e6e:	fbb3 f0fe 	udiv	r0, r3, lr
    4e72:	fb0e 3310 	mls	r3, lr, r0, r3
    4e76:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    4e7a:	fb00 f308 	mul.w	r3, r0, r8
    4e7e:	428b      	cmp	r3, r1
    4e80:	d907      	bls.n	4e92 <__udivmoddi4+0x27e>
    4e82:	1869      	adds	r1, r5, r1
    4e84:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
    4e88:	d217      	bcs.n	4eba <__udivmoddi4+0x2a6>
    4e8a:	428b      	cmp	r3, r1
    4e8c:	d915      	bls.n	4eba <__udivmoddi4+0x2a6>
    4e8e:	3802      	subs	r0, #2
    4e90:	4429      	add	r1, r5
    4e92:	1ac9      	subs	r1, r1, r3
    4e94:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
    4e98:	e73b      	b.n	4d12 <__udivmoddi4+0xfe>
    4e9a:	4637      	mov	r7, r6
    4e9c:	4630      	mov	r0, r6
    4e9e:	e709      	b.n	4cb4 <__udivmoddi4+0xa0>
    4ea0:	4607      	mov	r7, r0
    4ea2:	e6e7      	b.n	4c74 <__udivmoddi4+0x60>
    4ea4:	4618      	mov	r0, r3
    4ea6:	e6fb      	b.n	4ca0 <__udivmoddi4+0x8c>
    4ea8:	4541      	cmp	r1, r8
    4eaa:	d2ab      	bcs.n	4e04 <__udivmoddi4+0x1f0>
    4eac:	ebb8 0a02 	subs.w	sl, r8, r2
    4eb0:	eb69 020e 	sbc.w	r2, r9, lr
    4eb4:	3801      	subs	r0, #1
    4eb6:	4613      	mov	r3, r2
    4eb8:	e7a4      	b.n	4e04 <__udivmoddi4+0x1f0>
    4eba:	4660      	mov	r0, ip
    4ebc:	e7e9      	b.n	4e92 <__udivmoddi4+0x27e>
    4ebe:	4618      	mov	r0, r3
    4ec0:	e795      	b.n	4dee <__udivmoddi4+0x1da>
    4ec2:	4667      	mov	r7, ip
    4ec4:	e7d1      	b.n	4e6a <__udivmoddi4+0x256>
    4ec6:	4681      	mov	r9, r0
    4ec8:	e77c      	b.n	4dc4 <__udivmoddi4+0x1b0>
    4eca:	3802      	subs	r0, #2
    4ecc:	442c      	add	r4, r5
    4ece:	e747      	b.n	4d60 <__udivmoddi4+0x14c>
    4ed0:	f1ac 0c02 	sub.w	ip, ip, #2
    4ed4:	442b      	add	r3, r5
    4ed6:	e72f      	b.n	4d38 <__udivmoddi4+0x124>
    4ed8:	4638      	mov	r0, r7
    4eda:	e708      	b.n	4cee <__udivmoddi4+0xda>
    4edc:	4637      	mov	r7, r6
    4ede:	e6e9      	b.n	4cb4 <__udivmoddi4+0xa0>

00004ee0 <selfrel_offset31>:
    4ee0:	6803      	ldr	r3, [r0, #0]
    4ee2:	005a      	lsls	r2, r3, #1
    4ee4:	bf4c      	ite	mi
    4ee6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
    4eea:	f023 4300 	bicpl.w	r3, r3, #2147483648	; 0x80000000
    4eee:	4418      	add	r0, r3
    4ef0:	4770      	bx	lr
    4ef2:	bf00      	nop

00004ef4 <search_EIT_table>:
    4ef4:	b361      	cbz	r1, 4f50 <search_EIT_table+0x5c>
    4ef6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4efa:	f101 3aff 	add.w	sl, r1, #4294967295	; 0xffffffff
    4efe:	4690      	mov	r8, r2
    4f00:	4606      	mov	r6, r0
    4f02:	46d1      	mov	r9, sl
    4f04:	2700      	movs	r7, #0
    4f06:	eb07 0409 	add.w	r4, r7, r9
    4f0a:	eb04 74d4 	add.w	r4, r4, r4, lsr #31
    4f0e:	1064      	asrs	r4, r4, #1
    4f10:	00e5      	lsls	r5, r4, #3
    4f12:	1971      	adds	r1, r6, r5
    4f14:	4608      	mov	r0, r1
    4f16:	f7ff ffe3 	bl	4ee0 <selfrel_offset31>
    4f1a:	45a2      	cmp	sl, r4
    4f1c:	4683      	mov	fp, r0
    4f1e:	f105 0008 	add.w	r0, r5, #8
    4f22:	4430      	add	r0, r6
    4f24:	d009      	beq.n	4f3a <search_EIT_table+0x46>
    4f26:	f7ff ffdb 	bl	4ee0 <selfrel_offset31>
    4f2a:	45c3      	cmp	fp, r8
    4f2c:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
    4f30:	d805      	bhi.n	4f3e <search_EIT_table+0x4a>
    4f32:	4540      	cmp	r0, r8
    4f34:	d209      	bcs.n	4f4a <search_EIT_table+0x56>
    4f36:	1c67      	adds	r7, r4, #1
    4f38:	e7e5      	b.n	4f06 <search_EIT_table+0x12>
    4f3a:	45c3      	cmp	fp, r8
    4f3c:	d905      	bls.n	4f4a <search_EIT_table+0x56>
    4f3e:	42a7      	cmp	r7, r4
    4f40:	d002      	beq.n	4f48 <search_EIT_table+0x54>
    4f42:	f104 39ff 	add.w	r9, r4, #4294967295	; 0xffffffff
    4f46:	e7de      	b.n	4f06 <search_EIT_table+0x12>
    4f48:	2100      	movs	r1, #0
    4f4a:	4608      	mov	r0, r1
    4f4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4f50:	4608      	mov	r0, r1
    4f52:	4770      	bx	lr

00004f54 <__gnu_unwind_get_pr_addr>:
    4f54:	2801      	cmp	r0, #1
    4f56:	d007      	beq.n	4f68 <__gnu_unwind_get_pr_addr+0x14>
    4f58:	2802      	cmp	r0, #2
    4f5a:	d007      	beq.n	4f6c <__gnu_unwind_get_pr_addr+0x18>
    4f5c:	4b04      	ldr	r3, [pc, #16]	; (4f70 <__gnu_unwind_get_pr_addr+0x1c>)
    4f5e:	2800      	cmp	r0, #0
    4f60:	bf0c      	ite	eq
    4f62:	4618      	moveq	r0, r3
    4f64:	2000      	movne	r0, #0
    4f66:	4770      	bx	lr
    4f68:	4802      	ldr	r0, [pc, #8]	; (4f74 <__gnu_unwind_get_pr_addr+0x20>)
    4f6a:	4770      	bx	lr
    4f6c:	4802      	ldr	r0, [pc, #8]	; (4f78 <__gnu_unwind_get_pr_addr+0x24>)
    4f6e:	4770      	bx	lr
    4f70:	00005641 	.word	0x00005641
    4f74:	00005645 	.word	0x00005645
    4f78:	00005649 	.word	0x00005649

00004f7c <get_eit_entry>:
    4f7c:	b530      	push	{r4, r5, lr}
    4f7e:	4b25      	ldr	r3, [pc, #148]	; (5014 <get_eit_entry+0x98>)
    4f80:	b083      	sub	sp, #12
    4f82:	4604      	mov	r4, r0
    4f84:	1e8d      	subs	r5, r1, #2
    4f86:	b34b      	cbz	r3, 4fdc <get_eit_entry+0x60>
    4f88:	a901      	add	r1, sp, #4
    4f8a:	4628      	mov	r0, r5
    4f8c:	f3af 8000 	nop.w
    4f90:	b1f0      	cbz	r0, 4fd0 <get_eit_entry+0x54>
    4f92:	9901      	ldr	r1, [sp, #4]
    4f94:	462a      	mov	r2, r5
    4f96:	f7ff ffad 	bl	4ef4 <search_EIT_table>
    4f9a:	4601      	mov	r1, r0
    4f9c:	b1c0      	cbz	r0, 4fd0 <get_eit_entry+0x54>
    4f9e:	f7ff ff9f 	bl	4ee0 <selfrel_offset31>
    4fa2:	684b      	ldr	r3, [r1, #4]
    4fa4:	64a0      	str	r0, [r4, #72]	; 0x48
    4fa6:	2b01      	cmp	r3, #1
    4fa8:	d02e      	beq.n	5008 <get_eit_entry+0x8c>
    4faa:	2b00      	cmp	r3, #0
    4fac:	f101 0004 	add.w	r0, r1, #4
    4fb0:	db26      	blt.n	5000 <get_eit_entry+0x84>
    4fb2:	f7ff ff95 	bl	4ee0 <selfrel_offset31>
    4fb6:	2300      	movs	r3, #0
    4fb8:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
    4fbc:	6803      	ldr	r3, [r0, #0]
    4fbe:	2b00      	cmp	r3, #0
    4fc0:	db12      	blt.n	4fe8 <get_eit_entry+0x6c>
    4fc2:	f7ff ff8d 	bl	4ee0 <selfrel_offset31>
    4fc6:	2300      	movs	r3, #0
    4fc8:	6120      	str	r0, [r4, #16]
    4fca:	4618      	mov	r0, r3
    4fcc:	b003      	add	sp, #12
    4fce:	bd30      	pop	{r4, r5, pc}
    4fd0:	2300      	movs	r3, #0
    4fd2:	6123      	str	r3, [r4, #16]
    4fd4:	2309      	movs	r3, #9
    4fd6:	4618      	mov	r0, r3
    4fd8:	b003      	add	sp, #12
    4fda:	bd30      	pop	{r4, r5, pc}
    4fdc:	490e      	ldr	r1, [pc, #56]	; (5018 <get_eit_entry+0x9c>)
    4fde:	480f      	ldr	r0, [pc, #60]	; (501c <get_eit_entry+0xa0>)
    4fe0:	1a09      	subs	r1, r1, r0
    4fe2:	10c9      	asrs	r1, r1, #3
    4fe4:	9101      	str	r1, [sp, #4]
    4fe6:	e7d5      	b.n	4f94 <get_eit_entry+0x18>
    4fe8:	f3c3 6003 	ubfx	r0, r3, #24, #4
    4fec:	f7ff ffb2 	bl	4f54 <__gnu_unwind_get_pr_addr>
    4ff0:	2800      	cmp	r0, #0
    4ff2:	bf14      	ite	ne
    4ff4:	2300      	movne	r3, #0
    4ff6:	2309      	moveq	r3, #9
    4ff8:	6120      	str	r0, [r4, #16]
    4ffa:	4618      	mov	r0, r3
    4ffc:	b003      	add	sp, #12
    4ffe:	bd30      	pop	{r4, r5, pc}
    5000:	2301      	movs	r3, #1
    5002:	e9c4 0313 	strd	r0, r3, [r4, #76]	; 0x4c
    5006:	e7d9      	b.n	4fbc <get_eit_entry+0x40>
    5008:	2300      	movs	r3, #0
    500a:	6123      	str	r3, [r4, #16]
    500c:	2305      	movs	r3, #5
    500e:	4618      	mov	r0, r3
    5010:	b003      	add	sp, #12
    5012:	bd30      	pop	{r4, r5, pc}
    5014:	00000000 	.word	0x00000000
    5018:	00007508 	.word	0x00007508
    501c:	00007450 	.word	0x00007450

00005020 <restore_non_core_regs>:
    5020:	6803      	ldr	r3, [r0, #0]
    5022:	07da      	lsls	r2, r3, #31
    5024:	b510      	push	{r4, lr}
    5026:	4604      	mov	r4, r0
    5028:	d406      	bmi.n	5038 <restore_non_core_regs+0x18>
    502a:	079b      	lsls	r3, r3, #30
    502c:	f100 0048 	add.w	r0, r0, #72	; 0x48
    5030:	d509      	bpl.n	5046 <restore_non_core_regs+0x26>
    5032:	f000 fc5f 	bl	58f4 <__gnu_Unwind_Restore_VFP_D>
    5036:	6823      	ldr	r3, [r4, #0]
    5038:	0759      	lsls	r1, r3, #29
    503a:	d509      	bpl.n	5050 <restore_non_core_regs+0x30>
    503c:	071a      	lsls	r2, r3, #28
    503e:	d50e      	bpl.n	505e <restore_non_core_regs+0x3e>
    5040:	06db      	lsls	r3, r3, #27
    5042:	d513      	bpl.n	506c <restore_non_core_regs+0x4c>
    5044:	bd10      	pop	{r4, pc}
    5046:	f000 fc4d 	bl	58e4 <__gnu_Unwind_Restore_VFP>
    504a:	6823      	ldr	r3, [r4, #0]
    504c:	0759      	lsls	r1, r3, #29
    504e:	d4f5      	bmi.n	503c <restore_non_core_regs+0x1c>
    5050:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
    5054:	f000 fc56 	bl	5904 <__gnu_Unwind_Restore_VFP_D_16_to_31>
    5058:	6823      	ldr	r3, [r4, #0]
    505a:	071a      	lsls	r2, r3, #28
    505c:	d4f0      	bmi.n	5040 <restore_non_core_regs+0x20>
    505e:	f504 70a8 	add.w	r0, r4, #336	; 0x150
    5062:	f000 fc57 	bl	5914 <__gnu_Unwind_Restore_WMMXD>
    5066:	6823      	ldr	r3, [r4, #0]
    5068:	06db      	lsls	r3, r3, #27
    506a:	d4eb      	bmi.n	5044 <restore_non_core_regs+0x24>
    506c:	f504 70e8 	add.w	r0, r4, #464	; 0x1d0
    5070:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5074:	f000 bc92 	b.w	599c <__gnu_Unwind_Restore_WMMXC>

00005078 <_Unwind_decode_typeinfo_ptr.isra.0>:
    5078:	6803      	ldr	r3, [r0, #0]
    507a:	b103      	cbz	r3, 507e <_Unwind_decode_typeinfo_ptr.isra.0+0x6>
    507c:	4403      	add	r3, r0
    507e:	4618      	mov	r0, r3
    5080:	4770      	bx	lr
    5082:	bf00      	nop

00005084 <__gnu_unwind_24bit.isra.1>:
    5084:	2009      	movs	r0, #9
    5086:	4770      	bx	lr

00005088 <_Unwind_DebugHook>:
    5088:	4770      	bx	lr
    508a:	bf00      	nop

0000508c <unwind_phase2>:
    508c:	b570      	push	{r4, r5, r6, lr}
    508e:	4604      	mov	r4, r0
    5090:	460d      	mov	r5, r1
    5092:	e008      	b.n	50a6 <unwind_phase2+0x1a>
    5094:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    5096:	6163      	str	r3, [r4, #20]
    5098:	462a      	mov	r2, r5
    509a:	6923      	ldr	r3, [r4, #16]
    509c:	4621      	mov	r1, r4
    509e:	2001      	movs	r0, #1
    50a0:	4798      	blx	r3
    50a2:	2808      	cmp	r0, #8
    50a4:	d108      	bne.n	50b8 <unwind_phase2+0x2c>
    50a6:	6c29      	ldr	r1, [r5, #64]	; 0x40
    50a8:	4620      	mov	r0, r4
    50aa:	f7ff ff67 	bl	4f7c <get_eit_entry>
    50ae:	4606      	mov	r6, r0
    50b0:	2800      	cmp	r0, #0
    50b2:	d0ef      	beq.n	5094 <unwind_phase2+0x8>
    50b4:	f000 fe9c 	bl	5df0 <abort>
    50b8:	2807      	cmp	r0, #7
    50ba:	d1fb      	bne.n	50b4 <unwind_phase2+0x28>
    50bc:	4630      	mov	r0, r6
    50be:	6c29      	ldr	r1, [r5, #64]	; 0x40
    50c0:	f7ff ffe2 	bl	5088 <_Unwind_DebugHook>
    50c4:	1d28      	adds	r0, r5, #4
    50c6:	f000 fc01 	bl	58cc <__restore_core_regs>
    50ca:	bf00      	nop

000050cc <unwind_phase2_forced>:
    50cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    50d0:	1d0c      	adds	r4, r1, #4
    50d2:	4605      	mov	r5, r0
    50d4:	4617      	mov	r7, r2
    50d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    50d8:	f5ad 7d72 	sub.w	sp, sp, #968	; 0x3c8
    50dc:	ae03      	add	r6, sp, #12
    50de:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    50e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    50e2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    50e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    50e6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    50e8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    50ec:	ac02      	add	r4, sp, #8
    50ee:	f8d5 800c 	ldr.w	r8, [r5, #12]
    50f2:	f8d5 9018 	ldr.w	r9, [r5, #24]
    50f6:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    50fa:	2300      	movs	r3, #0
    50fc:	6023      	str	r3, [r4, #0]
    50fe:	e021      	b.n	5144 <unwind_phase2_forced+0x78>
    5100:	6c23      	ldr	r3, [r4, #64]	; 0x40
    5102:	616b      	str	r3, [r5, #20]
    5104:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    5108:	4621      	mov	r1, r4
    510a:	a87a      	add	r0, sp, #488	; 0x1e8
    510c:	f000 fe9c 	bl	5e48 <memcpy>
    5110:	692b      	ldr	r3, [r5, #16]
    5112:	aa7a      	add	r2, sp, #488	; 0x1e8
    5114:	4629      	mov	r1, r5
    5116:	4630      	mov	r0, r6
    5118:	4798      	blx	r3
    511a:	9b88      	ldr	r3, [sp, #544]	; 0x220
    511c:	e9cd 4900 	strd	r4, r9, [sp]
    5120:	4682      	mov	sl, r0
    5122:	6463      	str	r3, [r4, #68]	; 0x44
    5124:	4631      	mov	r1, r6
    5126:	462b      	mov	r3, r5
    5128:	462a      	mov	r2, r5
    512a:	2001      	movs	r0, #1
    512c:	47c0      	blx	r8
    512e:	4607      	mov	r7, r0
    5130:	b9f8      	cbnz	r0, 5172 <unwind_phase2_forced+0xa6>
    5132:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
    5136:	a97a      	add	r1, sp, #488	; 0x1e8
    5138:	4620      	mov	r0, r4
    513a:	f000 fe85 	bl	5e48 <memcpy>
    513e:	f1ba 0f08 	cmp.w	sl, #8
    5142:	d11c      	bne.n	517e <unwind_phase2_forced+0xb2>
    5144:	6c21      	ldr	r1, [r4, #64]	; 0x40
    5146:	4628      	mov	r0, r5
    5148:	f7ff ff18 	bl	4f7c <get_eit_entry>
    514c:	2f00      	cmp	r7, #0
    514e:	bf08      	it	eq
    5150:	2609      	moveq	r6, #9
    5152:	4607      	mov	r7, r0
    5154:	bf18      	it	ne
    5156:	260a      	movne	r6, #10
    5158:	2800      	cmp	r0, #0
    515a:	d0d1      	beq.n	5100 <unwind_phase2_forced+0x34>
    515c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    515e:	f046 0110 	orr.w	r1, r6, #16
    5162:	e9cd 4900 	strd	r4, r9, [sp]
    5166:	462a      	mov	r2, r5
    5168:	6463      	str	r3, [r4, #68]	; 0x44
    516a:	2001      	movs	r0, #1
    516c:	462b      	mov	r3, r5
    516e:	47c0      	blx	r8
    5170:	b100      	cbz	r0, 5174 <unwind_phase2_forced+0xa8>
    5172:	2709      	movs	r7, #9
    5174:	4638      	mov	r0, r7
    5176:	f50d 7d72 	add.w	sp, sp, #968	; 0x3c8
    517a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    517e:	f1ba 0f07 	cmp.w	sl, #7
    5182:	d1f6      	bne.n	5172 <unwind_phase2_forced+0xa6>
    5184:	4638      	mov	r0, r7
    5186:	6c21      	ldr	r1, [r4, #64]	; 0x40
    5188:	f7ff ff7e 	bl	5088 <_Unwind_DebugHook>
    518c:	a803      	add	r0, sp, #12
    518e:	f000 fb9d 	bl	58cc <__restore_core_regs>
    5192:	bf00      	nop

00005194 <_Unwind_GetCFA>:
    5194:	6c40      	ldr	r0, [r0, #68]	; 0x44
    5196:	4770      	bx	lr

00005198 <__gnu_Unwind_RaiseException>:
    5198:	b5f0      	push	{r4, r5, r6, r7, lr}
    519a:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    519c:	640b      	str	r3, [r1, #64]	; 0x40
    519e:	1d0d      	adds	r5, r1, #4
    51a0:	460f      	mov	r7, r1
    51a2:	4606      	mov	r6, r0
    51a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    51a6:	b0f9      	sub	sp, #484	; 0x1e4
    51a8:	ac01      	add	r4, sp, #4
    51aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    51ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    51ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    51b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    51b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    51b4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    51b8:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    51bc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    51c0:	9500      	str	r5, [sp, #0]
    51c2:	e006      	b.n	51d2 <__gnu_Unwind_RaiseException+0x3a>
    51c4:	6933      	ldr	r3, [r6, #16]
    51c6:	466a      	mov	r2, sp
    51c8:	4631      	mov	r1, r6
    51ca:	4798      	blx	r3
    51cc:	2808      	cmp	r0, #8
    51ce:	4604      	mov	r4, r0
    51d0:	d108      	bne.n	51e4 <__gnu_Unwind_RaiseException+0x4c>
    51d2:	9910      	ldr	r1, [sp, #64]	; 0x40
    51d4:	4630      	mov	r0, r6
    51d6:	f7ff fed1 	bl	4f7c <get_eit_entry>
    51da:	2800      	cmp	r0, #0
    51dc:	d0f2      	beq.n	51c4 <__gnu_Unwind_RaiseException+0x2c>
    51de:	2009      	movs	r0, #9
    51e0:	b079      	add	sp, #484	; 0x1e4
    51e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    51e4:	4668      	mov	r0, sp
    51e6:	f7ff ff1b 	bl	5020 <restore_non_core_regs>
    51ea:	2c06      	cmp	r4, #6
    51ec:	d1f7      	bne.n	51de <__gnu_Unwind_RaiseException+0x46>
    51ee:	4639      	mov	r1, r7
    51f0:	4630      	mov	r0, r6
    51f2:	f7ff ff4b 	bl	508c <unwind_phase2>
    51f6:	bf00      	nop

000051f8 <__gnu_Unwind_ForcedUnwind>:
    51f8:	b430      	push	{r4, r5}
    51fa:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
    51fc:	60c1      	str	r1, [r0, #12]
    51fe:	6182      	str	r2, [r0, #24]
    5200:	4619      	mov	r1, r3
    5202:	641d      	str	r5, [r3, #64]	; 0x40
    5204:	2200      	movs	r2, #0
    5206:	bc30      	pop	{r4, r5}
    5208:	e760      	b.n	50cc <unwind_phase2_forced>
    520a:	bf00      	nop

0000520c <__gnu_Unwind_Resume>:
    520c:	b570      	push	{r4, r5, r6, lr}
    520e:	68c6      	ldr	r6, [r0, #12]
    5210:	6943      	ldr	r3, [r0, #20]
    5212:	640b      	str	r3, [r1, #64]	; 0x40
    5214:	b9be      	cbnz	r6, 5246 <__gnu_Unwind_Resume+0x3a>
    5216:	6903      	ldr	r3, [r0, #16]
    5218:	460a      	mov	r2, r1
    521a:	4604      	mov	r4, r0
    521c:	460d      	mov	r5, r1
    521e:	4601      	mov	r1, r0
    5220:	2002      	movs	r0, #2
    5222:	4798      	blx	r3
    5224:	2807      	cmp	r0, #7
    5226:	d007      	beq.n	5238 <__gnu_Unwind_Resume+0x2c>
    5228:	2808      	cmp	r0, #8
    522a:	d103      	bne.n	5234 <__gnu_Unwind_Resume+0x28>
    522c:	4629      	mov	r1, r5
    522e:	4620      	mov	r0, r4
    5230:	f7ff ff2c 	bl	508c <unwind_phase2>
    5234:	f000 fddc 	bl	5df0 <abort>
    5238:	4630      	mov	r0, r6
    523a:	6c29      	ldr	r1, [r5, #64]	; 0x40
    523c:	f7ff ff24 	bl	5088 <_Unwind_DebugHook>
    5240:	1d28      	adds	r0, r5, #4
    5242:	f000 fb43 	bl	58cc <__restore_core_regs>
    5246:	2201      	movs	r2, #1
    5248:	f7ff ff40 	bl	50cc <unwind_phase2_forced>
    524c:	f000 fdd0 	bl	5df0 <abort>

00005250 <__gnu_Unwind_Resume_or_Rethrow>:
    5250:	68c2      	ldr	r2, [r0, #12]
    5252:	b11a      	cbz	r2, 525c <__gnu_Unwind_Resume_or_Rethrow+0xc>
    5254:	6bca      	ldr	r2, [r1, #60]	; 0x3c
    5256:	640a      	str	r2, [r1, #64]	; 0x40
    5258:	2200      	movs	r2, #0
    525a:	e737      	b.n	50cc <unwind_phase2_forced>
    525c:	e79c      	b.n	5198 <__gnu_Unwind_RaiseException>
    525e:	bf00      	nop

00005260 <_Unwind_Complete>:
    5260:	4770      	bx	lr
    5262:	bf00      	nop

00005264 <_Unwind_DeleteException>:
    5264:	6883      	ldr	r3, [r0, #8]
    5266:	b113      	cbz	r3, 526e <_Unwind_DeleteException+0xa>
    5268:	4601      	mov	r1, r0
    526a:	2001      	movs	r0, #1
    526c:	4718      	bx	r3
    526e:	4770      	bx	lr

00005270 <_Unwind_VRS_Get>:
    5270:	2904      	cmp	r1, #4
    5272:	d807      	bhi.n	5284 <_Unwind_VRS_Get+0x14>
    5274:	e8df f001 	tbb	[pc, r1]
    5278:	08060803 	.word	0x08060803
    527c:	08          	.byte	0x08
    527d:	00          	.byte	0x00
    527e:	b90b      	cbnz	r3, 5284 <_Unwind_VRS_Get+0x14>
    5280:	2a0f      	cmp	r2, #15
    5282:	d903      	bls.n	528c <_Unwind_VRS_Get+0x1c>
    5284:	2002      	movs	r0, #2
    5286:	4770      	bx	lr
    5288:	2001      	movs	r0, #1
    528a:	4770      	bx	lr
    528c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
    5290:	4618      	mov	r0, r3
    5292:	6853      	ldr	r3, [r2, #4]
    5294:	9a00      	ldr	r2, [sp, #0]
    5296:	6013      	str	r3, [r2, #0]
    5298:	4770      	bx	lr
    529a:	bf00      	nop

0000529c <_Unwind_GetGR>:
    529c:	b510      	push	{r4, lr}
    529e:	b084      	sub	sp, #16
    52a0:	2300      	movs	r3, #0
    52a2:	ac03      	add	r4, sp, #12
    52a4:	460a      	mov	r2, r1
    52a6:	9400      	str	r4, [sp, #0]
    52a8:	4619      	mov	r1, r3
    52aa:	f7ff ffe1 	bl	5270 <_Unwind_VRS_Get>
    52ae:	9803      	ldr	r0, [sp, #12]
    52b0:	b004      	add	sp, #16
    52b2:	bd10      	pop	{r4, pc}

000052b4 <_Unwind_VRS_Set>:
    52b4:	2904      	cmp	r1, #4
    52b6:	d807      	bhi.n	52c8 <_Unwind_VRS_Set+0x14>
    52b8:	e8df f001 	tbb	[pc, r1]
    52bc:	08060803 	.word	0x08060803
    52c0:	08          	.byte	0x08
    52c1:	00          	.byte	0x00
    52c2:	b90b      	cbnz	r3, 52c8 <_Unwind_VRS_Set+0x14>
    52c4:	2a0f      	cmp	r2, #15
    52c6:	d903      	bls.n	52d0 <_Unwind_VRS_Set+0x1c>
    52c8:	2002      	movs	r0, #2
    52ca:	4770      	bx	lr
    52cc:	2001      	movs	r0, #1
    52ce:	4770      	bx	lr
    52d0:	eb00 0082 	add.w	r0, r0, r2, lsl #2
    52d4:	9a00      	ldr	r2, [sp, #0]
    52d6:	6812      	ldr	r2, [r2, #0]
    52d8:	6042      	str	r2, [r0, #4]
    52da:	4618      	mov	r0, r3
    52dc:	4770      	bx	lr
    52de:	bf00      	nop

000052e0 <_Unwind_SetGR>:
    52e0:	b510      	push	{r4, lr}
    52e2:	b084      	sub	sp, #16
    52e4:	ac04      	add	r4, sp, #16
    52e6:	2300      	movs	r3, #0
    52e8:	f844 2d04 	str.w	r2, [r4, #-4]!
    52ec:	460a      	mov	r2, r1
    52ee:	9400      	str	r4, [sp, #0]
    52f0:	4619      	mov	r1, r3
    52f2:	f7ff ffdf 	bl	52b4 <_Unwind_VRS_Set>
    52f6:	b004      	add	sp, #16
    52f8:	bd10      	pop	{r4, pc}
    52fa:	bf00      	nop

000052fc <__gnu_Unwind_Backtrace>:
    52fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    52fe:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
    5300:	6413      	str	r3, [r2, #64]	; 0x40
    5302:	1d15      	adds	r5, r2, #4
    5304:	4607      	mov	r7, r0
    5306:	460e      	mov	r6, r1
    5308:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    530a:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
    530e:	ac17      	add	r4, sp, #92	; 0x5c
    5310:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    5312:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    5314:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    5316:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    5318:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    531a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    531e:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
    5322:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    5326:	9516      	str	r5, [sp, #88]	; 0x58
    5328:	e010      	b.n	534c <__gnu_Unwind_Backtrace+0x50>
    532a:	a816      	add	r0, sp, #88	; 0x58
    532c:	f7ff ffd8 	bl	52e0 <_Unwind_SetGR>
    5330:	4631      	mov	r1, r6
    5332:	a816      	add	r0, sp, #88	; 0x58
    5334:	47b8      	blx	r7
    5336:	aa16      	add	r2, sp, #88	; 0x58
    5338:	4669      	mov	r1, sp
    533a:	b978      	cbnz	r0, 535c <__gnu_Unwind_Backtrace+0x60>
    533c:	9b04      	ldr	r3, [sp, #16]
    533e:	2008      	movs	r0, #8
    5340:	4798      	blx	r3
    5342:	2805      	cmp	r0, #5
    5344:	4604      	mov	r4, r0
    5346:	d00a      	beq.n	535e <__gnu_Unwind_Backtrace+0x62>
    5348:	2809      	cmp	r0, #9
    534a:	d007      	beq.n	535c <__gnu_Unwind_Backtrace+0x60>
    534c:	9926      	ldr	r1, [sp, #152]	; 0x98
    534e:	4668      	mov	r0, sp
    5350:	f7ff fe14 	bl	4f7c <get_eit_entry>
    5354:	466a      	mov	r2, sp
    5356:	210c      	movs	r1, #12
    5358:	2800      	cmp	r0, #0
    535a:	d0e6      	beq.n	532a <__gnu_Unwind_Backtrace+0x2e>
    535c:	2409      	movs	r4, #9
    535e:	a816      	add	r0, sp, #88	; 0x58
    5360:	f7ff fe5e 	bl	5020 <restore_non_core_regs>
    5364:	4620      	mov	r0, r4
    5366:	f50d 7d0f 	add.w	sp, sp, #572	; 0x23c
    536a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000536c <__gnu_unwind_pr_common>:
    536c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5370:	460d      	mov	r5, r1
    5372:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
    5374:	b089      	sub	sp, #36	; 0x24
    5376:	1d0c      	adds	r4, r1, #4
    5378:	4616      	mov	r6, r2
    537a:	f000 0b03 	and.w	fp, r0, #3
    537e:	680a      	ldr	r2, [r1, #0]
    5380:	9406      	str	r4, [sp, #24]
    5382:	461f      	mov	r7, r3
    5384:	2b00      	cmp	r3, #0
    5386:	d068      	beq.n	545a <__gnu_unwind_pr_common+0xee>
    5388:	0c13      	lsrs	r3, r2, #16
    538a:	b2d9      	uxtb	r1, r3
    538c:	0412      	lsls	r2, r2, #16
    538e:	f88d 301d 	strb.w	r3, [sp, #29]
    5392:	2302      	movs	r3, #2
    5394:	eb04 0481 	add.w	r4, r4, r1, lsl #2
    5398:	9205      	str	r2, [sp, #20]
    539a:	f88d 301c 	strb.w	r3, [sp, #28]
    539e:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    53a0:	f1bb 0f02 	cmp.w	fp, #2
    53a4:	bf08      	it	eq
    53a6:	6bac      	ldreq	r4, [r5, #56]	; 0x38
    53a8:	f013 0301 	ands.w	r3, r3, #1
    53ac:	d146      	bne.n	543c <__gnu_unwind_pr_common+0xd0>
    53ae:	9301      	str	r3, [sp, #4]
    53b0:	f000 0308 	and.w	r3, r0, #8
    53b4:	9300      	str	r3, [sp, #0]
    53b6:	f8d4 9000 	ldr.w	r9, [r4]
    53ba:	f1b9 0f00 	cmp.w	r9, #0
    53be:	f000 80f3 	beq.w	55a8 <__gnu_unwind_pr_common+0x23c>
    53c2:	2f02      	cmp	r7, #2
    53c4:	d045      	beq.n	5452 <__gnu_unwind_pr_common+0xe6>
    53c6:	f8b4 9000 	ldrh.w	r9, [r4]
    53ca:	f8b4 8002 	ldrh.w	r8, [r4, #2]
    53ce:	3404      	adds	r4, #4
    53d0:	6cab      	ldr	r3, [r5, #72]	; 0x48
    53d2:	f028 0a01 	bic.w	sl, r8, #1
    53d6:	210f      	movs	r1, #15
    53d8:	4630      	mov	r0, r6
    53da:	449a      	add	sl, r3
    53dc:	f7ff ff5e 	bl	529c <_Unwind_GetGR>
    53e0:	4582      	cmp	sl, r0
    53e2:	d834      	bhi.n	544e <__gnu_unwind_pr_common+0xe2>
    53e4:	f029 0301 	bic.w	r3, r9, #1
    53e8:	4453      	add	r3, sl
    53ea:	4283      	cmp	r3, r0
    53ec:	bf94      	ite	ls
    53ee:	2000      	movls	r0, #0
    53f0:	2001      	movhi	r0, #1
    53f2:	ea4f 0848 	mov.w	r8, r8, lsl #1
    53f6:	f008 0802 	and.w	r8, r8, #2
    53fa:	f009 0901 	and.w	r9, r9, #1
    53fe:	ea48 0809 	orr.w	r8, r8, r9
    5402:	f1b8 0f01 	cmp.w	r8, #1
    5406:	d03a      	beq.n	547e <__gnu_unwind_pr_common+0x112>
    5408:	d331      	bcc.n	546e <__gnu_unwind_pr_common+0x102>
    540a:	f1b8 0f02 	cmp.w	r8, #2
    540e:	d11a      	bne.n	5446 <__gnu_unwind_pr_common+0xda>
    5410:	6823      	ldr	r3, [r4, #0]
    5412:	f023 4a00 	bic.w	sl, r3, #2147483648	; 0x80000000
    5416:	f1bb 0f00 	cmp.w	fp, #0
    541a:	d166      	bne.n	54ea <__gnu_unwind_pr_common+0x17e>
    541c:	b130      	cbz	r0, 542c <__gnu_unwind_pr_common+0xc0>
    541e:	9a00      	ldr	r2, [sp, #0]
    5420:	2a00      	cmp	r2, #0
    5422:	d06c      	beq.n	54fe <__gnu_unwind_pr_common+0x192>
    5424:	f1ba 0f00 	cmp.w	sl, #0
    5428:	f000 8090 	beq.w	554c <__gnu_unwind_pr_common+0x1e0>
    542c:	2b00      	cmp	r3, #0
    542e:	da00      	bge.n	5432 <__gnu_unwind_pr_common+0xc6>
    5430:	3404      	adds	r4, #4
    5432:	f10a 0301 	add.w	r3, sl, #1
    5436:	eb04 0483 	add.w	r4, r4, r3, lsl #2
    543a:	e7bc      	b.n	53b6 <__gnu_unwind_pr_common+0x4a>
    543c:	4630      	mov	r0, r6
    543e:	a905      	add	r1, sp, #20
    5440:	f000 fb46 	bl	5ad0 <__gnu_unwind_execute>
    5444:	b178      	cbz	r0, 5466 <__gnu_unwind_pr_common+0xfa>
    5446:	2009      	movs	r0, #9
    5448:	b009      	add	sp, #36	; 0x24
    544a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    544e:	2000      	movs	r0, #0
    5450:	e7cf      	b.n	53f2 <__gnu_unwind_pr_common+0x86>
    5452:	f8d4 8004 	ldr.w	r8, [r4, #4]
    5456:	3408      	adds	r4, #8
    5458:	e7ba      	b.n	53d0 <__gnu_unwind_pr_common+0x64>
    545a:	0212      	lsls	r2, r2, #8
    545c:	2303      	movs	r3, #3
    545e:	9205      	str	r2, [sp, #20]
    5460:	f8ad 301c 	strh.w	r3, [sp, #28]
    5464:	e79b      	b.n	539e <__gnu_unwind_pr_common+0x32>
    5466:	2008      	movs	r0, #8
    5468:	b009      	add	sp, #36	; 0x24
    546a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    546e:	f1bb 0f00 	cmp.w	fp, #0
    5472:	d002      	beq.n	547a <__gnu_unwind_pr_common+0x10e>
    5474:	2800      	cmp	r0, #0
    5476:	f040 80b4 	bne.w	55e2 <__gnu_unwind_pr_common+0x276>
    547a:	3404      	adds	r4, #4
    547c:	e79b      	b.n	53b6 <__gnu_unwind_pr_common+0x4a>
    547e:	f1bb 0f00 	cmp.w	fp, #0
    5482:	d118      	bne.n	54b6 <__gnu_unwind_pr_common+0x14a>
    5484:	b1a8      	cbz	r0, 54b2 <__gnu_unwind_pr_common+0x146>
    5486:	e9d4 2300 	ldrd	r2, r3, [r4]
    548a:	1c99      	adds	r1, r3, #2
    548c:	ea4f 72d2 	mov.w	r2, r2, lsr #31
    5490:	d0d9      	beq.n	5446 <__gnu_unwind_pr_common+0xda>
    5492:	f105 0158 	add.w	r1, r5, #88	; 0x58
    5496:	3301      	adds	r3, #1
    5498:	9104      	str	r1, [sp, #16]
    549a:	f000 80b5 	beq.w	5608 <__gnu_unwind_pr_common+0x29c>
    549e:	1d20      	adds	r0, r4, #4
    54a0:	f7ff fdea 	bl	5078 <_Unwind_decode_typeinfo_ptr.isra.0>
    54a4:	ab04      	add	r3, sp, #16
    54a6:	4601      	mov	r1, r0
    54a8:	4628      	mov	r0, r5
    54aa:	f3af 8000 	nop.w
    54ae:	2800      	cmp	r0, #0
    54b0:	d167      	bne.n	5582 <__gnu_unwind_pr_common+0x216>
    54b2:	3408      	adds	r4, #8
    54b4:	e77f      	b.n	53b6 <__gnu_unwind_pr_common+0x4a>
    54b6:	210d      	movs	r1, #13
    54b8:	4630      	mov	r0, r6
    54ba:	f8d5 8020 	ldr.w	r8, [r5, #32]
    54be:	f7ff feed 	bl	529c <_Unwind_GetGR>
    54c2:	4580      	cmp	r8, r0
    54c4:	d1f5      	bne.n	54b2 <__gnu_unwind_pr_common+0x146>
    54c6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    54c8:	429c      	cmp	r4, r3
    54ca:	d1f2      	bne.n	54b2 <__gnu_unwind_pr_common+0x146>
    54cc:	4620      	mov	r0, r4
    54ce:	f7ff fd07 	bl	4ee0 <selfrel_offset31>
    54d2:	210f      	movs	r1, #15
    54d4:	4602      	mov	r2, r0
    54d6:	4630      	mov	r0, r6
    54d8:	f7ff ff02 	bl	52e0 <_Unwind_SetGR>
    54dc:	4630      	mov	r0, r6
    54de:	462a      	mov	r2, r5
    54e0:	2100      	movs	r1, #0
    54e2:	f7ff fefd 	bl	52e0 <_Unwind_SetGR>
    54e6:	2007      	movs	r0, #7
    54e8:	e7ae      	b.n	5448 <__gnu_unwind_pr_common+0xdc>
    54ea:	210d      	movs	r1, #13
    54ec:	4630      	mov	r0, r6
    54ee:	f8d5 8020 	ldr.w	r8, [r5, #32]
    54f2:	f7ff fed3 	bl	529c <_Unwind_GetGR>
    54f6:	4580      	cmp	r8, r0
    54f8:	d032      	beq.n	5560 <__gnu_unwind_pr_common+0x1f4>
    54fa:	6823      	ldr	r3, [r4, #0]
    54fc:	e796      	b.n	542c <__gnu_unwind_pr_common+0xc0>
    54fe:	f1ba 0f00 	cmp.w	sl, #0
    5502:	d023      	beq.n	554c <__gnu_unwind_pr_common+0x1e0>
    5504:	f105 0358 	add.w	r3, r5, #88	; 0x58
    5508:	f104 0804 	add.w	r8, r4, #4
    550c:	f8cd b008 	str.w	fp, [sp, #8]
    5510:	f8dd 9000 	ldr.w	r9, [sp]
    5514:	9703      	str	r7, [sp, #12]
    5516:	46a3      	mov	fp, r4
    5518:	461c      	mov	r4, r3
    551a:	e002      	b.n	5522 <__gnu_unwind_pr_common+0x1b6>
    551c:	4557      	cmp	r7, sl
    551e:	46b9      	mov	r9, r7
    5520:	d040      	beq.n	55a4 <__gnu_unwind_pr_common+0x238>
    5522:	4640      	mov	r0, r8
    5524:	9404      	str	r4, [sp, #16]
    5526:	f7ff fda7 	bl	5078 <_Unwind_decode_typeinfo_ptr.isra.0>
    552a:	ab04      	add	r3, sp, #16
    552c:	4601      	mov	r1, r0
    552e:	2200      	movs	r2, #0
    5530:	4628      	mov	r0, r5
    5532:	f3af 8000 	nop.w
    5536:	f109 0701 	add.w	r7, r9, #1
    553a:	f108 0804 	add.w	r8, r8, #4
    553e:	2800      	cmp	r0, #0
    5540:	d0ec      	beq.n	551c <__gnu_unwind_pr_common+0x1b0>
    5542:	45d1      	cmp	r9, sl
    5544:	465c      	mov	r4, fp
    5546:	e9dd b702 	ldrd	fp, r7, [sp, #8]
    554a:	d1d6      	bne.n	54fa <__gnu_unwind_pr_common+0x18e>
    554c:	4630      	mov	r0, r6
    554e:	210d      	movs	r1, #13
    5550:	f7ff fea4 	bl	529c <_Unwind_GetGR>
    5554:	9b04      	ldr	r3, [sp, #16]
    5556:	6228      	str	r0, [r5, #32]
    5558:	e9c5 3409 	strd	r3, r4, [r5, #36]	; 0x24
    555c:	2006      	movs	r0, #6
    555e:	e773      	b.n	5448 <__gnu_unwind_pr_common+0xdc>
    5560:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5562:	429c      	cmp	r4, r3
    5564:	d1c9      	bne.n	54fa <__gnu_unwind_pr_common+0x18e>
    5566:	2204      	movs	r2, #4
    5568:	f04f 0800 	mov.w	r8, #0
    556c:	18a3      	adds	r3, r4, r2
    556e:	e9c5 a80a 	strd	sl, r8, [r5, #40]	; 0x28
    5572:	e9c5 230c 	strd	r2, r3, [r5, #48]	; 0x30
    5576:	6823      	ldr	r3, [r4, #0]
    5578:	4543      	cmp	r3, r8
    557a:	db4d      	blt.n	5618 <__gnu_unwind_pr_common+0x2ac>
    557c:	2301      	movs	r3, #1
    557e:	9301      	str	r3, [sp, #4]
    5580:	e757      	b.n	5432 <__gnu_unwind_pr_common+0xc6>
    5582:	4680      	mov	r8, r0
    5584:	210d      	movs	r1, #13
    5586:	4630      	mov	r0, r6
    5588:	f7ff fe88 	bl	529c <_Unwind_GetGR>
    558c:	f1b8 0f02 	cmp.w	r8, #2
    5590:	6228      	str	r0, [r5, #32]
    5592:	d13e      	bne.n	5612 <__gnu_unwind_pr_common+0x2a6>
    5594:	462b      	mov	r3, r5
    5596:	9a04      	ldr	r2, [sp, #16]
    5598:	f843 2f2c 	str.w	r2, [r3, #44]!
    559c:	626b      	str	r3, [r5, #36]	; 0x24
    559e:	62ac      	str	r4, [r5, #40]	; 0x28
    55a0:	2006      	movs	r0, #6
    55a2:	e751      	b.n	5448 <__gnu_unwind_pr_common+0xdc>
    55a4:	465c      	mov	r4, fp
    55a6:	e7d1      	b.n	554c <__gnu_unwind_pr_common+0x1e0>
    55a8:	a905      	add	r1, sp, #20
    55aa:	4630      	mov	r0, r6
    55ac:	f000 fa90 	bl	5ad0 <__gnu_unwind_execute>
    55b0:	2800      	cmp	r0, #0
    55b2:	f47f af48 	bne.w	5446 <__gnu_unwind_pr_common+0xda>
    55b6:	9b01      	ldr	r3, [sp, #4]
    55b8:	2b00      	cmp	r3, #0
    55ba:	f43f af54 	beq.w	5466 <__gnu_unwind_pr_common+0xfa>
    55be:	210f      	movs	r1, #15
    55c0:	4630      	mov	r0, r6
    55c2:	f7ff fe6b 	bl	529c <_Unwind_GetGR>
    55c6:	210e      	movs	r1, #14
    55c8:	4602      	mov	r2, r0
    55ca:	4630      	mov	r0, r6
    55cc:	f7ff fe88 	bl	52e0 <_Unwind_SetGR>
    55d0:	4630      	mov	r0, r6
    55d2:	4a1a      	ldr	r2, [pc, #104]	; (563c <__gnu_unwind_pr_common+0x2d0>)
    55d4:	210f      	movs	r1, #15
    55d6:	f7ff fe83 	bl	52e0 <_Unwind_SetGR>
    55da:	2007      	movs	r0, #7
    55dc:	b009      	add	sp, #36	; 0x24
    55de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    55e2:	4620      	mov	r0, r4
    55e4:	f7ff fc7c 	bl	4ee0 <selfrel_offset31>
    55e8:	3404      	adds	r4, #4
    55ea:	4607      	mov	r7, r0
    55ec:	63ac      	str	r4, [r5, #56]	; 0x38
    55ee:	4628      	mov	r0, r5
    55f0:	f3af 8000 	nop.w
    55f4:	2800      	cmp	r0, #0
    55f6:	f43f af26 	beq.w	5446 <__gnu_unwind_pr_common+0xda>
    55fa:	4630      	mov	r0, r6
    55fc:	463a      	mov	r2, r7
    55fe:	210f      	movs	r1, #15
    5600:	f7ff fe6e 	bl	52e0 <_Unwind_SetGR>
    5604:	2007      	movs	r0, #7
    5606:	e71f      	b.n	5448 <__gnu_unwind_pr_common+0xdc>
    5608:	4630      	mov	r0, r6
    560a:	210d      	movs	r1, #13
    560c:	f7ff fe46 	bl	529c <_Unwind_GetGR>
    5610:	6228      	str	r0, [r5, #32]
    5612:	9b04      	ldr	r3, [sp, #16]
    5614:	626b      	str	r3, [r5, #36]	; 0x24
    5616:	e7c2      	b.n	559e <__gnu_unwind_pr_common+0x232>
    5618:	f10a 0001 	add.w	r0, sl, #1
    561c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    5620:	f7ff fc5e 	bl	4ee0 <selfrel_offset31>
    5624:	210f      	movs	r1, #15
    5626:	4602      	mov	r2, r0
    5628:	4630      	mov	r0, r6
    562a:	f7ff fe59 	bl	52e0 <_Unwind_SetGR>
    562e:	4630      	mov	r0, r6
    5630:	462a      	mov	r2, r5
    5632:	4641      	mov	r1, r8
    5634:	f7ff fe54 	bl	52e0 <_Unwind_SetGR>
    5638:	2007      	movs	r0, #7
    563a:	e705      	b.n	5448 <__gnu_unwind_pr_common+0xdc>
    563c:	00000000 	.word	0x00000000

00005640 <__aeabi_unwind_cpp_pr0>:
    5640:	2300      	movs	r3, #0
    5642:	e693      	b.n	536c <__gnu_unwind_pr_common>

00005644 <__aeabi_unwind_cpp_pr1>:
    5644:	2301      	movs	r3, #1
    5646:	e691      	b.n	536c <__gnu_unwind_pr_common>

00005648 <__aeabi_unwind_cpp_pr2>:
    5648:	2302      	movs	r3, #2
    564a:	e68f      	b.n	536c <__gnu_unwind_pr_common>

0000564c <_Unwind_VRS_Pop>:
    564c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5650:	4605      	mov	r5, r0
    5652:	b0c4      	sub	sp, #272	; 0x110
    5654:	2904      	cmp	r1, #4
    5656:	d806      	bhi.n	5666 <_Unwind_VRS_Pop+0x1a>
    5658:	e8df f001 	tbb	[pc, r1]
    565c:	03052b4d 	.word	0x03052b4d
    5660:	09          	.byte	0x09
    5661:	00          	.byte	0x00
    5662:	2b03      	cmp	r3, #3
    5664:	d05f      	beq.n	5726 <_Unwind_VRS_Pop+0xda>
    5666:	2002      	movs	r0, #2
    5668:	b044      	add	sp, #272	; 0x110
    566a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    566e:	2b00      	cmp	r3, #0
    5670:	d1f9      	bne.n	5666 <_Unwind_VRS_Pop+0x1a>
    5672:	2a10      	cmp	r2, #16
    5674:	d8f7      	bhi.n	5666 <_Unwind_VRS_Pop+0x1a>
    5676:	682b      	ldr	r3, [r5, #0]
    5678:	06dc      	lsls	r4, r3, #27
    567a:	f100 80f4 	bmi.w	5866 <_Unwind_VRS_Pop+0x21a>
    567e:	ac22      	add	r4, sp, #136	; 0x88
    5680:	4620      	mov	r0, r4
    5682:	9201      	str	r2, [sp, #4]
    5684:	f000 f994 	bl	59b0 <__gnu_Unwind_Save_WMMXC>
    5688:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    568a:	9a01      	ldr	r2, [sp, #4]
    568c:	2300      	movs	r3, #0
    568e:	2601      	movs	r6, #1
    5690:	fa06 f103 	lsl.w	r1, r6, r3
    5694:	4211      	tst	r1, r2
    5696:	d003      	beq.n	56a0 <_Unwind_VRS_Pop+0x54>
    5698:	6801      	ldr	r1, [r0, #0]
    569a:	f844 1023 	str.w	r1, [r4, r3, lsl #2]
    569e:	3004      	adds	r0, #4
    56a0:	3301      	adds	r3, #1
    56a2:	2b04      	cmp	r3, #4
    56a4:	d1f4      	bne.n	5690 <_Unwind_VRS_Pop+0x44>
    56a6:	63a8      	str	r0, [r5, #56]	; 0x38
    56a8:	4620      	mov	r0, r4
    56aa:	f000 f977 	bl	599c <__gnu_Unwind_Restore_WMMXC>
    56ae:	2000      	movs	r0, #0
    56b0:	e7da      	b.n	5668 <_Unwind_VRS_Pop+0x1c>
    56b2:	2b01      	cmp	r3, #1
    56b4:	ea4f 4612 	mov.w	r6, r2, lsr #16
    56b8:	b297      	uxth	r7, r2
    56ba:	d052      	beq.n	5762 <_Unwind_VRS_Pop+0x116>
    56bc:	2b05      	cmp	r3, #5
    56be:	d1d2      	bne.n	5666 <_Unwind_VRS_Pop+0x1a>
    56c0:	eb06 0807 	add.w	r8, r6, r7
    56c4:	f1b8 0f20 	cmp.w	r8, #32
    56c8:	d8cd      	bhi.n	5666 <_Unwind_VRS_Pop+0x1a>
    56ca:	2e0f      	cmp	r6, #15
    56cc:	f240 8099 	bls.w	5802 <_Unwind_VRS_Pop+0x1b6>
    56d0:	46b8      	mov	r8, r7
    56d2:	2f00      	cmp	r7, #0
    56d4:	f040 80db 	bne.w	588e <_Unwind_VRS_Pop+0x242>
    56d8:	6baa      	ldr	r2, [r5, #56]	; 0x38
    56da:	63aa      	str	r2, [r5, #56]	; 0x38
    56dc:	2e0f      	cmp	r6, #15
    56de:	f240 80be 	bls.w	585e <_Unwind_VRS_Pop+0x212>
    56e2:	f1b8 0f00 	cmp.w	r8, #0
    56e6:	d002      	beq.n	56ee <_Unwind_VRS_Pop+0xa2>
    56e8:	a802      	add	r0, sp, #8
    56ea:	f000 f90b 	bl	5904 <__gnu_Unwind_Restore_VFP_D_16_to_31>
    56ee:	2000      	movs	r0, #0
    56f0:	b044      	add	sp, #272	; 0x110
    56f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    56f6:	2b00      	cmp	r3, #0
    56f8:	d1b5      	bne.n	5666 <_Unwind_VRS_Pop+0x1a>
    56fa:	6bac      	ldr	r4, [r5, #56]	; 0x38
    56fc:	b297      	uxth	r7, r2
    56fe:	1d28      	adds	r0, r5, #4
    5700:	2601      	movs	r6, #1
    5702:	fa06 f103 	lsl.w	r1, r6, r3
    5706:	4239      	tst	r1, r7
    5708:	f103 0301 	add.w	r3, r3, #1
    570c:	d002      	beq.n	5714 <_Unwind_VRS_Pop+0xc8>
    570e:	6821      	ldr	r1, [r4, #0]
    5710:	6001      	str	r1, [r0, #0]
    5712:	3404      	adds	r4, #4
    5714:	2b10      	cmp	r3, #16
    5716:	f100 0004 	add.w	r0, r0, #4
    571a:	d1f2      	bne.n	5702 <_Unwind_VRS_Pop+0xb6>
    571c:	f412 5000 	ands.w	r0, r2, #8192	; 0x2000
    5720:	d1e5      	bne.n	56ee <_Unwind_VRS_Pop+0xa2>
    5722:	63ac      	str	r4, [r5, #56]	; 0x38
    5724:	e7a0      	b.n	5668 <_Unwind_VRS_Pop+0x1c>
    5726:	0c16      	lsrs	r6, r2, #16
    5728:	b297      	uxth	r7, r2
    572a:	19f3      	adds	r3, r6, r7
    572c:	2b10      	cmp	r3, #16
    572e:	d89a      	bhi.n	5666 <_Unwind_VRS_Pop+0x1a>
    5730:	682b      	ldr	r3, [r5, #0]
    5732:	071a      	lsls	r2, r3, #28
    5734:	d45d      	bmi.n	57f2 <_Unwind_VRS_Pop+0x1a6>
    5736:	ac22      	add	r4, sp, #136	; 0x88
    5738:	4620      	mov	r0, r4
    573a:	f000 f90d 	bl	5958 <__gnu_Unwind_Save_WMMXD>
    573e:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
    5742:	6bab      	ldr	r3, [r5, #56]	; 0x38
    5744:	b13f      	cbz	r7, 5756 <_Unwind_VRS_Pop+0x10a>
    5746:	eb03 02c7 	add.w	r2, r3, r7, lsl #3
    574a:	6818      	ldr	r0, [r3, #0]
    574c:	f841 0b04 	str.w	r0, [r1], #4
    5750:	3304      	adds	r3, #4
    5752:	4293      	cmp	r3, r2
    5754:	d1f9      	bne.n	574a <_Unwind_VRS_Pop+0xfe>
    5756:	4620      	mov	r0, r4
    5758:	63ab      	str	r3, [r5, #56]	; 0x38
    575a:	f000 f8db 	bl	5914 <__gnu_Unwind_Restore_WMMXD>
    575e:	2000      	movs	r0, #0
    5760:	e782      	b.n	5668 <_Unwind_VRS_Pop+0x1c>
    5762:	19f2      	adds	r2, r6, r7
    5764:	2a10      	cmp	r2, #16
    5766:	f63f af7e 	bhi.w	5666 <_Unwind_VRS_Pop+0x1a>
    576a:	2e0f      	cmp	r6, #15
    576c:	f63f af7b 	bhi.w	5666 <_Unwind_VRS_Pop+0x1a>
    5770:	682a      	ldr	r2, [r5, #0]
    5772:	07d1      	lsls	r1, r2, #31
    5774:	d508      	bpl.n	5788 <_Unwind_VRS_Pop+0x13c>
    5776:	4628      	mov	r0, r5
    5778:	f022 0203 	bic.w	r2, r2, #3
    577c:	f840 2b48 	str.w	r2, [r0], #72
    5780:	9301      	str	r3, [sp, #4]
    5782:	f000 f8b3 	bl	58ec <__gnu_Unwind_Save_VFP>
    5786:	9b01      	ldr	r3, [sp, #4]
    5788:	9301      	str	r3, [sp, #4]
    578a:	ac22      	add	r4, sp, #136	; 0x88
    578c:	4620      	mov	r0, r4
    578e:	f000 f8ad 	bl	58ec <__gnu_Unwind_Save_VFP>
    5792:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    5794:	9b01      	ldr	r3, [sp, #4]
    5796:	2f00      	cmp	r7, #0
    5798:	f000 8095 	beq.w	58c6 <_Unwind_VRS_Pop+0x27a>
    579c:	007f      	lsls	r7, r7, #1
    579e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
    57a2:	f04f 0800 	mov.w	r8, #0
    57a6:	3c04      	subs	r4, #4
    57a8:	eb01 0287 	add.w	r2, r1, r7, lsl #2
    57ac:	f851 0b04 	ldr.w	r0, [r1], #4
    57b0:	f844 0f04 	str.w	r0, [r4, #4]!
    57b4:	4291      	cmp	r1, r2
    57b6:	d1f9      	bne.n	57ac <_Unwind_VRS_Pop+0x160>
    57b8:	f1b8 0f00 	cmp.w	r8, #0
    57bc:	d00f      	beq.n	57de <_Unwind_VRS_Pop+0x192>
    57be:	ac02      	add	r4, sp, #8
    57c0:	2e10      	cmp	r6, #16
    57c2:	4631      	mov	r1, r6
    57c4:	bf38      	it	cc
    57c6:	2110      	movcc	r1, #16
    57c8:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    57cc:	3984      	subs	r1, #132	; 0x84
    57ce:	eb02 04c8 	add.w	r4, r2, r8, lsl #3
    57d2:	f852 0b04 	ldr.w	r0, [r2], #4
    57d6:	f841 0f04 	str.w	r0, [r1, #4]!
    57da:	4294      	cmp	r4, r2
    57dc:	d1f9      	bne.n	57d2 <_Unwind_VRS_Pop+0x186>
    57de:	2b01      	cmp	r3, #1
    57e0:	f47f af7b 	bne.w	56da <_Unwind_VRS_Pop+0x8e>
    57e4:	ac22      	add	r4, sp, #136	; 0x88
    57e6:	3204      	adds	r2, #4
    57e8:	63aa      	str	r2, [r5, #56]	; 0x38
    57ea:	4620      	mov	r0, r4
    57ec:	f000 f87a 	bl	58e4 <__gnu_Unwind_Restore_VFP>
    57f0:	e77d      	b.n	56ee <_Unwind_VRS_Pop+0xa2>
    57f2:	f023 0308 	bic.w	r3, r3, #8
    57f6:	602b      	str	r3, [r5, #0]
    57f8:	f505 70a8 	add.w	r0, r5, #336	; 0x150
    57fc:	f000 f8ac 	bl	5958 <__gnu_Unwind_Save_WMMXD>
    5800:	e799      	b.n	5736 <_Unwind_VRS_Pop+0xea>
    5802:	f1b8 0f10 	cmp.w	r8, #16
    5806:	682a      	ldr	r2, [r5, #0]
    5808:	d943      	bls.n	5892 <_Unwind_VRS_Pop+0x246>
    580a:	07d0      	lsls	r0, r2, #31
    580c:	f1a8 0810 	sub.w	r8, r8, #16
    5810:	d50b      	bpl.n	582a <_Unwind_VRS_Pop+0x1de>
    5812:	4628      	mov	r0, r5
    5814:	f022 0201 	bic.w	r2, r2, #1
    5818:	f042 0202 	orr.w	r2, r2, #2
    581c:	f840 2b48 	str.w	r2, [r0], #72
    5820:	9301      	str	r3, [sp, #4]
    5822:	f000 f86b 	bl	58fc <__gnu_Unwind_Save_VFP_D>
    5826:	682a      	ldr	r2, [r5, #0]
    5828:	9b01      	ldr	r3, [sp, #4]
    582a:	0751      	lsls	r1, r2, #29
    582c:	d425      	bmi.n	587a <_Unwind_VRS_Pop+0x22e>
    582e:	2e0f      	cmp	r6, #15
    5830:	d804      	bhi.n	583c <_Unwind_VRS_Pop+0x1f0>
    5832:	a822      	add	r0, sp, #136	; 0x88
    5834:	9301      	str	r3, [sp, #4]
    5836:	f000 f861 	bl	58fc <__gnu_Unwind_Save_VFP_D>
    583a:	9b01      	ldr	r3, [sp, #4]
    583c:	9301      	str	r3, [sp, #4]
    583e:	ac02      	add	r4, sp, #8
    5840:	4620      	mov	r0, r4
    5842:	f000 f863 	bl	590c <__gnu_Unwind_Save_VFP_D_16_to_31>
    5846:	f1c6 0110 	rsb	r1, r6, #16
    584a:	2900      	cmp	r1, #0
    584c:	6baa      	ldr	r2, [r5, #56]	; 0x38
    584e:	9b01      	ldr	r3, [sp, #4]
    5850:	ddb6      	ble.n	57c0 <_Unwind_VRS_Pop+0x174>
    5852:	ac22      	add	r4, sp, #136	; 0x88
    5854:	004f      	lsls	r7, r1, #1
    5856:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
    585a:	4611      	mov	r1, r2
    585c:	e7a3      	b.n	57a6 <_Unwind_VRS_Pop+0x15a>
    585e:	a822      	add	r0, sp, #136	; 0x88
    5860:	f000 f848 	bl	58f4 <__gnu_Unwind_Restore_VFP_D>
    5864:	e73d      	b.n	56e2 <_Unwind_VRS_Pop+0x96>
    5866:	f023 0310 	bic.w	r3, r3, #16
    586a:	602b      	str	r3, [r5, #0]
    586c:	f505 70e8 	add.w	r0, r5, #464	; 0x1d0
    5870:	9201      	str	r2, [sp, #4]
    5872:	f000 f89d 	bl	59b0 <__gnu_Unwind_Save_WMMXC>
    5876:	9a01      	ldr	r2, [sp, #4]
    5878:	e701      	b.n	567e <_Unwind_VRS_Pop+0x32>
    587a:	4628      	mov	r0, r5
    587c:	f022 0204 	bic.w	r2, r2, #4
    5880:	f840 2bd0 	str.w	r2, [r0], #208
    5884:	9301      	str	r3, [sp, #4]
    5886:	f000 f841 	bl	590c <__gnu_Unwind_Save_VFP_D_16_to_31>
    588a:	9b01      	ldr	r3, [sp, #4]
    588c:	e7cf      	b.n	582e <_Unwind_VRS_Pop+0x1e2>
    588e:	682a      	ldr	r2, [r5, #0]
    5890:	e7cb      	b.n	582a <_Unwind_VRS_Pop+0x1de>
    5892:	07d0      	lsls	r0, r2, #31
    5894:	d50a      	bpl.n	58ac <_Unwind_VRS_Pop+0x260>
    5896:	4628      	mov	r0, r5
    5898:	f022 0201 	bic.w	r2, r2, #1
    589c:	f042 0202 	orr.w	r2, r2, #2
    58a0:	f840 2b48 	str.w	r2, [r0], #72
    58a4:	9301      	str	r3, [sp, #4]
    58a6:	f000 f829 	bl	58fc <__gnu_Unwind_Save_VFP_D>
    58aa:	9b01      	ldr	r3, [sp, #4]
    58ac:	9301      	str	r3, [sp, #4]
    58ae:	ac22      	add	r4, sp, #136	; 0x88
    58b0:	4620      	mov	r0, r4
    58b2:	f000 f823 	bl	58fc <__gnu_Unwind_Save_VFP_D>
    58b6:	46b8      	mov	r8, r7
    58b8:	6ba9      	ldr	r1, [r5, #56]	; 0x38
    58ba:	9b01      	ldr	r3, [sp, #4]
    58bc:	2f00      	cmp	r7, #0
    58be:	f47f af6d 	bne.w	579c <_Unwind_VRS_Pop+0x150>
    58c2:	460a      	mov	r2, r1
    58c4:	e709      	b.n	56da <_Unwind_VRS_Pop+0x8e>
    58c6:	460a      	mov	r2, r1
    58c8:	e78d      	b.n	57e6 <_Unwind_VRS_Pop+0x19a>
    58ca:	bf00      	nop

000058cc <__restore_core_regs>:
    58cc:	f100 0134 	add.w	r1, r0, #52	; 0x34
    58d0:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
    58d4:	469c      	mov	ip, r3
    58d6:	46a6      	mov	lr, r4
    58d8:	f84c 5d04 	str.w	r5, [ip, #-4]!
    58dc:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
    58e0:	46e5      	mov	sp, ip
    58e2:	bd00      	pop	{pc}

000058e4 <__gnu_Unwind_Restore_VFP>:
    58e4:	ec90 0b21 	fldmiax	r0, {d0-d15}	;@ Deprecated
    58e8:	4770      	bx	lr
    58ea:	bf00      	nop

000058ec <__gnu_Unwind_Save_VFP>:
    58ec:	ec80 0b21 	fstmiax	r0, {d0-d15}	;@ Deprecated
    58f0:	4770      	bx	lr
    58f2:	bf00      	nop

000058f4 <__gnu_Unwind_Restore_VFP_D>:
    58f4:	ec90 0b20 	vldmia	r0, {d0-d15}
    58f8:	4770      	bx	lr
    58fa:	bf00      	nop

000058fc <__gnu_Unwind_Save_VFP_D>:
    58fc:	ec80 0b20 	vstmia	r0, {d0-d15}
    5900:	4770      	bx	lr
    5902:	bf00      	nop

00005904 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
    5904:	ecd0 0b20 	vldmia	r0, {d16-d31}
    5908:	4770      	bx	lr
    590a:	bf00      	nop

0000590c <__gnu_Unwind_Save_VFP_D_16_to_31>:
    590c:	ecc0 0b20 	vstmia	r0, {d16-d31}
    5910:	4770      	bx	lr
    5912:	bf00      	nop

00005914 <__gnu_Unwind_Restore_WMMXD>:
    5914:	ecf0 0102 	ldfe	f0, [r0], #8
    5918:	ecf0 1102 	ldfe	f1, [r0], #8
    591c:	ecf0 2102 	ldfe	f2, [r0], #8
    5920:	ecf0 3102 	ldfe	f3, [r0], #8
    5924:	ecf0 4102 	ldfe	f4, [r0], #8
    5928:	ecf0 5102 	ldfe	f5, [r0], #8
    592c:	ecf0 6102 	ldfe	f6, [r0], #8
    5930:	ecf0 7102 	ldfe	f7, [r0], #8
    5934:	ecf0 8102 	ldfp	f0, [r0], #8
    5938:	ecf0 9102 	ldfp	f1, [r0], #8
    593c:	ecf0 a102 	ldfp	f2, [r0], #8
    5940:	ecf0 b102 	ldfp	f3, [r0], #8
    5944:	ecf0 c102 	ldfp	f4, [r0], #8
    5948:	ecf0 d102 	ldfp	f5, [r0], #8
    594c:	ecf0 e102 	ldfp	f6, [r0], #8
    5950:	ecf0 f102 	ldfp	f7, [r0], #8
    5954:	4770      	bx	lr
    5956:	bf00      	nop

00005958 <__gnu_Unwind_Save_WMMXD>:
    5958:	ece0 0102 	stfe	f0, [r0], #8
    595c:	ece0 1102 	stfe	f1, [r0], #8
    5960:	ece0 2102 	stfe	f2, [r0], #8
    5964:	ece0 3102 	stfe	f3, [r0], #8
    5968:	ece0 4102 	stfe	f4, [r0], #8
    596c:	ece0 5102 	stfe	f5, [r0], #8
    5970:	ece0 6102 	stfe	f6, [r0], #8
    5974:	ece0 7102 	stfe	f7, [r0], #8
    5978:	ece0 8102 	stfp	f0, [r0], #8
    597c:	ece0 9102 	stfp	f1, [r0], #8
    5980:	ece0 a102 	stfp	f2, [r0], #8
    5984:	ece0 b102 	stfp	f3, [r0], #8
    5988:	ece0 c102 	stfp	f4, [r0], #8
    598c:	ece0 d102 	stfp	f5, [r0], #8
    5990:	ece0 e102 	stfp	f6, [r0], #8
    5994:	ece0 f102 	stfp	f7, [r0], #8
    5998:	4770      	bx	lr
    599a:	bf00      	nop

0000599c <__gnu_Unwind_Restore_WMMXC>:
    599c:	fcb0 8101 	ldc2	1, cr8, [r0], #4
    59a0:	fcb0 9101 	ldc2	1, cr9, [r0], #4
    59a4:	fcb0 a101 	ldc2	1, cr10, [r0], #4
    59a8:	fcb0 b101 	ldc2	1, cr11, [r0], #4
    59ac:	4770      	bx	lr
    59ae:	bf00      	nop

000059b0 <__gnu_Unwind_Save_WMMXC>:
    59b0:	fca0 8101 	stc2	1, cr8, [r0], #4
    59b4:	fca0 9101 	stc2	1, cr9, [r0], #4
    59b8:	fca0 a101 	stc2	1, cr10, [r0], #4
    59bc:	fca0 b101 	stc2	1, cr11, [r0], #4
    59c0:	4770      	bx	lr
    59c2:	bf00      	nop

000059c4 <_Unwind_RaiseException>:
    59c4:	46ec      	mov	ip, sp
    59c6:	b500      	push	{lr}
    59c8:	e92d 5000 	stmdb	sp!, {ip, lr}
    59cc:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    59d0:	f04f 0300 	mov.w	r3, #0
    59d4:	e92d 000c 	stmdb	sp!, {r2, r3}
    59d8:	a901      	add	r1, sp, #4
    59da:	f7ff fbdd 	bl	5198 <__gnu_Unwind_RaiseException>
    59de:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    59e2:	b012      	add	sp, #72	; 0x48
    59e4:	4770      	bx	lr
    59e6:	bf00      	nop

000059e8 <_Unwind_Resume>:
    59e8:	46ec      	mov	ip, sp
    59ea:	b500      	push	{lr}
    59ec:	e92d 5000 	stmdb	sp!, {ip, lr}
    59f0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    59f4:	f04f 0300 	mov.w	r3, #0
    59f8:	e92d 000c 	stmdb	sp!, {r2, r3}
    59fc:	a901      	add	r1, sp, #4
    59fe:	f7ff fc05 	bl	520c <__gnu_Unwind_Resume>
    5a02:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    5a06:	b012      	add	sp, #72	; 0x48
    5a08:	4770      	bx	lr
    5a0a:	bf00      	nop

00005a0c <_Unwind_Resume_or_Rethrow>:
    5a0c:	46ec      	mov	ip, sp
    5a0e:	b500      	push	{lr}
    5a10:	e92d 5000 	stmdb	sp!, {ip, lr}
    5a14:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    5a18:	f04f 0300 	mov.w	r3, #0
    5a1c:	e92d 000c 	stmdb	sp!, {r2, r3}
    5a20:	a901      	add	r1, sp, #4
    5a22:	f7ff fc15 	bl	5250 <__gnu_Unwind_Resume_or_Rethrow>
    5a26:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    5a2a:	b012      	add	sp, #72	; 0x48
    5a2c:	4770      	bx	lr
    5a2e:	bf00      	nop

00005a30 <_Unwind_ForcedUnwind>:
    5a30:	46ec      	mov	ip, sp
    5a32:	b500      	push	{lr}
    5a34:	e92d 5000 	stmdb	sp!, {ip, lr}
    5a38:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    5a3c:	f04f 0300 	mov.w	r3, #0
    5a40:	e92d 000c 	stmdb	sp!, {r2, r3}
    5a44:	ab01      	add	r3, sp, #4
    5a46:	f7ff fbd7 	bl	51f8 <__gnu_Unwind_ForcedUnwind>
    5a4a:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    5a4e:	b012      	add	sp, #72	; 0x48
    5a50:	4770      	bx	lr
    5a52:	bf00      	nop

00005a54 <_Unwind_Backtrace>:
    5a54:	46ec      	mov	ip, sp
    5a56:	b500      	push	{lr}
    5a58:	e92d 5000 	stmdb	sp!, {ip, lr}
    5a5c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
    5a60:	f04f 0300 	mov.w	r3, #0
    5a64:	e92d 000c 	stmdb	sp!, {r2, r3}
    5a68:	aa01      	add	r2, sp, #4
    5a6a:	f7ff fc47 	bl	52fc <__gnu_Unwind_Backtrace>
    5a6e:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
    5a72:	b012      	add	sp, #72	; 0x48
    5a74:	4770      	bx	lr
    5a76:	bf00      	nop

00005a78 <next_unwind_byte>:
    5a78:	7a02      	ldrb	r2, [r0, #8]
    5a7a:	b982      	cbnz	r2, 5a9e <next_unwind_byte+0x26>
    5a7c:	7a43      	ldrb	r3, [r0, #9]
    5a7e:	b1ab      	cbz	r3, 5aac <next_unwind_byte+0x34>
    5a80:	6842      	ldr	r2, [r0, #4]
    5a82:	3b01      	subs	r3, #1
    5a84:	b410      	push	{r4}
    5a86:	7243      	strb	r3, [r0, #9]
    5a88:	6813      	ldr	r3, [r2, #0]
    5a8a:	2103      	movs	r1, #3
    5a8c:	1d14      	adds	r4, r2, #4
    5a8e:	7201      	strb	r1, [r0, #8]
    5a90:	021a      	lsls	r2, r3, #8
    5a92:	6044      	str	r4, [r0, #4]
    5a94:	6002      	str	r2, [r0, #0]
    5a96:	f85d 4b04 	ldr.w	r4, [sp], #4
    5a9a:	0e18      	lsrs	r0, r3, #24
    5a9c:	4770      	bx	lr
    5a9e:	6803      	ldr	r3, [r0, #0]
    5aa0:	3a01      	subs	r2, #1
    5aa2:	7202      	strb	r2, [r0, #8]
    5aa4:	021a      	lsls	r2, r3, #8
    5aa6:	6002      	str	r2, [r0, #0]
    5aa8:	0e18      	lsrs	r0, r3, #24
    5aaa:	4770      	bx	lr
    5aac:	20b0      	movs	r0, #176	; 0xb0
    5aae:	4770      	bx	lr

00005ab0 <_Unwind_GetGR.constprop.0>:
    5ab0:	b500      	push	{lr}
    5ab2:	b085      	sub	sp, #20
    5ab4:	aa03      	add	r2, sp, #12
    5ab6:	2300      	movs	r3, #0
    5ab8:	9200      	str	r2, [sp, #0]
    5aba:	4619      	mov	r1, r3
    5abc:	220c      	movs	r2, #12
    5abe:	f7ff fbd7 	bl	5270 <_Unwind_VRS_Get>
    5ac2:	9803      	ldr	r0, [sp, #12]
    5ac4:	b005      	add	sp, #20
    5ac6:	f85d fb04 	ldr.w	pc, [sp], #4
    5aca:	bf00      	nop

00005acc <unwind_UCB_from_context>:
    5acc:	e7f0      	b.n	5ab0 <_Unwind_GetGR.constprop.0>
    5ace:	bf00      	nop

00005ad0 <__gnu_unwind_execute>:
    5ad0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    5ad4:	4605      	mov	r5, r0
    5ad6:	b085      	sub	sp, #20
    5ad8:	460e      	mov	r6, r1
    5ada:	f04f 0800 	mov.w	r8, #0
    5ade:	4630      	mov	r0, r6
    5ae0:	f7ff ffca 	bl	5a78 <next_unwind_byte>
    5ae4:	28b0      	cmp	r0, #176	; 0xb0
    5ae6:	4604      	mov	r4, r0
    5ae8:	f000 80b1 	beq.w	5c4e <__gnu_unwind_execute+0x17e>
    5aec:	0607      	lsls	r7, r0, #24
    5aee:	d520      	bpl.n	5b32 <__gnu_unwind_execute+0x62>
    5af0:	f000 03f0 	and.w	r3, r0, #240	; 0xf0
    5af4:	2b80      	cmp	r3, #128	; 0x80
    5af6:	d065      	beq.n	5bc4 <__gnu_unwind_execute+0xf4>
    5af8:	2b90      	cmp	r3, #144	; 0x90
    5afa:	d036      	beq.n	5b6a <__gnu_unwind_execute+0x9a>
    5afc:	2ba0      	cmp	r3, #160	; 0xa0
    5afe:	d078      	beq.n	5bf2 <__gnu_unwind_execute+0x122>
    5b00:	2bb0      	cmp	r3, #176	; 0xb0
    5b02:	d047      	beq.n	5b94 <__gnu_unwind_execute+0xc4>
    5b04:	2bc0      	cmp	r3, #192	; 0xc0
    5b06:	f000 808a 	beq.w	5c1e <__gnu_unwind_execute+0x14e>
    5b0a:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    5b0e:	2bd0      	cmp	r3, #208	; 0xd0
    5b10:	d10b      	bne.n	5b2a <__gnu_unwind_execute+0x5a>
    5b12:	f000 0207 	and.w	r2, r0, #7
    5b16:	3201      	adds	r2, #1
    5b18:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    5b1c:	2305      	movs	r3, #5
    5b1e:	2101      	movs	r1, #1
    5b20:	4628      	mov	r0, r5
    5b22:	f7ff fd93 	bl	564c <_Unwind_VRS_Pop>
    5b26:	2800      	cmp	r0, #0
    5b28:	d0d9      	beq.n	5ade <__gnu_unwind_execute+0xe>
    5b2a:	2009      	movs	r0, #9
    5b2c:	b005      	add	sp, #20
    5b2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5b32:	f10d 090c 	add.w	r9, sp, #12
    5b36:	2300      	movs	r3, #0
    5b38:	4619      	mov	r1, r3
    5b3a:	0087      	lsls	r7, r0, #2
    5b3c:	f8cd 9000 	str.w	r9, [sp]
    5b40:	220d      	movs	r2, #13
    5b42:	4628      	mov	r0, r5
    5b44:	f7ff fb94 	bl	5270 <_Unwind_VRS_Get>
    5b48:	b2ff      	uxtb	r7, r7
    5b4a:	9b03      	ldr	r3, [sp, #12]
    5b4c:	f8cd 9000 	str.w	r9, [sp]
    5b50:	3704      	adds	r7, #4
    5b52:	0660      	lsls	r0, r4, #25
    5b54:	bf4c      	ite	mi
    5b56:	1bdf      	submi	r7, r3, r7
    5b58:	18ff      	addpl	r7, r7, r3
    5b5a:	2300      	movs	r3, #0
    5b5c:	4619      	mov	r1, r3
    5b5e:	220d      	movs	r2, #13
    5b60:	4628      	mov	r0, r5
    5b62:	9703      	str	r7, [sp, #12]
    5b64:	f7ff fba6 	bl	52b4 <_Unwind_VRS_Set>
    5b68:	e7b9      	b.n	5ade <__gnu_unwind_execute+0xe>
    5b6a:	f000 030d 	and.w	r3, r0, #13
    5b6e:	2b0d      	cmp	r3, #13
    5b70:	d0db      	beq.n	5b2a <__gnu_unwind_execute+0x5a>
    5b72:	af03      	add	r7, sp, #12
    5b74:	2300      	movs	r3, #0
    5b76:	f000 020f 	and.w	r2, r0, #15
    5b7a:	4619      	mov	r1, r3
    5b7c:	9700      	str	r7, [sp, #0]
    5b7e:	4628      	mov	r0, r5
    5b80:	f7ff fb76 	bl	5270 <_Unwind_VRS_Get>
    5b84:	2300      	movs	r3, #0
    5b86:	9700      	str	r7, [sp, #0]
    5b88:	4619      	mov	r1, r3
    5b8a:	220d      	movs	r2, #13
    5b8c:	4628      	mov	r0, r5
    5b8e:	f7ff fb91 	bl	52b4 <_Unwind_VRS_Set>
    5b92:	e7a4      	b.n	5ade <__gnu_unwind_execute+0xe>
    5b94:	28b1      	cmp	r0, #177	; 0xb1
    5b96:	d05f      	beq.n	5c58 <__gnu_unwind_execute+0x188>
    5b98:	28b2      	cmp	r0, #178	; 0xb2
    5b9a:	f000 80cc 	beq.w	5d36 <__gnu_unwind_execute+0x266>
    5b9e:	28b3      	cmp	r0, #179	; 0xb3
    5ba0:	d07e      	beq.n	5ca0 <__gnu_unwind_execute+0x1d0>
    5ba2:	f000 03fc 	and.w	r3, r0, #252	; 0xfc
    5ba6:	2bb4      	cmp	r3, #180	; 0xb4
    5ba8:	d0bf      	beq.n	5b2a <__gnu_unwind_execute+0x5a>
    5baa:	f000 0207 	and.w	r2, r0, #7
    5bae:	3201      	adds	r2, #1
    5bb0:	2301      	movs	r3, #1
    5bb2:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
    5bb6:	4619      	mov	r1, r3
    5bb8:	4628      	mov	r0, r5
    5bba:	f7ff fd47 	bl	564c <_Unwind_VRS_Pop>
    5bbe:	2800      	cmp	r0, #0
    5bc0:	d08d      	beq.n	5ade <__gnu_unwind_execute+0xe>
    5bc2:	e7b2      	b.n	5b2a <__gnu_unwind_execute+0x5a>
    5bc4:	4630      	mov	r0, r6
    5bc6:	f7ff ff57 	bl	5a78 <next_unwind_byte>
    5bca:	0224      	lsls	r4, r4, #8
    5bcc:	4304      	orrs	r4, r0
    5bce:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
    5bd2:	d0aa      	beq.n	5b2a <__gnu_unwind_execute+0x5a>
    5bd4:	0124      	lsls	r4, r4, #4
    5bd6:	2300      	movs	r3, #0
    5bd8:	b2a2      	uxth	r2, r4
    5bda:	4619      	mov	r1, r3
    5bdc:	4628      	mov	r0, r5
    5bde:	f7ff fd35 	bl	564c <_Unwind_VRS_Pop>
    5be2:	2800      	cmp	r0, #0
    5be4:	d1a1      	bne.n	5b2a <__gnu_unwind_execute+0x5a>
    5be6:	f414 4f00 	tst.w	r4, #32768	; 0x8000
    5bea:	bf18      	it	ne
    5bec:	f04f 0801 	movne.w	r8, #1
    5bf0:	e775      	b.n	5ade <__gnu_unwind_execute+0xe>
    5bf2:	43c2      	mvns	r2, r0
    5bf4:	f002 0307 	and.w	r3, r2, #7
    5bf8:	f44f 627f 	mov.w	r2, #4080	; 0xff0
    5bfc:	411a      	asrs	r2, r3
    5bfe:	0701      	lsls	r1, r0, #28
    5c00:	f402 627f 	and.w	r2, r2, #4080	; 0xff0
    5c04:	f04f 0300 	mov.w	r3, #0
    5c08:	bf48      	it	mi
    5c0a:	f442 4280 	orrmi.w	r2, r2, #16384	; 0x4000
    5c0e:	4619      	mov	r1, r3
    5c10:	4628      	mov	r0, r5
    5c12:	f7ff fd1b 	bl	564c <_Unwind_VRS_Pop>
    5c16:	2800      	cmp	r0, #0
    5c18:	f43f af61 	beq.w	5ade <__gnu_unwind_execute+0xe>
    5c1c:	e785      	b.n	5b2a <__gnu_unwind_execute+0x5a>
    5c1e:	28c6      	cmp	r0, #198	; 0xc6
    5c20:	d051      	beq.n	5cc6 <__gnu_unwind_execute+0x1f6>
    5c22:	28c7      	cmp	r0, #199	; 0xc7
    5c24:	d05a      	beq.n	5cdc <__gnu_unwind_execute+0x20c>
    5c26:	f000 03f8 	and.w	r3, r0, #248	; 0xf8
    5c2a:	2bc0      	cmp	r3, #192	; 0xc0
    5c2c:	d069      	beq.n	5d02 <__gnu_unwind_execute+0x232>
    5c2e:	28c8      	cmp	r0, #200	; 0xc8
    5c30:	d075      	beq.n	5d1e <__gnu_unwind_execute+0x24e>
    5c32:	28c9      	cmp	r0, #201	; 0xc9
    5c34:	f47f af79 	bne.w	5b2a <__gnu_unwind_execute+0x5a>
    5c38:	4630      	mov	r0, r6
    5c3a:	f7ff ff1d 	bl	5a78 <next_unwind_byte>
    5c3e:	0302      	lsls	r2, r0, #12
    5c40:	f000 000f 	and.w	r0, r0, #15
    5c44:	f402 2270 	and.w	r2, r2, #983040	; 0xf0000
    5c48:	3001      	adds	r0, #1
    5c4a:	4302      	orrs	r2, r0
    5c4c:	e766      	b.n	5b1c <__gnu_unwind_execute+0x4c>
    5c4e:	f1b8 0f00 	cmp.w	r8, #0
    5c52:	d014      	beq.n	5c7e <__gnu_unwind_execute+0x1ae>
    5c54:	2000      	movs	r0, #0
    5c56:	e769      	b.n	5b2c <__gnu_unwind_execute+0x5c>
    5c58:	4630      	mov	r0, r6
    5c5a:	f7ff ff0d 	bl	5a78 <next_unwind_byte>
    5c5e:	2800      	cmp	r0, #0
    5c60:	f43f af63 	beq.w	5b2a <__gnu_unwind_execute+0x5a>
    5c64:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    5c68:	f47f af5f 	bne.w	5b2a <__gnu_unwind_execute+0x5a>
    5c6c:	4602      	mov	r2, r0
    5c6e:	4619      	mov	r1, r3
    5c70:	4628      	mov	r0, r5
    5c72:	f7ff fceb 	bl	564c <_Unwind_VRS_Pop>
    5c76:	2800      	cmp	r0, #0
    5c78:	f43f af31 	beq.w	5ade <__gnu_unwind_execute+0xe>
    5c7c:	e755      	b.n	5b2a <__gnu_unwind_execute+0x5a>
    5c7e:	ac03      	add	r4, sp, #12
    5c80:	4643      	mov	r3, r8
    5c82:	220e      	movs	r2, #14
    5c84:	4641      	mov	r1, r8
    5c86:	9400      	str	r4, [sp, #0]
    5c88:	4628      	mov	r0, r5
    5c8a:	f7ff faf1 	bl	5270 <_Unwind_VRS_Get>
    5c8e:	9400      	str	r4, [sp, #0]
    5c90:	4628      	mov	r0, r5
    5c92:	4643      	mov	r3, r8
    5c94:	220f      	movs	r2, #15
    5c96:	4641      	mov	r1, r8
    5c98:	f7ff fb0c 	bl	52b4 <_Unwind_VRS_Set>
    5c9c:	4640      	mov	r0, r8
    5c9e:	e745      	b.n	5b2c <__gnu_unwind_execute+0x5c>
    5ca0:	4630      	mov	r0, r6
    5ca2:	f7ff fee9 	bl	5a78 <next_unwind_byte>
    5ca6:	0301      	lsls	r1, r0, #12
    5ca8:	f000 000f 	and.w	r0, r0, #15
    5cac:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
    5cb0:	1c42      	adds	r2, r0, #1
    5cb2:	2301      	movs	r3, #1
    5cb4:	430a      	orrs	r2, r1
    5cb6:	4628      	mov	r0, r5
    5cb8:	4619      	mov	r1, r3
    5cba:	f7ff fcc7 	bl	564c <_Unwind_VRS_Pop>
    5cbe:	2800      	cmp	r0, #0
    5cc0:	f43f af0d 	beq.w	5ade <__gnu_unwind_execute+0xe>
    5cc4:	e731      	b.n	5b2a <__gnu_unwind_execute+0x5a>
    5cc6:	4630      	mov	r0, r6
    5cc8:	f7ff fed6 	bl	5a78 <next_unwind_byte>
    5ccc:	0301      	lsls	r1, r0, #12
    5cce:	f000 000f 	and.w	r0, r0, #15
    5cd2:	f401 2170 	and.w	r1, r1, #983040	; 0xf0000
    5cd6:	1c42      	adds	r2, r0, #1
    5cd8:	2303      	movs	r3, #3
    5cda:	e7eb      	b.n	5cb4 <__gnu_unwind_execute+0x1e4>
    5cdc:	4630      	mov	r0, r6
    5cde:	f7ff fecb 	bl	5a78 <next_unwind_byte>
    5ce2:	4602      	mov	r2, r0
    5ce4:	2800      	cmp	r0, #0
    5ce6:	f43f af20 	beq.w	5b2a <__gnu_unwind_execute+0x5a>
    5cea:	f010 03f0 	ands.w	r3, r0, #240	; 0xf0
    5cee:	f47f af1c 	bne.w	5b2a <__gnu_unwind_execute+0x5a>
    5cf2:	2104      	movs	r1, #4
    5cf4:	4628      	mov	r0, r5
    5cf6:	f7ff fca9 	bl	564c <_Unwind_VRS_Pop>
    5cfa:	2800      	cmp	r0, #0
    5cfc:	f43f aeef 	beq.w	5ade <__gnu_unwind_execute+0xe>
    5d00:	e713      	b.n	5b2a <__gnu_unwind_execute+0x5a>
    5d02:	f000 020f 	and.w	r2, r0, #15
    5d06:	3201      	adds	r2, #1
    5d08:	2303      	movs	r3, #3
    5d0a:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
    5d0e:	4619      	mov	r1, r3
    5d10:	4628      	mov	r0, r5
    5d12:	f7ff fc9b 	bl	564c <_Unwind_VRS_Pop>
    5d16:	2800      	cmp	r0, #0
    5d18:	f43f aee1 	beq.w	5ade <__gnu_unwind_execute+0xe>
    5d1c:	e705      	b.n	5b2a <__gnu_unwind_execute+0x5a>
    5d1e:	4630      	mov	r0, r6
    5d20:	f7ff feaa 	bl	5a78 <next_unwind_byte>
    5d24:	f000 02f0 	and.w	r2, r0, #240	; 0xf0
    5d28:	f000 030f 	and.w	r3, r0, #15
    5d2c:	3210      	adds	r2, #16
    5d2e:	3301      	adds	r3, #1
    5d30:	ea43 3202 	orr.w	r2, r3, r2, lsl #12
    5d34:	e6f2      	b.n	5b1c <__gnu_unwind_execute+0x4c>
    5d36:	2300      	movs	r3, #0
    5d38:	f10d 090c 	add.w	r9, sp, #12
    5d3c:	220d      	movs	r2, #13
    5d3e:	4619      	mov	r1, r3
    5d40:	f8cd 9000 	str.w	r9, [sp]
    5d44:	4628      	mov	r0, r5
    5d46:	f7ff fa93 	bl	5270 <_Unwind_VRS_Get>
    5d4a:	4630      	mov	r0, r6
    5d4c:	f7ff fe94 	bl	5a78 <next_unwind_byte>
    5d50:	0602      	lsls	r2, r0, #24
    5d52:	f04f 0702 	mov.w	r7, #2
    5d56:	d50c      	bpl.n	5d72 <__gnu_unwind_execute+0x2a2>
    5d58:	9b03      	ldr	r3, [sp, #12]
    5d5a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
    5d5e:	40b8      	lsls	r0, r7
    5d60:	4403      	add	r3, r0
    5d62:	4630      	mov	r0, r6
    5d64:	9303      	str	r3, [sp, #12]
    5d66:	f7ff fe87 	bl	5a78 <next_unwind_byte>
    5d6a:	0603      	lsls	r3, r0, #24
    5d6c:	f107 0707 	add.w	r7, r7, #7
    5d70:	d4f2      	bmi.n	5d58 <__gnu_unwind_execute+0x288>
    5d72:	9b03      	ldr	r3, [sp, #12]
    5d74:	f8cd 9000 	str.w	r9, [sp]
    5d78:	f000 047f 	and.w	r4, r0, #127	; 0x7f
    5d7c:	f503 7201 	add.w	r2, r3, #516	; 0x204
    5d80:	40bc      	lsls	r4, r7
    5d82:	2300      	movs	r3, #0
    5d84:	4414      	add	r4, r2
    5d86:	4619      	mov	r1, r3
    5d88:	220d      	movs	r2, #13
    5d8a:	4628      	mov	r0, r5
    5d8c:	9403      	str	r4, [sp, #12]
    5d8e:	f7ff fa91 	bl	52b4 <_Unwind_VRS_Set>
    5d92:	e6a4      	b.n	5ade <__gnu_unwind_execute+0xe>

00005d94 <__gnu_unwind_frame>:
    5d94:	b510      	push	{r4, lr}
    5d96:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    5d98:	b084      	sub	sp, #16
    5d9a:	685a      	ldr	r2, [r3, #4]
    5d9c:	2003      	movs	r0, #3
    5d9e:	f88d 000c 	strb.w	r0, [sp, #12]
    5da2:	79dc      	ldrb	r4, [r3, #7]
    5da4:	f88d 400d 	strb.w	r4, [sp, #13]
    5da8:	0212      	lsls	r2, r2, #8
    5daa:	3308      	adds	r3, #8
    5dac:	4608      	mov	r0, r1
    5dae:	a901      	add	r1, sp, #4
    5db0:	9201      	str	r2, [sp, #4]
    5db2:	9302      	str	r3, [sp, #8]
    5db4:	f7ff fe8c 	bl	5ad0 <__gnu_unwind_execute>
    5db8:	b004      	add	sp, #16
    5dba:	bd10      	pop	{r4, pc}

00005dbc <_Unwind_GetRegionStart>:
    5dbc:	b508      	push	{r3, lr}
    5dbe:	f7ff fe85 	bl	5acc <unwind_UCB_from_context>
    5dc2:	6c80      	ldr	r0, [r0, #72]	; 0x48
    5dc4:	bd08      	pop	{r3, pc}
    5dc6:	bf00      	nop

00005dc8 <_Unwind_GetLanguageSpecificData>:
    5dc8:	b508      	push	{r3, lr}
    5dca:	f7ff fe7f 	bl	5acc <unwind_UCB_from_context>
    5dce:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
    5dd0:	79c3      	ldrb	r3, [r0, #7]
    5dd2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    5dd6:	3008      	adds	r0, #8
    5dd8:	bd08      	pop	{r3, pc}
    5dda:	bf00      	nop

00005ddc <_Unwind_GetDataRelBase>:
    5ddc:	b508      	push	{r3, lr}
    5dde:	f000 f807 	bl	5df0 <abort>
    5de2:	bf00      	nop

00005de4 <_Unwind_GetTextRelBase>:
    5de4:	b508      	push	{r3, lr}
    5de6:	f7ff fff9 	bl	5ddc <_Unwind_GetDataRelBase>
    5dea:	bf00      	nop

00005dec <__aeabi_idiv0>:
    5dec:	4770      	bx	lr
    5dee:	bf00      	nop

00005df0 <abort>:
    5df0:	b508      	push	{r3, lr}
    5df2:	2006      	movs	r0, #6
    5df4:	f000 f864 	bl	5ec0 <raise>
    5df8:	2001      	movs	r0, #1
    5dfa:	f7fb fd5f 	bl	18bc <_exit>
    5dfe:	Address 0x0000000000005dfe is out of bounds.


00005e00 <__libc_init_array>:
    5e00:	b570      	push	{r4, r5, r6, lr}
    5e02:	4e0d      	ldr	r6, [pc, #52]	; (5e38 <__libc_init_array+0x38>)
    5e04:	4c0d      	ldr	r4, [pc, #52]	; (5e3c <__libc_init_array+0x3c>)
    5e06:	1ba4      	subs	r4, r4, r6
    5e08:	10a4      	asrs	r4, r4, #2
    5e0a:	2500      	movs	r5, #0
    5e0c:	42a5      	cmp	r5, r4
    5e0e:	d109      	bne.n	5e24 <__libc_init_array+0x24>
    5e10:	4e0b      	ldr	r6, [pc, #44]	; (5e40 <__libc_init_array+0x40>)
    5e12:	4c0c      	ldr	r4, [pc, #48]	; (5e44 <__libc_init_array+0x44>)
    5e14:	f7fa fa74 	bl	300 <_init>
    5e18:	1ba4      	subs	r4, r4, r6
    5e1a:	10a4      	asrs	r4, r4, #2
    5e1c:	2500      	movs	r5, #0
    5e1e:	42a5      	cmp	r5, r4
    5e20:	d105      	bne.n	5e2e <__libc_init_array+0x2e>
    5e22:	bd70      	pop	{r4, r5, r6, pc}
    5e24:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    5e28:	4798      	blx	r3
    5e2a:	3501      	adds	r5, #1
    5e2c:	e7ee      	b.n	5e0c <__libc_init_array+0xc>
    5e2e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    5e32:	4798      	blx	r3
    5e34:	3501      	adds	r5, #1
    5e36:	e7f2      	b.n	5e1e <__libc_init_array+0x1e>
    5e38:	0000030c 	.word	0x0000030c
    5e3c:	0000030c 	.word	0x0000030c
    5e40:	0000030c 	.word	0x0000030c
    5e44:	0000031c 	.word	0x0000031c

00005e48 <memcpy>:
    5e48:	b510      	push	{r4, lr}
    5e4a:	1e43      	subs	r3, r0, #1
    5e4c:	440a      	add	r2, r1
    5e4e:	4291      	cmp	r1, r2
    5e50:	d100      	bne.n	5e54 <memcpy+0xc>
    5e52:	bd10      	pop	{r4, pc}
    5e54:	f811 4b01 	ldrb.w	r4, [r1], #1
    5e58:	f803 4f01 	strb.w	r4, [r3, #1]!
    5e5c:	e7f7      	b.n	5e4e <memcpy+0x6>

00005e5e <memset>:
    5e5e:	4402      	add	r2, r0
    5e60:	4603      	mov	r3, r0
    5e62:	4293      	cmp	r3, r2
    5e64:	d100      	bne.n	5e68 <memset+0xa>
    5e66:	4770      	bx	lr
    5e68:	f803 1b01 	strb.w	r1, [r3], #1
    5e6c:	e7f9      	b.n	5e62 <memset+0x4>

00005e6e <_raise_r>:
    5e6e:	291f      	cmp	r1, #31
    5e70:	b538      	push	{r3, r4, r5, lr}
    5e72:	4604      	mov	r4, r0
    5e74:	460d      	mov	r5, r1
    5e76:	d904      	bls.n	5e82 <_raise_r+0x14>
    5e78:	2316      	movs	r3, #22
    5e7a:	6003      	str	r3, [r0, #0]
    5e7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    5e80:	bd38      	pop	{r3, r4, r5, pc}
    5e82:	6c42      	ldr	r2, [r0, #68]	; 0x44
    5e84:	b112      	cbz	r2, 5e8c <_raise_r+0x1e>
    5e86:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    5e8a:	b94b      	cbnz	r3, 5ea0 <_raise_r+0x32>
    5e8c:	4620      	mov	r0, r4
    5e8e:	f000 f831 	bl	5ef4 <_getpid_r>
    5e92:	462a      	mov	r2, r5
    5e94:	4601      	mov	r1, r0
    5e96:	4620      	mov	r0, r4
    5e98:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5e9c:	f000 b818 	b.w	5ed0 <_kill_r>
    5ea0:	2b01      	cmp	r3, #1
    5ea2:	d00a      	beq.n	5eba <_raise_r+0x4c>
    5ea4:	1c59      	adds	r1, r3, #1
    5ea6:	d103      	bne.n	5eb0 <_raise_r+0x42>
    5ea8:	2316      	movs	r3, #22
    5eaa:	6003      	str	r3, [r0, #0]
    5eac:	2001      	movs	r0, #1
    5eae:	e7e7      	b.n	5e80 <_raise_r+0x12>
    5eb0:	2400      	movs	r4, #0
    5eb2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
    5eb6:	4628      	mov	r0, r5
    5eb8:	4798      	blx	r3
    5eba:	2000      	movs	r0, #0
    5ebc:	e7e0      	b.n	5e80 <_raise_r+0x12>
    5ebe:	Address 0x0000000000005ebe is out of bounds.


00005ec0 <raise>:
    5ec0:	4b02      	ldr	r3, [pc, #8]	; (5ecc <raise+0xc>)
    5ec2:	4601      	mov	r1, r0
    5ec4:	6818      	ldr	r0, [r3, #0]
    5ec6:	f7ff bfd2 	b.w	5e6e <_raise_r>
    5eca:	bf00      	nop
    5ecc:	1000006c 	.word	0x1000006c

00005ed0 <_kill_r>:
    5ed0:	b538      	push	{r3, r4, r5, lr}
    5ed2:	4c07      	ldr	r4, [pc, #28]	; (5ef0 <_kill_r+0x20>)
    5ed4:	2300      	movs	r3, #0
    5ed6:	4605      	mov	r5, r0
    5ed8:	4608      	mov	r0, r1
    5eda:	4611      	mov	r1, r2
    5edc:	6023      	str	r3, [r4, #0]
    5ede:	f7fb fcfb 	bl	18d8 <_kill>
    5ee2:	1c43      	adds	r3, r0, #1
    5ee4:	d102      	bne.n	5eec <_kill_r+0x1c>
    5ee6:	6823      	ldr	r3, [r4, #0]
    5ee8:	b103      	cbz	r3, 5eec <_kill_r+0x1c>
    5eea:	602b      	str	r3, [r5, #0]
    5eec:	bd38      	pop	{r3, r4, r5, pc}
    5eee:	bf00      	nop
    5ef0:	10000410 	.word	0x10000410

00005ef4 <_getpid_r>:
    5ef4:	f7fb bce8 	b.w	18c8 <_getpid>

00005ef8 <strlen>:
    5ef8:	4603      	mov	r3, r0
    5efa:	f813 2b01 	ldrb.w	r2, [r3], #1
    5efe:	2a00      	cmp	r2, #0
    5f00:	d1fb      	bne.n	5efa <strlen+0x2>
    5f02:	1a18      	subs	r0, r3, r0
    5f04:	3801      	subs	r0, #1
    5f06:	4770      	bx	lr

00005f08 <sjsu::lpc40xx::Pin::kFunction>:
    5f08:	0300 ffff                                   ....

00005f0c <sjsu::lpc40xx::Pin::kResistor>:
    5f0c:	0203 ffff                                   ....

00005f10 <sjsu::lpc40xx::Pin::kAnalogDigitalMode>:
    5f10:	0107 ffff                                   ....

00005f14 <sjsu::lpc40xx::Pin::kOpenDrain>:
    5f14:	010a ffff                                   ....

00005f18 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::file>:
    5f18:	6e69 6574 7272 7075 2e74 7068 0070 ffff     interrupt.hpp...
    5f28:	5b1b 3334 206d 4157 4e52 4e49 1b47 305b     .[43m WARNING.[0
    5f38:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    5f48:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    5f58:	333b 6d37 6f4e 6920 746e 7265 7572 7470     ;37mNo interrupt
    5f68:	7320 7265 6976 6563 7220 756f 6974 656e      service routine
    5f78:	6620 756f 646e 6620 726f 7420 6568 7620      found for the v
    5f88:	6365 6f74 2072 6425 2021 6944 6173 6c62     ector %d! Disabl
    5f98:	6e69 2067 5349 1b52 305b 0a6d 0000 0000     ing ISR.[0m.....
    5fa8:	5b1b 3334 206d 4157 4e52 4e49 1b47 305b     .[43m WARNING.[0
    5fb8:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    5fc8:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    5fd8:	333b 6d37 6f50 7472 2520 2064 6163 6e6e     ;37mPort %d cann
    5fe8:	746f 6220 2065 7375 6465 6620 726f 4520     ot be used for E
    5ff8:	7478 7265 616e 206c 6e49 6574 7272 7075     xternal Interrup
    6008:	7374 202e 654e 6465 7420 206f 7375 2065     ts. Need to use 
    6018:	5047 4f49 6f20 206e 6f50 7472 3020 6f20     GPIO on Port 0 o
    6028:	2072 2e32 5b1b 6d30 5b1b 6d30 000a 0000     r 2..[0m.[0m....
    6038:	5b1b 3334 206d 4157 4e52 4e49 1b47 305b     .[43m WARNING.[0
    6048:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    6058:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    6068:	333b 6d37 6445 6567 2520 2064 6163 6e6e     ;37mEdge %d cann
    6078:	746f 6220 2065 7375 6465 6620 726f 4520     ot be used for E
    6088:	7478 7265 616e 206c 6e49 6574 7272 7075     xternal Interrup
    6098:	7374 4e2e 6565 2064 6f74 7520 6573 6120     ts.Need to use a
    60a8:	7220 7369 6e69 2c67 6620 6c61 696c 676e      rising, falling
    60b8:	202c 726f 6220 746f 2068 6f63 666e 6769     , or both config
    60c8:	7275 7461 6f69 2e6e 5b1b 6d30 000a 0000     uration..[0m....
    60d8:	5b1b 3234 206d 2020 4920 464e 1b4f 305b     .[42m    INFO.[0
    60e8:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    60f8:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    6108:	333b 6d37 7277 7469 6e69 2067 6164 6174     ;37mwriting data
    6118:	7420 206f 5253 4d41 202c 645b 7461 2061      to SRAM, [data 
    6128:	3025 6238 6120 2074 6461 7264 7365 2073     %08b at address 
    6138:	3025 6238 1b5d 305b 0a6d 0000 5b1b 3234     %08b].[0m....[42
    6148:	206d 2020 4920 464e 1b4f 305b 393b 6d34     m    INFO.[0;94m
    6158:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
    6168:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
    6178:	6144 6174 5720 6f72 6574 7420 206f 5253     Data Wrote to SR
    6188:	4d41 6120 2074 6461 7264 7365 2073 3025     AM at address %0
    6198:	6238 5b1b 6d30 000a 5b1b 3234 206d 2020     8b.[0m...[42m   
    61a8:	4920 464e 1b4f 305b 393b 6d34 253a 3a73      INFO.[0;94m:%s:
    61b8:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    61c8:	256d 3e64 1b20 305b 333b 6d37 6572 6461     m%d> .[0;37mread
    61d8:	6e69 2067 6164 6174 6620 6f72 206d 5253     ing data from SR
    61e8:	4d41 202c 615b 6464 6572 7373 2520 3830     AM, [address %08
    61f8:	5d62 5b1b 6d30 000a 5b1b 3234 206d 2020     b].[0m...[42m   
    6208:	4920 464e 1b4f 305b 393b 6d34 253a 3a73      INFO.[0;94m:%s:
    6218:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    6228:	256d 3e64 1b20 305b 333b 6d37 6144 6174     m%d> .[0;37mData
    6238:	5220 6165 2064 6f74 5320 4152 204d 7369      Read to SRAM is
    6248:	253a 3830 1b62 305b 0a6d ff00               :%08b.[0m...

00006254 <sjsu::lpc40xx::Gpio::kInterruptController>:
    6254:	62cc 0000                                   .b..

00006258 <sjsu::lpc40xx::Gpio::ValidPortCheck() const::file>:
    6258:	7067 6f69 682e 7070 ff00 ffff               gpio.hpp....

00006264 <sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const::file>:
    6264:	7067 6f69 682e 7070 ff00 ffff               gpio.hpp....

00006270 <main::file>:
    6270:	616d 6e69 632e 7070 ff00 ffff               main.cpp....

0000627c <main::file>:
    627c:	616d 6e69 632e 7070 ff00 ffff               main.cpp....

00006288 <main::file>:
    6288:	616d 6e69 632e 7070 ff00 ffff               main.cpp....

00006294 <main::file>:
    6294:	616d 6e69 632e 7070 ff00 ffff               main.cpp....

000062a0 <vtable for sjsu::lpc40xx::Gpio>:
	...
    62a8:	07a5 0000 0825 0000 0899 0000 08dd 0000     ....%...........
    62b8:	091d 0000 0a7d 0000 0aab 0000               ....}.......

000062c4 <vtable for sjsu::cortex::InterruptController>:
	...
    62cc:	0729 0000 077d 0000                         )...}...

000062d4 <vtable for sjsu::lpc40xx::Pin>:
	...
    62dc:	044d 0000 0481 0000 04f1 0000 04b5 0000     M...............

000062ec <main::__PRETTY_FUNCTION__>:
    62ec:	6e69 2074 616d 6e69 2928 ff00               int main()..

000062f8 <sjsu::cortex::InterruptController::UnregisteredInterruptHandler()::__PRETTY_FUNCTION__>:
    62f8:	7473 7461 6369 7620 696f 2064 6a73 7573     static void sjsu
    6308:	3a3a 6f63 7472 7865 3a3a 6e49 6574 7272     ::cortex::Interr
    6318:	7075 4374 6e6f 7274 6c6f 656c 3a72 553a     uptController::U
    6328:	726e 6765 7369 6574 6572 4964 746e 7265     nregisteredInter
    6338:	7572 7470 6148 646e 656c 2872 0029 ffff     ruptHandler()...

00006348 <sjsu::lpc40xx::Gpio::ValidPortCheck() const::__PRETTY_FUNCTION__>:
    6348:	6f62 6c6f 7320 736a 3a75 6c3a 6370 3034     bool sjsu::lpc40
    6358:	7878 3a3a 7047 6f69 3a3a 6156 696c 5064     xx::Gpio::ValidP
    6368:	726f 4374 6568 6b63 2928 6320 6e6f 7473     ortCheck() const
    6378:	ff00 ffff                                   ....

0000637c <sjsu::lpc40xx::Gpio::SetInterruptEdge(sjsu::Gpio::Edge) const::__PRETTY_FUNCTION__>:
    637c:	6f76 6469 7320 736a 3a75 6c3a 6370 3034     void sjsu::lpc40
    638c:	7878 3a3a 7047 6f69 3a3a 6553 4974 746e     xx::Gpio::SetInt
    639c:	7265 7572 7470 6445 6567 7328 736a 3a75     erruptEdge(sjsu:
    63ac:	473a 6970 3a6f 453a 6764 2965 6320 6e6f     :Gpio::Edge) con
    63bc:	7473 ff00 6e69 6176 696c 0064 7061 6c70     st..invalid.appl
    63cc:	6369 7461 6f69 006e 6f68 7473 7420 7365     ication.host tes
    63dc:	0074 0000 2020 6425 2029 7830 3025 5838     t...  %d) 0x%08X
    63ec:	000a 0000 3020 2578 3830 0058 2020 6425     .... 0x%08X.  %d
    63fc:	2029 7830 7025 000a 520a 6e75 203a 6874     ) 0x%p...Run: th
    640c:	2065 6f66 6c6c 776f 6e69 2067 6f63 6d6d     e following comm
    641c:	6e61 2064 6e69 7920 756f 2072 7270 6a6f     and in your proj
    642c:	6365 2074 6964 6572 7463 726f 0079 0000     ect directory...
    643c:	0a0a 2020 5b1b 3b31 3733 006d 616d 656b     ..  .[1;37m.make
    644c:	7320 6174 6b63 7274 6361 2d65 7325 5420      stacktrace-%s T
    645c:	4152 4543 3d53 0022 3020 2578 0070 0000     RACES=". 0x%p...
    646c:	0a22 1b0a 305b 006d 6854 7369 7720 6c69     "...[0m.This wil
    647c:	206c 6572 6f70 7472 7420 6568 6620 6c69     l report the fil
    648c:	2065 6e61 2064 696c 656e 6e20 6d75 6562     e and line numbe
    649c:	2072 6874 7461 6c20 6465 7420 206f 6874     r that led to th
    64ac:	7369 6620 6e75 7463 6f69 206e 6562 6e69     is function bein
    64bc:	2067 6163 6c6c 6465 002e 0000 5b1b 3134     g called.....[41
    64cc:	436d 4952 4954 4143 1b4c 305b 393b 6d34     mCRITICAL.[0;94m
    64dc:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
    64ec:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
    64fc:	7341 6573 7472 6f69 206e 6146 6c69 7275     Assertion Failur
    650c:	2c65 4320 6e6f 6964 6974 6e6f 5420 7365     e, Condition Tes
    651c:	6574 3a64 2820 546b 7361 496b 646e 7865     ted: (kTaskIndex
    652c:	3c20 6b20 6154 6b73 6f43 6e75 2974 200a      < kTaskCount). 
    653c:	2020 2020 2020 2020 5420 6568 7420 7361              The tas
    654c:	206b 6e69 6564 2078 6873 756f 646c 6e20     k index should n
    655c:	746f 6520 6378 6565 2064 6874 2065 6174     ot exceed the ta
    656c:	6b73 6320 756f 746e 1b2e 305b 1b6d 305b     sk count..[0m.[0
    657c:	0a6d 0000 500a 6972 746e 6e69 2067 7453     m....Printing St
    658c:	6361 206b 7254 6361 3a65 000a 5b1b 3134     ack Trace:...[41
    659c:	436d 4952 4954 4143 1b4c 305b 393b 6d34     mCRITICAL.[0;94m
    65ac:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
    65bc:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
    65cc:	7341 6573 7472 6f69 206e 6146 6c69 7275     Assertion Failur
    65dc:	2c65 4320 6e6f 6964 6974 6e6f 5420 7365     e, Condition Tes
    65ec:	6574 3a64 2820 6174 6b73 502e 6572 7552     ted: (task.PreRu
    65fc:	286e 2929 200a 2020 2020 2020 2020 5020     n()).          P
    660c:	6572 7552 286e 2029 6166 6c69 6465 6620     reRun() failed f
    661c:	726f 7420 7361 3a6b 2520 2c73 7420 7265     or task: %s, ter
    662c:	696d 616e 6974 676e 7320 6863 6465 6c75     minating schedul
    663c:	7265 1b21 305b 1b6d 305b 0a6d 0000 0000     er!.[0m.[0m.....
    664c:	5b1b 3334 206d 4157 4e52 4e49 1b47 305b     .[43m WARNING.[0
    665c:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    666c:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    667c:	333b 6d37 6e41 6520 7272 726f 6f20 6363     ;37mAn error occ
    668c:	7275 6465 202c 6874 2065 6f66 6c6c 776f     ured, the follow
    669c:	6e69 2067 6174 6b73 7720 6c69 206c 6562     ing task will be
    66ac:	7320 7375 6570 646e 6465 203a 7325 5b1b      suspended: %s.[
    66bc:	6d30 5b1b 6d30 000a 5b1b 3134 436d 4952     0m.[0m...[41mCRI
    66cc:	4954 4143 1b4c 305b 393b 6d34 253a 3a73     TICAL.[0;94m:%s:
    66dc:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    66ec:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
    66fc:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
    670c:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
    671c:	2820 6174 6b73 3e2d 6547 4874 6e61 6c64      (task->GetHandl
    672c:	2865 2029 3d21 6e20 6c75 706c 7274 0a29     e() != nullptr).
    673c:	2020 2020 2020 2020 2020 6e55 6261 656c               Unable
    674c:	7420 206f 7263 6165 6574 7420 7361 3a6b      to create task:
    675c:	2520 1b73 305b 1b6d 305b 0a6d 0000 0000      %s.[0m.[0m.....
    676c:	5b1b 3134 436d 4952 4954 4143 1b4c 305b     .[41mCRITICAL.[0
    677c:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    678c:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    679c:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
    67ac:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
    67bc:	5420 7365 6574 3a64 2820 6174 6b73 3e2d      Tested: (task->
    67cc:	6553 7574 2870 2929 200a 2020 2020 2020     Setup()).       
    67dc:	2020 4620 6961 656c 2064 6f74 6320 6d6f        Failed to com
    67ec:	6c70 7465 2065 6553 7574 2870 2029 6f66     plete Setup() fo
    67fc:	2072 6174 6b73 203a 7325 5b1b 6d30 5b1b     r task: %s.[0m.[
    680c:	6d30 000a 5b1b 3134 436d 4952 4954 4143     0m...[41mCRITICA
    681c:	1b4c 305b 393b 6d34 253a 3a73 5b1b 3b30     L.[0;94m:%s:.[0;
    682c:	3239 256d 3a73 5b1b 3b30 3339 256d 3e64     92m%s:.[0;93m%d>
    683c:	1b20 305b 333b 6d37 7341 6573 7472 6f69      .[0;37mAssertio
    684c:	206e 6146 6c69 7275 2c65 4320 6e6f 6964     n Failure, Condi
    685c:	6974 6e6f 5420 7365 6574 3a64 2820 7270     tion Tested: (pr
    686c:	5f65 7572 5f6e 7665 6e65 5f74 7267 756f     e_run_event_grou
    687c:	5f70 6168 646e 656c 205f 3d21 6e20 6c75     p_handle_ != nul
    688c:	706c 7274 0a29 2020 2020 2020 2020 2020     lptr).          
    689c:	6146 6c69 6465 7420 206f 7263 6165 6574     Failed to create
    68ac:	5020 6572 7552 206e 7645 6e65 2074 7247      PreRun Event Gr
    68bc:	756f 2170 5b1b 6d30 5b1b 6d30 000a ffff     oup!.[0m.[0m....
    68cc:	6e69 6176 696c 0064 7061 6c70 6369 7461     invalid.applicat
    68dc:	6f69 006e 6f68 7473 7420 7365 0074 0000     ion.host test...
    68ec:	2020 6425 2029 7830 3025 5838 000a 0000       %d) 0x%08X....
    68fc:	3020 2578 3830 0058 2020 6425 2029 7830      0x%08X.  %d) 0x
    690c:	7025 000a 520a 6e75 203a 6874 2065 6f66     %p...Run: the fo
    691c:	6c6c 776f 6e69 2067 6f63 6d6d 6e61 2064     llowing command 
    692c:	6e69 7920 756f 2072 7270 6a6f 6365 2074     in your project 
    693c:	6964 6572 7463 726f 0079 0000 0a0a 2020     directory.....  
    694c:	5b1b 3b31 3733 006d 616d 656b 7320 6174     .[1;37m.make sta
    695c:	6b63 7274 6361 2d65 7325 5420 4152 4543     cktrace-%s TRACE
    696c:	3d53 0022 3020 2578 0070 0000 0a22 1b0a     S=". 0x%p..."...
    697c:	305b 006d 6854 7369 7720 6c69 206c 6572     [0m.This will re
    698c:	6f70 7472 7420 6568 6620 6c69 2065 6e61     port the file an
    699c:	2064 696c 656e 6e20 6d75 6562 2072 6874     d line number th
    69ac:	7461 6c20 6465 7420 206f 6874 7369 6620     at led to this f
    69bc:	6e75 7463 6f69 206e 6562 6e69 2067 6163     unction being ca
    69cc:	6c6c 6465 002e 0000 5b1b 3334 206d 4157     lled.....[43m WA
    69dc:	4e52 4e49 1b47 305b 393b 6d34 253a 3a73     RNING.[0;94m:%s:
    69ec:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    69fc:	256d 3e64 1b20 305b 333b 6d37 6f4e 6920     m%d> .[0;37mNo i
    6a0c:	746e 7265 7572 7470 7320 7265 6976 6563     nterrupt service
    6a1c:	7220 756f 6974 656e 6620 756f 646e 6620      routine found f
    6a2c:	726f 7420 6568 7620 6365 6f74 2072 6425     or the vector %d
    6a3c:	2021 6944 6173 6c62 6e69 2067 5349 1b52     ! Disabling ISR.
    6a4c:	305b 0a6d 0000 0000 5b1b 3134 486d 7261     [0m......[41mHar
    6a5c:	2064 6146 6c75 2074 7845 6563 7470 6f69     d Fault Exceptio
    6a6c:	206e 634f 7563 7272 6465 0a21 5b1b 6d30     n Occurred!..[0m
    6a7c:	0000 0000 3072 203a 7830 3025 6c38 2c58     ....r0: 0x%08lX,
    6a8c:	7220 3a31 3020 2578 3830 586c 202c 3272      r1: 0x%08lX, r2
    6a9c:	203a 7830 3025 6c38 2c58 7220 3a33 3020     : 0x%08lX, r3: 0
    6aac:	2578 3830 586c 000a 3172 3a32 3020 2578     x%08lX..r12: 0x%
    6abc:	3830 586c 202c 726c 203a 7830 3025 6c38     08lX, lr: 0x%08l
    6acc:	2c58 7020 3a63 3020 2578 3830 586c 202c     X, pc: 0x%08lX, 
    6adc:	7370 3a72 3020 2578 3830 586c 000a 0000     psr: 0x%08lX....
    6aec:	1b0a 315b 333b 6d37 5b1b 3234 506d 6f72     ..[1;37m.[42mPro
    6afc:	7267 6d61 5220 7465 7275 656e 2064 7845     gram Returned Ex
    6b0c:	7469 4320 646f 3a65 2520 646c 1b0a 305b     it Code: %ld..[0
    6b1c:	006d 0000 1b0a 315b 333b 6d37 5b1b 3134     m.....[1;37m.[41
    6b2c:	506d 6f72 7267 6d61 5220 7465 7275 656e     mProgram Returne
    6b3c:	2064 7845 7469 4320 646f 3a65 2520 646c     d Exit Code: %ld
    6b4c:	1b0a 305b 006d ffff 000a ffff               ..[0m.......

00006b58 <_ftoa(void (*)(char, void*, unsigned int, unsigned int), char*, unsigned int, unsigned int, double, unsigned int, unsigned int, unsigned int)::pow10>:
    6b58:	0000 3f80 0000 4120 0000 42c8 0000 447a     ...?.. A...B..zD
    6b68:	4000 461c 5000 47c3 2400 4974 9680 4b18     .@.F.P.G.$tI...K
    6b78:	bc20 4cbe 6b28 4e6e 6e69 6176 696c 0064      ..L(knNinvalid.
    6b88:	7061 6c70 6369 7461 6f69 006e 6f68 7473     application.host
    6b98:	7420 7365 0074 0000 2020 6425 2029 7830      test...  %d) 0x
    6ba8:	3025 5838 000a 0000 3020 2578 3830 0058     %08X.... 0x%08X.
    6bb8:	2020 6425 2029 7830 7025 000a 520a 6e75       %d) 0x%p...Run
    6bc8:	203a 6874 2065 6f66 6c6c 776f 6e69 2067     : the following 
    6bd8:	6f63 6d6d 6e61 2064 6e69 7920 756f 2072     command in your 
    6be8:	7270 6a6f 6365 2074 6964 6572 7463 726f     project director
    6bf8:	0079 0000 0a0a 2020 5b1b 3b31 3733 006d     y.....  .[1;37m.
    6c08:	616d 656b 7320 6174 6b63 7274 6361 2d65     make stacktrace-
    6c18:	7325 5420 4152 4543 3d53 0022 3020 2578     %s TRACES=". 0x%
    6c28:	0070 0000 0a22 1b0a 305b 006d 6854 7369     p..."...[0m.This
    6c38:	7720 6c69 206c 6572 6f70 7472 7420 6568      will report the
    6c48:	6620 6c69 2065 6e61 2064 696c 656e 6e20      file and line n
    6c58:	6d75 6562 2072 6874 7461 6c20 6465 7420     umber that led t
    6c68:	206f 6874 7369 6620 6e75 7463 6f69 206e     o this function 
    6c78:	6562 6e69 2067 6163 6c6c 6465 002e 0000     being called....
    6c88:	5b1b 3334 206d 4157 4e52 4e49 1b47 305b     .[43m WARNING.[0
    6c98:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    6ca8:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    6cb8:	333b 6d37 6f4e 6920 746e 7265 7572 7470     ;37mNo interrupt
    6cc8:	7320 7265 6976 6563 7220 756f 6974 656e      service routine
    6cd8:	6620 756f 646e 6620 726f 7420 6568 7620      found for the v
    6ce8:	6365 6f74 2072 6425 2021 6944 6173 6c62     ector %d! Disabl
    6cf8:	6e69 2067 5349 1b52 305b 0a6d 0000 0000     ing ISR.[0m.....
    6d08:	ffff ffff 3015 0000 0001 0000 ffff ffff     .....0..........
    6d18:	5b1b 3134 436d 4952 4954 4143 1b4c 305b     .[41mCRITICAL.[0
    6d28:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    6d38:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    6d48:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
    6d58:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
    6d68:	5420 7365 6574 3a64 2820 6570 6972 6870      Tested: (periph
    6d78:	7265 6c61 645f 7669 6469 7265 3c20 203d     eral_divider <= 
    6d88:	2934 200a 2020 2020 2020 2020 4420 7669     4).          Div
    6d98:	6469 7265 6d20 7375 6e74 7427 6520 6378     ider mustn't exc
    6da8:	6565 2064 3233 5b1b 6d30 5b1b 6d30 000a     eed 32.[0m.[0m..
    6db8:	500a 6972 746e 6e69 2067 7453 6361 206b     .Printing Stack 
    6dc8:	7254 6361 3a65 000a 5b1b 3134 436d 4952     Trace:...[41mCRI
    6dd8:	4954 4143 1b4c 305b 393b 6d34 253a 3a73     TICAL.[0;94m:%s:
    6de8:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    6df8:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
    6e08:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
    6e18:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
    6e28:	2820 6564 6973 6572 5f64 7266 7165 6575      (desired_freque
    6e38:	636e 2079 203c 3833 5f34 484d 207a 2626     ncy < 384_MHz &&
    6e48:	6420 7365 7269 6465 665f 6572 7571 6e65      desired_frequen
    6e58:	7963 3e20 3120 5f32 484d 297a 200a 2020     cy > 12_MHz).   
    6e68:	2020 2020 2020 4620 6572 7571 6e65 7963            Frequency
    6e78:	6d20 7375 2074 6562 6c20 776f 7265 7420      must be lower t
    6e88:	6168 206e 3833 2034 484d 617a 646e 6720     han 384 MHzand g
    6e98:	6572 7461 7265 7420 6168 206e 726f 6520     reater than or e
    6ea8:	7571 6c61 7420 206f 3231 4d20 7a48 5b1b     qual to 12 MHz.[
    6eb8:	6d30 5b1b 6d30 000a 5b1b 3134 436d 4952     0m.[0m...[41mCRI
    6ec8:	4954 4143 1b4c 305b 393b 6d34 253a 3a73     TICAL.[0;94m:%s:
    6ed8:	5b1b 3b30 3239 256d 3a73 5b1b 3b30 3339     .[0;92m%s:.[0;93
    6ee8:	256d 3e64 1b20 305b 333b 6d37 7341 6573     m%d> .[0;37mAsse
    6ef8:	7472 6f69 206e 6146 6c69 7275 2c65 4320     rtion Failure, C
    6f08:	6e6f 6964 6974 6e6f 5420 7365 6574 3a64     ondition Tested:
    6f18:	2820 6964 6976 6564 5f72 6176 756c 2065      (divider_value 
    6f28:	203c 2938 200a 2020 2020 2020 2020 5020     < 8).          P
    6f38:	4c4c 6420 7669 6469 7265 7620 6c61 6575     LL divider value
    6f48:	7720 6e65 2074 756f 2074 666f 6220 756f      went out of bou
    6f58:	646e 1b73 305b 1b6d 305b 0a6d 0000 0000     nds.[0m.[0m.....
    6f68:	5b1b 3134 436d 4952 4954 4143 1b4c 305b     .[41mCRITICAL.[0
    6f78:	393b 6d34 253a 3a73 5b1b 3b30 3239 256d     ;94m:%s:.[0;92m%
    6f88:	3a73 5b1b 3b30 3339 256d 3e64 1b20 305b     s:.[0;93m%d> .[0
    6f98:	333b 6d37 7341 6573 7472 6f69 206e 6146     ;37mAssertion Fa
    6fa8:	6c69 7275 2c65 4320 6e6f 6964 6974 6e6f     ilure, Condition
    6fb8:	5420 7365 6574 3a64 2820 7063 5f75 6964      Tested: (cpu_di
    6fc8:	6976 6564 2072 203c 3233 0a29 2020 2020     vider < 32).    
    6fd8:	2020 2020 2020 6944 6976 6564 2072 756d           Divider mu
    6fe8:	7473 276e 2074 7865 6563 6465 3320 1b32     stn't exceed 32.
    6ff8:	305b 1b6d 305b 0a6d 0000 0000 fffb ffff     [0m.[0m.........
    7008:	47d1 0000 0001 0000 ffff ffff fffe ffff     .G..............
    7018:	4801 0000 0001 0000 ffff ffff 5b1b 3134     .H...........[41
    7028:	436d 4952 4954 4143 1b4c 305b 393b 6d34     mCRITICAL.[0;94m
    7038:	253a 3a73 5b1b 3b30 3239 256d 3a73 5b1b     :%s:.[0;92m%s:.[
    7048:	3b30 3339 256d 3e64 1b20 305b 333b 6d37     0;93m%d> .[0;37m
    7058:	7341 6573 7472 6f69 206e 6146 6c69 7275     Assertion Failur
    7068:	2c65 4320 6e6f 6964 6974 6e6f 5420 7365     e, Condition Tes
    7078:	6574 3a64 2820 6974 656d 5f72 7473 7261     ted: (timer_star
    7088:	5f74 7473 7461 7375 3d20 203d 6a73 7573     t_status == sjsu
    7098:	3a3a 7453 7461 7375 3a3a 536b 6375 6563     ::Status::kSucce
    70a8:	7373 0a29 2020 2020 2020 2020 2020 7953     ss).          Sy
    70b8:	7473 6d65 5420 6d69 7265 2820 7375 6465     stem Timer (used
    70c8:	6220 2079 7246 6565 5452 534f 2029 6168      by FreeRTOS) ha
    70d8:	2073 4146 4c49 4445 7420 206f 7473 7261     s FAILED to star
    70e8:	2174 5b1b 6d30 5b1b 6d30 000a ffff ffff     t!.[0m.[0m......

000070f8 <std::integral_constant<long long, 1ll>::value>:
    70f8:	0001 0000 0000 0000                         ........

00007100 <config::kSystemClockRateMhz>:
    7100:	0000 4240                                   ..@B

00007104 <config::kRtosFrequency>:
    7104:	0000 447a                                   ..zD

00007108 <sjsu::cortex::SystemTimer::kCortexInterruptController>:
    7108:	62cc 0000                                   .b..

0000710c <sjsu::lpc40xx::SystemController::PllInput::kIrc>:
    710c:	0000 4140                                   ..@A

00007110 <sjsu::lpc40xx::SystemController::kDefaultIRCFrequency>:
    7110:	0000 4140                                   ..@A

00007114 <sjsu::lpc40xx::SystemController::Oscillator::kSelect>:
    7114:	0100 ffff                                   ....

00007118 <sjsu::lpc40xx::SystemController::EmcClock::kDivider>:
    7118:	0100 ffff                                   ....

0000711c <sjsu::lpc40xx::SystemController::CpuClock::kDivider>:
    711c:	0500 ffff                                   ....

00007120 <sjsu::lpc40xx::SystemController::CpuClock::kSelect>:
    7120:	0108 ffff                                   ....

00007124 <sjsu::lpc40xx::SystemController::UsbClock::kSelect>:
    7124:	0208 ffff                                   ....

00007128 <sjsu::lpc40xx::SystemController::SpiFiClock::kSelect>:
    7128:	0208 ffff                                   ....

0000712c <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::file>:
    712c:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    713c:	2e72 7068 0070 ffff                         r.hpp...

00007144 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    7144:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    7154:	2e72 7068 0070 ffff                         r.hpp...

0000715c <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::file>:
    715c:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    716c:	2e72 7068 0070 ffff                         r.hpp...

00007174 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::file>:
    7174:	7973 7473 6d65 635f 6e6f 7274 6c6f 656c     system_controlle
    7184:	2e72 7068 0070 ffff                         r.hpp...

0000718c <sjsu::lpc40xx::Uart::Port::kUart0Tx>:
    718c:	62dc 0000 0200 0000                         .b......

00007194 <sjsu::lpc40xx::Uart::Port::kUart0Rx>:
    7194:	62dc 0000 0300 0000                         .b......

0000719c <sjsu::lpc40xx::Uart::Port::kUart2Tx>:
    719c:	62dc 0000 0802 0000                         .b......

000071a4 <sjsu::lpc40xx::Uart::Port::kUart2Rx>:
    71a4:	62dc 0000 0902 0000                         .b......

000071ac <sjsu::lpc40xx::Uart::Port::kUart3Tx>:
    71ac:	62dc 0000 1c04 0000                         .b......

000071b4 <sjsu::lpc40xx::Uart::Port::kUart3Rx>:
    71b4:	62dc 0000 1d04 0000                         .b......

000071bc <sjsu::lpc40xx::Uart::Port::kUart4Tx>:
    71bc:	62dc 0000 1d01 0000                         .b......

000071c4 <sjsu::lpc40xx::Uart::Port::kUart4Rx>:
    71c4:	62dc 0000 0902 0000                         .b......

000071cc <sjsu::lpc40xx::Uart::Port::kUart0>:
    71cc:	c000 4000 0003 0000 718c 0000 7194 0000     ...@.....q...q..
    71dc:	0009 0000                                   ....

000071e0 <sjsu::InitializePlatform()::file>:
    71e0:	7473 7261 7574 2e70 7063 0070               startup.cpp.

000071ec <vtable for sjsu::lpc40xx::Uart>:
	...
    71f4:	3f15 0000 3fd5 0000 4061 0000 4105 0000     .?...?..a@...A..
    7204:	41d5 0000                                   .A..

00007208 <vtable for sjsu::Uart>:
	...
    7210:	48fd 0000 48fd 0000 48fd 0000 48fd 0000     .H...H...H...H..
    7220:	48fd 0000                                   .H..

00007224 <vtable for sjsu::lpc40xx::SystemController>:
	...
    722c:	336d 0000 3409 0000 3461 0000 3485 0000     m3...4..a4...4..
    723c:	34a1 0000 34dd 0000 3511 0000               .4...4...5..

00007248 <vtable for sjsu::cortex::SystemTimer>:
	...
    7250:	3081 0000 325d 0000 30a1 0000               .0..]2...0..

0000725c <vtable for sjsu::SystemTimer>:
	...
    7264:	48fd 0000 48fd 0000 48fd 0000               .H...H...H..

00007270 <sjsu::lpc40xx::SystemController::SetPeripheralClockDivider(sjsu::SystemController::PeripheralID const&, unsigned char) const::__PRETTY_FUNCTION__>:
    7270:	6976 7472 6175 206c 6f76 6469 7320 736a     virtual void sjs
    7280:	3a75 6c3a 6370 3034 7878 3a3a 7953 7473     u::lpc40xx::Syst
    7290:	6d65 6f43 746e 6f72 6c6c 7265 3a3a 6553     emController::Se
    72a0:	5074 7265 7069 6568 6172 436c 6f6c 6b63     tPeripheralClock
    72b0:	6944 6976 6564 2872 6f63 736e 2074 6a73     Divider(const sj
    72c0:	7573 3a3a 7953 7473 6d65 6f43 746e 6f72     su::SystemContro
    72d0:	6c6c 7265 3a3a 6550 6972 6870 7265 6c61     ller::Peripheral
    72e0:	4449 2c26 7520 6e69 3874 745f 2029 6f63     ID&, uint8_t) co
    72f0:	736e 0074                                   nst.

000072f4 <sjsu::lpc40xx::SystemController::CalculatePll(units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>, units::unit_t<units::unit<std::ratio<1000000ll, 1ll>, units::unit<std::ratio<1ll, 1ll>, units::base_unit<std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<-1ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, std::ratio<0ll, 1ll>, std::ratio<0ll, 1ll> >, float, units::linear_scale>) const::__PRETTY_FUNCTION__>:
    72f4:	6975 746e 3233 745f 7320 736a 3a75 6c3a     uint32_t sjsu::l
    7304:	6370 3034 7878 3a3a 7953 7473 6d65 6f43     pc40xx::SystemCo
    7314:	746e 6f72 6c6c 7265 3a3a 6143 636c 6c75     ntroller::Calcul
    7324:	7461 5065 6c6c 7528 696e 7374 3a3a 7266     atePll(units::fr
    7334:	7165 6575 636e 3a79 6d3a 6765 6861 7265     equency::megaher
    7344:	7a74 745f 202c 6e75 7469 3a73 663a 6572     tz_t, units::fre
    7354:	7571 6e65 7963 3a3a 656d 6167 6568 7472     quency::megahert
    7364:	5f7a 2974 6320 6e6f 7473 ff00               z_t) const..

00007370 <sjsu::lpc40xx::SystemController::SetCpuClockDivider(unsigned char) const::__PRETTY_FUNCTION__>:
    7370:	6f76 6469 7320 736a 3a75 6c3a 6370 3034     void sjsu::lpc40
    7380:	7878 3a3a 7953 7473 6d65 6f43 746e 6f72     xx::SystemContro
    7390:	6c6c 7265 3a3a 6553 4374 7570 6c43 636f     ller::SetCpuCloc
    73a0:	446b 7669 6469 7265 7528 6e69 3874 745f     kDivider(uint8_t
    73b0:	2029 6f63 736e 0074                         ) const.

000073b8 <sjsu::InitializePlatform()::__PRETTY_FUNCTION__>:
    73b8:	6f76 6469 7320 736a 3a75 493a 696e 6974     void sjsu::Initi
    73c8:	6c61 7a69 5065 616c 6674 726f 286d 0029     alizePlatform().

000073d8 <__sf_fake_stderr>:
	...

000073f8 <__sf_fake_stdin>:
	...

00007418 <__sf_fake_stdout>:
	...
